/*! For license information please see docs.bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={4899:(e,t,n)=>{function a(e){for(var t=arguments.length,n=Array(t>1?t-1:0),a=1;a<t;a++)n[a-1]=arguments[a];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function r(e){return!!e&&!!e[V]}function l(e){var t;return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===G}(e)||Array.isArray(e)||!!e[$]||!!(null===(t=e.constructor)||void 0===t?void 0:t[$])||f(e)||m(e))}function i(e){return r(e)||a(23,e),e[V].t}function o(e,t,n){void 0===n&&(n=!1),0===u(e)?(n?Object.keys:q)(e).forEach((function(a){n&&"symbol"==typeof a||t(a,e[a],e)})):e.forEach((function(n,a){return t(a,n,e)}))}function u(e){var t=e[V];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:f(e)?2:m(e)?3:0}function c(e,t){return 2===u(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function s(e,t,n){var a=u(e);2===a?e.set(t,n):3===a?(e.delete(t),e.add(n)):e[t]=n}function d(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function f(e){return F&&e instanceof Map}function m(e){return H&&e instanceof Set}function p(e){return e.o||e.t}function v(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=X(e);delete t[V];for(var n=q(t),a=0;a<n.length;a++){var r=n[a],l=t[r];!1===l.writable&&(l.writable=!0,l.configurable=!0),(l.get||l.set)&&(t[r]={configurable:!0,writable:!0,enumerable:l.enumerable,value:e[r]})}return Object.create(Object.getPrototypeOf(e),t)}function h(e,t){return void 0===t&&(t=!1),g(e)||r(e)||!l(e)||(u(e)>1&&(e.set=e.add=e.clear=e.delete=b),Object.freeze(e),t&&o(e,(function(e,t){return h(t,!0)}),!0)),e}function b(){a(2)}function g(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function E(e){var t=Y[e];return t||a(18,e),t}function y(){return j}function _(e,t){t&&(E("Patches"),e.u=[],e.s=[],e.v=t)}function A(e){S(e),e.p.forEach(w),e.p=null}function S(e){e===j&&(j=e.l)}function C(e){return j={p:[],l:j,h:e,m:!0,_:0}}function w(e){var t=e[V];0===t.i||1===t.i?t.j():t.O=!0}function x(e,t){t._=t.p.length;var n=t.p[0],r=void 0!==e&&e!==n;return t.h.g||E("ES5").S(t,e,r),r?(n[V].P&&(A(t),a(4)),l(e)&&(e=O(t,e),t.l||T(t,e)),t.u&&E("Patches").M(n[V].t,e,t.u,t.s)):e=O(t,n,[]),A(t),t.u&&t.v(t.u,t.s),e!==W?e:void 0}function O(e,t,n){if(g(t))return t;var a=t[V];if(!a)return o(t,(function(r,l){return L(e,a,t,r,l,n)}),!0),t;if(a.A!==e)return t;if(!a.P)return T(e,a.t,!0),a.t;if(!a.I){a.I=!0,a.A._--;var r=4===a.i||5===a.i?a.o=v(a.k):a.o;o(3===a.i?new Set(r):r,(function(t,l){return L(e,a,r,t,l,n)})),T(e,r,!1),n&&e.u&&E("Patches").R(a,n,e.u,e.s)}return a.o}function L(e,t,n,a,i,o){if(r(i)){var u=O(e,i,o&&t&&3!==t.i&&!c(t.D,a)?o.concat(a):void 0);if(s(n,a,u),!r(u))return;e.m=!1}if(l(i)&&!g(i)){if(!e.h.F&&e._<1)return;O(e,i),t&&t.A.l||T(e,i)}}function T(e,t,n){void 0===n&&(n=!1),e.h.F&&e.m&&h(t,n)}function P(e,t){var n=e[V];return(n?p(n):e)[t]}function k(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var a=Object.getOwnPropertyDescriptor(n,t);if(a)return a;n=Object.getPrototypeOf(n)}}function N(e){e.P||(e.P=!0,e.l&&N(e.l))}function I(e){e.o||(e.o=v(e.t))}function D(e,t,n){var a=f(t)?E("MapSet").N(t,n):m(t)?E("MapSet").T(t,n):e.g?function(e,t){var n=Array.isArray(e),a={i:n?1:0,A:t?t.A:y(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},r=a,l=Z;n&&(r=[a],l=K);var i=Proxy.revocable(r,l),o=i.revoke,u=i.proxy;return a.k=u,a.j=o,u}(t,n):E("ES5").J(t,n);return(n?n.A:y()).p.push(a),a}function M(e){return r(e)||a(22,e),function e(t){if(!l(t))return t;var n,a=t[V],r=u(t);if(a){if(!a.P&&(a.i<4||!E("ES5").K(a)))return a.t;a.I=!0,n=R(t,r),a.I=!1}else n=R(t,r);return o(n,(function(t,r){a&&function(e,t){return 2===u(e)?e.get(t):e[t]}(a.t,t)===r||s(n,t,e(r))})),3===r?new Set(n):n}(e)}function R(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return v(e)}n.r(t),n.d(t,{MiddlewareArray:()=>We,SHOULD_AUTOBATCH:()=>Zt,TaskAbortError:()=>It,__DO_NOT_USE__ActionTypes:()=>ue,addListener:()=>Wt,applyMiddleware:()=>he,autoBatchEnhancer:()=>en,bindActionCreators:()=>pe,clearAllListeners:()=>$t,combineReducers:()=>fe,compose:()=>ve,configureStore:()=>Ke,createAction:()=>Qe,createAsyncThunk:()=>vt,createDraftSafeSelector:()=>Fe,createEntityAdapter:()=>ct,createImmutableStateInvariantMiddleware:()=>Ge,createListenerMiddleware:()=>Xt,createNextState:()=>te,createReducer:()=>nt,createSelector:()=>Ae,createSerializableStateInvariantMiddleware:()=>Ye,createSlice:()=>at,createStore:()=>se,current:()=>M,findNonSerializableValue:()=>Xe,freeze:()=>h,getDefaultMiddleware:()=>Ze,getType:()=>et,isAllOf:()=>Et,isAnyOf:()=>gt,isAsyncThunkAction:()=>xt,isDraft:()=>r,isFulfilled:()=>wt,isImmutableDefault:()=>Ve,isPending:()=>At,isPlain:()=>qe,isPlainObject:()=>Ue,isRejected:()=>St,isRejectedWithValue:()=>Ct,legacy_createStore:()=>de,miniSerializeError:()=>pt,nanoid:()=>st,original:()=>i,prepareAutoBatched:()=>Kt,removeListener:()=>Vt,unwrapResult:()=>ht});var B,j,z="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),F="undefined"!=typeof Map,H="undefined"!=typeof Set,U="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,W=z?Symbol.for("immer-nothing"):((B={})["immer-nothing"]=!0,B),$=z?Symbol.for("immer-draftable"):"__$immer_draftable",V=z?Symbol.for("immer-state"):"__$immer_state",G=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),q="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,X=Object.getOwnPropertyDescriptors||function(e){var t={};return q(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},Y={},Z={get:function(e,t){if(t===V)return e;var n=p(e);if(!c(n,t))return function(e,t,n){var a,r=k(t,n);return r?"value"in r?r.value:null===(a=r.get)||void 0===a?void 0:a.call(e.k):void 0}(e,n,t);var a=n[t];return e.I||!l(a)?a:a===P(e.t,t)?(I(e),e.o[t]=D(e.A.h,a,e)):a},has:function(e,t){return t in p(e)},ownKeys:function(e){return Reflect.ownKeys(p(e))},set:function(e,t,n){var a=k(p(e),t);if(null==a?void 0:a.set)return a.set.call(e.k,n),!0;if(!e.P){var r=P(p(e),t),l=null==r?void 0:r[V];if(l&&l.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(d(n,r)&&(void 0!==n||c(e.t,t)))return!0;I(e),N(e)}return e.o[t]===n&&"number"!=typeof n&&(void 0!==n||t in e.o)||(e.o[t]=n,e.D[t]=!0,!0)},deleteProperty:function(e,t){return void 0!==P(e.t,t)||t in e.t?(e.D[t]=!1,I(e),N(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=p(e),a=Reflect.getOwnPropertyDescriptor(n,t);return a?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:a.enumerable,value:n[t]}:a},defineProperty:function(){a(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){a(12)}},K={};o(Z,(function(e,t){K[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),K.deleteProperty=function(e,t){return K.set.call(this,e,t,void 0)},K.set=function(e,t,n){return Z.set.call(this,e[0],t,n,e[0])};var Q=function(){function e(e){var t=this;this.g=U,this.F=!0,this.produce=function(e,n,r){if("function"==typeof e&&"function"!=typeof n){var i=n;n=e;var o=t;return function(e){var t=this;void 0===e&&(e=i);for(var a=arguments.length,r=Array(a>1?a-1:0),l=1;l<a;l++)r[l-1]=arguments[l];return o.produce(e,(function(e){var a;return(a=n).call.apply(a,[t,e].concat(r))}))}}var u;if("function"!=typeof n&&a(6),void 0!==r&&"function"!=typeof r&&a(7),l(e)){var c=C(t),s=D(t,e,void 0),d=!0;try{u=n(s),d=!1}finally{d?A(c):S(c)}return"undefined"!=typeof Promise&&u instanceof Promise?u.then((function(e){return _(c,r),x(e,c)}),(function(e){throw A(c),e})):(_(c,r),x(u,c))}if(!e||"object"!=typeof e){if(void 0===(u=n(e))&&(u=e),u===W&&(u=void 0),t.F&&h(u,!0),r){var f=[],m=[];E("Patches").M(e,u,f,m),r(f,m)}return u}a(21,e)},this.produceWithPatches=function(e,n){if("function"==typeof e)return function(n){for(var a=arguments.length,r=Array(a>1?a-1:0),l=1;l<a;l++)r[l-1]=arguments[l];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(r))}))};var a,r,l=t.produce(e,n,(function(e,t){a=e,r=t}));return"undefined"!=typeof Promise&&l instanceof Promise?l.then((function(e){return[e,a,r]})):[l,a,r]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){l(e)||a(8),r(e)&&(e=M(e));var t=C(this),n=D(this,e,void 0);return n[V].C=!0,S(t),n},t.finishDraft=function(e,t){var n=(e&&e[V]).A;return _(n,t),x(void 0,n)},t.setAutoFreeze=function(e){this.F=e},t.setUseProxies=function(e){e&&!U&&a(20),this.g=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var a=t[n];if(0===a.path.length&&"replace"===a.op){e=a.value;break}}n>-1&&(t=t.slice(n+1));var l=E("Patches").$;return r(e)?l(e,t):this.produce(e,(function(e){return l(e,t)}))},e}(),J=new Q,ee=J.produce;J.produceWithPatches.bind(J),J.setAutoFreeze.bind(J),J.setUseProxies.bind(J),J.applyPatches.bind(J),J.createDraft.bind(J),J.finishDraft.bind(J);const te=ee;function ne(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ae(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function re(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ae(Object(n),!0).forEach((function(t){ne(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ae(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function le(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var ie="function"==typeof Symbol&&Symbol.observable||"@@observable",oe=function(){return Math.random().toString(36).substring(7).split("").join(".")},ue={INIT:"@@redux/INIT"+oe(),REPLACE:"@@redux/REPLACE"+oe(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+oe()}};function ce(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function se(e,t,n){var a;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(le(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(le(1));return n(se)(e,t)}if("function"!=typeof e)throw new Error(le(2));var r=e,l=t,i=[],o=i,u=!1;function c(){o===i&&(o=i.slice())}function s(){if(u)throw new Error(le(3));return l}function d(e){if("function"!=typeof e)throw new Error(le(4));if(u)throw new Error(le(5));var t=!0;return c(),o.push(e),function(){if(t){if(u)throw new Error(le(6));t=!1,c();var n=o.indexOf(e);o.splice(n,1),i=null}}}function f(e){if(!ce(e))throw new Error(le(7));if(void 0===e.type)throw new Error(le(8));if(u)throw new Error(le(9));try{u=!0,l=r(l,e)}finally{u=!1}for(var t=i=o,n=0;n<t.length;n++)(0,t[n])();return e}function m(e){if("function"!=typeof e)throw new Error(le(10));r=e,f({type:ue.REPLACE})}function p(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(le(11));function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[ie]=function(){return this},e}return f({type:ue.INIT}),(a={dispatch:f,subscribe:d,getState:s,replaceReducer:m})[ie]=p,a}var de=se;function fe(e){for(var t=Object.keys(e),n={},a=0;a<t.length;a++){var r=t[a];"function"==typeof e[r]&&(n[r]=e[r])}var l,i=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:ue.INIT}))throw new Error(le(12));if(void 0===n(void 0,{type:ue.PROBE_UNKNOWN_ACTION()}))throw new Error(le(13))}))}(n)}catch(e){l=e}return function(e,t){if(void 0===e&&(e={}),l)throw l;for(var a=!1,r={},o=0;o<i.length;o++){var u=i[o],c=n[u],s=e[u],d=c(s,t);if(void 0===d)throw t&&t.type,new Error(le(14));r[u]=d,a=a||d!==s}return(a=a||i.length!==Object.keys(e).length)?r:e}}function me(e,t){return function(){return t(e.apply(this,arguments))}}function pe(e,t){if("function"==typeof e)return me(e,t);if("object"!=typeof e||null===e)throw new Error(le(16));var n={};for(var a in e){var r=e[a];"function"==typeof r&&(n[a]=me(r,t))}return n}function ve(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function he(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),a=function(){throw new Error(le(15))},r={getState:n.getState,dispatch:function(){return a.apply(void 0,arguments)}},l=t.map((function(e){return e(r)}));return a=ve.apply(void 0,l)(n.dispatch),re(re({},n),{},{dispatch:a})}}}var be="NOT_FOUND",ge=function(e,t){return e===t};function Ee(e,t){var n,a,r="object"==typeof t?t:{equalityCheck:t},l=r.equalityCheck,i=void 0===l?ge:l,o=r.maxSize,u=void 0===o?1:o,c=r.resultEqualityCheck,s=function(e){return function(t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var a=t.length,r=0;r<a;r++)if(!e(t[r],n[r]))return!1;return!0}}(i),d=1===u?(n=s,{get:function(e){return a&&n(a.key,e)?a.value:be},put:function(e,t){a={key:e,value:t}},getEntries:function(){return a?[a]:[]},clear:function(){a=void 0}}):function(e,t){var n=[];function a(e){var a=n.findIndex((function(n){return t(e,n.key)}));if(a>-1){var r=n[a];return a>0&&(n.splice(a,1),n.unshift(r)),r.value}return be}return{get:a,put:function(t,r){a(t)===be&&(n.unshift({key:t,value:r}),n.length>e&&n.pop())},getEntries:function(){return n},clear:function(){n=[]}}}(u,s);function f(){var t=d.get(arguments);if(t===be){if(t=e.apply(null,arguments),c){var n=d.getEntries(),a=n.find((function(e){return c(e.value,t)}));a&&(t=a.value)}d.put(arguments,t)}return t}return f.clearCache=function(){return d.clear()},f}function ye(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return"function"==typeof e?"function "+(e.name||"unnamed")+"()":typeof e})).join(", ");throw new Error("createSelector expects all input-selectors to be functions, but received the following types: ["+n+"]")}return t}function _e(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),a=1;a<t;a++)n[a-1]=arguments[a];var r=function(){for(var t=arguments.length,a=new Array(t),r=0;r<t;r++)a[r]=arguments[r];var l,i=0,o={memoizeOptions:void 0},u=a.pop();if("object"==typeof u&&(o=u,u=a.pop()),"function"!=typeof u)throw new Error("createSelector expects an output function after the inputs, but received: ["+typeof u+"]");var c=o,s=c.memoizeOptions,d=void 0===s?n:s,f=Array.isArray(d)?d:[d],m=ye(a),p=e.apply(void 0,[function(){return i++,u.apply(null,arguments)}].concat(f)),v=e((function(){for(var e=[],t=m.length,n=0;n<t;n++)e.push(m[n].apply(null,arguments));return l=p.apply(null,e)}));return Object.assign(v,{resultFunc:u,memoizedResultFunc:p,dependencies:m,lastResult:function(){return l},recomputations:function(){return i},resetRecomputations:function(){return i=0}}),v};return r}var Ae=_e(Ee);function Se(e){return function(t){var n=t.dispatch,a=t.getState;return function(t){return function(r){return"function"==typeof r?r(n,a,e):t(r)}}}}var Ce=Se();Ce.withExtraArgument=Se;const we=Ce;var xe,Oe=(xe=function(e,t){return xe=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},xe(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}xe(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),Le=function(e,t){var n,a,r,l,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return l={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function o(l){return function(o){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,a&&(r=2&l[0]?a.return:l[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,l[1])).done)return r;switch(a=0,r&&(l=[2&l[0],r.value]),l[0]){case 0:case 1:r=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,a=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((r=(r=i.trys).length>0&&r[r.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!r||l[1]>r[0]&&l[1]<r[3])){i.label=l[1];break}if(6===l[0]&&i.label<r[1]){i.label=r[1],r=l;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(l);break}r[2]&&i.ops.pop(),i.trys.pop();continue}l=t.call(e,i)}catch(e){l=[6,e],a=0}finally{n=r=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,o])}}},Te=function(e,t){for(var n=0,a=t.length,r=e.length;n<a;n++,r++)e[r]=t[n];return e},Pe=Object.defineProperty,ke=Object.defineProperties,Ne=Object.getOwnPropertyDescriptors,Ie=Object.getOwnPropertySymbols,De=Object.prototype.hasOwnProperty,Me=Object.prototype.propertyIsEnumerable,Re=function(e,t,n){return t in e?Pe(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},Be=function(e,t){for(var n in t||(t={}))De.call(t,n)&&Re(e,n,t[n]);if(Ie)for(var a=0,r=Ie(t);a<r.length;a++)n=r[a],Me.call(t,n)&&Re(e,n,t[n]);return e},je=function(e,t){return ke(e,Ne(t))},ze=function(e,t,n){return new Promise((function(a,r){var l=function(e){try{o(n.next(e))}catch(e){r(e)}},i=function(e){try{o(n.throw(e))}catch(e){r(e)}},o=function(e){return e.done?a(e.value):Promise.resolve(e.value).then(l,i)};o((n=n.apply(e,t)).next())}))},Fe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Ae.apply(void 0,e),a=function(e){for(var t=[],a=1;a<arguments.length;a++)t[a-1]=arguments[a];return n.apply(void 0,Te([r(e)?M(e):e],t))};return a},He="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?ve:ve.apply(null,arguments)};function Ue(e){if("object"!=typeof e||null===e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return t===n}"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var We=function(e){function t(){for(var n=[],a=0;a<arguments.length;a++)n[a]=arguments[a];var r=e.apply(this,n)||this;return Object.setPrototypeOf(r,t.prototype),r}return Oe(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,Te([void 0],e[0].concat(this)))):new(t.bind.apply(t,Te([void 0],e.concat(this))))},t}(Array);function $e(e){return l(e)?te(e,(function(){})):e}function Ve(e){return"object"!=typeof e||null==e||Object.isFrozen(e)}function Ge(e){return void 0===e&&(e={}),function(){return function(e){return function(t){return e(t)}}}}function qe(e){var t=typeof e;return null==e||"string"===t||"boolean"===t||"number"===t||Array.isArray(e)||Ue(e)}function Xe(e,t,n,a,r){var l;if(void 0===t&&(t=""),void 0===n&&(n=qe),void 0===r&&(r=[]),!n(e))return{keyPath:t||"<root>",value:e};if("object"!=typeof e||null===e)return!1;for(var i=null!=a?a(e):Object.entries(e),o=r.length>0,u=0,c=i;u<c.length;u++){var s=c[u],d=s[0],f=s[1],m=t?t+"."+d:d;if(!(o&&r.indexOf(m)>=0)){if(!n(f))return{keyPath:m,value:f};if("object"==typeof f&&(l=Xe(f,m,n,a,r)))return l}}return!1}function Ye(e){return void 0===e&&(e={}),function(){return function(e){return function(t){return e(t)}}}}function Ze(e){void 0===e&&(e={});var t=e.thunk,n=void 0===t||t,a=(e.immutableCheck,e.serializableCheck,new We);return n&&(function(e){return"boolean"==typeof e}(n)?a.push(we):a.push(we.withExtraArgument(n.extraArgument))),a}function Ke(e){var t,n=function(e){return Ze(e)},a=e||{},r=a.reducer,l=void 0===r?void 0:r,i=a.middleware,o=void 0===i?n():i,u=a.devTools,c=void 0===u||u,s=a.preloadedState,d=void 0===s?void 0:s,f=a.enhancers,m=void 0===f?void 0:f;if("function"==typeof l)t=l;else{if(!Ue(l))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=fe(l)}var p=o;"function"==typeof p&&(p=p(n));var v=he.apply(void 0,p),h=ve;c&&(h=He(Be({trace:!1},"object"==typeof c&&c)));var b=[v];return Array.isArray(m)?b=Te([v],m):"function"==typeof m&&(b=m(b)),se(t,d,h.apply(void 0,b))}function Qe(e,t){function n(){for(var n=[],a=0;a<arguments.length;a++)n[a]=arguments[a];if(t){var r=t.apply(void 0,n);if(!r)throw new Error("prepareAction did not return an object");return Be(Be({type:e,payload:r.payload},"meta"in r&&{meta:r.meta}),"error"in r&&{error:r.error})}return{type:e,payload:n[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function Je(e){return["type","payload","error","meta"].indexOf(e)>-1}function et(e){return""+e}function tt(e){var t,n={},a=[],r={addCase:function(e,t){var a="string"==typeof e?e:e.type;if(a in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[a]=t,r},addMatcher:function(e,t){return a.push({matcher:e,reducer:t}),r},addDefaultCase:function(e){return t=e,r}};return e(r),[n,a,t]}function nt(e,t,n,a){void 0===n&&(n=[]);var i,o="function"==typeof t?tt(t):[t,n,a],u=o[0],c=o[1],s=o[2];if(function(e){return"function"==typeof e}(e))i=function(){return $e(e())};else{var d=$e(e);i=function(){return d}}function f(e,t){void 0===e&&(e=i());var n=Te([u[t.type]],c.filter((function(e){return(0,e.matcher)(t)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[s]),n.reduce((function(e,n){if(n){var a;if(r(e))return void 0===(a=n(e,t))?e:a;if(l(e))return te(e,(function(e){return n(e,t)}));if(void 0===(a=n(e,t))){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return a}return e}),e)}return f.getInitialState=i,f}function at(e){var t=e.name;if(!t)throw new Error("`name` is a required option for createSlice");var n,a="function"==typeof e.initialState?e.initialState:$e(e.initialState),r=e.reducers||{},l=Object.keys(r),i={},o={},u={};function c(){var t="function"==typeof e.extraReducers?tt(e.extraReducers):[e.extraReducers],n=t[0],r=void 0===n?{}:n,l=t[1],i=void 0===l?[]:l,u=t[2],c=void 0===u?void 0:u,s=Be(Be({},r),o);return nt(a,(function(e){for(var t in s)e.addCase(t,s[t]);for(var n=0,a=i;n<a.length;n++){var r=a[n];e.addMatcher(r.matcher,r.reducer)}c&&e.addDefaultCase(c)}))}return l.forEach((function(e){var n,a,l=r[e],c=t+"/"+e;"reducer"in l?(n=l.reducer,a=l.prepare):n=l,i[e]=n,o[c]=n,u[e]=a?Qe(c,a):Qe(c)})),{name:t,reducer:function(e,t){return n||(n=c()),n(e,t)},actions:u,caseReducers:i,getInitialState:function(){return n||(n=c()),n.getInitialState()}}}function rt(e){return function(t,n){var a=function(t){var a;Ue(a=n)&&"string"==typeof a.type&&Object.keys(a).every(Je)?e(n.payload,t):e(n,t)};return r(t)?(a(t),t):te(t,a)}}function lt(e,t){return t(e)}function it(e){return Array.isArray(e)||(e=Object.values(e)),e}function ot(e,t,n){for(var a=[],r=[],l=0,i=e=it(e);l<i.length;l++){var o=i[l],u=lt(o,t);u in n.entities?r.push({id:u,changes:o}):a.push(o)}return[a,r]}function ut(e){function t(t,n){var a=lt(t,e);a in n.entities||(n.ids.push(a),n.entities[a]=t)}function n(e,n){for(var a=0,r=e=it(e);a<r.length;a++)t(r[a],n)}function a(t,n){var a=lt(t,e);a in n.entities||n.ids.push(a),n.entities[a]=t}function r(e,t){var n=!1;e.forEach((function(e){e in t.entities&&(delete t.entities[e],n=!0)})),n&&(t.ids=t.ids.filter((function(e){return e in t.entities})))}function l(t,n){var a={},r={};if(t.forEach((function(e){e.id in n.entities&&(r[e.id]={id:e.id,changes:Be(Be({},r[e.id]?r[e.id].changes:null),e.changes)})})),(t=Object.values(r)).length>0){var l=t.filter((function(t){return function(t,n,a){var r=a.entities[n.id],l=Object.assign({},r,n.changes),i=lt(l,e),o=i!==n.id;return o&&(t[n.id]=i,delete a.entities[n.id]),a.entities[i]=l,o}(a,t,n)})).length>0;l&&(n.ids=Object.keys(n.entities))}}function i(t,a){var r=ot(t,e,a),i=r[0];l(r[1],a),n(i,a)}return{removeAll:(o=function(e){Object.assign(e,{ids:[],entities:{}})},u=rt((function(e,t){return o(t)})),function(e){return u(e,void 0)}),addOne:rt(t),addMany:rt(n),setOne:rt(a),setMany:rt((function(e,t){for(var n=0,r=e=it(e);n<r.length;n++)a(r[n],t)})),setAll:rt((function(e,t){e=it(e),t.ids=[],t.entities={},n(e,t)})),updateOne:rt((function(e,t){return l([e],t)})),updateMany:rt(l),upsertOne:rt((function(e,t){return i([e],t)})),upsertMany:rt(i),removeOne:rt((function(e,t){return r([e],t)})),removeMany:rt(r)};var o,u}function ct(e){void 0===e&&(e={});var t=Be({sortComparer:!1,selectId:function(e){return e.id}},e),n=t.selectId,a=t.sortComparer,r={getInitialState:function(e){return void 0===e&&(e={}),Object.assign({ids:[],entities:{}},e)}},l={getSelectors:function(e){var t=function(e){return e.ids},n=function(e){return e.entities},a=Fe(t,n,(function(e,t){return e.map((function(e){return t[e]}))})),r=function(e,t){return t},l=function(e,t){return e[t]},i=Fe(t,(function(e){return e.length}));if(!e)return{selectIds:t,selectEntities:n,selectAll:a,selectTotal:i,selectById:Fe(n,r,l)};var o=Fe(e,n);return{selectIds:Fe(e,t),selectEntities:o,selectAll:Fe(e,a),selectTotal:Fe(e,i),selectById:Fe(o,r,l)}}},i=a?function(e,t){var n=ut(e);function a(t,n){var a=(t=it(t)).filter((function(t){return!(lt(t,e)in n.entities)}));0!==a.length&&o(a,n)}function r(e,t){0!==(e=it(e)).length&&o(e,t)}function l(t,n){for(var a=!1,r=0,l=t;r<l.length;r++){var i=l[r],o=n.entities[i.id];if(o){a=!0,Object.assign(o,i.changes);var c=e(o);i.id!==c&&(delete n.entities[i.id],n.entities[c]=o)}}a&&u(n)}function i(t,n){var r=ot(t,e,n),i=r[0];l(r[1],n),a(i,n)}function o(t,n){t.forEach((function(t){n.entities[e(t)]=t})),u(n)}function u(n){var a=Object.values(n.entities);a.sort(t);var r=a.map(e);(function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(e[n]!==t[n])return!1;return!0})(n.ids,r)||(n.ids=r)}return{removeOne:n.removeOne,removeMany:n.removeMany,removeAll:n.removeAll,addOne:rt((function(e,t){return a([e],t)})),updateOne:rt((function(e,t){return l([e],t)})),upsertOne:rt((function(e,t){return i([e],t)})),setOne:rt((function(e,t){return r([e],t)})),setMany:rt(r),setAll:rt((function(e,t){e=it(e),t.entities={},t.ids=[],a(e,t)})),addMany:rt(a),updateMany:rt(l),upsertMany:rt(i)}}(n,a):ut(n);return Be(Be(Be({selectId:n,sortComparer:a},r),l),i)}var st=function(e){void 0===e&&(e=21);for(var t="",n=e;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t},dt=["name","message","stack","code"],ft=function(e,t){this.payload=e,this.meta=t},mt=function(e,t){this.payload=e,this.meta=t},pt=function(e){if("object"==typeof e&&null!==e){for(var t={},n=0,a=dt;n<a.length;n++){var r=a[n];"string"==typeof e[r]&&(t[r]=e[r])}return t}return{message:String(e)}},vt=function(){function e(e,t,n){var a=Qe(e+"/fulfilled",(function(e,t,n,a){return{payload:e,meta:je(Be({},a||{}),{arg:n,requestId:t,requestStatus:"fulfilled"})}})),r=Qe(e+"/pending",(function(e,t,n){return{payload:void 0,meta:je(Be({},n||{}),{arg:t,requestId:e,requestStatus:"pending"})}})),l=Qe(e+"/rejected",(function(e,t,a,r,l){return{payload:r,error:(n&&n.serializeError||pt)(e||"Rejected"),meta:je(Be({},l||{}),{arg:a,requestId:t,rejectedWithValue:!!r,requestStatus:"rejected",aborted:"AbortError"===(null==e?void 0:e.name),condition:"ConditionError"===(null==e?void 0:e.name)})}})),i="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){},reason:void 0,throwIfAborted:function(){}}}return e.prototype.abort=function(){},e}();return Object.assign((function(e){return function(o,u,c){var s,d=(null==n?void 0:n.idGenerator)?n.idGenerator(e):st(),f=new i,m=new Promise((function(e,t){return f.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:s||"Aborted"})}))})),p=!1;function v(e){p&&(s=e,f.abort())}var h=function(){return ze(this,null,(function(){var i,s,h,b,g;return Le(this,(function(E){switch(E.label){case 0:return E.trys.push([0,4,,5]),null===(y=b=null==(i=null==n?void 0:n.condition)?void 0:i.call(n,e,{getState:u,extra:c}))||"object"!=typeof y||"function"!=typeof y.then?[3,2]:[4,b];case 1:b=E.sent(),E.label=2;case 2:if(!1===b)throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return p=!0,o(r(d,e,null==(s=null==n?void 0:n.getPendingMeta)?void 0:s.call(n,{requestId:d,arg:e},{getState:u,extra:c}))),[4,Promise.race([m,Promise.resolve(t(e,{dispatch:o,getState:u,extra:c,requestId:d,signal:f.signal,abort:v,rejectWithValue:function(e,t){return new ft(e,t)},fulfillWithValue:function(e,t){return new mt(e,t)}})).then((function(t){if(t instanceof ft)throw t;return t instanceof mt?a(t.payload,d,e,t.meta):a(t,d,e)}))])];case 3:return h=E.sent(),[3,5];case 4:return g=E.sent(),h=g instanceof ft?l(null,d,e,g.payload,g.meta):l(g,d,e),[3,5];case 5:return n&&!n.dispatchConditionRejection&&l.match(h)&&h.meta.condition||o(h),[2,h]}var y}))}))}();return Object.assign(h,{abort:v,requestId:d,arg:e,unwrap:function(){return h.then(ht)}})}}),{pending:r,rejected:l,fulfilled:a,typePrefix:e})}return e.withTypes=e,e}();function ht(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}var bt=function(e,t){return function(e){return e&&"function"==typeof e.match}(e)?e.match(t):e(t)};function gt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return e.some((function(e){return bt(e,t)}))}}function Et(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return e.every((function(e){return bt(e,t)}))}}function yt(e,t){if(!e||!e.meta)return!1;var n="string"==typeof e.meta.requestId,a=t.indexOf(e.meta.requestStatus)>-1;return n&&a}function _t(e){return"function"==typeof e[0]&&"pending"in e[0]&&"fulfilled"in e[0]&&"rejected"in e[0]}function At(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?function(e){return yt(e,["pending"])}:_t(e)?function(t){var n=e.map((function(e){return e.pending}));return gt.apply(void 0,n)(t)}:At()(e[0])}function St(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?function(e){return yt(e,["rejected"])}:_t(e)?function(t){var n=e.map((function(e){return e.rejected}));return gt.apply(void 0,n)(t)}:St()(e[0])}function Ct(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=function(e){return e&&e.meta&&e.meta.rejectedWithValue};return 0===e.length||_t(e)?function(t){return Et(St.apply(void 0,e),n)(t)}:Ct()(e[0])}function wt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?function(e){return yt(e,["fulfilled"])}:_t(e)?function(t){var n=e.map((function(e){return e.fulfilled}));return gt.apply(void 0,n)(t)}:wt()(e[0])}function xt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?function(e){return yt(e,["pending","fulfilled","rejected"])}:_t(e)?function(t){for(var n=[],a=0,r=e;a<r.length;a++){var l=r[a];n.push(l.pending,l.rejected,l.fulfilled)}return gt.apply(void 0,n)(t)}:xt()(e[0])}var Ot=function(e,t){if("function"!=typeof e)throw new TypeError(t+" is not a function")},Lt=function(){},Tt=function(e,t){return void 0===t&&(t=Lt),e.catch(t),e},Pt=function(e,t){e.addEventListener("abort",t,{once:!0})},kt=function(e,t){var n=e.signal;n.aborted||("reason"in n||Object.defineProperty(n,"reason",{enumerable:!0,value:t,configurable:!0,writable:!0}),e.abort(t))},Nt="listener-cancelled",It=function(e){this.code=e,this.name="TaskAbortError",this.message="task cancelled (reason: "+e+")"},Dt=function(e){if(e.aborted)throw new It(e.reason)},Mt=function(e){return Tt(new Promise((function(t,n){var a=function(){return n(new It(e.reason))};e.aborted?a():Pt(e,a)})))},Rt=function(e){return function(t){return Tt(Promise.race([Mt(e),t]).then((function(t){return Dt(e),t})))}},Bt=function(e){var t=Rt(e);return function(e){return t(new Promise((function(t){return setTimeout(t,e)})))}},jt=Object.assign,zt={},Ft="listenerMiddleware",Ht=function(e){var t=e.type,n=e.actionCreator,a=e.matcher,r=e.predicate,l=e.effect;if(t)r=Qe(t).match;else if(n)t=n.type,r=n.match;else if(a)r=a;else if(!r)throw new Error("Creating or removing a listener requires one of the known fields for matching an action");return Ot(l,"options.listener"),{predicate:r,type:t,effect:l}},Ut=function(e,t,n){try{e(t,n)}catch(e){setTimeout((function(){throw e}),0)}},Wt=Qe(Ft+"/add"),$t=Qe(Ft+"/removeAll"),Vt=Qe(Ft+"/remove"),Gt=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.error.apply(console,Te([Ft+"/error"],e))},qt=function(e){e.pending.forEach((function(e){kt(e,Nt)}))};function Xt(e){var t=this;void 0===e&&(e={});var n=new Map,a=e.extra,r=e.onError,l=void 0===r?Gt:r;Ot(l,"onError");var i=function(e){for(var t=0,a=Array.from(n.values());t<a.length;t++){var r=a[t];if(e(r))return r}},o=function(e){var t=i((function(t){return t.effect===e.effect}));return t||(t=function(e){var t=Ht(e),n=t.type,a=t.predicate,r=t.effect;return{id:st(),effect:r,type:n,predicate:a,pending:new Set,unsubscribe:function(){throw new Error("Unsubscribe not initialized")}}}(e)),function(e){return e.unsubscribe=function(){return n.delete(e.id)},n.set(e.id,e),function(t){e.unsubscribe(),(null==t?void 0:t.cancelActive)&&qt(e)}}(t)},u=function(e){var t=Ht(e),n=t.type,a=t.effect,r=t.predicate,l=i((function(e){return("string"==typeof n?e.type===n:e.predicate===r)&&e.effect===a}));return l&&(l.unsubscribe(),e.cancelActive&&qt(l)),!!l},c=function(e,r,i,u){return ze(t,null,(function(){var t,c,s;return Le(this,(function(d){switch(d.label){case 0:t=new AbortController,c=function(e,t){return function(n,a){return Tt(function(n,a){return ze(void 0,null,(function(){var r,l,i,o;return Le(this,(function(u){switch(u.label){case 0:Dt(t),r=function(){},l=new Promise((function(t){r=e({predicate:n,effect:function(e,n){n.unsubscribe(),t([e,n.getState(),n.getOriginalState()])}})})),i=[Mt(t),l],null!=a&&i.push(new Promise((function(e){return setTimeout(e,a,null)}))),u.label=1;case 1:return u.trys.push([1,,3,4]),[4,Promise.race(i)];case 2:return o=u.sent(),Dt(t),[2,o];case 3:return r(),[7];case 4:return[2]}}))}))}(n,a))}}(o,t.signal),d.label=1;case 1:return d.trys.push([1,3,4,5]),e.pending.add(t),[4,Promise.resolve(e.effect(r,jt({},i,{getOriginalState:u,condition:function(e,t){return c(e,t).then(Boolean)},take:c,delay:Bt(t.signal),pause:Rt(t.signal),extra:a,signal:t.signal,fork:(f=t.signal,function(e){Ot(e,"taskExecutor");var t,n=new AbortController;t=n,Pt(f,(function(){return kt(t,f.reason)}));var a,r,l=(a=function(){return ze(void 0,null,(function(){var t;return Le(this,(function(a){switch(a.label){case 0:return Dt(f),Dt(n.signal),[4,e({pause:Rt(n.signal),delay:Bt(n.signal),signal:n.signal})];case 1:return t=a.sent(),Dt(n.signal),[2,t]}}))}))},r=function(){return kt(n,"task-completed")},ze(void 0,null,(function(){var e;return Le(this,(function(t){switch(t.label){case 0:return t.trys.push([0,3,4,5]),[4,Promise.resolve()];case 1:return t.sent(),[4,a()];case 2:return[2,{status:"ok",value:t.sent()}];case 3:return[2,{status:(e=t.sent())instanceof It?"cancelled":"rejected",error:e}];case 4:return null==r||r(),[7];case 5:return[2]}}))})));return{result:Rt(f)(l),cancel:function(){kt(n,"task-cancelled")}}}),unsubscribe:e.unsubscribe,subscribe:function(){n.set(e.id,e)},cancelActiveListeners:function(){e.pending.forEach((function(e,n,a){e!==t&&(kt(e,Nt),a.delete(e))}))}})))];case 2:return d.sent(),[3,5];case 3:return(s=d.sent())instanceof It||Ut(l,s,{raisedBy:"effect"}),[3,5];case 4:return kt(t,"listener-completed"),e.pending.delete(t),[7];case 5:return[2]}var f}))}))},s=function(e){return function(){e.forEach(qt),e.clear()}}(n);return{middleware:function(e){return function(t){return function(a){if(Wt.match(a))return o(a.payload);if(!$t.match(a)){if(Vt.match(a))return u(a.payload);var r,i=e.getState(),d=function(){if(i===zt)throw new Error(Ft+": getOriginalState can only be called synchronously");return i};try{if(r=t(a),n.size>0)for(var f=e.getState(),m=Array.from(n.values()),p=0,v=m;p<v.length;p++){var h=v[p],b=!1;try{b=h.predicate(a,f,i)}catch(e){b=!1,Ut(l,e,{raisedBy:"predicate"})}b&&c(h,a,e,d)}}finally{i=zt}return r}s()}}},startListening:o,stopListening:u,clearListeners:s}}var Yt,Zt="RTK_autoBatch",Kt=function(){return function(e){var t;return{payload:e,meta:(t={},t[Zt]=!0,t)}}},Qt="function"==typeof queueMicrotask?queueMicrotask.bind("undefined"!=typeof window?window:n.g):function(e){return(Yt||(Yt=Promise.resolve())).then(e).catch((function(e){return setTimeout((function(){throw e}),0)}))},Jt=function(e){return function(t){setTimeout(t,e)}},en=function(e){return void 0===e&&(e={type:"raf"}),function(t){return function(){for(var n=[],a=0;a<arguments.length;a++)n[a]=arguments[a];var r=t.apply(void 0,n),l=!0,i=!1,o=!1,u=new Set,c="tick"===e.type?Qt:"raf"===e.type?requestAnimationFrame:"callback"===e.type?e.queueNotification:Jt(e.timeout),s=function(){o=!1,i&&(i=!1,u.forEach((function(e){return e()})))};return Object.assign({},r,{subscribe:function(e){var t=r.subscribe((function(){return l&&e()}));return u.add(e),function(){t(),u.delete(e)}},dispatch:function(e){var t;try{return l=!(null==(t=null==e?void 0:e.meta)?void 0:t[Zt]),(i=!l)&&(o||(o=!0,c(s))),r.dispatch(e)}finally{l=!0}}})}}};!function(){function e(e,t){var n=l[e];return n?n.enumerable=t:l[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[V];return Z.get(t,e)},set:function(t){var n=this[V];Z.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var r=e[t][V];if(!r.P)switch(r.i){case 5:a(r)&&N(r);break;case 4:n(r)&&N(r)}}}function n(e){for(var t=e.t,n=e.k,a=q(n),r=a.length-1;r>=0;r--){var l=a[r];if(l!==V){var i=t[l];if(void 0===i&&!c(t,l))return!0;var o=n[l],u=o&&o[V];if(u?u.t!==i:!d(o,i))return!0}}var s=!!t[V];return a.length!==q(t).length+(s?0:1)}function a(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);if(n&&!n.get)return!0;for(var a=0;a<t.length;a++)if(!t.hasOwnProperty(a))return!0;return!1}var l={};!function(e,t){Y[e]||(Y[e]=t)}("ES5",{J:function(t,n){var a=Array.isArray(t),r=function(t,n){if(t){for(var a=Array(n.length),r=0;r<n.length;r++)Object.defineProperty(a,""+r,e(r,!0));return a}var l=X(n);delete l[V];for(var i=q(l),o=0;o<i.length;o++){var u=i[o];l[u]=e(u,t||!!l[u].enumerable)}return Object.create(Object.getPrototypeOf(n),l)}(a,t),l={i:a?5:4,A:n?n.A:y(),P:!1,I:!1,D:{},l:n,t,k:r,o:null,O:!1,C:!1};return Object.defineProperty(r,V,{value:l,writable:!0}),r},S:function(e,n,l){l?r(n)&&n[V].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[V];if(n){var r=n.t,l=n.k,i=n.D,u=n.i;if(4===u)o(l,(function(t){t!==V&&(void 0!==r[t]||c(r,t)?i[t]||e(l[t]):(i[t]=!0,N(n)))})),o(r,(function(e){void 0!==l[e]||c(l,e)||(i[e]=!1,N(n))}));else if(5===u){if(a(n)&&(N(n),i.length=!0),l.length<r.length)for(var s=l.length;s<r.length;s++)i[s]=!1;else for(var d=r.length;d<l.length;d++)i[d]=!0;for(var f=Math.min(l.length,r.length),m=0;m<f;m++)l.hasOwnProperty(m)||(i[m]=!0),void 0===i[m]&&e(l[m])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):a(e)}})}()},6380:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default={LETTERS:{A:"a",B:"b",C:"c",D:"d",E:"e",F:"f",G:"g",H:"h",I:"i",J:"j",K:"k",L:"l",M:"m",N:"n",O:"o",P:"p",Q:"q",R:"r",S:"s",T:"t",U:"u",V:"v",W:"w",X:"x",Y:"y",Z:"z"}}},51:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.removeElement=t.randomSubArray=t.shuffle=t.createIntArray=void 0,t.createIntArray=function(e){void 0===e&&(e=0);for(var t=[],n=0;n<e;n++)t.push(n);return t},t.shuffle=function(e){void 0===e&&(e=[]);for(var t=[].concat(e),n=[];t.length;){var a=Math.floor(Math.random()*t.length);n.push(t.splice(a,1)[0])}return n},t.randomSubArray=function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);for(var n=[].concat(e),a=[],r=0;r<t;r++){var l=Math.floor(Math.random()*n.length);a.push(n.splice(l,1)[0])}return a},t.removeElement=function(e,t){var n=e.indexOf(t),a=e.slice();return-1!==n&&a.splice(n,1),a}},2920:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default={NEVER:"NEVER",FETCHING_FIRST:"FETCHING_FIRST",FETCHING:"FETCHING",SUCCESS:"SUCCESS",FAILURE:"FAILURE",OUTDATED:"OUTDATED"}},2684:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.mergeDataStates=void 0;var r=a(n(2920));t.mergeDataStates=function(e){return 0===e.length?r.default.NEVER:e.some((function(e){return e===r.default.FAILURE}))?r.default.FAILURE:e.some((function(e){return e===r.default.OUTDATED}))?r.default.OUTDATED:e.some((function(e){return e===r.default.NEVER}))?r.default.NEVER:e.some((function(e){return e===r.default.FETCHING_FIRST}))?r.default.FETCHING_FIRST:e.some((function(e){return e===r.default.FETCHING}))?r.default.FETCHING:r.default.SUCCESS}},207:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.nowString=t.dateString=t.normalizeTime=t.durationToHumanTime=t.TimeConstants=void 0;var n=1e3,a=36e5;t.TimeConstants={MIL_PER_SEC:n,SEC_PER_MIN:60,MIL_PER_MIN:6e4,MIN_PER_HOU:60,SEC_PER_HOU:3600,MIL_PER_HOU:a,HOU_PER_DAY:24,MIN_PER_DAY:1440,SEC_PER_DAY:86400,MIL_PER_DAY:864e5},t.durationToHumanTime=function(e){return{millis:e%n,seconds:Math.floor(e/n)%60,minutes:Math.floor(e/6e4)%60,hours:Math.floor(e/a)}},t.normalizeTime=function(e){return"".concat(e).padStart(2,"0")},t.dateString=function(e){var n=(0,t.normalizeTime)(e.getFullYear()),a=(0,t.normalizeTime)(e.getMonth()),r=(0,t.normalizeTime)(e.getDate()),l=(0,t.normalizeTime)(e.getHours()),i=(0,t.normalizeTime)(e.getMinutes()),o=(0,t.normalizeTime)(e.getSeconds());return"".concat(n,"-").concat(a,"-").concat(r," ").concat(l,":").concat(i,":").concat(o)},t.nowString=function(){return(0,t.dateString)(new Date(Date.now()))}},2993:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.decodeBasicHeader=t.encodeBasicHeader=t.decode=t.encode=void 0,t.encode=function(e){return void 0===e&&(e=""),Buffer.from(e).toString("base64")},t.decode=function(e){return void 0===e&&(e=""),Buffer.from(e,"base64").toString()},t.encodeBasicHeader=function(e,n){void 0===e&&(e=""),void 0===n&&(n="");var a="".concat(e,":").concat(n),r=(0,t.encode)(a);return"Basic ".concat(r)},t.decodeBasicHeader=function(e){void 0===e&&(e="");var n=e.split("Basic ").join(""),a=(0,t.decode)(n).split(":");return 2===a.length?{username:a[0],password:a[1]}:{username:null,password:null}}},576:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.checkSize=t.checkExtension=t.getExtension=void 0,t.getExtension=function(e){var t=e.name;return t.substring(t.lastIndexOf(".")+1).toLowerCase()},t.checkExtension=function(e,n){return-1!==n.indexOf((0,t.getExtension)(e))},t.checkSize=function(e,t){return e.size<=t}},190:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getParamNames=void 0;var n=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,a=/([^\s,]+)/g;t.getParamNames=function(e){var t=e.toString().replace(n,""),r=t.slice(t.indexOf("(")+1,t.indexOf(")")).match(a);return null===r?[]:r}},9431:(e,t)=>{var n,a,r;Object.defineProperty(t,"__esModule",{value:!0}),t.HttpStatus=t.HttpMethod=t.HttpHeader=void 0,(r=t.HttpHeader||(t.HttpHeader={})).ACCESS_CONTROL_ALLOW_ORIGIN="Access-Control-Allow-Origin",r.ACCESS_CONTROL_ALLOW_HEADERS="Access-Control-Allow-Headers",r.ACCESS_CONTROL_ALLOW_METHODS="Access-Control-Allow-Methods",(a=t.HttpMethod||(t.HttpMethod={})).GET="GET",a.POST="POST",a.PUT="PUT",a.PATCH="PATCH",a.DELETE="DELETE",a.OPTIONS="OPTIONS",(n=t.HttpStatus||(t.HttpStatus={}))[n.OK=200]="OK",n[n.CREATED=201]="CREATED",n[n.REMOVED=204]="REMOVED",n[n.BAD_REQUEST=400]="BAD_REQUEST",n[n.UNAUTHORIZED=401]="UNAUTHORIZED",n[n.FORBIDDEN=403]="FORBIDDEN",n[n.NOT_FOUND=404]="NOT_FOUND",n[n.ERROR=500]="ERROR"},1738:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clone=t.getProperty=void 0,t.getProperty=function(e,t){return t.split(".").reduce((function(e,t){if(e&&"object"==typeof e)return e[t]}),e)},t.clone=function(e){return JSON.parse(JSON.stringify(e))}},2186:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.delayedPromise=void 0,t.delayedPromise=function(e,t){return void 0===t&&(t=0),Promise.all([e,new Promise((function(e){return setTimeout(e,t)}))]).then((function(e){return e[0]})).catch((function(e){throw e}))}},989:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.merge=t.remove=t.add=t.toSet=void 0,t.toSet=function(e){return e.reduce((function(e,t){return e.includes(t)||e.push(t),e}),[])},t.add=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.forEach((function(t){e.includes(t)||e.push(t)})),e},t.remove=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.forEach((function(t){var n=e.indexOf(t);-1!==n&&e.splice(n,1)})),e},t.merge=function(e,n){return(0,t.toSet)(e.concat(n))}},3838:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});var i=l(n(953)),o=function(){function e(e,t){void 0===t&&(t=" "),this._value=e,this._words=e.split(t).map((function(e){return e.toLowerCase()})).filter((function(e){return Boolean(e)}))}return Object.defineProperty(e.prototype,"words",{get:function(){return this._words},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"camel",{get:function(){return this.words.map((function(e,t){return 0===t?e:i.capitalize(e)})).join("")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pascal",{get:function(){return this.words.map((function(e){return i.capitalize(e)})).join("")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"worm",{get:function(){return this.words.map((function(e){return e.toLowerCase()})).join("_")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"snake",{get:function(){return this.words.map((function(e){return i.capitalize(e)})).join("_")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"serpent",{get:function(){return this.words.map((function(e){return e.toUpperCase()})).join("_")},enumerable:!1,configurable:!0}),e}();t.default=o},953:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.replaceAll=t.capitalizeFirst=t.capitalize=void 0,t.capitalize=function(e){return e.length?e.substring(0,1).toUpperCase()+e.substring(1).toLowerCase():""},t.capitalizeFirst=function(e){return e.length?e.substring(0,1).toUpperCase():""},t.replaceAll=function(e,t,n){return e.split(t).join(n)}},8267:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var n={next:function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))}};t.default=n},6039:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.UUID=t.StringUtils=t.StringLabel=t.Sets=t.PromiseUtils=t.ObjectUtils=t.HttpUtils=t.FunctionUtils=t.FileUtils=t.EncodeUtils=t.DateUtils=t.DataStatesUtils=t.DataStates=t.ArrayUtils=t.Alphabet=void 0;var o=l(n(6380)),u=l(n(51)),c=i(n(2920)),s=l(n(2684)),d=l(n(207)),f=l(n(2993)),m=l(n(576)),p=l(n(190)),v=l(n(9431)),h=l(n(1738)),b=l(n(2186)),g=l(n(989)),E=i(n(3838)),y=l(n(953)),_=i(n(8267));t.Alphabet=o,t.ArrayUtils=u,t.DataStates=c.default,t.DataStatesUtils=s,t.DateUtils=d,t.EncodeUtils=f,t.FileUtils=m,t.FunctionUtils=p,t.HttpUtils=v,t.ObjectUtils=h,t.PromiseUtils=b,t.Sets=g,t.StringLabel=E.default,t.StringUtils=y,t.UUID=_.default},1171:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),r=n.n(a),l=n(3645),i=n.n(l)()(r());i.push([e.id,".code-panel {\r\n  border-radius: 0.5rem;\r\n  border: 2px solid #e5e5e5;\r\n  margin: 1rem 0;\r\n}\r\n.code-panel .header {\r\n  padding: 0.5rem;\r\n}\r\n.code-panel .rendering {\r\n  position: relative;\r\n  padding: 2rem 1rem 3rem 1rem;\r\n  background-color: #f7f7f7;\r\n}\r\n.code-panel .button-show {\r\n  position: absolute;\r\n  right: 0;\r\n  padding: 0.5rem;\r\n  cursor: pointer;\r\n  background: white;\r\n  border: 1px solid darkgray;\r\n  border-radius: 0.25rem;\r\n  bottom: 0;\r\n}\r\n.code-panel .code {\r\n  white-space: pre-line;\r\n  position: relative;\r\n  padding: 1rem;\r\n  background-color: #262626;\r\n  color: white;\r\n  font-size: 12px;\r\n  border-bottom-left-radius: 0.5rem;\r\n  border-bottom-right-radius: 0.5rem;\r\n  font-family: ui-monospace, Menlo, Monaco, 'Roboto Mono', 'Oxygen Mono', 'Ubuntu Monospace', 'Source Code Pro',\r\n    'Droid Sans Mono', 'Courier New', monospace;\r\n}\r\n.code-panel .button-copy {\r\n  position: absolute;\r\n  right: 0;\r\n  bottom: 0;\r\n  padding: 0.5rem;\r\n  cursor: pointer;\r\n  border: none;\r\n  border-radius: 0.25rem;\r\n  background-color: black;\r\n  color: white;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/common/CodePanel.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,yBAAyB;EACzB,cAAc;AAChB;AACA;EACE,eAAe;AACjB;AACA;EACE,kBAAkB;EAClB,4BAA4B;EAC5B,yBAAyB;AAC3B;AACA;EACE,kBAAkB;EAClB,QAAQ;EACR,eAAe;EACf,eAAe;EACf,iBAAiB;EACjB,0BAA0B;EAC1B,sBAAsB;EACtB,SAAS;AACX;AACA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,aAAa;EACb,yBAAyB;EACzB,YAAY;EACZ,eAAe;EACf,iCAAiC;EACjC,kCAAkC;EAClC;+CAC6C;AAC/C;AACA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,eAAe;EACf,eAAe;EACf,YAAY;EACZ,sBAAsB;EACtB,uBAAuB;EACvB,YAAY;AACd",sourcesContent:[".code-panel {\r\n  border-radius: 0.5rem;\r\n  border: 2px solid #e5e5e5;\r\n  margin: 1rem 0;\r\n}\r\n.code-panel .header {\r\n  padding: 0.5rem;\r\n}\r\n.code-panel .rendering {\r\n  position: relative;\r\n  padding: 2rem 1rem 3rem 1rem;\r\n  background-color: #f7f7f7;\r\n}\r\n.code-panel .button-show {\r\n  position: absolute;\r\n  right: 0;\r\n  padding: 0.5rem;\r\n  cursor: pointer;\r\n  background: white;\r\n  border: 1px solid darkgray;\r\n  border-radius: 0.25rem;\r\n  bottom: 0;\r\n}\r\n.code-panel .code {\r\n  white-space: pre-line;\r\n  position: relative;\r\n  padding: 1rem;\r\n  background-color: #262626;\r\n  color: white;\r\n  font-size: 12px;\r\n  border-bottom-left-radius: 0.5rem;\r\n  border-bottom-right-radius: 0.5rem;\r\n  font-family: ui-monospace, Menlo, Monaco, 'Roboto Mono', 'Oxygen Mono', 'Ubuntu Monospace', 'Source Code Pro',\r\n    'Droid Sans Mono', 'Courier New', monospace;\r\n}\r\n.code-panel .button-copy {\r\n  position: absolute;\r\n  right: 0;\r\n  bottom: 0;\r\n  padding: 0.5rem;\r\n  cursor: pointer;\r\n  border: none;\r\n  border-radius: 0.25rem;\r\n  background-color: black;\r\n  color: white;\r\n}\r\n"],sourceRoot:""}]);const o=i},8743:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),r=n.n(a),l=n(3645),i=n.n(l)()(r());i.push([e.id,"\r\n  .demo-page .fd-panel + .fd-panel {\r\n    margin-top: 2rem;\r\n  }\n.demo-page .fd-panel__header {\r\n    padding: 0 2rem;\r\n  }\n.demo-page .fd-panel__content {\r\n    padding: 0 2rem;\r\n    border-bottom: 0;\r\n  }\n.demo-page .demo-page-item-title {\r\n    margin-top : 1rem;\r\n  }\r\n\r\n","",{version:3,sources:["webpack://./src/components/common/DemoPage.css"],names:[],mappings:";EACE;IACE,gBAAgB;EAClB;AACA;IACE,eAAe;EACjB;AACA;IACE,eAAe;IACf,gBAAgB;EAClB;AACA;IACE,iBAAiB;EACnB",sourcesContent:[".demo-page {\r\n  & .fd-panel + .fd-panel {\r\n    margin-top: 2rem;\r\n  }\r\n  & .fd-panel__header {\r\n    padding: 0 2rem;\r\n  }\r\n  & .fd-panel__content {\r\n    padding: 0 2rem;\r\n    border-bottom: 0;\r\n  }\r\n  & .demo-page-item-title {\r\n    margin-top : 1rem;\r\n  }\r\n}\r\n\r\n"],sourceRoot:""}]);const o=i},5339:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),r=n.n(a),l=n(3645),i=n.n(l)()(r());i.push([e.id,".fd-form-select.fd-form-item--horizontal .fd-select__control {\r\n  margin: 0;\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/form/FormSelect.css"],names:[],mappings:"AAAA;EACE,SAAS;AACX",sourcesContent:[".fd-form-select.fd-form-item--horizontal .fd-select__control {\r\n  margin: 0;\r\n}\r\n"],sourceRoot:""}]);const o=i},2785:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),r=n.n(a),l=n(3645),i=n.n(l)()(r());i.push([e.id,".fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n@media (min-width: 600px) {\r\n  .fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n    padding: 0 2rem;\r\n  }\r\n}\r\n\r\n@media (min-width: 1400px) {\r\n  .fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n    padding: 0 3rem;\r\n  }\r\n}","",{version:3,sources:["webpack://./src/lib/components/icontabbar/IconTabBar.css"],names:[],mappings:"AAAA;EACE,iBAAiB;AACnB;;AAEA;EACE;IACE,eAAe;EACjB;AACF;;AAEA;EACE;IACE,eAAe;EACjB;AACF",sourcesContent:[".fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n@media (min-width: 600px) {\r\n  .fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n    padding: 0 2rem;\r\n  }\r\n}\r\n\r\n@media (min-width: 1400px) {\r\n  .fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n    padding: 0 3rem;\r\n  }\r\n}"],sourceRoot:""}]);const o=i},1976:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),r=n.n(a),l=n(3645),i=n.n(l)()(r());i.push([e.id,".ap-fd-page {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n.ap-fd-page .ap-fd-page__content {\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  overflow: auto;\r\n}\r\n\r\n.ap-fd-page .ap-fd-page__content .ap-fd-page__body {\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n\r\n  background: var(--sapBackgroundColor);\r\n}\r\n\r\n.ap-fd-page .ap-fd-page__content .ap-fd-page__footer {\r\n  flex-shrink: 0;\r\n  flex-basis: 100px;\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/page/Page.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;;EAEtB,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,aAAa;;EAEb,aAAa;EACb,sBAAsB;;EAEtB,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,aAAa;;EAEb,qCAAqC;AACvC;;AAEA;EACE,cAAc;EACd,iBAAiB;AACnB",sourcesContent:[".ap-fd-page {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n.ap-fd-page .ap-fd-page__content {\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  overflow: auto;\r\n}\r\n\r\n.ap-fd-page .ap-fd-page__content .ap-fd-page__body {\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n\r\n  background: var(--sapBackgroundColor);\r\n}\r\n\r\n.ap-fd-page .ap-fd-page__content .ap-fd-page__footer {\r\n  flex-shrink: 0;\r\n  flex-basis: 100px;\r\n}\r\n"],sourceRoot:""}]);const o=i},1306:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),r=n.n(a),l=n(3645),i=n.n(l)()(r());i.push([e.id,".ap-fd-page-header {\r\n  flex-shrink: 0;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n\r\n  background: var(--sapPageHeader_Background);\r\n  color: var(--sapPageHeader_TextColor);\r\n\r\n  position: relative;\r\n}\r\n\r\n@media screen and (min-width: 600px) {\r\n  .ap-fd-page-header {\r\n    padding-left: 2rem;\r\n    padding-right: 2rem;\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 1400px) {\r\n  .ap-fd-page-header {\r\n    padding-left: 3rem;\r\n    padding-right: 3rem;\r\n  }\r\n}\r\n\r\n.ap-fd-page-header .ap-fd-page-header__controls {\r\n  padding-top: 0.5rem;\r\n  padding-bottom: 1rem;\r\n}\r\n\r\n.ap-fd-page-header.ap-fd-page-header--expanded .ap-fd-page-header__controls {\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.ap-fd-page-header .ap-fd-page-header__controls .ap-fd-page-header__controls__breadcrumb {\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.ap-fd-page-header .ap-fd-page-header__controls .ap-fd-page-header__controls__title {\r\n  display: flex;\r\n}\r\n\r\n.ap-fd-page-header\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__avatar {\r\n  margin-right: 1rem;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.ap-fd-page-header\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__title {\r\n  color: var(--sapObjectHeader_Title_TextColor);\r\n  font-family: var(--sapObjectHeader_Title_FontFamily);\r\n  font-size: var(--sapObjectHeader_Title_SnappedFontSize);\r\n  font-weight: bold;\r\n  margin-top: -0.2rem;\r\n}\r\n\r\n.ap-fd-page-header.ap-fd-page-header--expanded\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__title {\r\n  font-size: var(--sapFontHeader1Size);\r\n  margin-top: 0;\r\n}\r\n\r\n.ap-fd-page-header\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__subtitle {\r\n  font-family: var(--sapFontFamily);\r\n  font-size: var(--sapFontSize);\r\n  font-weight: normal;\r\n  color: var(--sapContent_LabelColor);\r\n}\r\n\r\n.ap-fd-page-header.ap-fd-page-header--expanded\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__subtitle {\r\n  margin-top: 0.25rem;\r\n}\r\n\r\n.ap-fd-page-header\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__actions {\r\n  flex-grow: 1;\r\n  padding: 0;\r\n  height: 2rem;\r\n}\r\n\r\n\r\n.ap-fd-page-header .ap-fd-page-header__content {\r\n  padding-top: 1rem;\r\n  padding-bottom: 1rem;\r\n}\r\n\r\n.ap-fd-page-header .ap-fd-page-header__content .ap-fd-page-header__content__avatar {\r\n  margin-right: 1rem;\r\n}\r\n.ap-fd-page-header .ap-fd-page-header__content .ap-fd-page-header-attribute:last-child {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n\r\n.ap-fd-page-header .ap-fd-page-header__expander {\r\n  position: absolute;\r\n  top: 100%;\r\n  height: 0;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 0 -2rem;\r\n  z-index: 5;\r\n}\r\n.ap-fd-page-header .ap-fd-page-header__expander:before {\r\n  content: '';\r\n  background: linear-gradient(\r\n    0.25turn,\r\n    var(--sapPageHeader_Background),\r\n    var(--sapButton_BorderColor),\r\n    var(--sapPageHeader_Background)\r\n  );\r\n  height: 1px;\r\n  position: absolute;\r\n  right: calc(50% - 200px);\r\n  left: calc(50% - 200px);\r\n}\r\n.ap-fd-page-header .ap-fd-page-header__expander .ap-fd-page-header__expander-button {\r\n  width: 1.5rem;\r\n  height: 1.5rem;\r\n  min-width: 0;\r\n}\r\n.ap-fd-page-header .ap-fd-page-header__expander .ap-fd-page-header__expander-button i {\r\n  font-size: 0.75rem;\r\n}\r\n\r\n.ap-fd-page\r\n  .ap-fd-page-header\r\n  .ap-fd-page-header__expander\r\n  .ap-fd-page-header__expander-button\r\n  + .ap-fd-page-header__expander-button {\r\n  margin-left: 0.35rem;\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/page/PageHeader.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,oBAAoB;EACpB,qBAAqB;;EAErB,2CAA2C;EAC3C,qCAAqC;;EAErC,kBAAkB;AACpB;;AAEA;EACE;IACE,kBAAkB;IAClB,mBAAmB;EACrB;AACF;;AAEA;EACE;IACE,kBAAkB;IAClB,mBAAmB;EACrB;AACF;;AAEA;EACE,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,sBAAsB;AACxB;;AAEA;EACE,aAAa;AACf;;AAEA;;;;EAIE,kBAAkB;EAClB,cAAc;AAChB;;AAEA;;;;EAIE,6CAA6C;EAC7C,oDAAoD;EACpD,uDAAuD;EACvD,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;;;;EAIE,oCAAoC;EACpC,aAAa;AACf;;AAEA;;;;EAIE,iCAAiC;EACjC,6BAA6B;EAC7B,mBAAmB;EACnB,mCAAmC;AACrC;;AAEA;;;;EAIE,mBAAmB;AACrB;;AAEA;;;;EAIE,YAAY;EACZ,UAAU;EACV,YAAY;AACd;;;AAGA;EACE,iBAAiB;EACjB,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,mBAAmB;AACrB;;;AAGA;EACE,kBAAkB;EAClB,SAAS;EACT,SAAS;EACT,WAAW;EACX,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,eAAe;EACf,UAAU;AACZ;AACA;EACE,WAAW;EACX;;;;;GAKC;EACD,WAAW;EACX,kBAAkB;EAClB,wBAAwB;EACxB,uBAAuB;AACzB;AACA;EACE,aAAa;EACb,cAAc;EACd,YAAY;AACd;AACA;EACE,kBAAkB;AACpB;;AAEA;;;;;EAKE,oBAAoB;AACtB",sourcesContent:[".ap-fd-page-header {\r\n  flex-shrink: 0;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n\r\n  background: var(--sapPageHeader_Background);\r\n  color: var(--sapPageHeader_TextColor);\r\n\r\n  position: relative;\r\n}\r\n\r\n@media screen and (min-width: 600px) {\r\n  .ap-fd-page-header {\r\n    padding-left: 2rem;\r\n    padding-right: 2rem;\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 1400px) {\r\n  .ap-fd-page-header {\r\n    padding-left: 3rem;\r\n    padding-right: 3rem;\r\n  }\r\n}\r\n\r\n.ap-fd-page-header .ap-fd-page-header__controls {\r\n  padding-top: 0.5rem;\r\n  padding-bottom: 1rem;\r\n}\r\n\r\n.ap-fd-page-header.ap-fd-page-header--expanded .ap-fd-page-header__controls {\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.ap-fd-page-header .ap-fd-page-header__controls .ap-fd-page-header__controls__breadcrumb {\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.ap-fd-page-header .ap-fd-page-header__controls .ap-fd-page-header__controls__title {\r\n  display: flex;\r\n}\r\n\r\n.ap-fd-page-header\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__avatar {\r\n  margin-right: 1rem;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.ap-fd-page-header\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__title {\r\n  color: var(--sapObjectHeader_Title_TextColor);\r\n  font-family: var(--sapObjectHeader_Title_FontFamily);\r\n  font-size: var(--sapObjectHeader_Title_SnappedFontSize);\r\n  font-weight: bold;\r\n  margin-top: -0.2rem;\r\n}\r\n\r\n.ap-fd-page-header.ap-fd-page-header--expanded\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__title {\r\n  font-size: var(--sapFontHeader1Size);\r\n  margin-top: 0;\r\n}\r\n\r\n.ap-fd-page-header\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__subtitle {\r\n  font-family: var(--sapFontFamily);\r\n  font-size: var(--sapFontSize);\r\n  font-weight: normal;\r\n  color: var(--sapContent_LabelColor);\r\n}\r\n\r\n.ap-fd-page-header.ap-fd-page-header--expanded\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__subtitle {\r\n  margin-top: 0.25rem;\r\n}\r\n\r\n.ap-fd-page-header\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__actions {\r\n  flex-grow: 1;\r\n  padding: 0;\r\n  height: 2rem;\r\n}\r\n\r\n\r\n.ap-fd-page-header .ap-fd-page-header__content {\r\n  padding-top: 1rem;\r\n  padding-bottom: 1rem;\r\n}\r\n\r\n.ap-fd-page-header .ap-fd-page-header__content .ap-fd-page-header__content__avatar {\r\n  margin-right: 1rem;\r\n}\r\n.ap-fd-page-header .ap-fd-page-header__content .ap-fd-page-header-attribute:last-child {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n\r\n.ap-fd-page-header .ap-fd-page-header__expander {\r\n  position: absolute;\r\n  top: 100%;\r\n  height: 0;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 0 -2rem;\r\n  z-index: 5;\r\n}\r\n.ap-fd-page-header .ap-fd-page-header__expander:before {\r\n  content: '';\r\n  background: linear-gradient(\r\n    0.25turn,\r\n    var(--sapPageHeader_Background),\r\n    var(--sapButton_BorderColor),\r\n    var(--sapPageHeader_Background)\r\n  );\r\n  height: 1px;\r\n  position: absolute;\r\n  right: calc(50% - 200px);\r\n  left: calc(50% - 200px);\r\n}\r\n.ap-fd-page-header .ap-fd-page-header__expander .ap-fd-page-header__expander-button {\r\n  width: 1.5rem;\r\n  height: 1.5rem;\r\n  min-width: 0;\r\n}\r\n.ap-fd-page-header .ap-fd-page-header__expander .ap-fd-page-header__expander-button i {\r\n  font-size: 0.75rem;\r\n}\r\n\r\n.ap-fd-page\r\n  .ap-fd-page-header\r\n  .ap-fd-page-header__expander\r\n  .ap-fd-page-header__expander-button\r\n  + .ap-fd-page-header__expander-button {\r\n  margin-left: 0.35rem;\r\n}\r\n"],sourceRoot:""}]);const o=i},1322:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),r=n.n(a),l=n(3645),i=n.n(l)()(r());i.push([e.id,".ap-fd-page-header-attribute {\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 400px;\r\n}\r\n\r\n.ap-fd-page-header-attribute .ap-fd-page-header-attribute__label {\r\n  color: var(--sapContent_LabelColor);\r\n  font-family: var(--sapFontFamily);\r\n  font-size: var(--sapFontSize);\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.ap-fd-page-header-attribute .ap-fd-page-header-attribute__control.fd-object-status {\r\n  font-size: var(--sapObjectHeader_Title_SnappedFontSize);\r\n}\r\n\r\n.ap-fd-page-header-attribute .ap-fd-page-header-attribute__control.fd-object-text {\r\n  color: var(--sapPageHeader_TextColor);\r\n  font-family: var(--sapFontFamily);\r\n  font-size: var(--sapFontSize);\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/page/PageHeaderAttribute.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,gBAAgB;AAClB;;AAEA;EACE,mCAAmC;EACnC,iCAAiC;EACjC,6BAA6B;EAC7B,qBAAqB;AACvB;;AAEA;EACE,uDAAuD;AACzD;;AAEA;EACE,qCAAqC;EACrC,iCAAiC;EACjC,6BAA6B;AAC/B",sourcesContent:[".ap-fd-page-header-attribute {\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 400px;\r\n}\r\n\r\n.ap-fd-page-header-attribute .ap-fd-page-header-attribute__label {\r\n  color: var(--sapContent_LabelColor);\r\n  font-family: var(--sapFontFamily);\r\n  font-size: var(--sapFontSize);\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.ap-fd-page-header-attribute .ap-fd-page-header-attribute__control.fd-object-status {\r\n  font-size: var(--sapObjectHeader_Title_SnappedFontSize);\r\n}\r\n\r\n.ap-fd-page-header-attribute .ap-fd-page-header-attribute__control.fd-object-text {\r\n  color: var(--sapPageHeader_TextColor);\r\n  font-family: var(--sapFontFamily);\r\n  font-size: var(--sapFontSize);\r\n}\r\n"],sourceRoot:""}]);const o=i},4605:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),r=n.n(a),l=n(3645),i=n.n(l)()(r());i.push([e.id,".fd-shellbar {\r\n  --sapContent_LabelColor: var(--sapShell_TextColor);\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/shellbar/ShellBar.css"],names:[],mappings:"AAAA;EACE,kDAAkD;AACpD",sourcesContent:[".fd-shellbar {\r\n  --sapContent_LabelColor: var(--sapShell_TextColor);\r\n}\r\n"],sourceRoot:""}]);const o=i},348:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),r=n.n(a),l=n(3645),i=n.n(l)()(r());i.push([e.id,".fd-table .fd-table__row--activable:active[\\:has\\(button\\:active\\)],\r\n.fd-table .fd-table__row--activable:active[\\:has\\(button\\:active\\)] .fd-table__cell,\r\n.fd-table .fd-table__row--activable:active[\\:has\\(button\\:active\\)] .fd-table__cell .fd-table__cell__label {\r\n  background-color: var(--sapList_Background) !important;\r\n  color: var(--sapTextColor) !important;\r\n}\r\n.fd-table .fd-table__row--activable:active:has(button:active),\r\n.fd-table .fd-table__row--activable:active:has(button:active) .fd-table__cell,\r\n.fd-table .fd-table__row--activable:active:has(button:active) .fd-table__cell .fd-table__cell__label {\r\n  background-color: var(--sapList_Background) !important;\r\n  color: var(--sapTextColor) !important;\r\n}\r\n.fd-table .fd-table__row--activable:active[\\:has\\(button\\:active\\)] .fd-table__cell {\r\n  border-bottom-color: var(--sapList_BorderColor);\r\n}\r\n.fd-table .fd-table__row--activable:active:has(button:active) .fd-table__cell {\r\n  border-bottom-color: var(--sapList_BorderColor);\r\n}\r\n.fd-table .fd-table__row--activable:active[\\:has\\(button\\:active\\)] .fd-table__cell a {\r\n  color: -webkit-link !important;\r\n}\r\n.fd-table .fd-table__row--activable:active:has(button:active) .fd-table__cell a {\r\n  color: -webkit-link !important;\r\n}\r\n\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active[\\:has\\(button\\:active\\)],\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active[\\:has\\(button\\:active\\)] .fd-table__cell,\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active[\\:has\\(button\\:active\\)] .fd-table__cell .fd-table__cell__label {\r\n  background-color: var(--sapList_Hover_Background) !important;\r\n  color: var(--fdTable_Hover_Down_Color) !important;\r\n}\r\n\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active:has(button:active),\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active:has(button:active) .fd-table__cell,\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active:has(button:active) .fd-table__cell .fd-table__cell__label {\r\n  background-color: var(--sapList_Hover_Background) !important;\r\n  color: var(--fdTable_Hover_Down_Color) !important;\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/table/Table.css"],names:[],mappings:"AAAA;;;EAGE,sDAAsD;EACtD,qCAAqC;AACvC;AALA;;;EAGE,sDAAsD;EACtD,qCAAqC;AACvC;AACA;EACE,+CAA+C;AACjD;AAFA;EACE,+CAA+C;AACjD;AACA;EACE,8BAA8B;AAChC;AAFA;EACE,8BAA8B;AAChC;;AAEA;;;EAGE,4DAA4D;EAC5D,iDAAiD;AACnD;;AALA;;;EAGE,4DAA4D;EAC5D,iDAAiD;AACnD",sourcesContent:[".fd-table .fd-table__row--activable:active:has(button:active),\r\n.fd-table .fd-table__row--activable:active:has(button:active) .fd-table__cell,\r\n.fd-table .fd-table__row--activable:active:has(button:active) .fd-table__cell .fd-table__cell__label {\r\n  background-color: var(--sapList_Background) !important;\r\n  color: var(--sapTextColor) !important;\r\n}\r\n.fd-table .fd-table__row--activable:active:has(button:active) .fd-table__cell {\r\n  border-bottom-color: var(--sapList_BorderColor);\r\n}\r\n.fd-table .fd-table__row--activable:active:has(button:active) .fd-table__cell a {\r\n  color: -webkit-link !important;\r\n}\r\n\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active:has(button:active),\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active:has(button:active) .fd-table__cell,\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active:has(button:active) .fd-table__cell .fd-table__cell__label {\r\n  background-color: var(--sapList_Hover_Background) !important;\r\n  color: var(--fdTable_Hover_Down_Color) !important;\r\n}\r\n"],sourceRoot:""}]);const o=i},1047:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),r=n.n(a),l=n(3645),i=n.n(l)()(r());i.push([e.id,".fd-section .fd-toolbar {\r\n  padding: 0 0 0 0.25rem;\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/toolbar/Toolbar.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB",sourcesContent:[".fd-section .fd-toolbar {\r\n  padding: 0 0 0 0.25rem;\r\n}\r\n"],sourceRoot:""}]);const o=i},3645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,r,l){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(a)for(var o=0;o<this.length;o++){var u=this[o][0];null!=u&&(i[u]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);a&&i[s[0]]||(void 0!==l&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=l),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),r&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=r):s[4]="".concat(r)),t.push(s))}},t}},7537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),l="/*# ".concat(r," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([l]).join("\n")}return[t].join("\n")}},8679:(e,t,n)=>{var a=n(9864),r={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},l={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},o={};function u(e){return a.isMemo(e)?i:o[e.$$typeof]||r}o[a.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},o[a.Memo]=i;var c=Object.defineProperty,s=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,m=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,n,a){if("string"!=typeof n){if(p){var r=m(n);r&&r!==p&&e(t,r,a)}var i=s(n);d&&(i=i.concat(d(n)));for(var o=u(t),v=u(n),h=0;h<i.length;++h){var b=i[h];if(!(l[b]||a&&a[b]||v&&v[b]||o&&o[b])){var g=f(n,b);try{c(t,b,g)}catch(e){}}}}return t}},4448:(e,t,n)=>{var a=n(7294),r=n(3840);function l(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,o={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(o[e]=t,e=0;e<t.length;e++)i.add(t[e])}var s=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,m={},p={};function v(e,t,n,a,r,l,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=a,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=l,this.removeEmptyString=i}var h={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){h[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];h[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){h[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){h[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){h[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){h[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){h[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){h[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){h[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var b=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function E(e,t,n,a){var r=h.hasOwnProperty(t)?h[t]:null;(null!==r?0!==r.type:a||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,a){if(null==t||function(e,t,n,a){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!a&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,a))return!0;if(a)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,r,a)&&(n=null),a||null===r?function(e){return!!d.call(p,e)||!d.call(m,e)&&(f.test(e)?p[e]=!0:(m[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):r.mustUseProperty?e[r.propertyName]=null===n?3!==r.type&&"":n:(t=r.attributeName,a=r.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(r=r.type)||4===r&&!0===n?"":""+n,a?e.setAttributeNS(a,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(b,g);h[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(b,g);h[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(b,g);h[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){h[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),h.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){h[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var y=a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,_=Symbol.for("react.element"),A=Symbol.for("react.portal"),S=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),w=Symbol.for("react.profiler"),x=Symbol.for("react.provider"),O=Symbol.for("react.context"),L=Symbol.for("react.forward_ref"),T=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),k=Symbol.for("react.memo"),N=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var I=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var D=Symbol.iterator;function M(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=D&&e[D]||e["@@iterator"])?e:null}var R,B=Object.assign;function j(e){if(void 0===R)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);R=t&&t[1]||""}return"\n"+R+e}var z=!1;function F(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var a=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){a=e}e.call(t.prototype)}else{try{throw Error()}catch(e){a=e}e()}}catch(t){if(t&&a&&"string"==typeof t.stack){for(var r=t.stack.split("\n"),l=a.stack.split("\n"),i=r.length-1,o=l.length-1;1<=i&&0<=o&&r[i]!==l[o];)o--;for(;1<=i&&0<=o;i--,o--)if(r[i]!==l[o]){if(1!==i||1!==o)do{if(i--,0>--o||r[i]!==l[o]){var u="\n"+r[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=o);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?j(e):""}function H(e){switch(e.tag){case 5:return j(e.type);case 16:return j("Lazy");case 13:return j("Suspense");case 19:return j("SuspenseList");case 0:case 2:case 15:return F(e.type,!1);case 11:return F(e.type.render,!1);case 1:return F(e.type,!0);default:return""}}function U(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case A:return"Portal";case w:return"Profiler";case C:return"StrictMode";case T:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case x:return(e._context.displayName||"Context")+".Provider";case L:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case k:return null!==(t=e.displayName||null)?t:U(e.type)||"Memo";case N:t=e._payload,e=e._init;try{return U(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return U(t);case 8:return t===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function $(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),a=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var r=n.get,l=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return r.call(this)},set:function(e){a=""+e,l.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return a},setValue:function(e){a=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),a="";return e&&(a=V(e)?e.checked?"true":"false":e.value),(e=a)!==n&&(t.setValue(e),!0)}function X(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var n=t.checked;return B({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Z(e,t){var n=null==t.defaultValue?"":t.defaultValue,a=null!=t.checked?t.checked:t.defaultChecked;n=$(null!=t.value?t.value:n),e._wrapperState={initialChecked:a,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function K(e,t){null!=(t=t.checked)&&E(e,"checked",t,!1)}function Q(e,t){K(e,t);var n=$(t.value),a=t.type;if(null!=n)"number"===a?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===a||"reset"===a)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,$(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var a=t.type;if(!("submit"!==a&&"reset"!==a||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&X(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,a){if(e=e.options,t){t={};for(var r=0;r<n.length;r++)t["$"+n[r]]=!0;for(n=0;n<e.length;n++)r=t.hasOwnProperty("$"+e[n].value),e[n].selected!==r&&(e[n].selected=r),r&&a&&(e[n].defaultSelected=!0)}else{for(n=""+$(n),t=null,r=0;r<e.length;r++){if(e[r].value===n)return e[r].selected=!0,void(a&&(e[r].defaultSelected=!0));null!==t||e[r].disabled||(t=e[r])}null!==t&&(t.selected=!0)}}function ae(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(l(91));return B({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function re(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(l(92));if(te(n)){if(1<n.length)throw Error(l(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:$(n)}}function le(e,t){var n=$(t.value),a=$(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=a&&(e.defaultValue=""+a)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function oe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?oe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,se,de=(se=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,a){MSApp.execUnsafeLocalFunction((function(){return se(e,t)}))}:se);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var me={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function ve(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||me.hasOwnProperty(e)&&me[e]?(""+t).trim():t+"px"}function he(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var a=0===n.indexOf("--"),r=ve(n,t[n],a);"float"===n&&(n="cssFloat"),a?e.setProperty(n,r):e[n]=r}}Object.keys(me).forEach((function(e){pe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),me[t]=me[e]}))}));var be=B({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(be[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(l(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(l(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(l(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(l(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ye=null;function _e(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ae=null,Se=null,Ce=null;function we(e){if(e=Er(e)){if("function"!=typeof Ae)throw Error(l(280));var t=e.stateNode;t&&(t=_r(t),Ae(e.stateNode,e.type,t))}}function xe(e){Se?Ce?Ce.push(e):Ce=[e]:Se=e}function Oe(){if(Se){var e=Se,t=Ce;if(Ce=Se=null,we(e),t)for(e=0;e<t.length;e++)we(t[e])}}function Le(e,t){return e(t)}function Te(){}var Pe=!1;function ke(e,t,n){if(Pe)return e(t,n);Pe=!0;try{return Le(e,t,n)}finally{Pe=!1,(null!==Se||null!==Ce)&&(Te(),Oe())}}function Ne(e,t){var n=e.stateNode;if(null===n)return null;var a=_r(n);if(null===a)return null;n=a[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(a=!a.disabled)||(a=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!a;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(l(231,t,typeof n));return n}var Ie=!1;if(s)try{var De={};Object.defineProperty(De,"passive",{get:function(){Ie=!0}}),window.addEventListener("test",De,De),window.removeEventListener("test",De,De)}catch(se){Ie=!1}function Me(e,t,n,a,r,l,i,o,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Re=!1,Be=null,je=!1,ze=null,Fe={onError:function(e){Re=!0,Be=e}};function He(e,t,n,a,r,l,i,o,u){Re=!1,Be=null,Me.apply(Fe,arguments)}function Ue(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function $e(e){if(Ue(e)!==e)throw Error(l(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ue(e)))throw Error(l(188));return t!==e?null:e}for(var n=e,a=t;;){var r=n.return;if(null===r)break;var i=r.alternate;if(null===i){if(null!==(a=r.return)){n=a;continue}break}if(r.child===i.child){for(i=r.child;i;){if(i===n)return $e(r),e;if(i===a)return $e(r),t;i=i.sibling}throw Error(l(188))}if(n.return!==a.return)n=r,a=i;else{for(var o=!1,u=r.child;u;){if(u===n){o=!0,n=r,a=i;break}if(u===a){o=!0,a=r,n=i;break}u=u.sibling}if(!o){for(u=i.child;u;){if(u===n){o=!0,n=i,a=r;break}if(u===a){o=!0,a=i,n=r;break}u=u.sibling}if(!o)throw Error(l(189))}}if(n.alternate!==a)throw Error(l(190))}if(3!==n.tag)throw Error(l(188));return n.stateNode.current===n?e:t}(e))?Ge(e):null}function Ge(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ge(e);if(null!==t)return t;e=e.sibling}return null}var qe=r.unstable_scheduleCallback,Xe=r.unstable_cancelCallback,Ye=r.unstable_shouldYield,Ze=r.unstable_requestPaint,Ke=r.unstable_now,Qe=r.unstable_getCurrentPriorityLevel,Je=r.unstable_ImmediatePriority,et=r.unstable_UserBlockingPriority,tt=r.unstable_NormalPriority,nt=r.unstable_LowPriority,at=r.unstable_IdlePriority,rt=null,lt=null,it=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(ot(e)/ut|0)|0},ot=Math.log,ut=Math.LN2,ct=64,st=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var a=0,r=e.suspendedLanes,l=e.pingedLanes,i=268435455&n;if(0!==i){var o=i&~r;0!==o?a=dt(o):0!=(l&=i)&&(a=dt(l))}else 0!=(i=n&~r)?a=dt(i):0!==l&&(a=dt(l));if(0===a)return 0;if(0!==t&&t!==a&&0==(t&r)&&((r=a&-a)>=(l=t&-t)||16===r&&0!=(4194240&l)))return t;if(0!=(4&a)&&(a|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=a;0<t;)r=1<<(n=31-it(t)),a|=e[n],t&=~r;return a}function mt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function pt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function vt(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function ht(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function bt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var a=31-it(n),r=1<<a;r&t|e[a]&t&&(e[a]|=t),n&=~r}}var Et=0;function yt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var _t,At,St,Ct,wt,xt=!1,Ot=[],Lt=null,Tt=null,Pt=null,kt=new Map,Nt=new Map,It=[],Dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Mt(e,t){switch(e){case"focusin":case"focusout":Lt=null;break;case"dragenter":case"dragleave":Tt=null;break;case"mouseover":case"mouseout":Pt=null;break;case"pointerover":case"pointerout":kt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Nt.delete(t.pointerId)}}function Rt(e,t,n,a,r,l){return null===e||e.nativeEvent!==l?(e={blockedOn:t,domEventName:n,eventSystemFlags:a,nativeEvent:l,targetContainers:[r]},null!==t&&null!==(t=Er(t))&&At(t),e):(e.eventSystemFlags|=a,t=e.targetContainers,null!==r&&-1===t.indexOf(r)&&t.push(r),e)}function Bt(e){var t=gr(e.target);if(null!==t){var n=Ue(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void wt(e.priority,(function(){St(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function jt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Er(n))&&At(t),e.blockedOn=n,!1;var a=new(n=e.nativeEvent).constructor(n.type,n);ye=a,n.target.dispatchEvent(a),ye=null,t.shift()}return!0}function zt(e,t,n){jt(e)&&n.delete(t)}function Ft(){xt=!1,null!==Lt&&jt(Lt)&&(Lt=null),null!==Tt&&jt(Tt)&&(Tt=null),null!==Pt&&jt(Pt)&&(Pt=null),kt.forEach(zt),Nt.forEach(zt)}function Ht(e,t){e.blockedOn===t&&(e.blockedOn=null,xt||(xt=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Ft)))}function Ut(e){function t(t){return Ht(t,e)}if(0<Ot.length){Ht(Ot[0],e);for(var n=1;n<Ot.length;n++){var a=Ot[n];a.blockedOn===e&&(a.blockedOn=null)}}for(null!==Lt&&Ht(Lt,e),null!==Tt&&Ht(Tt,e),null!==Pt&&Ht(Pt,e),kt.forEach(t),Nt.forEach(t),n=0;n<It.length;n++)(a=It[n]).blockedOn===e&&(a.blockedOn=null);for(;0<It.length&&null===(n=It[0]).blockedOn;)Bt(n),null===n.blockedOn&&It.shift()}var Wt=y.ReactCurrentBatchConfig,$t=!0;function Vt(e,t,n,a){var r=Et,l=Wt.transition;Wt.transition=null;try{Et=1,qt(e,t,n,a)}finally{Et=r,Wt.transition=l}}function Gt(e,t,n,a){var r=Et,l=Wt.transition;Wt.transition=null;try{Et=4,qt(e,t,n,a)}finally{Et=r,Wt.transition=l}}function qt(e,t,n,a){if($t){var r=Yt(e,t,n,a);if(null===r)$a(e,t,a,Xt,n),Mt(e,a);else if(function(e,t,n,a,r){switch(t){case"focusin":return Lt=Rt(Lt,e,t,n,a,r),!0;case"dragenter":return Tt=Rt(Tt,e,t,n,a,r),!0;case"mouseover":return Pt=Rt(Pt,e,t,n,a,r),!0;case"pointerover":var l=r.pointerId;return kt.set(l,Rt(kt.get(l)||null,e,t,n,a,r)),!0;case"gotpointercapture":return l=r.pointerId,Nt.set(l,Rt(Nt.get(l)||null,e,t,n,a,r)),!0}return!1}(r,e,t,n,a))a.stopPropagation();else if(Mt(e,a),4&t&&-1<Dt.indexOf(e)){for(;null!==r;){var l=Er(r);if(null!==l&&_t(l),null===(l=Yt(e,t,n,a))&&$a(e,t,a,Xt,n),l===r)break;r=l}null!==r&&a.stopPropagation()}else $a(e,t,a,null,n)}}var Xt=null;function Yt(e,t,n,a){if(Xt=null,null!==(e=gr(e=_e(a))))if(null===(t=Ue(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Xt=e,null}function Zt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Qe()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case at:return 536870912;default:return 16}default:return 16}}var Kt=null,Qt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Qt,a=n.length,r="value"in Kt?Kt.value:Kt.textContent,l=r.length;for(e=0;e<a&&n[e]===r[e];e++);var i=a-e;for(t=1;t<=i&&n[a-t]===r[l-t];t++);return Jt=r.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function an(){return!1}function rn(e){function t(t,n,a,r,l){for(var i in this._reactName=t,this._targetInst=a,this.type=n,this.nativeEvent=r,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(r):r[i]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?nn:an,this.isPropagationStopped=an,this}return B(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var ln,on,un,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=rn(cn),dn=B({},cn,{view:0,detail:0}),fn=rn(dn),mn=B({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:wn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(ln=e.screenX-un.screenX,on=e.screenY-un.screenY):on=ln=0,un=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:on}}),pn=rn(mn),vn=rn(B({},mn,{dataTransfer:0})),hn=rn(B({},dn,{relatedTarget:0})),bn=rn(B({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=B({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),En=rn(gn),yn=rn(B({},cn,{data:0})),_n={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},An={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function wn(){return Cn}var xn=B({},dn,{key:function(e){if(e.key){var t=_n[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?An[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:wn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),On=rn(xn),Ln=rn(B({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=rn(B({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:wn})),Pn=rn(B({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),kn=B({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=rn(kn),In=[9,13,27,32],Dn=s&&"CompositionEvent"in window,Mn=null;s&&"documentMode"in document&&(Mn=document.documentMode);var Rn=s&&"TextEvent"in window&&!Mn,Bn=s&&(!Dn||Mn&&8<Mn&&11>=Mn),jn=String.fromCharCode(32),zn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==In.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Hn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Vn(e,t,n,a){xe(a),0<(t=Ga(t,"onChange")).length&&(n=new sn("onChange","change",null,n,a),e.push({event:n,listeners:t}))}var Gn=null,qn=null;function Xn(e){ja(e,0)}function Yn(e){if(q(yr(e)))return e}function Zn(e,t){if("change"===e)return t}var Kn=!1;if(s){var Qn;if(s){var Jn="oninput"in document;if(!Jn){var ea=document.createElement("div");ea.setAttribute("oninput","return;"),Jn="function"==typeof ea.oninput}Qn=Jn}else Qn=!1;Kn=Qn&&(!document.documentMode||9<document.documentMode)}function ta(){Gn&&(Gn.detachEvent("onpropertychange",na),qn=Gn=null)}function na(e){if("value"===e.propertyName&&Yn(qn)){var t=[];Vn(t,qn,e,_e(e)),ke(Xn,t)}}function aa(e,t,n){"focusin"===e?(ta(),qn=n,(Gn=t).attachEvent("onpropertychange",na)):"focusout"===e&&ta()}function ra(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(qn)}function la(e,t){if("click"===e)return Yn(t)}function ia(e,t){if("input"===e||"change"===e)return Yn(t)}var oa="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ua(e,t){if(oa(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(a=0;a<n.length;a++){var r=n[a];if(!d.call(t,r)||!oa(e[r],t[r]))return!1}return!0}function ca(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sa(e,t){var n,a=ca(e);for(e=0;a;){if(3===a.nodeType){if(n=e+a.textContent.length,e<=t&&n>=t)return{node:a,offset:t-e};e=n}e:{for(;a;){if(a.nextSibling){a=a.nextSibling;break e}a=a.parentNode}a=void 0}a=ca(a)}}function da(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?da(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fa(){for(var e=window,t=X();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=X((e=t.contentWindow).document)}return t}function ma(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function pa(e){var t=fa(),n=e.focusedElem,a=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&da(n.ownerDocument.documentElement,n)){if(null!==a&&ma(n))if(t=a.start,void 0===(e=a.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var r=n.textContent.length,l=Math.min(a.start,r);a=void 0===a.end?l:Math.min(a.end,r),!e.extend&&l>a&&(r=a,a=l,l=r),r=sa(n,l);var i=sa(n,a);r&&i&&(1!==e.rangeCount||e.anchorNode!==r.node||e.anchorOffset!==r.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(r.node,r.offset),e.removeAllRanges(),l>a?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var va=s&&"documentMode"in document&&11>=document.documentMode,ha=null,ba=null,ga=null,Ea=!1;function ya(e,t,n){var a=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;Ea||null==ha||ha!==X(a)||(a="selectionStart"in(a=ha)&&ma(a)?{start:a.selectionStart,end:a.selectionEnd}:{anchorNode:(a=(a.ownerDocument&&a.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:a.anchorOffset,focusNode:a.focusNode,focusOffset:a.focusOffset},ga&&ua(ga,a)||(ga=a,0<(a=Ga(ba,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:a}),t.target=ha)))}function _a(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Aa={animationend:_a("Animation","AnimationEnd"),animationiteration:_a("Animation","AnimationIteration"),animationstart:_a("Animation","AnimationStart"),transitionend:_a("Transition","TransitionEnd")},Sa={},Ca={};function wa(e){if(Sa[e])return Sa[e];if(!Aa[e])return e;var t,n=Aa[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ca)return Sa[e]=n[t];return e}s&&(Ca=document.createElement("div").style,"AnimationEvent"in window||(delete Aa.animationend.animation,delete Aa.animationiteration.animation,delete Aa.animationstart.animation),"TransitionEvent"in window||delete Aa.transitionend.transition);var xa=wa("animationend"),Oa=wa("animationiteration"),La=wa("animationstart"),Ta=wa("transitionend"),Pa=new Map,ka="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Na(e,t){Pa.set(e,t),u(t,[e])}for(var Ia=0;Ia<ka.length;Ia++){var Da=ka[Ia];Na(Da.toLowerCase(),"on"+(Da[0].toUpperCase()+Da.slice(1)))}Na(xa,"onAnimationEnd"),Na(Oa,"onAnimationIteration"),Na(La,"onAnimationStart"),Na("dblclick","onDoubleClick"),Na("focusin","onFocus"),Na("focusout","onBlur"),Na(Ta,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ma="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ra=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ma));function Ba(e,t,n){var a=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,a,r,i,o,u,c){if(He.apply(this,arguments),Re){if(!Re)throw Error(l(198));var s=Be;Re=!1,Be=null,je||(je=!0,ze=s)}}(a,t,void 0,e),e.currentTarget=null}function ja(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var a=e[n],r=a.event;a=a.listeners;e:{var l=void 0;if(t)for(var i=a.length-1;0<=i;i--){var o=a[i],u=o.instance,c=o.currentTarget;if(o=o.listener,u!==l&&r.isPropagationStopped())break e;Ba(r,o,c),l=u}else for(i=0;i<a.length;i++){if(u=(o=a[i]).instance,c=o.currentTarget,o=o.listener,u!==l&&r.isPropagationStopped())break e;Ba(r,o,c),l=u}}}if(je)throw e=ze,je=!1,ze=null,e}function za(e,t){var n=t[vr];void 0===n&&(n=t[vr]=new Set);var a=e+"__bubble";n.has(a)||(Wa(t,e,2,!1),n.add(a))}function Fa(e,t,n){var a=0;t&&(a|=4),Wa(n,e,a,t)}var Ha="_reactListening"+Math.random().toString(36).slice(2);function Ua(e){if(!e[Ha]){e[Ha]=!0,i.forEach((function(t){"selectionchange"!==t&&(Ra.has(t)||Fa(t,!1,e),Fa(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ha]||(t[Ha]=!0,Fa("selectionchange",!1,t))}}function Wa(e,t,n,a){switch(Zt(t)){case 1:var r=Vt;break;case 4:r=Gt;break;default:r=qt}n=r.bind(null,t,n,e),r=void 0,!Ie||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(r=!0),a?void 0!==r?e.addEventListener(t,n,{capture:!0,passive:r}):e.addEventListener(t,n,!0):void 0!==r?e.addEventListener(t,n,{passive:r}):e.addEventListener(t,n,!1)}function $a(e,t,n,a,r){var l=a;if(0==(1&t)&&0==(2&t)&&null!==a)e:for(;;){if(null===a)return;var i=a.tag;if(3===i||4===i){var o=a.stateNode.containerInfo;if(o===r||8===o.nodeType&&o.parentNode===r)break;if(4===i)for(i=a.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===r||8===u.nodeType&&u.parentNode===r))return;i=i.return}for(;null!==o;){if(null===(i=gr(o)))return;if(5===(u=i.tag)||6===u){a=l=i;continue e}o=o.parentNode}}a=a.return}ke((function(){var a=l,r=_e(n),i=[];e:{var o=Pa.get(e);if(void 0!==o){var u=sn,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=On;break;case"focusin":c="focus",u=hn;break;case"focusout":c="blur",u=hn;break;case"beforeblur":case"afterblur":u=hn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=pn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Tn;break;case xa:case Oa:case La:u=bn;break;case Ta:u=Pn;break;case"scroll":u=fn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=En;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Ln}var s=0!=(4&t),d=!s&&"scroll"===e,f=s?null!==o?o+"Capture":null:o;s=[];for(var m,p=a;null!==p;){var v=(m=p).stateNode;if(5===m.tag&&null!==v&&(m=v,null!==f&&null!=(v=Ne(p,f))&&s.push(Va(p,v,m))),d)break;p=p.return}0<s.length&&(o=new u(o,c,null,n,r),i.push({event:o,listeners:s}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(o="mouseover"===e||"pointerover"===e)||n===ye||!(c=n.relatedTarget||n.fromElement)||!gr(c)&&!c[pr])&&(u||o)&&(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,u?(u=a,null!==(c=(c=n.relatedTarget||n.toElement)?gr(c):null)&&(c!==(d=Ue(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=a),u!==c)){if(s=pn,v="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(s=Ln,v="onPointerLeave",f="onPointerEnter",p="pointer"),d=null==u?o:yr(u),m=null==c?o:yr(c),(o=new s(v,p+"leave",u,n,r)).target=d,o.relatedTarget=m,v=null,gr(r)===a&&((s=new s(f,p+"enter",c,n,r)).target=m,s.relatedTarget=d,v=s),d=v,u&&c)e:{for(f=c,p=0,m=s=u;m;m=qa(m))p++;for(m=0,v=f;v;v=qa(v))m++;for(;0<p-m;)s=qa(s),p--;for(;0<m-p;)f=qa(f),m--;for(;p--;){if(s===f||null!==f&&s===f.alternate)break e;s=qa(s),f=qa(f)}s=null}else s=null;null!==u&&Xa(i,o,u,s,!1),null!==c&&null!==d&&Xa(i,d,c,s,!0)}if("select"===(u=(o=a?yr(a):window).nodeName&&o.nodeName.toLowerCase())||"input"===u&&"file"===o.type)var h=Zn;else if($n(o))if(Kn)h=ia;else{h=ra;var b=aa}else(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(h=la);switch(h&&(h=h(e,a))?Vn(i,h,n,r):(b&&b(e,o,a),"focusout"===e&&(b=o._wrapperState)&&b.controlled&&"number"===o.type&&ee(o,"number",o.value)),b=a?yr(a):window,e){case"focusin":($n(b)||"true"===b.contentEditable)&&(ha=b,ba=a,ga=null);break;case"focusout":ga=ba=ha=null;break;case"mousedown":Ea=!0;break;case"contextmenu":case"mouseup":case"dragend":Ea=!1,ya(i,n,r);break;case"selectionchange":if(va)break;case"keydown":case"keyup":ya(i,n,r)}var g;if(Dn)e:{switch(e){case"compositionstart":var E="onCompositionStart";break e;case"compositionend":E="onCompositionEnd";break e;case"compositionupdate":E="onCompositionUpdate";break e}E=void 0}else Un?Fn(e,n)&&(E="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(E="onCompositionStart");E&&(Bn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==E?"onCompositionEnd"===E&&Un&&(g=en()):(Qt="value"in(Kt=r)?Kt.value:Kt.textContent,Un=!0)),0<(b=Ga(a,E)).length&&(E=new yn(E,e,null,n,r),i.push({event:E,listeners:b}),(g||null!==(g=Hn(n)))&&(E.data=g))),(g=Rn?function(e,t){switch(e){case"compositionend":return Hn(t);case"keypress":return 32!==t.which?null:(zn=!0,jn);case"textInput":return(e=t.data)===jn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Dn&&Fn(e,t)?(e=en(),Jt=Qt=Kt=null,Un=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Bn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(a=Ga(a,"onBeforeInput")).length&&(r=new yn("onBeforeInput","beforeinput",null,n,r),i.push({event:r,listeners:a}),r.data=g)}ja(i,t)}))}function Va(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ga(e,t){for(var n=t+"Capture",a=[];null!==e;){var r=e,l=r.stateNode;5===r.tag&&null!==l&&(r=l,null!=(l=Ne(e,n))&&a.unshift(Va(e,l,r)),null!=(l=Ne(e,t))&&a.push(Va(e,l,r))),e=e.return}return a}function qa(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Xa(e,t,n,a,r){for(var l=t._reactName,i=[];null!==n&&n!==a;){var o=n,u=o.alternate,c=o.stateNode;if(null!==u&&u===a)break;5===o.tag&&null!==c&&(o=c,r?null!=(u=Ne(n,l))&&i.unshift(Va(n,u,o)):r||null!=(u=Ne(n,l))&&i.push(Va(n,u,o))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Ya=/\r\n?/g,Za=/\u0000|\uFFFD/g;function Ka(e){return("string"==typeof e?e:""+e).replace(Ya,"\n").replace(Za,"")}function Qa(e,t,n){if(t=Ka(t),Ka(e)!==t&&n)throw Error(l(425))}function Ja(){}var er=null,tr=null;function nr(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ar="function"==typeof setTimeout?setTimeout:void 0,rr="function"==typeof clearTimeout?clearTimeout:void 0,lr="function"==typeof Promise?Promise:void 0,ir="function"==typeof queueMicrotask?queueMicrotask:void 0!==lr?function(e){return lr.resolve(null).then(e).catch(or)}:ar;function or(e){setTimeout((function(){throw e}))}function ur(e,t){var n=t,a=0;do{var r=n.nextSibling;if(e.removeChild(n),r&&8===r.nodeType)if("/$"===(n=r.data)){if(0===a)return e.removeChild(r),void Ut(t);a--}else"$"!==n&&"$?"!==n&&"$!"!==n||a++;n=r}while(n);Ut(t)}function cr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function sr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var dr=Math.random().toString(36).slice(2),fr="__reactFiber$"+dr,mr="__reactProps$"+dr,pr="__reactContainer$"+dr,vr="__reactEvents$"+dr,hr="__reactListeners$"+dr,br="__reactHandles$"+dr;function gr(e){var t=e[fr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[pr]||n[fr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=sr(e);null!==e;){if(n=e[fr])return n;e=sr(e)}return t}n=(e=n).parentNode}return null}function Er(e){return!(e=e[fr]||e[pr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function yr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(l(33))}function _r(e){return e[mr]||null}var Ar=[],Sr=-1;function Cr(e){return{current:e}}function wr(e){0>Sr||(e.current=Ar[Sr],Ar[Sr]=null,Sr--)}function xr(e,t){Sr++,Ar[Sr]=e.current,e.current=t}var Or={},Lr=Cr(Or),Tr=Cr(!1),Pr=Or;function kr(e,t){var n=e.type.contextTypes;if(!n)return Or;var a=e.stateNode;if(a&&a.__reactInternalMemoizedUnmaskedChildContext===t)return a.__reactInternalMemoizedMaskedChildContext;var r,l={};for(r in n)l[r]=t[r];return a&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=l),l}function Nr(e){return null!=e.childContextTypes}function Ir(){wr(Tr),wr(Lr)}function Dr(e,t,n){if(Lr.current!==Or)throw Error(l(168));xr(Lr,t),xr(Tr,n)}function Mr(e,t,n){var a=e.stateNode;if(t=t.childContextTypes,"function"!=typeof a.getChildContext)return n;for(var r in a=a.getChildContext())if(!(r in t))throw Error(l(108,W(e)||"Unknown",r));return B({},n,a)}function Rr(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Or,Pr=Lr.current,xr(Lr,e),xr(Tr,Tr.current),!0}function Br(e,t,n){var a=e.stateNode;if(!a)throw Error(l(169));n?(e=Mr(e,t,Pr),a.__reactInternalMemoizedMergedChildContext=e,wr(Tr),wr(Lr),xr(Lr,e)):wr(Tr),xr(Tr,n)}var jr=null,zr=!1,Fr=!1;function Hr(e){null===jr?jr=[e]:jr.push(e)}function Ur(){if(!Fr&&null!==jr){Fr=!0;var e=0,t=Et;try{var n=jr;for(Et=1;e<n.length;e++){var a=n[e];do{a=a(!0)}while(null!==a)}jr=null,zr=!1}catch(t){throw null!==jr&&(jr=jr.slice(e+1)),qe(Je,Ur),t}finally{Et=t,Fr=!1}}return null}var Wr=[],$r=0,Vr=null,Gr=0,qr=[],Xr=0,Yr=null,Zr=1,Kr="";function Qr(e,t){Wr[$r++]=Gr,Wr[$r++]=Vr,Vr=e,Gr=t}function Jr(e,t,n){qr[Xr++]=Zr,qr[Xr++]=Kr,qr[Xr++]=Yr,Yr=e;var a=Zr;e=Kr;var r=32-it(a)-1;a&=~(1<<r),n+=1;var l=32-it(t)+r;if(30<l){var i=r-r%5;l=(a&(1<<i)-1).toString(32),a>>=i,r-=i,Zr=1<<32-it(t)+r|n<<r|a,Kr=l+e}else Zr=1<<l|n<<r|a,Kr=e}function el(e){null!==e.return&&(Qr(e,1),Jr(e,1,0))}function tl(e){for(;e===Vr;)Vr=Wr[--$r],Wr[$r]=null,Gr=Wr[--$r],Wr[$r]=null;for(;e===Yr;)Yr=qr[--Xr],qr[Xr]=null,Kr=qr[--Xr],qr[Xr]=null,Zr=qr[--Xr],qr[Xr]=null}var nl=null,al=null,rl=!1,ll=null;function il(e,t){var n=kc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ol(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,nl=e,al=cr(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,nl=e,al=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Yr?{id:Zr,overflow:Kr}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=kc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,nl=e,al=null,!0);default:return!1}}function ul(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function cl(e){if(rl){var t=al;if(t){var n=t;if(!ol(e,t)){if(ul(e))throw Error(l(418));t=cr(n.nextSibling);var a=nl;t&&ol(e,t)?il(a,n):(e.flags=-4097&e.flags|2,rl=!1,nl=e)}}else{if(ul(e))throw Error(l(418));e.flags=-4097&e.flags|2,rl=!1,nl=e}}}function sl(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;nl=e}function dl(e){if(e!==nl)return!1;if(!rl)return sl(e),rl=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!nr(e.type,e.memoizedProps)),t&&(t=al)){if(ul(e))throw fl(),Error(l(418));for(;t;)il(e,t),t=cr(t.nextSibling)}if(sl(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){al=cr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}al=null}}else al=nl?cr(e.stateNode.nextSibling):null;return!0}function fl(){for(var e=al;e;)e=cr(e.nextSibling)}function ml(){al=nl=null,rl=!1}function pl(e){null===ll?ll=[e]:ll.push(e)}var vl=y.ReactCurrentBatchConfig;function hl(e,t){if(e&&e.defaultProps){for(var n in t=B({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var bl=Cr(null),gl=null,El=null,yl=null;function _l(){yl=El=gl=null}function Al(e){var t=bl.current;wr(bl),e._currentValue=t}function Sl(e,t,n){for(;null!==e;){var a=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==a&&(a.childLanes|=t)):null!==a&&(a.childLanes&t)!==t&&(a.childLanes|=t),e===n)break;e=e.return}}function Cl(e,t){gl=e,yl=El=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(yo=!0),e.firstContext=null)}function wl(e){var t=e._currentValue;if(yl!==e)if(e={context:e,memoizedValue:t,next:null},null===El){if(null===gl)throw Error(l(308));El=e,gl.dependencies={lanes:0,firstContext:e}}else El=El.next=e;return t}var xl=null;function Ol(e){null===xl?xl=[e]:xl.push(e)}function Ll(e,t,n,a){var r=t.interleaved;return null===r?(n.next=n,Ol(t)):(n.next=r.next,r.next=n),t.interleaved=n,Tl(e,a)}function Tl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Pl=!1;function kl(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Nl(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Il(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Dl(e,t,n){var a=e.updateQueue;if(null===a)return null;if(a=a.shared,0!=(2&Lu)){var r=a.pending;return null===r?t.next=t:(t.next=r.next,r.next=t),a.pending=t,Tl(e,n)}return null===(r=a.interleaved)?(t.next=t,Ol(a)):(t.next=r.next,r.next=t),a.interleaved=t,Tl(e,n)}function Ml(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var a=t.lanes;n|=a&=e.pendingLanes,t.lanes=n,gt(e,n)}}function Rl(e,t){var n=e.updateQueue,a=e.alternate;if(null!==a&&n===(a=a.updateQueue)){var r=null,l=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===l?r=l=i:l=l.next=i,n=n.next}while(null!==n);null===l?r=l=t:l=l.next=t}else r=l=t;return n={baseState:a.baseState,firstBaseUpdate:r,lastBaseUpdate:l,shared:a.shared,effects:a.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Bl(e,t,n,a){var r=e.updateQueue;Pl=!1;var l=r.firstBaseUpdate,i=r.lastBaseUpdate,o=r.shared.pending;if(null!==o){r.shared.pending=null;var u=o,c=u.next;u.next=null,null===i?l=c:i.next=c,i=u;var s=e.alternate;null!==s&&(o=(s=s.updateQueue).lastBaseUpdate)!==i&&(null===o?s.firstBaseUpdate=c:o.next=c,s.lastBaseUpdate=u)}if(null!==l){var d=r.baseState;for(i=0,s=c=u=null,o=l;;){var f=o.lane,m=o.eventTime;if((a&f)===f){null!==s&&(s=s.next={eventTime:m,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var p=e,v=o;switch(f=t,m=n,v.tag){case 1:if("function"==typeof(p=v.payload)){d=p.call(m,d,f);break e}d=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(f="function"==typeof(p=v.payload)?p.call(m,d,f):p))break e;d=B({},d,f);break e;case 2:Pl=!0}}null!==o.callback&&0!==o.lane&&(e.flags|=64,null===(f=r.effects)?r.effects=[o]:f.push(o))}else m={eventTime:m,lane:f,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===s?(c=s=m,u=d):s=s.next=m,i|=f;if(null===(o=o.next)){if(null===(o=r.shared.pending))break;o=(f=o).next,f.next=null,r.lastBaseUpdate=f,r.shared.pending=null}}if(null===s&&(u=d),r.baseState=u,r.firstBaseUpdate=c,r.lastBaseUpdate=s,null!==(t=r.shared.interleaved)){r=t;do{i|=r.lane,r=r.next}while(r!==t)}else null===l&&(r.shared.lanes=0);Ru|=i,e.lanes=i,e.memoizedState=d}}function jl(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var a=e[t],r=a.callback;if(null!==r){if(a.callback=null,a=n,"function"!=typeof r)throw Error(l(191,r));r.call(a)}}}var zl=(new a.Component).refs;function Fl(e,t,n,a){n=null==(n=n(a,t=e.memoizedState))?t:B({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Hl={isMounted:function(e){return!!(e=e._reactInternals)&&Ue(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var a=ec(),r=tc(e),l=Il(a,r);l.payload=t,null!=n&&(l.callback=n),null!==(t=Dl(e,l,r))&&(nc(t,e,r,a),Ml(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var a=ec(),r=tc(e),l=Il(a,r);l.tag=1,l.payload=t,null!=n&&(l.callback=n),null!==(t=Dl(e,l,r))&&(nc(t,e,r,a),Ml(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ec(),a=tc(e),r=Il(n,a);r.tag=2,null!=t&&(r.callback=t),null!==(t=Dl(e,r,a))&&(nc(t,e,a,n),Ml(t,e,a))}};function Ul(e,t,n,a,r,l,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(a,l,i):!(t.prototype&&t.prototype.isPureReactComponent&&ua(n,a)&&ua(r,l))}function Wl(e,t,n){var a=!1,r=Or,l=t.contextType;return"object"==typeof l&&null!==l?l=wl(l):(r=Nr(t)?Pr:Lr.current,l=(a=null!=(a=t.contextTypes))?kr(e,r):Or),t=new t(n,l),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Hl,e.stateNode=t,t._reactInternals=e,a&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=l),t}function $l(e,t,n,a){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,a),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,a),t.state!==e&&Hl.enqueueReplaceState(t,t.state,null)}function Vl(e,t,n,a){var r=e.stateNode;r.props=n,r.state=e.memoizedState,r.refs=zl,kl(e);var l=t.contextType;"object"==typeof l&&null!==l?r.context=wl(l):(l=Nr(t)?Pr:Lr.current,r.context=kr(e,l)),r.state=e.memoizedState,"function"==typeof(l=t.getDerivedStateFromProps)&&(Fl(e,t,l,n),r.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(t=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),t!==r.state&&Hl.enqueueReplaceState(r,r.state,null),Bl(e,n,r,a),r.state=e.memoizedState),"function"==typeof r.componentDidMount&&(e.flags|=4194308)}function Gl(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(l(309));var a=n.stateNode}if(!a)throw Error(l(147,e));var r=a,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=r.refs;t===zl&&(t=r.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(l(284));if(!n._owner)throw Error(l(290,e))}return e}function ql(e,t){throw e=Object.prototype.toString.call(t),Error(l(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Xl(e){return(0,e._init)(e._payload)}function Yl(e){function t(t,n){if(e){var a=t.deletions;null===a?(t.deletions=[n],t.flags|=16):a.push(n)}}function n(n,a){if(!e)return null;for(;null!==a;)t(n,a),a=a.sibling;return null}function a(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function r(e,t){return(e=Ic(e,t)).index=0,e.sibling=null,e}function i(t,n,a){return t.index=a,e?null!==(a=t.alternate)?(a=a.index)<n?(t.flags|=2,n):a:(t.flags|=2,n):(t.flags|=1048576,n)}function o(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,a){return null===t||6!==t.tag?((t=Bc(n,e.mode,a)).return=e,t):((t=r(t,n)).return=e,t)}function c(e,t,n,a){var l=n.type;return l===S?d(e,t,n.props.children,a,n.key):null!==t&&(t.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===N&&Xl(l)===t.type)?((a=r(t,n.props)).ref=Gl(e,t,n),a.return=e,a):((a=Dc(n.type,n.key,n.props,null,e.mode,a)).ref=Gl(e,t,n),a.return=e,a)}function s(e,t,n,a){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=jc(n,e.mode,a)).return=e,t):((t=r(t,n.children||[])).return=e,t)}function d(e,t,n,a,l){return null===t||7!==t.tag?((t=Mc(n,e.mode,a,l)).return=e,t):((t=r(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Bc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case _:return(n=Dc(t.type,t.key,t.props,null,e.mode,n)).ref=Gl(e,null,t),n.return=e,n;case A:return(t=jc(t,e.mode,n)).return=e,t;case N:return f(e,(0,t._init)(t._payload),n)}if(te(t)||M(t))return(t=Mc(t,e.mode,n,null)).return=e,t;ql(e,t)}return null}function m(e,t,n,a){var r=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==r?null:u(e,t,""+n,a);if("object"==typeof n&&null!==n){switch(n.$$typeof){case _:return n.key===r?c(e,t,n,a):null;case A:return n.key===r?s(e,t,n,a):null;case N:return m(e,t,(r=n._init)(n._payload),a)}if(te(n)||M(n))return null!==r?null:d(e,t,n,a,null);ql(e,n)}return null}function p(e,t,n,a,r){if("string"==typeof a&&""!==a||"number"==typeof a)return u(t,e=e.get(n)||null,""+a,r);if("object"==typeof a&&null!==a){switch(a.$$typeof){case _:return c(t,e=e.get(null===a.key?n:a.key)||null,a,r);case A:return s(t,e=e.get(null===a.key?n:a.key)||null,a,r);case N:return p(e,t,n,(0,a._init)(a._payload),r)}if(te(a)||M(a))return d(t,e=e.get(n)||null,a,r,null);ql(t,a)}return null}function v(r,l,o,u){for(var c=null,s=null,d=l,v=l=0,h=null;null!==d&&v<o.length;v++){d.index>v?(h=d,d=null):h=d.sibling;var b=m(r,d,o[v],u);if(null===b){null===d&&(d=h);break}e&&d&&null===b.alternate&&t(r,d),l=i(b,l,v),null===s?c=b:s.sibling=b,s=b,d=h}if(v===o.length)return n(r,d),rl&&Qr(r,v),c;if(null===d){for(;v<o.length;v++)null!==(d=f(r,o[v],u))&&(l=i(d,l,v),null===s?c=d:s.sibling=d,s=d);return rl&&Qr(r,v),c}for(d=a(r,d);v<o.length;v++)null!==(h=p(d,r,v,o[v],u))&&(e&&null!==h.alternate&&d.delete(null===h.key?v:h.key),l=i(h,l,v),null===s?c=h:s.sibling=h,s=h);return e&&d.forEach((function(e){return t(r,e)})),rl&&Qr(r,v),c}function h(r,o,u,c){var s=M(u);if("function"!=typeof s)throw Error(l(150));if(null==(u=s.call(u)))throw Error(l(151));for(var d=s=null,v=o,h=o=0,b=null,g=u.next();null!==v&&!g.done;h++,g=u.next()){v.index>h?(b=v,v=null):b=v.sibling;var E=m(r,v,g.value,c);if(null===E){null===v&&(v=b);break}e&&v&&null===E.alternate&&t(r,v),o=i(E,o,h),null===d?s=E:d.sibling=E,d=E,v=b}if(g.done)return n(r,v),rl&&Qr(r,h),s;if(null===v){for(;!g.done;h++,g=u.next())null!==(g=f(r,g.value,c))&&(o=i(g,o,h),null===d?s=g:d.sibling=g,d=g);return rl&&Qr(r,h),s}for(v=a(r,v);!g.done;h++,g=u.next())null!==(g=p(v,r,h,g.value,c))&&(e&&null!==g.alternate&&v.delete(null===g.key?h:g.key),o=i(g,o,h),null===d?s=g:d.sibling=g,d=g);return e&&v.forEach((function(e){return t(r,e)})),rl&&Qr(r,h),s}return function e(a,l,i,u){if("object"==typeof i&&null!==i&&i.type===S&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case _:e:{for(var c=i.key,s=l;null!==s;){if(s.key===c){if((c=i.type)===S){if(7===s.tag){n(a,s.sibling),(l=r(s,i.props.children)).return=a,a=l;break e}}else if(s.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===N&&Xl(c)===s.type){n(a,s.sibling),(l=r(s,i.props)).ref=Gl(a,s,i),l.return=a,a=l;break e}n(a,s);break}t(a,s),s=s.sibling}i.type===S?((l=Mc(i.props.children,a.mode,u,i.key)).return=a,a=l):((u=Dc(i.type,i.key,i.props,null,a.mode,u)).ref=Gl(a,l,i),u.return=a,a=u)}return o(a);case A:e:{for(s=i.key;null!==l;){if(l.key===s){if(4===l.tag&&l.stateNode.containerInfo===i.containerInfo&&l.stateNode.implementation===i.implementation){n(a,l.sibling),(l=r(l,i.children||[])).return=a,a=l;break e}n(a,l);break}t(a,l),l=l.sibling}(l=jc(i,a.mode,u)).return=a,a=l}return o(a);case N:return e(a,l,(s=i._init)(i._payload),u)}if(te(i))return v(a,l,i,u);if(M(i))return h(a,l,i,u);ql(a,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==l&&6===l.tag?(n(a,l.sibling),(l=r(l,i)).return=a,a=l):(n(a,l),(l=Bc(i,a.mode,u)).return=a,a=l),o(a)):n(a,l)}}var Zl=Yl(!0),Kl=Yl(!1),Ql={},Jl=Cr(Ql),ei=Cr(Ql),ti=Cr(Ql);function ni(e){if(e===Ql)throw Error(l(174));return e}function ai(e,t){switch(xr(ti,t),xr(ei,e),xr(Jl,Ql),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}wr(Jl),xr(Jl,t)}function ri(){wr(Jl),wr(ei),wr(ti)}function li(e){ni(ti.current);var t=ni(Jl.current),n=ue(t,e.type);t!==n&&(xr(ei,e),xr(Jl,n))}function ii(e){ei.current===e&&(wr(Jl),wr(ei))}var oi=Cr(0);function ui(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ci=[];function si(){for(var e=0;e<ci.length;e++)ci[e]._workInProgressVersionPrimary=null;ci.length=0}var di=y.ReactCurrentDispatcher,fi=y.ReactCurrentBatchConfig,mi=0,pi=null,vi=null,hi=null,bi=!1,gi=!1,Ei=0,yi=0;function _i(){throw Error(l(321))}function Ai(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!oa(e[n],t[n]))return!1;return!0}function Si(e,t,n,a,r,i){if(mi=i,pi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,di.current=null===e||null===e.memoizedState?io:oo,e=n(a,r),gi){i=0;do{if(gi=!1,Ei=0,25<=i)throw Error(l(301));i+=1,hi=vi=null,t.updateQueue=null,di.current=uo,e=n(a,r)}while(gi)}if(di.current=lo,t=null!==vi&&null!==vi.next,mi=0,hi=vi=pi=null,bi=!1,t)throw Error(l(300));return e}function Ci(){var e=0!==Ei;return Ei=0,e}function wi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===hi?pi.memoizedState=hi=e:hi=hi.next=e,hi}function xi(){if(null===vi){var e=pi.alternate;e=null!==e?e.memoizedState:null}else e=vi.next;var t=null===hi?pi.memoizedState:hi.next;if(null!==t)hi=t,vi=e;else{if(null===e)throw Error(l(310));e={memoizedState:(vi=e).memoizedState,baseState:vi.baseState,baseQueue:vi.baseQueue,queue:vi.queue,next:null},null===hi?pi.memoizedState=hi=e:hi=hi.next=e}return hi}function Oi(e,t){return"function"==typeof t?t(e):t}function Li(e){var t=xi(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var a=vi,r=a.baseQueue,i=n.pending;if(null!==i){if(null!==r){var o=r.next;r.next=i.next,i.next=o}a.baseQueue=r=i,n.pending=null}if(null!==r){i=r.next,a=a.baseState;var u=o=null,c=null,s=i;do{var d=s.lane;if((mi&d)===d)null!==c&&(c=c.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),a=s.hasEagerState?s.eagerState:e(a,s.action);else{var f={lane:d,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===c?(u=c=f,o=a):c=c.next=f,pi.lanes|=d,Ru|=d}s=s.next}while(null!==s&&s!==i);null===c?o=a:c.next=u,oa(a,t.memoizedState)||(yo=!0),t.memoizedState=a,t.baseState=o,t.baseQueue=c,n.lastRenderedState=a}if(null!==(e=n.interleaved)){r=e;do{i=r.lane,pi.lanes|=i,Ru|=i,r=r.next}while(r!==e)}else null===r&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ti(e){var t=xi(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var a=n.dispatch,r=n.pending,i=t.memoizedState;if(null!==r){n.pending=null;var o=r=r.next;do{i=e(i,o.action),o=o.next}while(o!==r);oa(i,t.memoizedState)||(yo=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,a]}function Pi(){}function ki(e,t){var n=pi,a=xi(),r=t(),i=!oa(a.memoizedState,r);if(i&&(a.memoizedState=r,yo=!0),a=a.queue,Wi(Di.bind(null,n,a,e),[e]),a.getSnapshot!==t||i||null!==hi&&1&hi.memoizedState.tag){if(n.flags|=2048,ji(9,Ii.bind(null,n,a,r,t),void 0,null),null===Tu)throw Error(l(349));0!=(30&mi)||Ni(n,t,r)}return r}function Ni(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=pi.updateQueue)?(t={lastEffect:null,stores:null},pi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ii(e,t,n,a){t.value=n,t.getSnapshot=a,Mi(t)&&Ri(e)}function Di(e,t,n){return n((function(){Mi(t)&&Ri(e)}))}function Mi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!oa(e,n)}catch(e){return!0}}function Ri(e){var t=Tl(e,1);null!==t&&nc(t,e,1,-1)}function Bi(e){var t=wi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Oi,lastRenderedState:e},t.queue=e,e=e.dispatch=to.bind(null,pi,e),[t.memoizedState,e]}function ji(e,t,n,a){return e={tag:e,create:t,destroy:n,deps:a,next:null},null===(t=pi.updateQueue)?(t={lastEffect:null,stores:null},pi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(a=n.next,n.next=e,e.next=a,t.lastEffect=e),e}function zi(){return xi().memoizedState}function Fi(e,t,n,a){var r=wi();pi.flags|=e,r.memoizedState=ji(1|t,n,void 0,void 0===a?null:a)}function Hi(e,t,n,a){var r=xi();a=void 0===a?null:a;var l=void 0;if(null!==vi){var i=vi.memoizedState;if(l=i.destroy,null!==a&&Ai(a,i.deps))return void(r.memoizedState=ji(t,n,l,a))}pi.flags|=e,r.memoizedState=ji(1|t,n,l,a)}function Ui(e,t){return Fi(8390656,8,e,t)}function Wi(e,t){return Hi(2048,8,e,t)}function $i(e,t){return Hi(4,2,e,t)}function Vi(e,t){return Hi(4,4,e,t)}function Gi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function qi(e,t,n){return n=null!=n?n.concat([e]):null,Hi(4,4,Gi.bind(null,t,e),n)}function Xi(){}function Yi(e,t){var n=xi();t=void 0===t?null:t;var a=n.memoizedState;return null!==a&&null!==t&&Ai(t,a[1])?a[0]:(n.memoizedState=[e,t],e)}function Zi(e,t){var n=xi();t=void 0===t?null:t;var a=n.memoizedState;return null!==a&&null!==t&&Ai(t,a[1])?a[0]:(e=e(),n.memoizedState=[e,t],e)}function Ki(e,t,n){return 0==(21&mi)?(e.baseState&&(e.baseState=!1,yo=!0),e.memoizedState=n):(oa(n,t)||(n=vt(),pi.lanes|=n,Ru|=n,e.baseState=!0),t)}function Qi(e,t){var n=Et;Et=0!==n&&4>n?n:4,e(!0);var a=fi.transition;fi.transition={};try{e(!1),t()}finally{Et=n,fi.transition=a}}function Ji(){return xi().memoizedState}function eo(e,t,n){var a=tc(e);n={lane:a,action:n,hasEagerState:!1,eagerState:null,next:null},no(e)?ao(t,n):null!==(n=Ll(e,t,n,a))&&(nc(n,e,a,ec()),ro(n,t,a))}function to(e,t,n){var a=tc(e),r={lane:a,action:n,hasEagerState:!1,eagerState:null,next:null};if(no(e))ao(t,r);else{var l=e.alternate;if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=t.lastRenderedReducer))try{var i=t.lastRenderedState,o=l(i,n);if(r.hasEagerState=!0,r.eagerState=o,oa(o,i)){var u=t.interleaved;return null===u?(r.next=r,Ol(t)):(r.next=u.next,u.next=r),void(t.interleaved=r)}}catch(e){}null!==(n=Ll(e,t,r,a))&&(nc(n,e,a,r=ec()),ro(n,t,a))}}function no(e){var t=e.alternate;return e===pi||null!==t&&t===pi}function ao(e,t){gi=bi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function ro(e,t,n){if(0!=(4194240&n)){var a=t.lanes;n|=a&=e.pendingLanes,t.lanes=n,gt(e,n)}}var lo={readContext:wl,useCallback:_i,useContext:_i,useEffect:_i,useImperativeHandle:_i,useInsertionEffect:_i,useLayoutEffect:_i,useMemo:_i,useReducer:_i,useRef:_i,useState:_i,useDebugValue:_i,useDeferredValue:_i,useTransition:_i,useMutableSource:_i,useSyncExternalStore:_i,useId:_i,unstable_isNewReconciler:!1},io={readContext:wl,useCallback:function(e,t){return wi().memoizedState=[e,void 0===t?null:t],e},useContext:wl,useEffect:Ui,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Fi(4194308,4,Gi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Fi(4194308,4,e,t)},useInsertionEffect:function(e,t){return Fi(4,2,e,t)},useMemo:function(e,t){var n=wi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var a=wi();return t=void 0!==n?n(t):t,a.memoizedState=a.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},a.queue=e,e=e.dispatch=eo.bind(null,pi,e),[a.memoizedState,e]},useRef:function(e){return e={current:e},wi().memoizedState=e},useState:Bi,useDebugValue:Xi,useDeferredValue:function(e){return wi().memoizedState=e},useTransition:function(){var e=Bi(!1),t=e[0];return e=Qi.bind(null,e[1]),wi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var a=pi,r=wi();if(rl){if(void 0===n)throw Error(l(407));n=n()}else{if(n=t(),null===Tu)throw Error(l(349));0!=(30&mi)||Ni(a,t,n)}r.memoizedState=n;var i={value:n,getSnapshot:t};return r.queue=i,Ui(Di.bind(null,a,i,e),[e]),a.flags|=2048,ji(9,Ii.bind(null,a,i,n,t),void 0,null),n},useId:function(){var e=wi(),t=Tu.identifierPrefix;if(rl){var n=Kr;t=":"+t+"R"+(n=(Zr&~(1<<32-it(Zr)-1)).toString(32)+n),0<(n=Ei++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=yi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},oo={readContext:wl,useCallback:Yi,useContext:wl,useEffect:Wi,useImperativeHandle:qi,useInsertionEffect:$i,useLayoutEffect:Vi,useMemo:Zi,useReducer:Li,useRef:zi,useState:function(){return Li(Oi)},useDebugValue:Xi,useDeferredValue:function(e){return Ki(xi(),vi.memoizedState,e)},useTransition:function(){return[Li(Oi)[0],xi().memoizedState]},useMutableSource:Pi,useSyncExternalStore:ki,useId:Ji,unstable_isNewReconciler:!1},uo={readContext:wl,useCallback:Yi,useContext:wl,useEffect:Wi,useImperativeHandle:qi,useInsertionEffect:$i,useLayoutEffect:Vi,useMemo:Zi,useReducer:Ti,useRef:zi,useState:function(){return Ti(Oi)},useDebugValue:Xi,useDeferredValue:function(e){var t=xi();return null===vi?t.memoizedState=e:Ki(t,vi.memoizedState,e)},useTransition:function(){return[Ti(Oi)[0],xi().memoizedState]},useMutableSource:Pi,useSyncExternalStore:ki,useId:Ji,unstable_isNewReconciler:!1};function co(e,t){try{var n="",a=t;do{n+=H(a),a=a.return}while(a);var r=n}catch(e){r="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:r,digest:null}}function so(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fo(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var mo="function"==typeof WeakMap?WeakMap:Map;function po(e,t,n){(n=Il(-1,n)).tag=3,n.payload={element:null};var a=t.value;return n.callback=function(){$u||($u=!0,Vu=a),fo(0,t)},n}function vo(e,t,n){(n=Il(-1,n)).tag=3;var a=e.type.getDerivedStateFromError;if("function"==typeof a){var r=t.value;n.payload=function(){return a(r)},n.callback=function(){fo(0,t)}}var l=e.stateNode;return null!==l&&"function"==typeof l.componentDidCatch&&(n.callback=function(){fo(0,t),"function"!=typeof a&&(null===Gu?Gu=new Set([this]):Gu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ho(e,t,n){var a=e.pingCache;if(null===a){a=e.pingCache=new mo;var r=new Set;a.set(t,r)}else void 0===(r=a.get(t))&&(r=new Set,a.set(t,r));r.has(n)||(r.add(n),e=wc.bind(null,e,t,n),t.then(e,e))}function bo(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function go(e,t,n,a,r){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Il(-1,1)).tag=2,Dl(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=r,e)}var Eo=y.ReactCurrentOwner,yo=!1;function _o(e,t,n,a){t.child=null===e?Kl(t,null,n,a):Zl(t,e.child,n,a)}function Ao(e,t,n,a,r){n=n.render;var l=t.ref;return Cl(t,r),a=Si(e,t,n,a,l,r),n=Ci(),null===e||yo?(rl&&n&&el(t),t.flags|=1,_o(e,t,a,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~r,$o(e,t,r))}function So(e,t,n,a,r){if(null===e){var l=n.type;return"function"!=typeof l||Nc(l)||void 0!==l.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Dc(n.type,null,a,t,t.mode,r)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=l,Co(e,t,l,a,r))}if(l=e.child,0==(e.lanes&r)){var i=l.memoizedProps;if((n=null!==(n=n.compare)?n:ua)(i,a)&&e.ref===t.ref)return $o(e,t,r)}return t.flags|=1,(e=Ic(l,a)).ref=t.ref,e.return=t,t.child=e}function Co(e,t,n,a,r){if(null!==e){var l=e.memoizedProps;if(ua(l,a)&&e.ref===t.ref){if(yo=!1,t.pendingProps=a=l,0==(e.lanes&r))return t.lanes=e.lanes,$o(e,t,r);0!=(131072&e.flags)&&(yo=!0)}}return Oo(e,t,n,a,r)}function wo(e,t,n){var a=t.pendingProps,r=a.children,l=null!==e?e.memoizedState:null;if("hidden"===a.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},xr(Iu,Nu),Nu|=n;else{if(0==(1073741824&n))return e=null!==l?l.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,xr(Iu,Nu),Nu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},a=null!==l?l.baseLanes:n,xr(Iu,Nu),Nu|=a}else null!==l?(a=l.baseLanes|n,t.memoizedState=null):a=n,xr(Iu,Nu),Nu|=a;return _o(e,t,r,n),t.child}function xo(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Oo(e,t,n,a,r){var l=Nr(n)?Pr:Lr.current;return l=kr(t,l),Cl(t,r),n=Si(e,t,n,a,l,r),a=Ci(),null===e||yo?(rl&&a&&el(t),t.flags|=1,_o(e,t,n,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~r,$o(e,t,r))}function Lo(e,t,n,a,r){if(Nr(n)){var l=!0;Rr(t)}else l=!1;if(Cl(t,r),null===t.stateNode)Wo(e,t),Wl(t,n,a),Vl(t,n,a,r),a=!0;else if(null===e){var i=t.stateNode,o=t.memoizedProps;i.props=o;var u=i.context,c=n.contextType;c="object"==typeof c&&null!==c?wl(c):kr(t,c=Nr(n)?Pr:Lr.current);var s=n.getDerivedStateFromProps,d="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==a||u!==c)&&$l(t,i,a,c),Pl=!1;var f=t.memoizedState;i.state=f,Bl(t,a,i,r),u=t.memoizedState,o!==a||f!==u||Tr.current||Pl?("function"==typeof s&&(Fl(t,n,s,a),u=t.memoizedState),(o=Pl||Ul(t,n,o,a,f,u,c))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=a,t.memoizedState=u),i.props=a,i.state=u,i.context=c,a=o):("function"==typeof i.componentDidMount&&(t.flags|=4194308),a=!1)}else{i=t.stateNode,Nl(e,t),o=t.memoizedProps,c=t.type===t.elementType?o:hl(t.type,o),i.props=c,d=t.pendingProps,f=i.context,u="object"==typeof(u=n.contextType)&&null!==u?wl(u):kr(t,u=Nr(n)?Pr:Lr.current);var m=n.getDerivedStateFromProps;(s="function"==typeof m||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==d||f!==u)&&$l(t,i,a,u),Pl=!1,f=t.memoizedState,i.state=f,Bl(t,a,i,r);var p=t.memoizedState;o!==d||f!==p||Tr.current||Pl?("function"==typeof m&&(Fl(t,n,m,a),p=t.memoizedState),(c=Pl||Ul(t,n,c,a,f,p,u)||!1)?(s||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(a,p,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(a,p,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=a,t.memoizedState=p),i.props=a,i.state=p,i.context=u,a=c):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),a=!1)}return To(e,t,n,a,l,r)}function To(e,t,n,a,r,l){xo(e,t);var i=0!=(128&t.flags);if(!a&&!i)return r&&Br(t,n,!1),$o(e,t,l);a=t.stateNode,Eo.current=t;var o=i&&"function"!=typeof n.getDerivedStateFromError?null:a.render();return t.flags|=1,null!==e&&i?(t.child=Zl(t,e.child,null,l),t.child=Zl(t,null,o,l)):_o(e,t,o,l),t.memoizedState=a.state,r&&Br(t,n,!0),t.child}function Po(e){var t=e.stateNode;t.pendingContext?Dr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Dr(0,t.context,!1),ai(e,t.containerInfo)}function ko(e,t,n,a,r){return ml(),pl(r),t.flags|=256,_o(e,t,n,a),t.child}var No,Io,Do,Mo={dehydrated:null,treeContext:null,retryLane:0};function Ro(e){return{baseLanes:e,cachePool:null,transitions:null}}function Bo(e,t,n){var a,r=t.pendingProps,i=oi.current,o=!1,u=0!=(128&t.flags);if((a=u)||(a=(null===e||null!==e.memoizedState)&&0!=(2&i)),a?(o=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),xr(oi,1&i),null===e)return cl(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=r.children,e=r.fallback,o?(r=t.mode,o=t.child,u={mode:"hidden",children:u},0==(1&r)&&null!==o?(o.childLanes=0,o.pendingProps=u):o=Rc(u,r,0,null),e=Mc(e,r,n,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=Ro(n),t.memoizedState=Mo,e):jo(t,u));if(null!==(i=e.memoizedState)&&null!==(a=i.dehydrated))return function(e,t,n,a,r,i,o){if(n)return 256&t.flags?(t.flags&=-257,zo(e,t,o,a=so(Error(l(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=a.fallback,r=t.mode,a=Rc({mode:"visible",children:a.children},r,0,null),(i=Mc(i,r,o,null)).flags|=2,a.return=t,i.return=t,a.sibling=i,t.child=a,0!=(1&t.mode)&&Zl(t,e.child,null,o),t.child.memoizedState=Ro(o),t.memoizedState=Mo,i);if(0==(1&t.mode))return zo(e,t,o,null);if("$!"===r.data){if(a=r.nextSibling&&r.nextSibling.dataset)var u=a.dgst;return a=u,zo(e,t,o,a=so(i=Error(l(419)),a,void 0))}if(u=0!=(o&e.childLanes),yo||u){if(null!==(a=Tu)){switch(o&-o){case 4:r=2;break;case 16:r=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:r=32;break;case 536870912:r=268435456;break;default:r=0}0!==(r=0!=(r&(a.suspendedLanes|o))?0:r)&&r!==i.retryLane&&(i.retryLane=r,Tl(e,r),nc(a,e,r,-1))}return vc(),zo(e,t,o,a=so(Error(l(421))))}return"$?"===r.data?(t.flags|=128,t.child=e.child,t=Oc.bind(null,e),r._reactRetry=t,null):(e=i.treeContext,al=cr(r.nextSibling),nl=t,rl=!0,ll=null,null!==e&&(qr[Xr++]=Zr,qr[Xr++]=Kr,qr[Xr++]=Yr,Zr=e.id,Kr=e.overflow,Yr=t),(t=jo(t,a.children)).flags|=4096,t)}(e,t,u,r,a,i,n);if(o){o=r.fallback,u=t.mode,a=(i=e.child).sibling;var c={mode:"hidden",children:r.children};return 0==(1&u)&&t.child!==i?((r=t.child).childLanes=0,r.pendingProps=c,t.deletions=null):(r=Ic(i,c)).subtreeFlags=14680064&i.subtreeFlags,null!==a?o=Ic(a,o):(o=Mc(o,u,n,null)).flags|=2,o.return=t,r.return=t,r.sibling=o,t.child=r,r=o,o=t.child,u=null===(u=e.child.memoizedState)?Ro(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},o.memoizedState=u,o.childLanes=e.childLanes&~n,t.memoizedState=Mo,r}return e=(o=e.child).sibling,r=Ic(o,{mode:"visible",children:r.children}),0==(1&t.mode)&&(r.lanes=n),r.return=t,r.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function jo(e,t){return(t=Rc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function zo(e,t,n,a){return null!==a&&pl(a),Zl(t,e.child,null,n),(e=jo(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Fo(e,t,n){e.lanes|=t;var a=e.alternate;null!==a&&(a.lanes|=t),Sl(e.return,t,n)}function Ho(e,t,n,a,r){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:a,tail:n,tailMode:r}:(l.isBackwards=t,l.rendering=null,l.renderingStartTime=0,l.last=a,l.tail=n,l.tailMode=r)}function Uo(e,t,n){var a=t.pendingProps,r=a.revealOrder,l=a.tail;if(_o(e,t,a.children,n),0!=(2&(a=oi.current)))a=1&a|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Fo(e,n,t);else if(19===e.tag)Fo(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}a&=1}if(xr(oi,a),0==(1&t.mode))t.memoizedState=null;else switch(r){case"forwards":for(n=t.child,r=null;null!==n;)null!==(e=n.alternate)&&null===ui(e)&&(r=n),n=n.sibling;null===(n=r)?(r=t.child,t.child=null):(r=n.sibling,n.sibling=null),Ho(t,!1,r,n,l);break;case"backwards":for(n=null,r=t.child,t.child=null;null!==r;){if(null!==(e=r.alternate)&&null===ui(e)){t.child=r;break}e=r.sibling,r.sibling=n,n=r,r=e}Ho(t,!0,n,null,l);break;case"together":Ho(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Wo(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function $o(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ru|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(l(153));if(null!==t.child){for(n=Ic(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ic(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Vo(e,t){if(!rl)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var a=null;null!==n;)null!==n.alternate&&(a=n),n=n.sibling;null===a?t||null===e.tail?e.tail=null:e.tail.sibling=null:a.sibling=null}}function Go(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,a=0;if(t)for(var r=e.child;null!==r;)n|=r.lanes|r.childLanes,a|=14680064&r.subtreeFlags,a|=14680064&r.flags,r.return=e,r=r.sibling;else for(r=e.child;null!==r;)n|=r.lanes|r.childLanes,a|=r.subtreeFlags,a|=r.flags,r.return=e,r=r.sibling;return e.subtreeFlags|=a,e.childLanes=n,t}function qo(e,t,n){var a=t.pendingProps;switch(tl(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Go(t),null;case 1:case 17:return Nr(t.type)&&Ir(),Go(t),null;case 3:return a=t.stateNode,ri(),wr(Tr),wr(Lr),si(),a.pendingContext&&(a.context=a.pendingContext,a.pendingContext=null),null!==e&&null!==e.child||(dl(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ll&&(ic(ll),ll=null))),Go(t),null;case 5:ii(t);var r=ni(ti.current);if(n=t.type,null!==e&&null!=t.stateNode)Io(e,t,n,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!a){if(null===t.stateNode)throw Error(l(166));return Go(t),null}if(e=ni(Jl.current),dl(t)){a=t.stateNode,n=t.type;var i=t.memoizedProps;switch(a[fr]=t,a[mr]=i,e=0!=(1&t.mode),n){case"dialog":za("cancel",a),za("close",a);break;case"iframe":case"object":case"embed":za("load",a);break;case"video":case"audio":for(r=0;r<Ma.length;r++)za(Ma[r],a);break;case"source":za("error",a);break;case"img":case"image":case"link":za("error",a),za("load",a);break;case"details":za("toggle",a);break;case"input":Z(a,i),za("invalid",a);break;case"select":a._wrapperState={wasMultiple:!!i.multiple},za("invalid",a);break;case"textarea":re(a,i),za("invalid",a)}for(var u in ge(n,i),r=null,i)if(i.hasOwnProperty(u)){var c=i[u];"children"===u?"string"==typeof c?a.textContent!==c&&(!0!==i.suppressHydrationWarning&&Qa(a.textContent,c,e),r=["children",c]):"number"==typeof c&&a.textContent!==""+c&&(!0!==i.suppressHydrationWarning&&Qa(a.textContent,c,e),r=["children",""+c]):o.hasOwnProperty(u)&&null!=c&&"onScroll"===u&&za("scroll",a)}switch(n){case"input":G(a),J(a,i,!0);break;case"textarea":G(a),ie(a);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(a.onclick=Ja)}a=r,t.updateQueue=a,null!==a&&(t.flags|=4)}else{u=9===r.nodeType?r:r.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=oe(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof a.is?e=u.createElement(n,{is:a.is}):(e=u.createElement(n),"select"===n&&(u=e,a.multiple?u.multiple=!0:a.size&&(u.size=a.size))):e=u.createElementNS(e,n),e[fr]=t,e[mr]=a,No(e,t),t.stateNode=e;e:{switch(u=Ee(n,a),n){case"dialog":za("cancel",e),za("close",e),r=a;break;case"iframe":case"object":case"embed":za("load",e),r=a;break;case"video":case"audio":for(r=0;r<Ma.length;r++)za(Ma[r],e);r=a;break;case"source":za("error",e),r=a;break;case"img":case"image":case"link":za("error",e),za("load",e),r=a;break;case"details":za("toggle",e),r=a;break;case"input":Z(e,a),r=Y(e,a),za("invalid",e);break;case"option":default:r=a;break;case"select":e._wrapperState={wasMultiple:!!a.multiple},r=B({},a,{value:void 0}),za("invalid",e);break;case"textarea":re(e,a),r=ae(e,a),za("invalid",e)}for(i in ge(n,r),c=r)if(c.hasOwnProperty(i)){var s=c[i];"style"===i?he(e,s):"dangerouslySetInnerHTML"===i?null!=(s=s?s.__html:void 0)&&de(e,s):"children"===i?"string"==typeof s?("textarea"!==n||""!==s)&&fe(e,s):"number"==typeof s&&fe(e,""+s):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(o.hasOwnProperty(i)?null!=s&&"onScroll"===i&&za("scroll",e):null!=s&&E(e,i,s,u))}switch(n){case"input":G(e),J(e,a,!1);break;case"textarea":G(e),ie(e);break;case"option":null!=a.value&&e.setAttribute("value",""+$(a.value));break;case"select":e.multiple=!!a.multiple,null!=(i=a.value)?ne(e,!!a.multiple,i,!1):null!=a.defaultValue&&ne(e,!!a.multiple,a.defaultValue,!0);break;default:"function"==typeof r.onClick&&(e.onclick=Ja)}switch(n){case"button":case"input":case"select":case"textarea":a=!!a.autoFocus;break e;case"img":a=!0;break e;default:a=!1}}a&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Go(t),null;case 6:if(e&&null!=t.stateNode)Do(0,t,e.memoizedProps,a);else{if("string"!=typeof a&&null===t.stateNode)throw Error(l(166));if(n=ni(ti.current),ni(Jl.current),dl(t)){if(a=t.stateNode,n=t.memoizedProps,a[fr]=t,(i=a.nodeValue!==n)&&null!==(e=nl))switch(e.tag){case 3:Qa(a.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Qa(a.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(a=(9===n.nodeType?n:n.ownerDocument).createTextNode(a))[fr]=t,t.stateNode=a}return Go(t),null;case 13:if(wr(oi),a=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(rl&&null!==al&&0!=(1&t.mode)&&0==(128&t.flags))fl(),ml(),t.flags|=98560,i=!1;else if(i=dl(t),null!==a&&null!==a.dehydrated){if(null===e){if(!i)throw Error(l(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(l(317));i[fr]=t}else ml(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Go(t),i=!1}else null!==ll&&(ic(ll),ll=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((a=null!==a)!=(null!==e&&null!==e.memoizedState)&&a&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&oi.current)?0===Du&&(Du=3):vc())),null!==t.updateQueue&&(t.flags|=4),Go(t),null);case 4:return ri(),null===e&&Ua(t.stateNode.containerInfo),Go(t),null;case 10:return Al(t.type._context),Go(t),null;case 19:if(wr(oi),null===(i=t.memoizedState))return Go(t),null;if(a=0!=(128&t.flags),null===(u=i.rendering))if(a)Vo(i,!1);else{if(0!==Du||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=ui(e))){for(t.flags|=128,Vo(i,!1),null!==(a=u.updateQueue)&&(t.updateQueue=a,t.flags|=4),t.subtreeFlags=0,a=n,n=t.child;null!==n;)e=a,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return xr(oi,1&oi.current|2),t.child}e=e.sibling}null!==i.tail&&Ke()>Uu&&(t.flags|=128,a=!0,Vo(i,!1),t.lanes=4194304)}else{if(!a)if(null!==(e=ui(u))){if(t.flags|=128,a=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Vo(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!rl)return Go(t),null}else 2*Ke()-i.renderingStartTime>Uu&&1073741824!==n&&(t.flags|=128,a=!0,Vo(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ke(),t.sibling=null,n=oi.current,xr(oi,a?1&n|2:1&n),t):(Go(t),null);case 22:case 23:return dc(),a=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==a&&(t.flags|=8192),a&&0!=(1&t.mode)?0!=(1073741824&Nu)&&(Go(t),6&t.subtreeFlags&&(t.flags|=8192)):Go(t),null;case 24:case 25:return null}throw Error(l(156,t.tag))}function Xo(e,t){switch(tl(t),t.tag){case 1:return Nr(t.type)&&Ir(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ri(),wr(Tr),wr(Lr),si(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return ii(t),null;case 13:if(wr(oi),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(l(340));ml()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return wr(oi),null;case 4:return ri(),null;case 10:return Al(t.type._context),null;case 22:case 23:return dc(),null;default:return null}}No=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Io=function(e,t,n,a){var r=e.memoizedProps;if(r!==a){e=t.stateNode,ni(Jl.current);var l,i=null;switch(n){case"input":r=Y(e,r),a=Y(e,a),i=[];break;case"select":r=B({},r,{value:void 0}),a=B({},a,{value:void 0}),i=[];break;case"textarea":r=ae(e,r),a=ae(e,a),i=[];break;default:"function"!=typeof r.onClick&&"function"==typeof a.onClick&&(e.onclick=Ja)}for(s in ge(n,a),n=null,r)if(!a.hasOwnProperty(s)&&r.hasOwnProperty(s)&&null!=r[s])if("style"===s){var u=r[s];for(l in u)u.hasOwnProperty(l)&&(n||(n={}),n[l]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(o.hasOwnProperty(s)?i||(i=[]):(i=i||[]).push(s,null));for(s in a){var c=a[s];if(u=null!=r?r[s]:void 0,a.hasOwnProperty(s)&&c!==u&&(null!=c||null!=u))if("style"===s)if(u){for(l in u)!u.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in c)c.hasOwnProperty(l)&&u[l]!==c[l]&&(n||(n={}),n[l]=c[l])}else n||(i||(i=[]),i.push(s,n)),n=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(i=i||[]).push(s,c)):"children"===s?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(o.hasOwnProperty(s)?(null!=c&&"onScroll"===s&&za("scroll",e),i||u===c||(i=[])):(i=i||[]).push(s,c))}n&&(i=i||[]).push("style",n);var s=i;(t.updateQueue=s)&&(t.flags|=4)}},Do=function(e,t,n,a){n!==a&&(t.flags|=4)};var Yo=!1,Zo=!1,Ko="function"==typeof WeakSet?WeakSet:Set,Qo=null;function Jo(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Cc(e,t,n)}else n.current=null}function eu(e,t,n){try{n()}catch(n){Cc(e,t,n)}}var tu=!1;function nu(e,t,n){var a=t.updateQueue;if(null!==(a=null!==a?a.lastEffect:null)){var r=a=a.next;do{if((r.tag&e)===e){var l=r.destroy;r.destroy=void 0,void 0!==l&&eu(t,n,l)}r=r.next}while(r!==a)}}function au(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var a=n.create;n.destroy=a()}n=n.next}while(n!==t)}}function ru(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function lu(e){var t=e.alternate;null!==t&&(e.alternate=null,lu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fr],delete t[mr],delete t[vr],delete t[hr],delete t[br]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function iu(e){return 5===e.tag||3===e.tag||4===e.tag}function ou(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||iu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uu(e,t,n){var a=e.tag;if(5===a||6===a)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Ja));else if(4!==a&&null!==(e=e.child))for(uu(e,t,n),e=e.sibling;null!==e;)uu(e,t,n),e=e.sibling}function cu(e,t,n){var a=e.tag;if(5===a||6===a)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==a&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}var su=null,du=!1;function fu(e,t,n){for(n=n.child;null!==n;)mu(e,t,n),n=n.sibling}function mu(e,t,n){if(lt&&"function"==typeof lt.onCommitFiberUnmount)try{lt.onCommitFiberUnmount(rt,n)}catch(e){}switch(n.tag){case 5:Zo||Jo(n,t);case 6:var a=su,r=du;su=null,fu(e,t,n),du=r,null!==(su=a)&&(du?(e=su,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):su.removeChild(n.stateNode));break;case 18:null!==su&&(du?(e=su,n=n.stateNode,8===e.nodeType?ur(e.parentNode,n):1===e.nodeType&&ur(e,n),Ut(e)):ur(su,n.stateNode));break;case 4:a=su,r=du,su=n.stateNode.containerInfo,du=!0,fu(e,t,n),su=a,du=r;break;case 0:case 11:case 14:case 15:if(!Zo&&null!==(a=n.updateQueue)&&null!==(a=a.lastEffect)){r=a=a.next;do{var l=r,i=l.destroy;l=l.tag,void 0!==i&&(0!=(2&l)||0!=(4&l))&&eu(n,t,i),r=r.next}while(r!==a)}fu(e,t,n);break;case 1:if(!Zo&&(Jo(n,t),"function"==typeof(a=n.stateNode).componentWillUnmount))try{a.props=n.memoizedProps,a.state=n.memoizedState,a.componentWillUnmount()}catch(e){Cc(n,t,e)}fu(e,t,n);break;case 21:fu(e,t,n);break;case 22:1&n.mode?(Zo=(a=Zo)||null!==n.memoizedState,fu(e,t,n),Zo=a):fu(e,t,n);break;default:fu(e,t,n)}}function pu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ko),t.forEach((function(t){var a=Lc.bind(null,e,t);n.has(t)||(n.add(t),t.then(a,a))}))}}function vu(e,t){var n=t.deletions;if(null!==n)for(var a=0;a<n.length;a++){var r=n[a];try{var i=e,o=t,u=o;e:for(;null!==u;){switch(u.tag){case 5:su=u.stateNode,du=!1;break e;case 3:case 4:su=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===su)throw Error(l(160));mu(i,o,r),su=null,du=!1;var c=r.alternate;null!==c&&(c.return=null),r.return=null}catch(e){Cc(r,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)hu(t,e),t=t.sibling}function hu(e,t){var n=e.alternate,a=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vu(t,e),bu(e),4&a){try{nu(3,e,e.return),au(3,e)}catch(t){Cc(e,e.return,t)}try{nu(5,e,e.return)}catch(t){Cc(e,e.return,t)}}break;case 1:vu(t,e),bu(e),512&a&&null!==n&&Jo(n,n.return);break;case 5:if(vu(t,e),bu(e),512&a&&null!==n&&Jo(n,n.return),32&e.flags){var r=e.stateNode;try{fe(r,"")}catch(t){Cc(e,e.return,t)}}if(4&a&&null!=(r=e.stateNode)){var i=e.memoizedProps,o=null!==n?n.memoizedProps:i,u=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===u&&"radio"===i.type&&null!=i.name&&K(r,i),Ee(u,o);var s=Ee(u,i);for(o=0;o<c.length;o+=2){var d=c[o],f=c[o+1];"style"===d?he(r,f):"dangerouslySetInnerHTML"===d?de(r,f):"children"===d?fe(r,f):E(r,d,f,s)}switch(u){case"input":Q(r,i);break;case"textarea":le(r,i);break;case"select":var m=r._wrapperState.wasMultiple;r._wrapperState.wasMultiple=!!i.multiple;var p=i.value;null!=p?ne(r,!!i.multiple,p,!1):m!==!!i.multiple&&(null!=i.defaultValue?ne(r,!!i.multiple,i.defaultValue,!0):ne(r,!!i.multiple,i.multiple?[]:"",!1))}r[mr]=i}catch(t){Cc(e,e.return,t)}}break;case 6:if(vu(t,e),bu(e),4&a){if(null===e.stateNode)throw Error(l(162));r=e.stateNode,i=e.memoizedProps;try{r.nodeValue=i}catch(t){Cc(e,e.return,t)}}break;case 3:if(vu(t,e),bu(e),4&a&&null!==n&&n.memoizedState.isDehydrated)try{Ut(t.containerInfo)}catch(t){Cc(e,e.return,t)}break;case 4:default:vu(t,e),bu(e);break;case 13:vu(t,e),bu(e),8192&(r=e.child).flags&&(i=null!==r.memoizedState,r.stateNode.isHidden=i,!i||null!==r.alternate&&null!==r.alternate.memoizedState||(Hu=Ke())),4&a&&pu(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Zo=(s=Zo)||d,vu(t,e),Zo=s):vu(t,e),bu(e),8192&a){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!d&&0!=(1&e.mode))for(Qo=e,d=e.child;null!==d;){for(f=Qo=d;null!==Qo;){switch(p=(m=Qo).child,m.tag){case 0:case 11:case 14:case 15:nu(4,m,m.return);break;case 1:Jo(m,m.return);var v=m.stateNode;if("function"==typeof v.componentWillUnmount){a=m,n=m.return;try{t=a,v.props=t.memoizedProps,v.state=t.memoizedState,v.componentWillUnmount()}catch(e){Cc(a,n,e)}}break;case 5:Jo(m,m.return);break;case 22:if(null!==m.memoizedState){_u(f);continue}}null!==p?(p.return=m,Qo=p):_u(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{r=f.stateNode,s?"function"==typeof(i=r.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=f.stateNode,o=null!=(c=f.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,u.style.display=ve("display",o))}catch(t){Cc(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=s?"":f.memoizedProps}catch(t){Cc(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:vu(t,e),bu(e),4&a&&pu(e);case 21:}}function bu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(iu(n)){var a=n;break e}n=n.return}throw Error(l(160))}switch(a.tag){case 5:var r=a.stateNode;32&a.flags&&(fe(r,""),a.flags&=-33),cu(e,ou(e),r);break;case 3:case 4:var i=a.stateNode.containerInfo;uu(e,ou(e),i);break;default:throw Error(l(161))}}catch(t){Cc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gu(e,t,n){Qo=e,Eu(e,t,n)}function Eu(e,t,n){for(var a=0!=(1&e.mode);null!==Qo;){var r=Qo,l=r.child;if(22===r.tag&&a){var i=null!==r.memoizedState||Yo;if(!i){var o=r.alternate,u=null!==o&&null!==o.memoizedState||Zo;o=Yo;var c=Zo;if(Yo=i,(Zo=u)&&!c)for(Qo=r;null!==Qo;)u=(i=Qo).child,22===i.tag&&null!==i.memoizedState?Au(r):null!==u?(u.return=i,Qo=u):Au(r);for(;null!==l;)Qo=l,Eu(l,t,n),l=l.sibling;Qo=r,Yo=o,Zo=c}yu(e)}else 0!=(8772&r.subtreeFlags)&&null!==l?(l.return=r,Qo=l):yu(e)}}function yu(e){for(;null!==Qo;){var t=Qo;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Zo||au(5,t);break;case 1:var a=t.stateNode;if(4&t.flags&&!Zo)if(null===n)a.componentDidMount();else{var r=t.elementType===t.type?n.memoizedProps:hl(t.type,n.memoizedProps);a.componentDidUpdate(r,n.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&jl(t,i,a);break;case 3:var o=t.updateQueue;if(null!==o){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}jl(t,o,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var s=t.alternate;if(null!==s){var d=s.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Ut(f)}}}break;default:throw Error(l(163))}Zo||512&t.flags&&ru(t)}catch(e){Cc(t,t.return,e)}}if(t===e){Qo=null;break}if(null!==(n=t.sibling)){n.return=t.return,Qo=n;break}Qo=t.return}}function _u(e){for(;null!==Qo;){var t=Qo;if(t===e){Qo=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Qo=n;break}Qo=t.return}}function Au(e){for(;null!==Qo;){var t=Qo;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{au(4,t)}catch(e){Cc(t,n,e)}break;case 1:var a=t.stateNode;if("function"==typeof a.componentDidMount){var r=t.return;try{a.componentDidMount()}catch(e){Cc(t,r,e)}}var l=t.return;try{ru(t)}catch(e){Cc(t,l,e)}break;case 5:var i=t.return;try{ru(t)}catch(e){Cc(t,i,e)}}}catch(e){Cc(t,t.return,e)}if(t===e){Qo=null;break}var o=t.sibling;if(null!==o){o.return=t.return,Qo=o;break}Qo=t.return}}var Su,Cu=Math.ceil,wu=y.ReactCurrentDispatcher,xu=y.ReactCurrentOwner,Ou=y.ReactCurrentBatchConfig,Lu=0,Tu=null,Pu=null,ku=0,Nu=0,Iu=Cr(0),Du=0,Mu=null,Ru=0,Bu=0,ju=0,zu=null,Fu=null,Hu=0,Uu=1/0,Wu=null,$u=!1,Vu=null,Gu=null,qu=!1,Xu=null,Yu=0,Zu=0,Ku=null,Qu=-1,Ju=0;function ec(){return 0!=(6&Lu)?Ke():-1!==Qu?Qu:Qu=Ke()}function tc(e){return 0==(1&e.mode)?1:0!=(2&Lu)&&0!==ku?ku&-ku:null!==vl.transition?(0===Ju&&(Ju=vt()),Ju):0!==(e=Et)?e:e=void 0===(e=window.event)?16:Zt(e.type)}function nc(e,t,n,a){if(50<Zu)throw Zu=0,Ku=null,Error(l(185));bt(e,n,a),0!=(2&Lu)&&e===Tu||(e===Tu&&(0==(2&Lu)&&(Bu|=n),4===Du&&oc(e,ku)),ac(e,a),1===n&&0===Lu&&0==(1&t.mode)&&(Uu=Ke()+500,zr&&Ur()))}function ac(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,a=e.pingedLanes,r=e.expirationTimes,l=e.pendingLanes;0<l;){var i=31-it(l),o=1<<i,u=r[i];-1===u?0!=(o&n)&&0==(o&a)||(r[i]=mt(o,t)):u<=t&&(e.expiredLanes|=o),l&=~o}}(e,t);var a=ft(e,e===Tu?ku:0);if(0===a)null!==n&&Xe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=a&-a,e.callbackPriority!==t){if(null!=n&&Xe(n),1===t)0===e.tag?function(e){zr=!0,Hr(e)}(uc.bind(null,e)):Hr(uc.bind(null,e)),ir((function(){0==(6&Lu)&&Ur()})),n=null;else{switch(yt(a)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=at}n=Tc(n,rc.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function rc(e,t){if(Qu=-1,Ju=0,0!=(6&Lu))throw Error(l(327));var n=e.callbackNode;if(Ac()&&e.callbackNode!==n)return null;var a=ft(e,e===Tu?ku:0);if(0===a)return null;if(0!=(30&a)||0!=(a&e.expiredLanes)||t)t=hc(e,a);else{t=a;var r=Lu;Lu|=2;var i=pc();for(Tu===e&&ku===t||(Wu=null,Uu=Ke()+500,fc(e,t));;)try{gc();break}catch(t){mc(e,t)}_l(),wu.current=i,Lu=r,null!==Pu?t=0:(Tu=null,ku=0,t=Du)}if(0!==t){if(2===t&&0!==(r=pt(e))&&(a=r,t=lc(e,r)),1===t)throw n=Mu,fc(e,0),oc(e,a),ac(e,Ke()),n;if(6===t)oc(e,a);else{if(r=e.current.alternate,0==(30&a)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var a=0;a<n.length;a++){var r=n[a],l=r.getSnapshot;r=r.value;try{if(!oa(l(),r))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(r)&&(2===(t=hc(e,a))&&0!==(i=pt(e))&&(a=i,t=lc(e,i)),1===t))throw n=Mu,fc(e,0),oc(e,a),ac(e,Ke()),n;switch(e.finishedWork=r,e.finishedLanes=a,t){case 0:case 1:throw Error(l(345));case 2:case 5:_c(e,Fu,Wu);break;case 3:if(oc(e,a),(130023424&a)===a&&10<(t=Hu+500-Ke())){if(0!==ft(e,0))break;if(((r=e.suspendedLanes)&a)!==a){ec(),e.pingedLanes|=e.suspendedLanes&r;break}e.timeoutHandle=ar(_c.bind(null,e,Fu,Wu),t);break}_c(e,Fu,Wu);break;case 4:if(oc(e,a),(4194240&a)===a)break;for(t=e.eventTimes,r=-1;0<a;){var o=31-it(a);i=1<<o,(o=t[o])>r&&(r=o),a&=~i}if(a=r,10<(a=(120>(a=Ke()-a)?120:480>a?480:1080>a?1080:1920>a?1920:3e3>a?3e3:4320>a?4320:1960*Cu(a/1960))-a)){e.timeoutHandle=ar(_c.bind(null,e,Fu,Wu),a);break}_c(e,Fu,Wu);break;default:throw Error(l(329))}}}return ac(e,Ke()),e.callbackNode===n?rc.bind(null,e):null}function lc(e,t){var n=zu;return e.current.memoizedState.isDehydrated&&(fc(e,t).flags|=256),2!==(e=hc(e,t))&&(t=Fu,Fu=n,null!==t&&ic(t)),e}function ic(e){null===Fu?Fu=e:Fu.push.apply(Fu,e)}function oc(e,t){for(t&=~ju,t&=~Bu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),a=1<<n;e[n]=-1,t&=~a}}function uc(e){if(0!=(6&Lu))throw Error(l(327));Ac();var t=ft(e,0);if(0==(1&t))return ac(e,Ke()),null;var n=hc(e,t);if(0!==e.tag&&2===n){var a=pt(e);0!==a&&(t=a,n=lc(e,a))}if(1===n)throw n=Mu,fc(e,0),oc(e,t),ac(e,Ke()),n;if(6===n)throw Error(l(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,_c(e,Fu,Wu),ac(e,Ke()),null}function cc(e,t){var n=Lu;Lu|=1;try{return e(t)}finally{0===(Lu=n)&&(Uu=Ke()+500,zr&&Ur())}}function sc(e){null!==Xu&&0===Xu.tag&&0==(6&Lu)&&Ac();var t=Lu;Lu|=1;var n=Ou.transition,a=Et;try{if(Ou.transition=null,Et=1,e)return e()}finally{Et=a,Ou.transition=n,0==(6&(Lu=t))&&Ur()}}function dc(){Nu=Iu.current,wr(Iu)}function fc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,rr(n)),null!==Pu)for(n=Pu.return;null!==n;){var a=n;switch(tl(a),a.tag){case 1:null!=(a=a.type.childContextTypes)&&Ir();break;case 3:ri(),wr(Tr),wr(Lr),si();break;case 5:ii(a);break;case 4:ri();break;case 13:case 19:wr(oi);break;case 10:Al(a.type._context);break;case 22:case 23:dc()}n=n.return}if(Tu=e,Pu=e=Ic(e.current,null),ku=Nu=t,Du=0,Mu=null,ju=Bu=Ru=0,Fu=zu=null,null!==xl){for(t=0;t<xl.length;t++)if(null!==(a=(n=xl[t]).interleaved)){n.interleaved=null;var r=a.next,l=n.pending;if(null!==l){var i=l.next;l.next=r,a.next=i}n.pending=a}xl=null}return e}function mc(e,t){for(;;){var n=Pu;try{if(_l(),di.current=lo,bi){for(var a=pi.memoizedState;null!==a;){var r=a.queue;null!==r&&(r.pending=null),a=a.next}bi=!1}if(mi=0,hi=vi=pi=null,gi=!1,Ei=0,xu.current=null,null===n||null===n.return){Du=1,Mu=t,Pu=null;break}e:{var i=e,o=n.return,u=n,c=t;if(t=ku,u.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var s=c,d=u,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var m=d.alternate;m?(d.updateQueue=m.updateQueue,d.memoizedState=m.memoizedState,d.lanes=m.lanes):(d.updateQueue=null,d.memoizedState=null)}var p=bo(o);if(null!==p){p.flags&=-257,go(p,o,u,0,t),1&p.mode&&ho(i,s,t),c=s;var v=(t=p).updateQueue;if(null===v){var h=new Set;h.add(c),t.updateQueue=h}else v.add(c);break e}if(0==(1&t)){ho(i,s,t),vc();break e}c=Error(l(426))}else if(rl&&1&u.mode){var b=bo(o);if(null!==b){0==(65536&b.flags)&&(b.flags|=256),go(b,o,u,0,t),pl(co(c,u));break e}}i=c=co(c,u),4!==Du&&(Du=2),null===zu?zu=[i]:zu.push(i),i=o;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Rl(i,po(0,c,t));break e;case 1:u=c;var g=i.type,E=i.stateNode;if(0==(128&i.flags)&&("function"==typeof g.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Gu||!Gu.has(E)))){i.flags|=65536,t&=-t,i.lanes|=t,Rl(i,vo(i,u,t));break e}}i=i.return}while(null!==i)}yc(n)}catch(e){t=e,Pu===n&&null!==n&&(Pu=n=n.return);continue}break}}function pc(){var e=wu.current;return wu.current=lo,null===e?lo:e}function vc(){0!==Du&&3!==Du&&2!==Du||(Du=4),null===Tu||0==(268435455&Ru)&&0==(268435455&Bu)||oc(Tu,ku)}function hc(e,t){var n=Lu;Lu|=2;var a=pc();for(Tu===e&&ku===t||(Wu=null,fc(e,t));;)try{bc();break}catch(t){mc(e,t)}if(_l(),Lu=n,wu.current=a,null!==Pu)throw Error(l(261));return Tu=null,ku=0,Du}function bc(){for(;null!==Pu;)Ec(Pu)}function gc(){for(;null!==Pu&&!Ye();)Ec(Pu)}function Ec(e){var t=Su(e.alternate,e,Nu);e.memoizedProps=e.pendingProps,null===t?yc(e):Pu=t,xu.current=null}function yc(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=qo(n,t,Nu)))return void(Pu=n)}else{if(null!==(n=Xo(n,t)))return n.flags&=32767,void(Pu=n);if(null===e)return Du=6,void(Pu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Pu=t);Pu=t=e}while(null!==t);0===Du&&(Du=5)}function _c(e,t,n){var a=Et,r=Ou.transition;try{Ou.transition=null,Et=1,function(e,t,n,a){do{Ac()}while(null!==Xu);if(0!=(6&Lu))throw Error(l(327));n=e.finishedWork;var r=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(l(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var a=e.eventTimes;for(e=e.expirationTimes;0<n;){var r=31-it(n),l=1<<r;t[r]=0,a[r]=-1,e[r]=-1,n&=~l}}(e,i),e===Tu&&(Pu=Tu=null,ku=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||qu||(qu=!0,Tc(tt,(function(){return Ac(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Ou.transition,Ou.transition=null;var o=Et;Et=1;var u=Lu;Lu|=4,xu.current=null,function(e,t){if(er=$t,ma(e=fa())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var a=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(a&&0!==a.rangeCount){n=a.anchorNode;var r=a.anchorOffset,i=a.focusNode;a=a.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var o=0,u=-1,c=-1,s=0,d=0,f=e,m=null;t:for(;;){for(var p;f!==n||0!==r&&3!==f.nodeType||(u=o+r),f!==i||0!==a&&3!==f.nodeType||(c=o+a),3===f.nodeType&&(o+=f.nodeValue.length),null!==(p=f.firstChild);)m=f,f=p;for(;;){if(f===e)break t;if(m===n&&++s===r&&(u=o),m===i&&++d===a&&(c=o),null!==(p=f.nextSibling))break;m=(f=m).parentNode}f=p}n=-1===u||-1===c?null:{start:u,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(tr={focusedElem:e,selectionRange:n},$t=!1,Qo=t;null!==Qo;)if(e=(t=Qo).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Qo=e;else for(;null!==Qo;){t=Qo;try{var v=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==v){var h=v.memoizedProps,b=v.memoizedState,g=t.stateNode,E=g.getSnapshotBeforeUpdate(t.elementType===t.type?h:hl(t.type,h),b);g.__reactInternalSnapshotBeforeUpdate=E}break;case 3:var y=t.stateNode.containerInfo;1===y.nodeType?y.textContent="":9===y.nodeType&&y.documentElement&&y.removeChild(y.documentElement);break;default:throw Error(l(163))}}catch(e){Cc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Qo=e;break}Qo=t.return}v=tu,tu=!1}(e,n),hu(n,e),pa(tr),$t=!!er,tr=er=null,e.current=n,gu(n,e,r),Ze(),Lu=u,Et=o,Ou.transition=i}else e.current=n;if(qu&&(qu=!1,Xu=e,Yu=r),0===(i=e.pendingLanes)&&(Gu=null),function(e){if(lt&&"function"==typeof lt.onCommitFiberRoot)try{lt.onCommitFiberRoot(rt,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ac(e,Ke()),null!==t)for(a=e.onRecoverableError,n=0;n<t.length;n++)a((r=t[n]).value,{componentStack:r.stack,digest:r.digest});if($u)throw $u=!1,e=Vu,Vu=null,e;0!=(1&Yu)&&0!==e.tag&&Ac(),0!=(1&(i=e.pendingLanes))?e===Ku?Zu++:(Zu=0,Ku=e):Zu=0,Ur()}(e,t,n,a)}finally{Ou.transition=r,Et=a}return null}function Ac(){if(null!==Xu){var e=yt(Yu),t=Ou.transition,n=Et;try{if(Ou.transition=null,Et=16>e?16:e,null===Xu)var a=!1;else{if(e=Xu,Xu=null,Yu=0,0!=(6&Lu))throw Error(l(331));var r=Lu;for(Lu|=4,Qo=e.current;null!==Qo;){var i=Qo,o=i.child;if(0!=(16&Qo.flags)){var u=i.deletions;if(null!==u){for(var c=0;c<u.length;c++){var s=u[c];for(Qo=s;null!==Qo;){var d=Qo;switch(d.tag){case 0:case 11:case 15:nu(8,d,i)}var f=d.child;if(null!==f)f.return=d,Qo=f;else for(;null!==Qo;){var m=(d=Qo).sibling,p=d.return;if(lu(d),d===s){Qo=null;break}if(null!==m){m.return=p,Qo=m;break}Qo=p}}}var v=i.alternate;if(null!==v){var h=v.child;if(null!==h){v.child=null;do{var b=h.sibling;h.sibling=null,h=b}while(null!==h)}}Qo=i}}if(0!=(2064&i.subtreeFlags)&&null!==o)o.return=i,Qo=o;else e:for(;null!==Qo;){if(0!=(2048&(i=Qo).flags))switch(i.tag){case 0:case 11:case 15:nu(9,i,i.return)}var g=i.sibling;if(null!==g){g.return=i.return,Qo=g;break e}Qo=i.return}}var E=e.current;for(Qo=E;null!==Qo;){var y=(o=Qo).child;if(0!=(2064&o.subtreeFlags)&&null!==y)y.return=o,Qo=y;else e:for(o=E;null!==Qo;){if(0!=(2048&(u=Qo).flags))try{switch(u.tag){case 0:case 11:case 15:au(9,u)}}catch(e){Cc(u,u.return,e)}if(u===o){Qo=null;break e}var _=u.sibling;if(null!==_){_.return=u.return,Qo=_;break e}Qo=u.return}}if(Lu=r,Ur(),lt&&"function"==typeof lt.onPostCommitFiberRoot)try{lt.onPostCommitFiberRoot(rt,e)}catch(e){}a=!0}return a}finally{Et=n,Ou.transition=t}}return!1}function Sc(e,t,n){e=Dl(e,t=po(0,t=co(n,t),1),1),t=ec(),null!==e&&(bt(e,1,t),ac(e,t))}function Cc(e,t,n){if(3===e.tag)Sc(e,e,n);else for(;null!==t;){if(3===t.tag){Sc(t,e,n);break}if(1===t.tag){var a=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof a.componentDidCatch&&(null===Gu||!Gu.has(a))){t=Dl(t,e=vo(t,e=co(n,e),1),1),e=ec(),null!==t&&(bt(t,1,e),ac(t,e));break}}t=t.return}}function wc(e,t,n){var a=e.pingCache;null!==a&&a.delete(t),t=ec(),e.pingedLanes|=e.suspendedLanes&n,Tu===e&&(ku&n)===n&&(4===Du||3===Du&&(130023424&ku)===ku&&500>Ke()-Hu?fc(e,0):ju|=n),ac(e,t)}function xc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=st,0==(130023424&(st<<=1))&&(st=4194304)));var n=ec();null!==(e=Tl(e,t))&&(bt(e,t,n),ac(e,n))}function Oc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),xc(e,n)}function Lc(e,t){var n=0;switch(e.tag){case 13:var a=e.stateNode,r=e.memoizedState;null!==r&&(n=r.retryLane);break;case 19:a=e.stateNode;break;default:throw Error(l(314))}null!==a&&a.delete(t),xc(e,n)}function Tc(e,t){return qe(e,t)}function Pc(e,t,n,a){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=a,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function kc(e,t,n,a){return new Pc(e,t,n,a)}function Nc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ic(e,t){var n=e.alternate;return null===n?((n=kc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Dc(e,t,n,a,r,i){var o=2;if(a=e,"function"==typeof e)Nc(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case S:return Mc(n.children,r,i,t);case C:o=8,r|=8;break;case w:return(e=kc(12,n,t,2|r)).elementType=w,e.lanes=i,e;case T:return(e=kc(13,n,t,r)).elementType=T,e.lanes=i,e;case P:return(e=kc(19,n,t,r)).elementType=P,e.lanes=i,e;case I:return Rc(n,r,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case x:o=10;break e;case O:o=9;break e;case L:o=11;break e;case k:o=14;break e;case N:o=16,a=null;break e}throw Error(l(130,null==e?e:typeof e,""))}return(t=kc(o,n,t,r)).elementType=e,t.type=a,t.lanes=i,t}function Mc(e,t,n,a){return(e=kc(7,e,a,t)).lanes=n,e}function Rc(e,t,n,a){return(e=kc(22,e,a,t)).elementType=I,e.lanes=n,e.stateNode={isHidden:!1},e}function Bc(e,t,n){return(e=kc(6,e,null,t)).lanes=n,e}function jc(e,t,n){return(t=kc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function zc(e,t,n,a,r){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=ht(0),this.expirationTimes=ht(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ht(0),this.identifierPrefix=a,this.onRecoverableError=r,this.mutableSourceEagerHydrationData=null}function Fc(e,t,n,a,r,l,i,o,u){return e=new zc(e,t,n,o,u),1===t?(t=1,!0===l&&(t|=8)):t=0,l=kc(3,null,null,t),e.current=l,l.stateNode=e,l.memoizedState={element:a,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},kl(l),e}function Hc(e,t,n){var a=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:A,key:null==a?null:""+a,children:e,containerInfo:t,implementation:n}}function Uc(e){if(!e)return Or;e:{if(Ue(e=e._reactInternals)!==e||1!==e.tag)throw Error(l(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Nr(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(l(171))}if(1===e.tag){var n=e.type;if(Nr(n))return Mr(e,n,t)}return t}function Wc(e,t,n,a,r,l,i,o,u){return(e=Fc(n,a,!0,e,0,l,0,o,u)).context=Uc(null),n=e.current,(l=Il(a=ec(),r=tc(n))).callback=null!=t?t:null,Dl(n,l,r),e.current.lanes=r,bt(e,r,a),ac(e,a),e}function $c(e,t,n,a){var r=t.current,l=ec(),i=tc(r);return n=Uc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Il(l,i)).payload={element:e},null!==(a=void 0===a?null:a)&&(t.callback=a),null!==(e=Dl(r,t,i))&&(nc(e,r,i,l),Ml(e,r,i)),i}function Vc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Gc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function qc(e,t){Gc(e,t),(e=e.alternate)&&Gc(e,t)}Su=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Tr.current)yo=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return yo=!1,function(e,t,n){switch(t.tag){case 3:Po(t),ml();break;case 5:li(t);break;case 1:Nr(t.type)&&Rr(t);break;case 4:ai(t,t.stateNode.containerInfo);break;case 10:var a=t.type._context,r=t.memoizedProps.value;xr(bl,a._currentValue),a._currentValue=r;break;case 13:if(null!==(a=t.memoizedState))return null!==a.dehydrated?(xr(oi,1&oi.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Bo(e,t,n):(xr(oi,1&oi.current),null!==(e=$o(e,t,n))?e.sibling:null);xr(oi,1&oi.current);break;case 19:if(a=0!=(n&t.childLanes),0!=(128&e.flags)){if(a)return Uo(e,t,n);t.flags|=128}if(null!==(r=t.memoizedState)&&(r.rendering=null,r.tail=null,r.lastEffect=null),xr(oi,oi.current),a)break;return null;case 22:case 23:return t.lanes=0,wo(e,t,n)}return $o(e,t,n)}(e,t,n);yo=0!=(131072&e.flags)}else yo=!1,rl&&0!=(1048576&t.flags)&&Jr(t,Gr,t.index);switch(t.lanes=0,t.tag){case 2:var a=t.type;Wo(e,t),e=t.pendingProps;var r=kr(t,Lr.current);Cl(t,n),r=Si(null,t,a,e,r,n);var i=Ci();return t.flags|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Nr(a)?(i=!0,Rr(t)):i=!1,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,kl(t),r.updater=Hl,t.stateNode=r,r._reactInternals=t,Vl(t,a,e,n),t=To(null,t,a,!0,i,n)):(t.tag=0,rl&&i&&el(t),_o(null,t,r,n),t=t.child),t;case 16:a=t.elementType;e:{switch(Wo(e,t),e=t.pendingProps,a=(r=a._init)(a._payload),t.type=a,r=t.tag=function(e){if("function"==typeof e)return Nc(e)?1:0;if(null!=e){if((e=e.$$typeof)===L)return 11;if(e===k)return 14}return 2}(a),e=hl(a,e),r){case 0:t=Oo(null,t,a,e,n);break e;case 1:t=Lo(null,t,a,e,n);break e;case 11:t=Ao(null,t,a,e,n);break e;case 14:t=So(null,t,a,hl(a.type,e),n);break e}throw Error(l(306,a,""))}return t;case 0:return a=t.type,r=t.pendingProps,Oo(e,t,a,r=t.elementType===a?r:hl(a,r),n);case 1:return a=t.type,r=t.pendingProps,Lo(e,t,a,r=t.elementType===a?r:hl(a,r),n);case 3:e:{if(Po(t),null===e)throw Error(l(387));a=t.pendingProps,r=(i=t.memoizedState).element,Nl(e,t),Bl(t,a,null,n);var o=t.memoizedState;if(a=o.element,i.isDehydrated){if(i={element:a,isDehydrated:!1,cache:o.cache,pendingSuspenseBoundaries:o.pendingSuspenseBoundaries,transitions:o.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=ko(e,t,a,n,r=co(Error(l(423)),t));break e}if(a!==r){t=ko(e,t,a,n,r=co(Error(l(424)),t));break e}for(al=cr(t.stateNode.containerInfo.firstChild),nl=t,rl=!0,ll=null,n=Kl(t,null,a,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ml(),a===r){t=$o(e,t,n);break e}_o(e,t,a,n)}t=t.child}return t;case 5:return li(t),null===e&&cl(t),a=t.type,r=t.pendingProps,i=null!==e?e.memoizedProps:null,o=r.children,nr(a,r)?o=null:null!==i&&nr(a,i)&&(t.flags|=32),xo(e,t),_o(e,t,o,n),t.child;case 6:return null===e&&cl(t),null;case 13:return Bo(e,t,n);case 4:return ai(t,t.stateNode.containerInfo),a=t.pendingProps,null===e?t.child=Zl(t,null,a,n):_o(e,t,a,n),t.child;case 11:return a=t.type,r=t.pendingProps,Ao(e,t,a,r=t.elementType===a?r:hl(a,r),n);case 7:return _o(e,t,t.pendingProps,n),t.child;case 8:case 12:return _o(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(a=t.type._context,r=t.pendingProps,i=t.memoizedProps,o=r.value,xr(bl,a._currentValue),a._currentValue=o,null!==i)if(oa(i.value,o)){if(i.children===r.children&&!Tr.current){t=$o(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){o=i.child;for(var c=u.firstContext;null!==c;){if(c.context===a){if(1===i.tag){(c=Il(-1,n&-n)).tag=2;var s=i.updateQueue;if(null!==s){var d=(s=s.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),s.pending=c}}i.lanes|=n,null!==(c=i.alternate)&&(c.lanes|=n),Sl(i.return,n,t),u.lanes|=n;break}c=c.next}}else if(10===i.tag)o=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(o=i.return))throw Error(l(341));o.lanes|=n,null!==(u=o.alternate)&&(u.lanes|=n),Sl(o,n,t),o=i.sibling}else o=i.child;if(null!==o)o.return=i;else for(o=i;null!==o;){if(o===t){o=null;break}if(null!==(i=o.sibling)){i.return=o.return,o=i;break}o=o.return}i=o}_o(e,t,r.children,n),t=t.child}return t;case 9:return r=t.type,a=t.pendingProps.children,Cl(t,n),a=a(r=wl(r)),t.flags|=1,_o(e,t,a,n),t.child;case 14:return r=hl(a=t.type,t.pendingProps),So(e,t,a,r=hl(a.type,r),n);case 15:return Co(e,t,t.type,t.pendingProps,n);case 17:return a=t.type,r=t.pendingProps,r=t.elementType===a?r:hl(a,r),Wo(e,t),t.tag=1,Nr(a)?(e=!0,Rr(t)):e=!1,Cl(t,n),Wl(t,a,r),Vl(t,a,r,n),To(null,t,a,!0,e,n);case 19:return Uo(e,t,n);case 22:return wo(e,t,n)}throw Error(l(156,t.tag))};var Xc="function"==typeof reportError?reportError:function(e){console.error(e)};function Yc(e){this._internalRoot=e}function Zc(e){this._internalRoot=e}function Kc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Qc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Jc(){}function es(e,t,n,a,r){var l=n._reactRootContainer;if(l){var i=l;if("function"==typeof r){var o=r;r=function(){var e=Vc(i);o.call(e)}}$c(t,i,e,r)}else i=function(e,t,n,a,r){if(r){if("function"==typeof a){var l=a;a=function(){var e=Vc(i);l.call(e)}}var i=Wc(t,a,e,0,null,!1,0,"",Jc);return e._reactRootContainer=i,e[pr]=i.current,Ua(8===e.nodeType?e.parentNode:e),sc(),i}for(;r=e.lastChild;)e.removeChild(r);if("function"==typeof a){var o=a;a=function(){var e=Vc(u);o.call(e)}}var u=Fc(e,0,!1,null,0,!1,0,"",Jc);return e._reactRootContainer=u,e[pr]=u.current,Ua(8===e.nodeType?e.parentNode:e),sc((function(){$c(t,u,n,a)})),u}(n,t,e,r,a);return Vc(i)}Zc.prototype.render=Yc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(l(409));$c(e,t,null,null)},Zc.prototype.unmount=Yc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;sc((function(){$c(null,e,null,null)})),t[pr]=null}},Zc.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ct();e={blockedOn:null,target:e,priority:t};for(var n=0;n<It.length&&0!==t&&t<It[n].priority;n++);It.splice(n,0,e),0===n&&Bt(e)}},_t=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(gt(t,1|n),ac(t,Ke()),0==(6&Lu)&&(Uu=Ke()+500,Ur()))}break;case 13:sc((function(){var t=Tl(e,1);if(null!==t){var n=ec();nc(t,e,1,n)}})),qc(e,1)}},At=function(e){if(13===e.tag){var t=Tl(e,134217728);null!==t&&nc(t,e,134217728,ec()),qc(e,134217728)}},St=function(e){if(13===e.tag){var t=tc(e),n=Tl(e,t);null!==n&&nc(n,e,t,ec()),qc(e,t)}},Ct=function(){return Et},wt=function(e,t){var n=Et;try{return Et=e,t()}finally{Et=n}},Ae=function(e,t,n){switch(t){case"input":if(Q(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var a=n[t];if(a!==e&&a.form===e.form){var r=_r(a);if(!r)throw Error(l(90));q(a),Q(a,r)}}}break;case"textarea":le(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Le=cc,Te=sc;var ts={usingClientEntryPoint:!1,Events:[Er,yr,_r,xe,Oe,cc]},ns={findFiberByHostInstance:gr,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},as={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rs=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rs.isDisabled&&rs.supportsFiber)try{rt=rs.inject(as),lt=rs}catch(se){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Kc(t))throw Error(l(200));return Hc(e,t,null,n)},t.createRoot=function(e,t){if(!Kc(e))throw Error(l(299));var n=!1,a="",r=Xc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(a=t.identifierPrefix),void 0!==t.onRecoverableError&&(r=t.onRecoverableError)),t=Fc(e,1,!1,null,0,n,0,a,r),e[pr]=t.current,Ua(8===e.nodeType?e.parentNode:e),new Yc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(l(188));throw e=Object.keys(e).join(","),Error(l(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return sc(e)},t.hydrate=function(e,t,n){if(!Qc(t))throw Error(l(200));return es(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Kc(e))throw Error(l(405));var a=null!=n&&n.hydratedSources||null,r=!1,i="",o=Xc;if(null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(o=n.onRecoverableError)),t=Wc(t,null,e,1,null!=n?n:null,r,0,i,o),e[pr]=t.current,Ua(e),a)for(e=0;e<a.length;e++)r=(r=(n=a[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,r]:t.mutableSourceEagerHydrationData.push(n,r);return new Zc(t)},t.render=function(e,t,n){if(!Qc(t))throw Error(l(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Qc(e))throw Error(l(40));return!!e._reactRootContainer&&(sc((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[pr]=null}))})),!0)},t.unstable_batchedUpdates=cc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,a){if(!Qc(n))throw Error(l(200));if(null==e||void 0===e._reactInternals)throw Error(l(38));return es(e,t,n,!1,a)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{var a=n(3935);t.createRoot=a.createRoot,t.hydrateRoot=a.hydrateRoot},3935:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{var n="function"==typeof Symbol&&Symbol.for,a=n?Symbol.for("react.element"):60103,r=n?Symbol.for("react.portal"):60106,l=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,o=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,m=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.suspense_list"):60120,v=n?Symbol.for("react.memo"):60115,h=n?Symbol.for("react.lazy"):60116,b=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,E=n?Symbol.for("react.responder"):60118,y=n?Symbol.for("react.scope"):60119;function _(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case a:switch(e=e.type){case s:case d:case l:case o:case i:case m:return e;default:switch(e=e&&e.$$typeof){case c:case f:case h:case v:case u:return e;default:return t}}case r:return t}}}function A(e){return _(e)===d}t.AsyncMode=s,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=u,t.Element=a,t.ForwardRef=f,t.Fragment=l,t.Lazy=h,t.Memo=v,t.Portal=r,t.Profiler=o,t.StrictMode=i,t.Suspense=m,t.isAsyncMode=function(e){return A(e)||_(e)===s},t.isConcurrentMode=A,t.isContextConsumer=function(e){return _(e)===c},t.isContextProvider=function(e){return _(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===a},t.isForwardRef=function(e){return _(e)===f},t.isFragment=function(e){return _(e)===l},t.isLazy=function(e){return _(e)===h},t.isMemo=function(e){return _(e)===v},t.isPortal=function(e){return _(e)===r},t.isProfiler=function(e){return _(e)===o},t.isStrictMode=function(e){return _(e)===i},t.isSuspense=function(e){return _(e)===m},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===l||e===d||e===o||e===i||e===m||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===h||e.$$typeof===v||e.$$typeof===u||e.$$typeof===c||e.$$typeof===f||e.$$typeof===g||e.$$typeof===E||e.$$typeof===y||e.$$typeof===b)},t.typeOf=_},9864:(e,t,n)=>{e.exports=n(9921)},6113:(e,t,n)=>{n.r(t),n.d(t,{Provider:()=>z,ReactReduxContext:()=>c,batch:()=>l.unstable_batchedUpdates,connect:()=>j,createDispatchHook:()=>U,createSelectorHook:()=>p,createStoreHook:()=>F,shallowEqual:()=>N,useDispatch:()=>W,useSelector:()=>v,useStore:()=>H});var a=n(1688),r=n(2798),l=n(3935);let i=function(e){e()};const o=()=>i;var u=n(7294);const c=(0,u.createContext)(null);function s(){return(0,u.useContext)(c)}const d=()=>{throw new Error("uSES not initialized!")};let f=d;const m=(e,t)=>e===t;function p(e=c){const t=e===c?s:()=>(0,u.useContext)(e);return function(e,n=m){const{store:a,subscription:r,getServerState:l}=t(),i=f(r.addNestedSub,a.getState,l||a.getState,e,n);return(0,u.useDebugValue)(i),i}}const v=p();function h(){return h=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},h.apply(this,arguments)}function b(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}var g=n(8679),E=n.n(g),y=n(2973);const _=["initMapStateToProps","initMapDispatchToProps","initMergeProps"];function A(e,t,n,a,{areStatesEqual:r,areOwnPropsEqual:l,areStatePropsEqual:i}){let o,u,c,s,d,f=!1;return function(m,p){return f?function(f,m){const p=!l(m,u),v=!r(f,o,m,u);return o=f,u=m,p&&v?(c=e(o,u),t.dependsOnOwnProps&&(s=t(a,u)),d=n(c,s,u),d):p?(e.dependsOnOwnProps&&(c=e(o,u)),t.dependsOnOwnProps&&(s=t(a,u)),d=n(c,s,u),d):v?function(){const t=e(o,u),a=!i(t,c);return c=t,a&&(d=n(c,s,u)),d}():d}(m,p):(o=m,u=p,c=e(o,u),s=t(a,u),d=n(c,s,u),f=!0,d)}}function S(e){return function(t){const n=e(t);function a(){return n}return a.dependsOnOwnProps=!1,a}}function C(e){return e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function w(e,t){return function(t,{displayName:n}){const a=function(e,t){return a.dependsOnOwnProps?a.mapToProps(e,t):a.mapToProps(e,void 0)};return a.dependsOnOwnProps=!0,a.mapToProps=function(t,n){a.mapToProps=e,a.dependsOnOwnProps=C(e);let r=a(t,n);return"function"==typeof r&&(a.mapToProps=r,a.dependsOnOwnProps=C(r),r=a(t,n)),r},a}}function x(e,t){return(n,a)=>{throw new Error(`Invalid value of type ${typeof e} for ${t} argument when connecting component ${a.wrappedComponentName}.`)}}function O(e,t,n){return h({},n,e,t)}const L={notify(){},get:()=>[]};function T(e,t){let n,a=L;function r(){i.onStateChange&&i.onStateChange()}function l(){n||(n=t?t.addNestedSub(r):e.subscribe(r),a=function(){const e=o();let t=null,n=null;return{clear(){t=null,n=null},notify(){e((()=>{let e=t;for(;e;)e.callback(),e=e.next}))},get(){let e=[],n=t;for(;n;)e.push(n),n=n.next;return e},subscribe(e){let a=!0,r=n={callback:e,next:null,prev:n};return r.prev?r.prev.next=r:t=r,function(){a&&null!==t&&(a=!1,r.next?r.next.prev=r.prev:n=r.prev,r.prev?r.prev.next=r.next:t=r.next)}}}}())}const i={addNestedSub:function(e){return l(),a.subscribe(e)},notifyNestedSubs:function(){a.notify()},handleChangeWrapper:r,isSubscribed:function(){return Boolean(n)},trySubscribe:l,tryUnsubscribe:function(){n&&(n(),n=void 0,a.clear(),a=L)},getListeners:()=>a};return i}const P="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?u.useLayoutEffect:u.useEffect;function k(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function N(e,t){if(k(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;const n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(let a=0;a<n.length;a++)if(!Object.prototype.hasOwnProperty.call(t,n[a])||!k(e[n[a]],t[n[a]]))return!1;return!0}const I=["reactReduxForwardedRef"];let D=d;const M=[null,null];function R(e,t,n,a,r,l){e.current=a,n.current=!1,r.current&&(r.current=null,l())}function B(e,t){return e===t}const j=function(e,t,n,{pure:a,areStatesEqual:r=B,areOwnPropsEqual:l=N,areStatePropsEqual:i=N,areMergedPropsEqual:o=N,forwardRef:s=!1,context:d=c}={}){const f=d,m=function(e){return e?"function"==typeof e?w(e):x(e,"mapStateToProps"):S((()=>({})))}(e),p=function(e){return e&&"object"==typeof e?S((t=>function(e,t){const n={};for(const a in e){const r=e[a];"function"==typeof r&&(n[a]=(...e)=>t(r(...e)))}return n}(e,t))):e?"function"==typeof e?w(e):x(e,"mapDispatchToProps"):S((e=>({dispatch:e})))}(t),v=function(e){return e?"function"==typeof e?function(e){return function(t,{displayName:n,areMergedPropsEqual:a}){let r,l=!1;return function(t,n,i){const o=e(t,n,i);return l?a(o,r)||(r=o):(l=!0,r=o),r}}}(e):x(e,"mergeProps"):()=>O}(n),g=Boolean(e);return e=>{const t=e.displayName||e.name||"Component",n=`Connect(${t})`,a={shouldHandleStateChanges:g,displayName:n,wrappedComponentName:t,WrappedComponent:e,initMapStateToProps:m,initMapDispatchToProps:p,initMergeProps:v,areStatesEqual:r,areStatePropsEqual:i,areOwnPropsEqual:l,areMergedPropsEqual:o};function c(t){const[n,r,l]=(0,u.useMemo)((()=>{const{reactReduxForwardedRef:e}=t,n=b(t,I);return[t.context,e,n]}),[t]),i=(0,u.useMemo)((()=>n&&n.Consumer&&(0,y.isContextConsumer)(u.createElement(n.Consumer,null))?n:f),[n,f]),o=(0,u.useContext)(i),c=Boolean(t.store)&&Boolean(t.store.getState)&&Boolean(t.store.dispatch),s=Boolean(o)&&Boolean(o.store),d=c?t.store:o.store,m=s?o.getServerState:d.getState,p=(0,u.useMemo)((()=>function(e,t){let{initMapStateToProps:n,initMapDispatchToProps:a,initMergeProps:r}=t,l=b(t,_);return A(n(e,l),a(e,l),r(e,l),e,l)}(d.dispatch,a)),[d]),[v,E]=(0,u.useMemo)((()=>{if(!g)return M;const e=T(d,c?void 0:o.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[d,c,o]),S=(0,u.useMemo)((()=>c?o:h({},o,{subscription:v})),[c,o,v]),C=(0,u.useRef)(),w=(0,u.useRef)(l),x=(0,u.useRef)(),O=(0,u.useRef)(!1),L=((0,u.useRef)(!1),(0,u.useRef)(!1)),k=(0,u.useRef)();P((()=>(L.current=!0,()=>{L.current=!1})),[]);const N=(0,u.useMemo)((()=>()=>x.current&&l===w.current?x.current:p(d.getState(),l)),[d,l]),B=(0,u.useMemo)((()=>e=>v?function(e,t,n,a,r,l,i,o,u,c,s){if(!e)return()=>{};let d=!1,f=null;const m=()=>{if(d||!o.current)return;const e=t.getState();let n,m;try{n=a(e,r.current)}catch(e){m=e,f=e}m||(f=null),n===l.current?i.current||c():(l.current=n,u.current=n,i.current=!0,s())};return n.onStateChange=m,n.trySubscribe(),m(),()=>{if(d=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}(g,d,v,p,w,C,O,L,x,E,e):()=>{}),[v]);var j,z;let F;j=R,z=[w,C,O,l,x,E],P((()=>j(...z)),undefined);try{F=D(B,N,m?()=>p(m(),l):N)}catch(e){throw k.current&&(e.message+=`\nThe error may be correlated with this previous error:\n${k.current.stack}\n\n`),e}P((()=>{k.current=void 0,x.current=void 0,C.current=F}));const H=(0,u.useMemo)((()=>u.createElement(e,h({},F,{ref:r}))),[r,e,F]);return(0,u.useMemo)((()=>g?u.createElement(i.Provider,{value:S},H):H),[i,H,S])}const d=u.memo(c);if(d.WrappedComponent=e,d.displayName=c.displayName=n,s){const t=u.forwardRef((function(e,t){return u.createElement(d,h({},e,{reactReduxForwardedRef:t}))}));return t.displayName=n,t.WrappedComponent=e,E()(t,e)}return E()(d,e)}},z=function({store:e,context:t,children:n,serverState:a}){const r=(0,u.useMemo)((()=>{const t=T(e);return{store:e,subscription:t,getServerState:a?()=>a:void 0}}),[e,a]),l=(0,u.useMemo)((()=>e.getState()),[e]);P((()=>{const{subscription:t}=r;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),l!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[r,l]);const i=t||c;return u.createElement(i.Provider,{value:r},n)};function F(e=c){const t=e===c?s:()=>(0,u.useContext)(e);return function(){const{store:e}=t();return e}}const H=F();function U(e=c){const t=e===c?H:F(e);return function(){return t().dispatch}}const W=U();var $,V;$=r.useSyncExternalStoreWithSelector,f=$,(e=>{D=e})(a.useSyncExternalStore),V=l.unstable_batchedUpdates,i=V},8359:(e,t)=>{var n=Symbol.for("react.element"),a=Symbol.for("react.portal"),r=Symbol.for("react.fragment"),l=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.server_context"),s=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),f=Symbol.for("react.suspense_list"),m=Symbol.for("react.memo"),p=Symbol.for("react.lazy");Symbol.for("react.offscreen");Symbol.for("react.module.reference"),t.isContextConsumer=function(e){return function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case r:case i:case l:case d:case f:return e;default:switch(e=e&&e.$$typeof){case c:case u:case s:case p:case m:case o:return e;default:return t}}case a:return t}}}(e)===u}},2973:(e,t,n)=>{e.exports=n(8359)},9818:(e,t,n)=>{n.r(t),n.d(t,{AbortedDeferredError:()=>H,Await:()=>gt,BrowserRouter:()=>Bt,Form:()=>Ut,HashRouter:()=>jt,Link:()=>Ft,MemoryRouter:()=>ft,NavLink:()=>Ht,Navigate:()=>mt,NavigationType:()=>a,Outlet:()=>pt,Route:()=>vt,Router:()=>ht,RouterProvider:()=>dt,Routes:()=>bt,ScrollRestoration:()=>$t,UNSAFE_DataRouterContext:()=>Te,UNSAFE_DataRouterStateContext:()=>Pe,UNSAFE_DataStaticRouterContext:()=>Le,UNSAFE_LocationContext:()=>Ie,UNSAFE_NavigationContext:()=>Ne,UNSAFE_RouteContext:()=>De,UNSAFE_enhanceManualRouteObjects:()=>Ct,createBrowserRouter:()=>Mt,createHashRouter:()=>Rt,createMemoryRouter:()=>wt,createPath:()=>p,createRoutesFromChildren:()=>At,createRoutesFromElements:()=>At,createSearchParams:()=>kt,defer:()=>$,generatePath:()=>x,isRouteErrorResponse:()=>q,json:()=>F,matchPath:()=>O,matchRoutes:()=>y,parsePath:()=>v,redirect:()=>V,renderMatches:()=>St,resolvePath:()=>N,unstable_HistoryRouter:()=>zt,useActionData:()=>ot,useAsyncError:()=>st,useAsyncValue:()=>ct,useFetcher:()=>tn,useFetchers:()=>nn,useFormAction:()=>Jt,useHref:()=>Re,useInRouterContext:()=>Be,useLinkClickHandler:()=>Yt,useLoaderData:()=>lt,useLocation:()=>je,useMatch:()=>Fe,useMatches:()=>rt,useNavigate:()=>He,useNavigation:()=>nt,useNavigationType:()=>ze,useOutlet:()=>$e,useOutletContext:()=>We,useParams:()=>Ve,useResolvedPath:()=>Ge,useRevalidator:()=>at,useRouteError:()=>ut,useRouteLoaderData:()=>it,useRoutes:()=>qe,useSearchParams:()=>Zt,useSubmit:()=>Kt});var a,r=n(7294),l=n.t(r,2);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(a||(a={}));const o="popstate";function u(e){void 0===e&&(e={});let t,{initialEntries:n=["/"],initialIndex:r,v5Compat:l=!1}=e;t=n.map(((e,t)=>f(e,"string"==typeof e?null:e.state,0===t?"default":void 0)));let i=c(null==r?t.length-1:r),o=a.Pop,u=null;function c(e){return Math.min(Math.max(e,0),t.length-1)}function s(){return t[i]}function f(e,n,a){void 0===n&&(n=null);let r=m(t?s().pathname:"/",e,n,a);return d("/"===r.pathname.charAt(0),"relative pathnames are not supported in memory history: "+JSON.stringify(e)),r}return{get index(){return i},get action(){return o},get location(){return s()},createHref:e=>"string"==typeof e?e:p(e),encodeLocation:e=>e,push(e,n){o=a.Push;let r=f(e,n);i+=1,t.splice(i,t.length,r),l&&u&&u({action:o,location:r})},replace(e,n){o=a.Replace;let r=f(e,n);t[i]=r,l&&u&&u({action:o,location:r})},go(e){o=a.Pop,i=c(i+e),u&&u({action:o,location:s()})},listen:e=>(u=e,()=>{u=null})}}function c(e){return void 0===e&&(e={}),b((function(e,t){let{pathname:n,search:a,hash:r}=e.location;return m("",{pathname:n,search:a,hash:r},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:p(t)}),null,e)}function s(e){return void 0===e&&(e={}),b((function(e,t){let{pathname:n="/",search:a="",hash:r=""}=v(e.location.hash.substr(1));return m("",{pathname:n,search:a,hash:r},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),a="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");a=-1===n?t:t.slice(0,n)}return a+"#"+("string"==typeof t?t:p(t))}),(function(e,t){d("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),e)}function d(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function f(e){return{usr:e.state,key:e.key}}function m(e,t,n,a){return void 0===n&&(n=null),i({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?v(t):t,{state:n,key:t&&t.key||a||Math.random().toString(36).substr(2,8)})}function p(e){let{pathname:t="/",search:n="",hash:a=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),a&&"#"!==a&&(t+="#"===a.charAt(0)?a:"#"+a),t}function v(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let a=e.indexOf("?");a>=0&&(t.search=e.substr(a),e=e.substr(0,a)),e&&(t.pathname=e)}return t}function h(e){let t="undefined"!=typeof window&&void 0!==window.location&&"null"!==window.location.origin?window.location.origin:"unknown://unknown",n="string"==typeof e?e:p(e);return new URL(n,t)}function b(e,t,n,r){void 0===r&&(r={});let{window:l=document.defaultView,v5Compat:u=!1}=r,c=l.history,s=a.Pop,d=null;function v(){s=a.Pop,d&&d({action:s,location:b.location})}let b={get action(){return s},get location(){return e(l,c)},listen(e){if(d)throw new Error("A history only accepts one active listener");return l.addEventListener(o,v),d=e,()=>{l.removeEventListener(o,v),d=null}},createHref:e=>t(l,e),encodeLocation(e){let t=h(p(e));return i({},e,{pathname:t.pathname,search:t.search,hash:t.hash})},push:function(e,t){s=a.Push;let r=m(b.location,e,t);n&&n(r,e);let i=f(r),o=b.createHref(r);try{c.pushState(i,"",o)}catch(e){l.location.assign(o)}u&&d&&d({action:s,location:b.location})},replace:function(e,t){s=a.Replace;let r=m(b.location,e,t);n&&n(r,e);let l=f(r),i=b.createHref(r);c.replaceState(l,"",i),u&&d&&d({action:s,location:b.location})},go:e=>c.go(e)};return b}var g;function E(e,t,n){return void 0===t&&(t=[]),void 0===n&&(n=new Set),e.map(((e,a)=>{let r=[...t,a],l="string"==typeof e.id?e.id:r.join("-");return P(!0!==e.index||!e.children,"Cannot specify children on an index route"),P(!n.has(l),'Found a route id collision on id "'+l+"\".  Route id's must be globally unique within Data Router usages"),n.add(l),function(e){return!0===e.index}(e)?i({},e,{id:l}):i({},e,{id:l,children:e.children?E(e.children,r,n):void 0})}))}function y(e,t,n){void 0===n&&(n="/");let a=T(("string"==typeof t?v(t):t).pathname||"/",n);if(null==a)return null;let r=_(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(r);let l=null;for(let e=0;null==l&&e<r.length;++e)l=w(r[e],L(a));return l}function _(e,t,n,a){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===a&&(a=""),e.forEach(((e,r)=>{let l={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:r,route:e};l.relativePath.startsWith("/")&&(P(l.relativePath.startsWith(a),'Absolute route path "'+l.relativePath+'" nested under path "'+a+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),l.relativePath=l.relativePath.slice(a.length));let i=R([a,l.relativePath]),o=n.concat(l);e.children&&e.children.length>0&&(P(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+i+'".'),_(e.children,t,o,i)),(null!=e.path||e.index)&&t.push({path:i,score:C(i,e.index),routesMeta:o})})),t}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(g||(g={}));const A=/^:\w+$/,S=e=>"*"===e;function C(e,t){let n=e.split("/"),a=n.length;return n.some(S)&&(a+=-2),t&&(a+=2),n.filter((e=>!S(e))).reduce(((e,t)=>e+(A.test(t)?3:""===t?1:10)),a)}function w(e,t){let{routesMeta:n}=e,a={},r="/",l=[];for(let e=0;e<n.length;++e){let i=n[e],o=e===n.length-1,u="/"===r?t:t.slice(r.length)||"/",c=O({path:i.relativePath,caseSensitive:i.caseSensitive,end:o},u);if(!c)return null;Object.assign(a,c.params);let s=i.route;l.push({params:a,pathname:R([r,c.pathname]),pathnameBase:B(R([r,c.pathnameBase])),route:s}),"/"!==c.pathnameBase&&(r=R([r,c.pathnameBase]))}return l}function x(e,t){return void 0===t&&(t={}),e.replace(/:(\w+)/g,((e,n)=>(P(null!=t[n],'Missing ":'+n+'" param'),t[n]))).replace(/(\/?)\*/,((e,n,a,r)=>null==t["*"]?"/*"===r?"/":"":""+n+t["*"]))}function O(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,a]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),k("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let a=[],r="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(a.push(t),"([^\\/]+)")));return e.endsWith("*")?(a.push("*"),r+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?r+="\\/*$":""!==e&&"/"!==e&&(r+="(?:(?=\\/|$))"),[new RegExp(r,t?void 0:"i"),a]}(e.path,e.caseSensitive,e.end),r=t.match(n);if(!r)return null;let l=r[0],i=l.replace(/(.)\/+$/,"$1"),o=r.slice(1);return{params:a.reduce(((e,t,n)=>{if("*"===t){let e=o[n]||"";i=l.slice(0,l.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return k(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(o[n]||"",t),e}),{}),pathname:l,pathnameBase:i,pattern:e}}function L(e){try{return decodeURI(e)}catch(t){return k(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function T(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,a=e.charAt(n);return a&&"/"!==a?null:e.slice(n)||"/"}function P(e,t){if(!1===e||null==e)throw new Error(t)}function k(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function N(e,t){void 0===t&&(t="/");let{pathname:n,search:a="",hash:r=""}="string"==typeof e?v(e):e,l=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:l,search:j(a),hash:z(r)}}function I(e,t,n,a){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(a)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function D(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function M(e,t,n,a){let r;void 0===a&&(a=!1),"string"==typeof e?r=v(e):(r=i({},e),P(!r.pathname||!r.pathname.includes("?"),I("?","pathname","search",r)),P(!r.pathname||!r.pathname.includes("#"),I("#","pathname","hash",r)),P(!r.search||!r.search.includes("#"),I("#","search","hash",r)));let l,o=""===e||""===r.pathname,u=o?"/":r.pathname;if(a||null==u)l=n;else{let e=t.length-1;if(u.startsWith("..")){let t=u.split("/");for(;".."===t[0];)t.shift(),e-=1;r.pathname=t.join("/")}l=e>=0?t[e]:"/"}let c=N(r,l),s=u&&"/"!==u&&u.endsWith("/"),d=(o||"."===u)&&n.endsWith("/");return c.pathname.endsWith("/")||!s&&!d||(c.pathname+="/"),c}const R=e=>e.join("/").replace(/\/\/+/g,"/"),B=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),j=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",z=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"",F=function(e,t){void 0===t&&(t={});let n="number"==typeof t?{status:t}:t,a=new Headers(n.headers);return a.has("Content-Type")||a.set("Content-Type","application/json; charset=utf-8"),new Response(JSON.stringify(e),i({},n,{headers:a}))};class H extends Error{}class U{constructor(e){let t;this.pendingKeys=new Set,this.subscriber=void 0,P(e&&"object"==typeof e&&!Array.isArray(e),"defer() only accepts plain objects"),this.abortPromise=new Promise(((e,n)=>t=n)),this.controller=new AbortController;let n=()=>t(new H("Deferred data aborted"));this.unlistenAbortSignal=()=>this.controller.signal.removeEventListener("abort",n),this.controller.signal.addEventListener("abort",n),this.data=Object.entries(e).reduce(((e,t)=>{let[n,a]=t;return Object.assign(e,{[n]:this.trackPromise(n,a)})}),{})}trackPromise(e,t){if(!(t instanceof Promise))return t;this.pendingKeys.add(e);let n=Promise.race([t,this.abortPromise]).then((t=>this.onSettle(n,e,null,t)),(t=>this.onSettle(n,e,t)));return n.catch((()=>{})),Object.defineProperty(n,"_tracked",{get:()=>!0}),n}onSettle(e,t,n,a){if(this.controller.signal.aborted&&n instanceof H)return this.unlistenAbortSignal(),Object.defineProperty(e,"_error",{get:()=>n}),Promise.reject(n);this.pendingKeys.delete(t),this.done&&this.unlistenAbortSignal();const r=this.subscriber;return n?(Object.defineProperty(e,"_error",{get:()=>n}),r&&r(!1),Promise.reject(n)):(Object.defineProperty(e,"_data",{get:()=>a}),r&&r(!1),a)}subscribe(e){this.subscriber=e}cancel(){this.controller.abort(),this.pendingKeys.forEach(((e,t)=>this.pendingKeys.delete(t)));let e=this.subscriber;e&&e(!0)}async resolveData(e){let t=!1;if(!this.done){let n=()=>this.cancel();e.addEventListener("abort",n),t=await new Promise((t=>{this.subscribe((a=>{e.removeEventListener("abort",n),(a||this.done)&&t(a)}))}))}return t}get done(){return 0===this.pendingKeys.size}get unwrappedData(){return P(null!==this.data&&this.done,"Can only unwrap data on initialized and settled deferreds"),Object.entries(this.data).reduce(((e,t)=>{let[n,a]=t;return Object.assign(e,{[n]:W(a)})}),{})}}function W(e){if(!function(e){return e instanceof Promise&&!0===e._tracked}(e))return e;if(e._error)throw e._error;return e._data}function $(e){return new U(e)}const V=function(e,t){void 0===t&&(t=302);let n=t;"number"==typeof n?n={status:n}:void 0===n.status&&(n.status=302);let a=new Headers(n.headers);return a.set("Location",e),new Response(null,i({},n,{headers:a}))};class G{constructor(e,t,n){this.status=e,this.statusText=t||"",this.data=n}}function q(e){return e instanceof G}const X={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},Y={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},Z=!("undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement);function K(e){P(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let t=E(e.routes),n=null,r=new Set,l=null,o=null,u=null,c=!1,s=y(t,e.history.location,e.basename),d=null;if(null==s){let{matches:e,route:n,error:a}=se(t);s=e,d={[n.id]:a}}let f,p,v=!s.some((e=>e.route.loader))||null!=e.hydrationData,h={historyAction:e.history.action,location:e.history.location,matches:s,initialized:v,navigation:X,restoreScrollPosition:null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||d,fetchers:new Map},b=a.Pop,g=!1,_=!1,A=!1,S=[],C=[],w=new Map,x=0,O=-1,L=new Map,T=new Set,k=new Map,N=new Map;function I(e){h=i({},h,e),r.forEach((e=>e(h)))}function D(t,n){var r;I(i({},null!=h.actionData&&null!=h.navigation.formMethod&&"loading"===h.navigation.state&&(null==(r=h.navigation.formAction)?void 0:r.split("?")[0])===t.pathname?{}:{actionData:null},n,n.loaderData?{loaderData:ue(h.loaderData,n.loaderData,n.matches||[])}:{},{historyAction:b,location:t,initialized:!0,navigation:X,revalidation:"idle",restoreScrollPosition:!h.navigation.formData&&q(t,n.matches||h.matches),preventScrollReset:g})),_||b===a.Pop||(b===a.Push?e.history.push(t,t.state):b===a.Replace&&e.history.replace(t,t.state)),b=a.Pop,g=!1,_=!1,A=!1,S=[],C=[]}async function M(n,r,c){p&&p.abort(),p=null,b=n,_=!0===(c&&c.startUninterruptedRevalidation),function(e,t){if(l&&o&&u){let n=t.map((e=>ye(e,h.loaderData))),a=o(e,n)||e.key;l[a]=u()}}(h.location,h.matches),g=!0===(c&&c.preventScrollReset);let s=c&&c.overrideNavigation,d=y(t,r,e.basename);if(!d){let{matches:e,route:n,error:a}=se(t);return V(),void D(r,{matches:e,loaderData:{},errors:{[n.id]:a}})}if(E=r,(v=h.location).pathname===E.pathname&&v.search===E.search&&v.hash!==E.hash)return void D(r,{matches:d});var v,E;p=new AbortController;let L,M,R=le(r,p.signal,c&&c.submission);if(c&&c.pendingError)M={[ce(d).route.id]:c.pendingError};else if(c&&c.submission){let e=await async function(e,t,n,r,l){let o;z(),I({navigation:i({state:"submitting",location:t},n)});let u=_e(r,t);if(u.route.action){if(o=await re("action",e,u,r,f.basename),e.signal.aborted)return{shortCircuited:!0}}else o=de(t);if(he(o)){let e=i({state:"loading",location:m(h.location,o.location)},n);return await B(o,e,l&&l.replace),{shortCircuited:!0}}if(ve(o)){let e=ce(r,u.route.id);return!0!==(l&&l.replace)&&(b=a.Push),{pendingActionError:{[e.route.id]:o.error}}}if(pe(o))throw new Error("defer() is not supported in actions");return{pendingActionData:{[u.route.id]:o.data}}}(R,r,c.submission,d,{replace:c.replace});if(e.shortCircuited)return;L=e.pendingActionData,M=e.pendingActionError,s=i({state:"loading",location:r},c.submission)}let{shortCircuited:F,loaderData:H,errors:U}=await async function(e,t,n,a,r,l,o,u){let c=a;c||(c={state:"loading",location:t,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0});let[s,d]=te(h,n,r,t,A,S,C,o,u,k);if(V((e=>!(n&&n.some((t=>t.route.id===e)))||s&&s.some((t=>t.route.id===e)))),0===s.length&&0===d.length)return D(t,{matches:n,loaderData:ue(h.loaderData,{},n),errors:u||null,actionData:o||null}),{shortCircuited:!0};_||(d.forEach((e=>{let[t]=e,n=h.fetchers.get(t),a={state:"loading",data:n&&n.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};h.fetchers.set(t,a)})),I(i({navigation:c,actionData:o||h.actionData||null},d.length>0?{fetchers:new Map(h.fetchers)}:{}))),O=++x,d.forEach((e=>{let[t]=e;return w.set(t,p)}));let{results:f,loaderResults:m,fetcherResults:v}=await j(h.matches,n,s,d,e);if(e.signal.aborted)return{shortCircuited:!0};d.forEach((e=>{let[t]=e;return w.delete(t)}));let b=fe(f);if(b){let e=ee(h,b);return await B(b,e,l),{shortCircuited:!0}}let{loaderData:g,errors:E}=oe(h,n,s,m,u,d,v,N);return N.forEach(((e,t)=>{e.subscribe((n=>{(n||e.done)&&N.delete(t)}))})),function(){let e=[];for(let t of T){let n=h.fetchers.get(t);P(n,"Expected fetcher: "+t),"loading"===n.state&&(T.delete(t),e.push(t))}W(e)}(),i({loaderData:g,errors:E},$(O)||d.length>0?{fetchers:new Map(h.fetchers)}:{})}(R,r,d,s,c&&c.submission,c&&c.replace,L,M);F||(p=null,D(r,{matches:d,loaderData:H,errors:U}))}function R(e){return h.fetchers.get(e)||Y}async function B(e,t,n){e.revalidate&&(A=!0),P(t.location,"Expected a location on the redirect navigation"),p=null;let r=!0===n?a.Replace:a.Push;await M(r,t.location,{overrideNavigation:t})}async function j(e,t,n,a,r){let l=await Promise.all([...n.map((e=>re("loader",r,e,t,f.basename))),...a.map((e=>{let[,t,n,a]=e;return re("loader",le(t,r.signal),n,a,f.basename)}))]),i=l.slice(0,n.length),o=l.slice(n.length);return await Promise.all([be(e,n,i,r.signal,!1,h.loaderData),be(e,a.map((e=>{let[,,t]=e;return t})),o,r.signal,!0)]),{results:l,loaderResults:i,fetcherResults:o}}function z(){A=!0,S.push(...V()),k.forEach(((e,t)=>{w.has(t)&&(C.push(t),U(t))}))}function F(e,t,n){let a=ce(h.matches,t);H(e),I({errors:{[a.route.id]:n},fetchers:new Map(h.fetchers)})}function H(e){w.has(e)&&U(e),k.delete(e),L.delete(e),T.delete(e),h.fetchers.delete(e)}function U(e){let t=w.get(e);P(t,"Expected fetch controller: "+e),t.abort(),w.delete(e)}function W(e){for(let t of e){let e={state:"idle",data:R(t).data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};h.fetchers.set(t,e)}}function $(e){let t=[];for(let[n,a]of L)if(a<e){let e=h.fetchers.get(n);P(e,"Expected fetcher: "+n),"loading"===e.state&&(U(n),L.delete(n),t.push(n))}return W(t),t.length>0}function V(e){let t=[];return N.forEach(((n,a)=>{e&&!e(a)||(n.cancel(),t.push(a),N.delete(a))})),t}function q(e,t){if(l&&o&&u){let n=t.map((e=>ye(e,h.loaderData))),a=o(e,n)||e.key,r=l[a];if("number"==typeof r)return r}return null}return f={get basename(){return e.basename},get state(){return h},get routes(){return t},initialize:function(){return n=e.history.listen((e=>{let{action:t,location:n}=e;return M(t,n)})),h.initialized||M(a.Pop,h.location),f},subscribe:function(e){return r.add(e),()=>r.delete(e)},enableScrollRestoration:function(e,t,n){if(l=e,u=t,o=n||(e=>e.key),!c&&h.navigation===X){c=!0;let e=q(h.location,h.matches);null!=e&&I({restoreScrollPosition:e})}return()=>{l=null,u=null,o=null}},navigate:async function(t,n){if("number"==typeof t)return void e.history.go(t);let{path:r,submission:l,error:i}=J(t,n),o=m(h.location,r,n&&n.state);o=e.history.encodeLocation(o);let u=!0===(n&&n.replace)||null!=l?a.Replace:a.Push,c=n&&"preventScrollReset"in n?!0===n.preventScrollReset:void 0;return await M(u,o,{submission:l,pendingError:i,preventScrollReset:c,replace:n&&n.replace})},fetch:function(n,a,r,l){if(Z)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");w.has(n)&&U(n);let o=y(t,r,e.basename);if(!o)return void F(n,a,new G(404,"Not Found",null));let{path:u,submission:c}=J(r,l,!0),s=_e(o,u);c?async function(n,a,r,l,o,u){if(z(),k.delete(n),!l.route.action){let{error:e}=de(r);return void F(n,a,e)}let c=h.fetchers.get(n),s=i({state:"submitting"},u,{data:c&&c.data});h.fetchers.set(n,s),I({fetchers:new Map(h.fetchers)});let d=new AbortController,v=le(r,d.signal,u);w.set(n,d);let g=await re("action",v,l,o,f.basename);if(v.signal.aborted)return void(w.get(n)===d&&w.delete(n));if(he(g)){w.delete(n),T.add(n);let e=i({state:"loading"},u,{data:void 0});h.fetchers.set(n,e),I({fetchers:new Map(h.fetchers)});let t=i({state:"loading",location:m(h.location,g.location)},u);return void await B(g,t)}if(ve(g))return void F(n,a,g.error);pe(g)&&P(!1,"defer() is not supported in actions");let E=h.navigation.location||h.location,_=le(E,d.signal),M="idle"!==h.navigation.state?y(t,h.navigation.location,e.basename):h.matches;P(M,"Didn't find any matches after fetcher action");let R=++x;L.set(n,R);let H=i({state:"loading",data:g.data},u);h.fetchers.set(n,H);let[U,W]=te(h,M,u,E,A,S,C,{[l.route.id]:g.data},void 0,k);W.filter((e=>{let[t]=e;return t!==n})).forEach((e=>{let[t]=e,n=h.fetchers.get(t),a={state:"loading",data:n&&n.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};h.fetchers.set(t,a),w.set(t,d)})),I({fetchers:new Map(h.fetchers)});let{results:V,loaderResults:G,fetcherResults:q}=await j(h.matches,M,U,W,_);if(d.signal.aborted)return;L.delete(n),w.delete(n),W.forEach((e=>{let[t]=e;return w.delete(t)}));let X=fe(V);if(X){let e=ee(h,X);return void await B(X,e)}let{loaderData:Y,errors:Z}=oe(h,h.matches,U,G,void 0,W,q,N),K={state:"idle",data:g.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};h.fetchers.set(n,K);let Q=$(R);"loading"===h.navigation.state&&R>O?(P(b,"Expected pending action"),p&&p.abort(),D(h.navigation.location,{matches:M,loaderData:Y,errors:Z,fetchers:new Map(h.fetchers)})):(I(i({errors:Z,loaderData:ue(h.loaderData,Y,M)},Q?{fetchers:new Map(h.fetchers)}:{})),A=!1)}(n,a,u,s,o,c):(k.set(n,[u,s,o]),async function(e,t,n,a,r){let l=h.fetchers.get(e),i={state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,data:l&&l.data};h.fetchers.set(e,i),I({fetchers:new Map(h.fetchers)});let o=new AbortController,u=le(n,o.signal);w.set(e,o);let c=await re("loader",u,a,r,f.basename);if(pe(c)&&(c=await ge(c,u.signal,!0)||c),w.get(e)===o&&w.delete(e),u.signal.aborted)return;if(he(c)){let e=ee(h,c);return void await B(c,e)}if(ve(c)){let n=ce(h.matches,t);return h.fetchers.delete(e),void I({fetchers:new Map(h.fetchers),errors:{[n.route.id]:c.error}})}P(!pe(c),"Unhandled fetcher deferred data");let s={state:"idle",data:c.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};h.fetchers.set(e,s),I({fetchers:new Map(h.fetchers)})}(n,a,u,s,o))},revalidate:function(){z(),I({revalidation:"loading"}),"submitting"!==h.navigation.state&&("idle"!==h.navigation.state?M(b||h.historyAction,h.navigation.location,{overrideNavigation:h.navigation}):M(h.historyAction,h.location,{startUninterruptedRevalidation:!0}))},createHref:t=>e.history.createHref(t),getFetcher:R,deleteFetcher:H,dispose:function(){n&&n(),r.clear(),p&&p.abort(),h.fetchers.forEach(((e,t)=>H(t)))},_internalFetchControllers:w,_internalActiveDeferreds:N},f}const Q=new Set(["POST","PUT","PATCH","DELETE"]);function J(e,t,n){void 0===n&&(n=!1);let a="string"==typeof e?e:p(e);if(!t||!("formMethod"in t)&&!("formData"in t))return{path:a};if(null!=t.formMethod&&"get"!==t.formMethod)return{path:a,submission:{formMethod:t.formMethod,formAction:me(a),formEncType:t&&t.formEncType||"application/x-www-form-urlencoded",formData:t.formData}};if(!t.formData)return{path:a};let r=v(a);try{let e=ie(t.formData);n&&r.search&&Ee(r.search)&&e.append("index",""),r.search="?"+e}catch(e){return{path:a,error:new G(400,"Bad Request","Cannot submit binary form data using GET")}}return{path:p(r)}}function ee(e,t){let{formMethod:n,formAction:a,formEncType:r,formData:l}=e.navigation;return{state:"loading",location:m(e.location,t.location),formMethod:n||void 0,formAction:a||void 0,formEncType:r||void 0,formData:l||void 0}}function te(e,t,n,a,r,l,i,o,u,c){let s=u?Object.values(u)[0]:o?Object.values(o)[0]:null,d=function(e,t){let n=e;if(t){let a=e.findIndex((e=>e.route.id===t));a>=0&&(n=e.slice(0,a))}return n}(t,u?Object.keys(u)[0]:void 0).filter(((t,i)=>null!=t.route.loader&&(function(e,t,n){let a=!t||n.route.id!==t.route.id,r=void 0===e[n.route.id];return a||r}(e.loaderData,e.matches[i],t)||l.some((e=>e===t.route.id))||ae(e.location,e.matches[i],n,a,t,r,s)))),f=[];return c&&c.forEach(((e,t)=>{let[a,l,o]=e;(i.includes(t)||r&&ae(a,l,n,a,l,r,s))&&f.push([t,a,l,o])})),[d,f]}function ne(e,t){let n=e.route.path;return e.pathname!==t.pathname||n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function ae(e,t,n,a,r,l,o){let u=h(e),c=t.params,s=h(a),d=r.params,f=ne(t,r)||u.toString()===s.toString()||u.search!==s.search||l;if(r.route.shouldRevalidate){let e=r.route.shouldRevalidate(i({currentUrl:u,currentParams:c,nextUrl:s,nextParams:d},n,{actionResult:o,defaultShouldRevalidate:f}));if("boolean"==typeof e)return e}return f}async function re(e,t,n,a,r,l,i){let o,u,c;void 0===l&&(l=!1),void 0===i&&(i=!1);let s=new Promise(((e,t)=>c=t)),d=()=>c();t.signal.addEventListener("abort",d);try{let a=n.route[e];P(a,"Could not find the "+e+' to run on the "'+n.route.id+'" route'),u=await Promise.race([a({request:t,params:n.params}),s])}catch(e){o=g.error,u=e}finally{t.signal.removeEventListener("abort",d)}if(u instanceof Response){let e,c=u.status;if(c>=300&&c<=399){let e=u.headers.get("Location");P(e,"Redirects returned/thrown from loaders/actions must have a Location header");let i=M(e,D(a.slice(0,a.indexOf(n)+1)).map((e=>e.pathnameBase)),h(t.url).pathname);if(P(p(i),"Unable to resolve redirect location: "+u.headers.get("Location")),r){let e=i.pathname;i.pathname="/"===e?r:R([r,e])}if(e=p(i),l)throw u.headers.set("Location",e),u;return{type:g.redirect,status:c,location:e,revalidate:null!==u.headers.get("X-Remix-Revalidate")}}if(i)throw{type:o||g.data,response:u};let s=u.headers.get("Content-Type");return e=s&&s.startsWith("application/json")?await u.json():await u.text(),o===g.error?{type:o,error:new G(c,u.statusText,e),headers:u.headers}:{type:g.data,data:e,statusCode:u.status,headers:u.headers}}return o===g.error?{type:o,error:u}:u instanceof U?{type:g.deferred,deferredData:u}:{type:g.data,data:u}}function le(e,t,n){let a=h(me(e)).toString(),r={signal:t};if(n){let{formMethod:e,formEncType:t,formData:a}=n;r.method=e.toUpperCase(),r.body="application/x-www-form-urlencoded"===t?ie(a):a}return new Request(a,r)}function ie(e){let t=new URLSearchParams;for(let[n,a]of e.entries())P("string"==typeof a,'File inputs are not supported with encType "application/x-www-form-urlencoded", please use "multipart/form-data" instead.'),t.append(n,a);return t}function oe(e,t,n,a,r,l,o,u){let{loaderData:c,errors:s}=function(e,t,n,a,r){let l,i={},o=null,u=!1,c={};return n.forEach(((n,s)=>{let d=t[s].route.id;if(P(!he(n),"Cannot handle redirect results in processLoaderData"),ve(n)){let t=ce(e,d),r=n.error;a&&(r=Object.values(a)[0],a=void 0),o=Object.assign(o||{},{[t.route.id]:r}),u||(u=!0,l=q(n.error)?n.error.status:500),n.headers&&(c[d]=n.headers)}else pe(n)?(r&&r.set(d,n.deferredData),i[d]=n.deferredData.data):(i[d]=n.data,null==n.statusCode||200===n.statusCode||u||(l=n.statusCode),n.headers&&(c[d]=n.headers))})),a&&(o=a),{loaderData:i,errors:o,statusCode:l||200,loaderHeaders:c}}(t,n,a,r,u);for(let t=0;t<l.length;t++){let[n,,a]=l[t];P(void 0!==o&&void 0!==o[t],"Did not find corresponding fetcher result");let r=o[t];if(ve(r)){let t=ce(e.matches,a.route.id);s&&s[t.route.id]||(s=i({},s,{[t.route.id]:r.error})),e.fetchers.delete(n)}else{if(he(r))throw new Error("Unhandled fetcher revalidation redirect");if(pe(r))throw new Error("Unhandled fetcher deferred data");{let t={state:"idle",data:r.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};e.fetchers.set(n,t)}}}return{loaderData:c,errors:s}}function ue(e,t,n){let a=i({},t);return n.forEach((n=>{let r=n.route.id;void 0===t[r]&&void 0!==e[r]&&(a[r]=e[r])})),a}function ce(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function se(e){return function(e,t,n){let a=e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-"+t+"-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:a}],route:a,error:new G(t,n,null)}}(e,404,"Not Found")}function de(e){let t="string"==typeof e?e:p(e);return console.warn("You're trying to submit to a route that does not have an action.  To fix this, please add an `action` function to the route for ["+t+"]"),{type:g.error,error:new G(405,"Method Not Allowed","")}}function fe(e){for(let t=e.length-1;t>=0;t--){let n=e[t];if(he(n))return n}}function me(e){return p(i({},"string"==typeof e?v(e):e,{hash:""}))}function pe(e){return e.type===g.deferred}function ve(e){return e.type===g.error}function he(e){return(e&&e.type)===g.redirect}async function be(e,t,n,a,r,l){for(let i=0;i<n.length;i++){let o=n[i],u=t[i],c=e.find((e=>e.route.id===u.route.id)),s=null!=c&&!ne(c,u)&&void 0!==(l&&l[u.route.id]);pe(o)&&(r||s)&&await ge(o,a,r).then((e=>{e&&(n[i]=e||n[i])}))}}async function ge(e,t,n){if(void 0===n&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:g.data,data:e.deferredData.unwrappedData}}catch(e){return{type:g.error,error:e}}return{type:g.data,data:e.deferredData.data}}}function Ee(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function ye(e,t){let{route:n,pathname:a,params:r}=e;return{id:n.id,pathname:a,params:r,data:t[n.id],handle:n.handle}}function _e(e,t){let n="string"==typeof t?v(t).search:t.search;if(e[e.length-1].route.index&&Ee(n||""))return e[e.length-1];let a=D(e);return a[a.length-1]}function Ae(){return Ae=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},Ae.apply(this,arguments)}new Set(["GET","HEAD",...Q]);"function"==typeof Object.is&&Object.is;const{useState:Se,useEffect:Ce,useLayoutEffect:we,useDebugValue:xe}=l;"undefined"==typeof window||void 0===window.document||window.document.createElement;const Oe=l.useSyncExternalStore,Le=r.createContext(null),Te=r.createContext(null),Pe=r.createContext(null),ke=r.createContext(null),Ne=r.createContext(null),Ie=r.createContext(null),De=r.createContext({outlet:null,matches:[]}),Me=r.createContext(null);function Re(e,t){let{relative:n}=void 0===t?{}:t;Be()||P(!1);let{basename:a,navigator:l}=r.useContext(Ne),{hash:i,pathname:o,search:u}=Ge(e,{relative:n}),c=o;return"/"!==a&&(c="/"===o?a:R([a,o])),l.createHref({pathname:c,search:u,hash:i})}function Be(){return null!=r.useContext(Ie)}function je(){return Be()||P(!1),r.useContext(Ie).location}function ze(){return r.useContext(Ie).navigationType}function Fe(e){Be()||P(!1);let{pathname:t}=je();return r.useMemo((()=>O(e,t)),[t,e])}function He(){Be()||P(!1);let{basename:e,navigator:t}=r.useContext(Ne),{matches:n}=r.useContext(De),{pathname:a}=je(),l=JSON.stringify(D(n).map((e=>e.pathnameBase))),i=r.useRef(!1);return r.useEffect((()=>{i.current=!0})),r.useCallback((function(n,r){if(void 0===r&&(r={}),!i.current)return;if("number"==typeof n)return void t.go(n);let o=M(n,JSON.parse(l),a,"path"===r.relative);"/"!==e&&(o.pathname="/"===o.pathname?e:R([e,o.pathname])),(r.replace?t.replace:t.push)(o,r.state,r)}),[e,t,l,a])}const Ue=r.createContext(null);function We(){return r.useContext(Ue)}function $e(e){let t=r.useContext(De).outlet;return t?r.createElement(Ue.Provider,{value:e},t):t}function Ve(){let{matches:e}=r.useContext(De),t=e[e.length-1];return t?t.params:{}}function Ge(e,t){let{relative:n}=void 0===t?{}:t,{matches:a}=r.useContext(De),{pathname:l}=je(),i=JSON.stringify(D(a).map((e=>e.pathnameBase)));return r.useMemo((()=>M(e,JSON.parse(i),l,"path"===n)),[e,i,l,n])}function qe(e,t){Be()||P(!1);let n=r.useContext(Pe),{matches:l}=r.useContext(De),i=l[l.length-1],o=i?i.params:{},u=(i&&i.pathname,i?i.pathnameBase:"/");i&&i.route;let c,s=je();if(t){var d;let e="string"==typeof t?v(t):t;"/"===u||(null==(d=e.pathname)?void 0:d.startsWith(u))||P(!1),c=e}else c=s;let f=c.pathname||"/",m=y(e,{pathname:"/"===u?f:f.slice(u.length)||"/"}),p=Ke(m&&m.map((e=>Object.assign({},e,{params:Object.assign({},o,e.params),pathname:R([u,e.pathname]),pathnameBase:"/"===e.pathnameBase?u:R([u,e.pathnameBase])}))),l,n||void 0);return t&&p?r.createElement(Ie.Provider,{value:{location:Ae({pathname:"/",search:"",hash:"",state:null,key:"default"},c),navigationType:a.Pop}},p):p}function Xe(){let e=ut(),t=q(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,a="rgba(200,200,200, 0.5)",l={padding:"0.5rem",backgroundColor:a},i={padding:"2px 4px",backgroundColor:a};return r.createElement(r.Fragment,null,r.createElement("h2",null,"Unhandled Thrown Error!"),r.createElement("h3",{style:{fontStyle:"italic"}},t),n?r.createElement("pre",{style:l},n):null,r.createElement("p",null,"💿 Hey developer 👋"),r.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",r.createElement("code",{style:i},"errorElement")," props on ",r.createElement("code",{style:i},"<Route>")))}class Ye extends r.Component{constructor(e){super(e),this.state={location:e.location,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error,location:e.location}:{error:e.error||t.error,location:t.location}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?r.createElement(Me.Provider,{value:this.state.error,children:this.props.component}):this.props.children}}function Ze(e){let{routeContext:t,match:n,children:a}=e,l=r.useContext(Le);return l&&n.route.errorElement&&(l._deepestRenderedBoundaryId=n.route.id),r.createElement(De.Provider,{value:t},a)}function Ke(e,t,n){if(void 0===t&&(t=[]),null==e){if(null==n||!n.errors)return null;e=n.matches}let a=e,l=null==n?void 0:n.errors;if(null!=l){let e=a.findIndex((e=>e.route.id&&(null==l?void 0:l[e.route.id])));e>=0||P(!1),a=a.slice(0,Math.min(a.length,e+1))}return a.reduceRight(((e,i,o)=>{let u=i.route.id?null==l?void 0:l[i.route.id]:null,c=n?i.route.errorElement||r.createElement(Xe,null):null,s=()=>r.createElement(Ze,{match:i,routeContext:{outlet:e,matches:t.concat(a.slice(0,o+1))}},u?c:void 0!==i.route.element?i.route.element:e);return n&&(i.route.errorElement||0===o)?r.createElement(Ye,{location:n.location,component:c,error:u,children:s()}):s()}),null)}var Qe,Je,et;function tt(e){let t=r.useContext(Pe);return t||P(!1),t}function nt(){return tt(Je.UseNavigation).navigation}function at(){let e=function(e){let t=r.useContext(Te);return t||P(!1),t}(Qe.UseRevalidator),t=tt(Je.UseRevalidator);return{revalidate:e.router.revalidate,state:t.revalidation}}function rt(){let{matches:e,loaderData:t}=tt(Je.UseMatches);return r.useMemo((()=>e.map((e=>{let{pathname:n,params:a}=e;return{id:e.route.id,pathname:n,params:a,data:t[e.route.id],handle:e.route.handle}}))),[e,t])}function lt(){let e=tt(Je.UseLoaderData),t=r.useContext(De);t||P(!1);let n=t.matches[t.matches.length-1];return n.route.id||P(!1),e.loaderData[n.route.id]}function it(e){return tt(Je.UseRouteLoaderData).loaderData[e]}function ot(){let e=tt(Je.UseActionData);return r.useContext(De)||P(!1),Object.values((null==e?void 0:e.actionData)||{})[0]}function ut(){var e;let t=r.useContext(Me),n=tt(Je.UseRouteError),a=r.useContext(De),l=a.matches[a.matches.length-1];return t||(a||P(!1),l.route.id||P(!1),null==(e=n.errors)?void 0:e[l.route.id])}function ct(){let e=r.useContext(ke);return null==e?void 0:e._data}function st(){let e=r.useContext(ke);return null==e?void 0:e._error}function dt(e){let{fallbackElement:t,router:n}=e,a=Oe(n.subscribe,(()=>n.state),(()=>n.state)),l=r.useMemo((()=>({createHref:n.createHref,go:e=>n.navigate(e),push:(e,t,a)=>n.navigate(e,{state:t,preventScrollReset:null==a?void 0:a.preventScrollReset}),replace:(e,t,a)=>n.navigate(e,{replace:!0,state:t,preventScrollReset:null==a?void 0:a.preventScrollReset})})),[n]),i=n.basename||"/";return r.createElement(Te.Provider,{value:{router:n,navigator:l,static:!1,basename:i}},r.createElement(Pe.Provider,{value:a},r.createElement(ht,{basename:n.basename,location:n.state.location,navigationType:n.state.historyAction,navigator:l},n.state.initialized?r.createElement(bt,null):t)))}function ft(e){let{basename:t,children:n,initialEntries:a,initialIndex:l}=e,i=r.useRef();null==i.current&&(i.current=u({initialEntries:a,initialIndex:l,v5Compat:!0}));let o=i.current,[c,s]=r.useState({action:o.action,location:o.location});return r.useLayoutEffect((()=>o.listen(s)),[o]),r.createElement(ht,{basename:t,children:n,location:c.location,navigationType:c.action,navigator:o})}function mt(e){let{to:t,replace:n,state:a,relative:l}=e;Be()||P(!1);let i=r.useContext(Pe),o=He();return r.useEffect((()=>{i&&"idle"!==i.navigation.state||o(t,{replace:n,state:a,relative:l})})),null}function pt(e){return $e(e.context)}function vt(e){P(!1)}function ht(e){let{basename:t="/",children:n=null,location:l,navigationType:i=a.Pop,navigator:o,static:u=!1}=e;Be()&&P(!1);let c=t.replace(/^\/*/,"/"),s=r.useMemo((()=>({basename:c,navigator:o,static:u})),[c,o,u]);"string"==typeof l&&(l=v(l));let{pathname:d="/",search:f="",hash:m="",state:p=null,key:h="default"}=l,b=r.useMemo((()=>{let e=T(d,c);return null==e?null:{pathname:e,search:f,hash:m,state:p,key:h}}),[c,d,f,m,p,h]);return null==b?null:r.createElement(Ne.Provider,{value:s},r.createElement(Ie.Provider,{children:n,value:{location:b,navigationType:i}}))}function bt(e){let{children:t,location:n}=e,a=r.useContext(Te);return qe(a&&!t?a.router.routes:At(t),n)}function gt(e){let{children:t,errorElement:n,resolve:a}=e;return r.createElement(yt,{resolve:a,errorElement:n},r.createElement(_t,null,t))}!function(e){e.UseRevalidator="useRevalidator"}(Qe||(Qe={})),function(e){e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator"}(Je||(Je={})),function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(et||(et={}));const Et=new Promise((()=>{}));class yt extends r.Component{constructor(e){super(e),this.state={error:null}}static getDerivedStateFromError(e){return{error:e}}componentDidCatch(e,t){console.error("<Await> caught the following error during render",e,t)}render(){let{children:e,errorElement:t,resolve:n}=this.props,a=null,l=et.pending;if(n instanceof Promise)if(this.state.error){l=et.error;let e=this.state.error;a=Promise.reject().catch((()=>{})),Object.defineProperty(a,"_tracked",{get:()=>!0}),Object.defineProperty(a,"_error",{get:()=>e})}else n._tracked?(a=n,l=void 0!==a._error?et.error:void 0!==a._data?et.success:et.pending):(l=et.pending,Object.defineProperty(n,"_tracked",{get:()=>!0}),a=n.then((e=>Object.defineProperty(n,"_data",{get:()=>e})),(e=>Object.defineProperty(n,"_error",{get:()=>e}))));else l=et.success,a=Promise.resolve(),Object.defineProperty(a,"_tracked",{get:()=>!0}),Object.defineProperty(a,"_data",{get:()=>n});if(l===et.error&&a._error instanceof H)throw Et;if(l===et.error&&!t)throw a._error;if(l===et.error)return r.createElement(ke.Provider,{value:a,children:t});if(l===et.success)return r.createElement(ke.Provider,{value:a,children:e});throw a}}function _t(e){let{children:t}=e,n=ct();return"function"==typeof t?t(n):r.createElement(r.Fragment,null,t)}function At(e,t){void 0===t&&(t=[]);let n=[];return r.Children.forEach(e,((e,a)=>{if(!r.isValidElement(e))return;if(e.type===r.Fragment)return void n.push.apply(n,At(e.props.children,t));e.type!==vt&&P(!1),e.props.index&&e.props.children&&P(!1);let l=[...t,a],i={id:e.props.id||l.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,hasErrorBoundary:null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle};e.props.children&&(i.children=At(e.props.children,l)),n.push(i)})),n}function St(e){return Ke(e)}function Ct(e){return e.map((e=>{let t=Ae({},e);return null==t.hasErrorBoundary&&(t.hasErrorBoundary=null!=t.errorElement),t.children&&(t.children=Ct(t.children)),t}))}function wt(e,t){return K({basename:null==t?void 0:t.basename,history:u({initialEntries:null==t?void 0:t.initialEntries,initialIndex:null==t?void 0:t.initialIndex}),hydrationData:null==t?void 0:t.hydrationData,routes:Ct(e)}).initialize()}function xt(){return xt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},xt.apply(this,arguments)}function Ot(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}const Lt="get",Tt="application/x-www-form-urlencoded";function Pt(e){return null!=e&&"string"==typeof e.tagName}function kt(e){return void 0===e&&(e=""),new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((t,n)=>{let a=e[n];return t.concat(Array.isArray(a)?a.map((e=>[n,e])):[[n,a]])}),[]))}const Nt=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"],It=["aria-current","caseSensitive","className","end","style","to","children"],Dt=["reloadDocument","replace","method","action","onSubmit","fetcherKey","routeId","relative"];function Mt(e,t){var n;return K({basename:null==t?void 0:t.basename,history:c({window:null==t?void 0:t.window}),hydrationData:(null==t?void 0:t.hydrationData)||(null==(n=window)?void 0:n.__staticRouterHydrationData),routes:Ct(e)}).initialize()}function Rt(e,t){var n;return K({basename:null==t?void 0:t.basename,history:s({window:null==t?void 0:t.window}),hydrationData:(null==t?void 0:t.hydrationData)||(null==(n=window)?void 0:n.__staticRouterHydrationData),routes:Ct(e)}).initialize()}function Bt(e){let{basename:t,children:n,window:a}=e,l=r.useRef();null==l.current&&(l.current=c({window:a,v5Compat:!0}));let i=l.current,[o,u]=r.useState({action:i.action,location:i.location});return r.useLayoutEffect((()=>i.listen(u)),[i]),r.createElement(ht,{basename:t,children:n,location:o.location,navigationType:o.action,navigator:i})}function jt(e){let{basename:t,children:n,window:a}=e,l=r.useRef();null==l.current&&(l.current=s({window:a,v5Compat:!0}));let i=l.current,[o,u]=r.useState({action:i.action,location:i.location});return r.useLayoutEffect((()=>i.listen(u)),[i]),r.createElement(ht,{basename:t,children:n,location:o.location,navigationType:o.action,navigator:i})}function zt(e){let{basename:t,children:n,history:a}=e;const[l,i]=r.useState({action:a.action,location:a.location});return r.useLayoutEffect((()=>a.listen(i)),[a]),r.createElement(ht,{basename:t,children:n,location:l.location,navigationType:l.action,navigator:a})}const Ft=r.forwardRef((function(e,t){let{onClick:n,relative:a,reloadDocument:l,replace:i,state:o,target:u,to:c,preventScrollReset:s}=e,d=Ot(e,Nt),f=Re(c,{relative:a}),m=Yt(c,{replace:i,state:o,target:u,preventScrollReset:s,relative:a});return r.createElement("a",xt({},d,{href:f,onClick:l?n:function(e){n&&n(e),e.defaultPrevented||m(e)},ref:t,target:u}))})),Ht=r.forwardRef((function(e,t){let{"aria-current":n="page",caseSensitive:a=!1,className:l="",end:i=!1,style:o,to:u,children:c}=e,s=Ot(e,It),d=Ge(u,{relative:s.relative}),f=je(),m=r.useContext(Pe),p=d.pathname,v=f.pathname,h=m&&m.navigation&&m.navigation.location?m.navigation.location.pathname:null;a||(v=v.toLowerCase(),h=h?h.toLowerCase():null,p=p.toLowerCase());let b,g=v===p||!i&&v.startsWith(p)&&"/"===v.charAt(p.length),E=null!=h&&(h===p||!i&&h.startsWith(p)&&"/"===h.charAt(p.length)),y=g?n:void 0;b="function"==typeof l?l({isActive:g,isPending:E}):[l,g?"active":null,E?"pending":null].filter(Boolean).join(" ");let _="function"==typeof o?o({isActive:g,isPending:E}):o;return r.createElement(Ft,xt({},s,{"aria-current":y,className:b,ref:t,style:_,to:u}),"function"==typeof c?c({isActive:g,isPending:E}):c)})),Ut=r.forwardRef(((e,t)=>r.createElement(Wt,xt({},e,{ref:t})))),Wt=r.forwardRef(((e,t)=>{let{reloadDocument:n,replace:a,method:l=Lt,action:i,onSubmit:o,fetcherKey:u,routeId:c,relative:s}=e,d=Ot(e,Dt),f=Qt(u,c),m="get"===l.toLowerCase()?"get":"post",p=Jt(i,{relative:s});return r.createElement("form",xt({ref:t,method:m,action:p,onSubmit:n?o:e=>{if(o&&o(e),e.defaultPrevented)return;e.preventDefault();let t=e.nativeEvent.submitter;f(t||e.currentTarget,{method:l,replace:a,relative:s})}},d))}));function $t(e){let{getKey:t,storageKey:n}=e;return function(e){let{getKey:t,storageKey:n}=void 0===e?{}:e,{router:a}=qt(Vt.UseScrollRestoration),{restoreScrollPosition:l,preventScrollReset:i}=Xt(Gt.UseScrollRestoration),o=je(),u=rt(),c=nt();var s;r.useEffect((()=>(window.history.scrollRestoration="manual",()=>{window.history.scrollRestoration="auto"})),[]),s=r.useCallback((()=>{if("idle"===c.state){let e=(t?t(o,u):null)||o.key;rn[e]=window.scrollY}sessionStorage.setItem(n||an,JSON.stringify(rn)),window.history.scrollRestoration="auto"}),[n,t,c.state,o,u]),r.useEffect((()=>(window.addEventListener("beforeunload",s),()=>{window.removeEventListener("beforeunload",s)})),[s]),r.useLayoutEffect((()=>{try{let e=sessionStorage.getItem(n||an);e&&(rn=JSON.parse(e))}catch(e){}}),[n]),r.useLayoutEffect((()=>{let e=null==a?void 0:a.enableScrollRestoration(rn,(()=>window.scrollY),t);return()=>e&&e()}),[a,t]),r.useLayoutEffect((()=>{if(!1!==l)if("number"!=typeof l){if(o.hash){let e=document.getElementById(o.hash.slice(1));if(e)return void e.scrollIntoView()}!0!==i&&window.scrollTo(0,0)}else window.scrollTo(0,l)}),[o,l,i])}({getKey:t,storageKey:n}),null}var Vt,Gt;function qt(e){let t=r.useContext(Te);return t||P(!1),t}function Xt(e){let t=r.useContext(Pe);return t||P(!1),t}function Yt(e,t){let{target:n,replace:a,state:l,preventScrollReset:i,relative:o}=void 0===t?{}:t,u=He(),c=je(),s=Ge(e,{relative:o});return r.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,n)){t.preventDefault();let n=void 0!==a?a:p(c)===p(s);u(e,{replace:n,state:l,preventScrollReset:i,relative:o})}}),[c,u,s,a,l,n,e,i,o])}function Zt(e){let t=r.useRef(kt(e)),n=je(),a=r.useMemo((()=>function(e,t){let n=kt(e);for(let e of t.keys())n.has(e)||t.getAll(e).forEach((t=>{n.append(e,t)}));return n}(n.search,t.current)),[n.search]),l=He(),i=r.useCallback(((e,t)=>{const n=kt("function"==typeof e?e(a):e);l("?"+n,t)}),[l,a]);return[a,i]}function Kt(){return Qt()}function Qt(e,t){let{router:n}=qt(Vt.UseSubmitImpl),a=Jt();return r.useCallback((function(r,l){if(void 0===l&&(l={}),"undefined"==typeof document)throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");let{method:i,encType:o,formData:u,url:c}=function(e,t,n){let a,r,l,i;if(Pt(o=e)&&"form"===o.tagName.toLowerCase()){let o=n.submissionTrigger;a=n.method||e.getAttribute("method")||Lt,r=n.action||e.getAttribute("action")||t,l=n.encType||e.getAttribute("enctype")||Tt,i=new FormData(e),o&&o.name&&i.append(o.name,o.value)}else if(function(e){return Pt(e)&&"button"===e.tagName.toLowerCase()}(e)||function(e){return Pt(e)&&"input"===e.tagName.toLowerCase()}(e)&&("submit"===e.type||"image"===e.type)){let o=e.form;if(null==o)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');a=n.method||e.getAttribute("formmethod")||o.getAttribute("method")||Lt,r=n.action||e.getAttribute("formaction")||o.getAttribute("action")||t,l=n.encType||e.getAttribute("formenctype")||o.getAttribute("enctype")||Tt,i=new FormData(o),e.name&&i.append(e.name,e.value)}else{if(Pt(e))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');if(a=n.method||Lt,r=n.action||t,l=n.encType||Tt,e instanceof FormData)i=e;else if(i=new FormData,e instanceof URLSearchParams)for(let[t,n]of e)i.append(t,n);else if(null!=e)for(let t of Object.keys(e))i.append(t,e[t])}var o;let{protocol:u,host:c}=window.location;return{url:new URL(r,u+"//"+c),method:a,encType:l,formData:i}}(r,a,l),s=c.pathname+c.search,d={replace:l.replace,formData:u,formMethod:i,formEncType:o};e?(null==t&&P(!1),n.fetch(e,t,s,d)):n.navigate(s,d)}),[a,n,e,t])}function Jt(e,t){let{relative:n}=void 0===t?{}:t,{basename:a}=r.useContext(Ne),l=r.useContext(De);l||P(!1);let[i]=l.matches.slice(-1),o=xt({},Ge(null!=e?e:".",{relative:n})),u=je();if(null==e&&(o.search=u.search,o.hash=u.hash,i.route.index)){let e=new URLSearchParams(o.search);e.delete("index"),o.search=e.toString()?"?"+e.toString():""}return e&&"."!==e||!i.route.index||(o.search=o.search?o.search.replace(/^\?/,"?index&"):"?index"),"/"!==a&&(o.pathname="/"===o.pathname?a:R([a,o.pathname])),p(o)}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"})(Vt||(Vt={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Gt||(Gt={}));let en=0;function tn(){var e;let{router:t}=qt(Vt.UseFetcher),n=r.useContext(De);n||P(!1);let a=null==(e=n.matches[n.matches.length-1])?void 0:e.route.id;null==a&&P(!1);let[l]=r.useState((()=>String(++en))),[i]=r.useState((()=>(a||P(!1),function(e,t){return r.forwardRef(((n,a)=>r.createElement(Wt,xt({},n,{ref:a,fetcherKey:e,routeId:t}))))}(l,a)))),[o]=r.useState((()=>e=>{t||P(!1),a||P(!1),t.fetch(l,a,e)})),u=Qt(l,a),c=t.getFetcher(l),s=r.useMemo((()=>xt({Form:i,submit:u,load:o},c)),[c,i,u,o]);return r.useEffect((()=>()=>{t?t.deleteFetcher(l):console.warn("No fetcher available to clean up from useFetcher()")}),[t,l]),s}function nn(){return[...Xt(Gt.UseFetchers).fetchers.values()]}const an="react-router-scroll-positions";let rn={}},2408:(e,t)=>{var n=Symbol.for("react.element"),a=Symbol.for("react.portal"),r=Symbol.for("react.fragment"),l=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),m=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v=Object.assign,h={};function b(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||p}function g(){}function E(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||p}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=b.prototype;var y=E.prototype=new g;y.constructor=E,v(y,b.prototype),y.isPureReactComponent=!0;var _=Array.isArray,A=Object.prototype.hasOwnProperty,S={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function w(e,t,a){var r,l={},i=null,o=null;if(null!=t)for(r in void 0!==t.ref&&(o=t.ref),void 0!==t.key&&(i=""+t.key),t)A.call(t,r)&&!C.hasOwnProperty(r)&&(l[r]=t[r]);var u=arguments.length-2;if(1===u)l.children=a;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];l.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===l[r]&&(l[r]=u[r]);return{$$typeof:n,type:e,key:i,ref:o,props:l,_owner:S.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var O=/\/+/g;function L(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,r,l,i){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var u=!1;if(null===e)u=!0;else switch(o){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case a:u=!0}}if(u)return i=i(u=e),e=""===l?"."+L(u,0):l,_(i)?(r="",null!=e&&(r=e.replace(O,"$&/")+"/"),T(i,t,r,"",(function(e){return e}))):null!=i&&(x(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,r+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(O,"$&/")+"/")+e)),t.push(i)),1;if(u=0,l=""===l?".":l+":",_(e))for(var c=0;c<e.length;c++){var s=l+L(o=e[c],c);u+=T(o,t,r,s,i)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=m&&e[m]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),c=0;!(o=e.next()).done;)u+=T(o=o.value,t,r,s=l+L(o,c++),i);else if("object"===o)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function P(e,t,n){if(null==e)return e;var a=[],r=0;return T(e,a,"","",(function(e){return t.call(n,e,r++)})),a}function k(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N={current:null},I={transition:null},D={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:I,ReactCurrentOwner:S};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=b,t.Fragment=r,t.Profiler=i,t.PureComponent=E,t.StrictMode=l,t.Suspense=s,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=D,t.cloneElement=function(e,t,a){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=v({},e.props),l=e.key,i=e.ref,o=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,o=S.current),void 0!==t.key&&(l=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)A.call(t,c)&&!C.hasOwnProperty(c)&&(r[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)r.children=a;else if(1<c){u=Array(c);for(var s=0;s<c;s++)u[s]=arguments[s+2];r.children=u}return{$$typeof:n,type:e.type,key:l,ref:i,props:r,_owner:o}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},t.createElement=w,t.createFactory=function(e){var t=w.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:k}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=I.transition;I.transition={};try{e()}finally{I.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return N.current.useCallback(e,t)},t.useContext=function(e){return N.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return N.current.useDeferredValue(e)},t.useEffect=function(e,t){return N.current.useEffect(e,t)},t.useId=function(){return N.current.useId()},t.useImperativeHandle=function(e,t,n){return N.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return N.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return N.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return N.current.useMemo(e,t)},t.useReducer=function(e,t,n){return N.current.useReducer(e,t,n)},t.useRef=function(e){return N.current.useRef(e)},t.useState=function(e){return N.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return N.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return N.current.useTransition()},t.version="18.2.0"},7294:(e,t,n)=>{e.exports=n(2408)},53:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var a=n-1>>>1,r=e[a];if(!(0<l(r,t)))break e;e[a]=t,e[n]=r,n=a}}function a(e){return 0===e.length?null:e[0]}function r(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var a=0,r=e.length,i=r>>>1;a<i;){var o=2*(a+1)-1,u=e[o],c=o+1,s=e[c];if(0>l(u,n))c<r&&0>l(s,u)?(e[a]=s,e[c]=n,a=c):(e[a]=u,e[o]=n,a=o);else{if(!(c<r&&0>l(s,n)))break e;e[a]=s,e[c]=n,a=c}}}return t}function l(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var o=Date,u=o.now();t.unstable_now=function(){return o.now()-u}}var c=[],s=[],d=1,f=null,m=3,p=!1,v=!1,h=!1,b="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,E="undefined"!=typeof setImmediate?setImmediate:null;function y(e){for(var t=a(s);null!==t;){if(null===t.callback)r(s);else{if(!(t.startTime<=e))break;r(s),t.sortIndex=t.expirationTime,n(c,t)}t=a(s)}}function _(e){if(h=!1,y(e),!v)if(null!==a(c))v=!0,I(A);else{var t=a(s);null!==t&&D(_,t.startTime-e)}}function A(e,n){v=!1,h&&(h=!1,g(x),x=-1),p=!0;var l=m;try{for(y(n),f=a(c);null!==f&&(!(f.expirationTime>n)||e&&!T());){var i=f.callback;if("function"==typeof i){f.callback=null,m=f.priorityLevel;var o=i(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof o?f.callback=o:f===a(c)&&r(c),y(n)}else r(c);f=a(c)}if(null!==f)var u=!0;else{var d=a(s);null!==d&&D(_,d.startTime-n),u=!1}return u}finally{f=null,m=l,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var S,C=!1,w=null,x=-1,O=5,L=-1;function T(){return!(t.unstable_now()-L<O)}function P(){if(null!==w){var e=t.unstable_now();L=e;var n=!0;try{n=w(!0,e)}finally{n?S():(C=!1,w=null)}}else C=!1}if("function"==typeof E)S=function(){E(P)};else if("undefined"!=typeof MessageChannel){var k=new MessageChannel,N=k.port2;k.port1.onmessage=P,S=function(){N.postMessage(null)}}else S=function(){b(P,0)};function I(e){w=e,C||(C=!0,S())}function D(e,n){x=b((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){v||p||(v=!0,I(A))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):O=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return m},t.unstable_getFirstCallbackNode=function(){return a(c)},t.unstable_next=function(e){switch(m){case 1:case 2:case 3:var t=3;break;default:t=m}var n=m;m=t;try{return e()}finally{m=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=m;m=e;try{return t()}finally{m=n}},t.unstable_scheduleCallback=function(e,r,l){var i=t.unstable_now();switch(l="object"==typeof l&&null!==l&&"number"==typeof(l=l.delay)&&0<l?i+l:i,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return e={id:d++,callback:r,priorityLevel:e,startTime:l,expirationTime:o=l+o,sortIndex:-1},l>i?(e.sortIndex=l,n(s,e),null===a(c)&&e===a(s)&&(h?(g(x),x=-1):h=!0,D(_,l-i))):(e.sortIndex=o,n(c,e),v||p||(v=!0,I(A))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=m;return function(){var n=m;m=t;try{return e.apply(this,arguments)}finally{m=n}}}},3840:(e,t,n)=>{e.exports=n(53)},1379:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),r=n.n(a),l=n(7795),i=n.n(l),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(1171),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),r()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},7623:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),r=n.n(a),l=n(7795),i=n.n(l),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(8743),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),r()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},177:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),r=n.n(a),l=n(7795),i=n.n(l),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(5339),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),r()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},4902:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),r=n.n(a),l=n(7795),i=n.n(l),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(2785),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),r()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},6040:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),r=n.n(a),l=n(7795),i=n.n(l),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(1976),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),r()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},6821:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),r=n.n(a),l=n(7795),i=n.n(l),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(1306),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),r()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},3788:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),r=n.n(a),l=n(7795),i=n.n(l),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(1322),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),r()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},3281:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),r=n.n(a),l=n(7795),i=n.n(l),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(4605),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),r()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},7844:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),r=n.n(a),l=n(7795),i=n.n(l),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(348),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),r()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},792:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),r=n.n(a),l=n(7795),i=n.n(l),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(1047),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),r()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},3379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var l={},i=[],o=0;o<e.length;o++){var u=e[o],c=a.base?u[0]+a.base:u[0],s=l[c]||0,d="".concat(c," ").concat(s);l[c]=s+1;var f=n(d),m={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==f)t[f].references++,t[f].updater(m);else{var p=r(m,a);a.byIndex=o,t.splice(o,0,{identifier:d,updater:p,references:1})}i.push(d)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var l=a(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<l.length;i++){var o=n(l[i]);t[o].references--}for(var u=a(e,r),c=0;c<l.length;c++){var s=n(l[c]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}l=u}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},9216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,r&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var l=n.sourceMap;l&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},4529:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AppHeader=void 0;const r=a(n(7294)),l=n(6113),i=n(2531),o=n(1074),u=n(7893),c=n(8932),s=a(n(8989));t.AppHeader=()=>{const e=(0,l.useDispatch)(),t=(0,l.useSelector)(s.default.theme);return r.default.createElement(u.ShellBar,{logo:"/images/sap-logo.png",logoAlt:"Fundamental React",title:"Fundamental React",actions:[r.default.createElement(o.FormSelect,{alignRight:!0,label:"Choose Theme",horizontal:!0,compact:!0,placeholder:t.name,items:i.Themes.map((e=>({id:e.id,text:e.name,name:e.name,family:e.family,selected:e===t}))),onChange:t=>{(0,c.changeTheme)(e,t)}})]})}},4110:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AppMainContent=void 0;const r=a(n(7294));t.AppMainContent=({children:e})=>r.default.createElement("div",{style:{width:"100%",height:"100%",overflow:"auto",boxSizing:"border-box"}},e)},5487:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AppSidePanel=void 0;const r=a(n(7294)),l=n(9818),i=n(4419),o=n(6042);t.AppSidePanel=()=>{const e=(0,l.useNavigate)();return r.default.createElement(i.VerticalNavigation,{label:"Navigation",itemsLabel:"Core Navigation",items:[{id:"components",text:"Components",icon:"folder-blank",expanded:!0,items:o.COMPONENTS.map((e=>Object.assign(Object.assign({},e),{icon:"document-text"})))}],onItemSelect:t=>{"components"!==t&&e(`/components/${t}`)}})}},4595:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CodePanel=void 0;const i=l(n(7294));n(1379),t.CodePanel=({title:e,result:t,code:n})=>{const[a,r]=(0,i.useState)(!1);return i.default.createElement("div",{className:"code-panel"},i.default.createElement("div",{className:"header"},e),i.default.createElement("div",{className:"rendering"},i.default.createElement("div",null,t),i.default.createElement("button",{className:"button-show",onClick:()=>{r(!a)}},a?"Hide Code":"Show Code")),a?i.default.createElement("div",{className:"code"},n,i.default.createElement("button",{className:"button-copy"},"Copy")):null)}},7027:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.demoCallback=t.DemoPage=void 0;const r=a(n(7294)),l=n(2531),i=n(4595);n(7623),t.DemoPage=({title:e,labels:t,description:n,types:a,examples:o})=>{const u=e=>e?"string"==typeof e?r.default.createElement("p",null,e):e:null;return r.default.createElement(l.Page,{className:"demo-page"},r.default.createElement(l.PageHeader,{avatar:{ariaLabel:"",icon:"document-text",accentColor:l.AccentColors.COLOR_9},breadcrumb:r.default.createElement(l.Breadcrumb,{ariaLabel:"breadcrumb",items:[{text:"Components"},{text:e}]}),title:e,attributes:t.map((e=>({label:e.label||"",accentColor:e.accentColor,text:e.text,type:l.PageHeaderAttributeTypes.INFO_LABEL})))}),r.default.createElement(l.PageBody,null,r.default.createElement(l.Panel,{title:"Properties",expanded:!0},r.default.createElement("div",null,u(n)),r.default.createElement("div",null,a.map(((e,t)=>r.default.createElement("div",{key:`type-${t}`},r.default.createElement(l.Title,{className:"demo-page-item-title",level:l.TitleLevels.H3,style:{margin:"1rem 0"},text:e.id}),r.default.createElement(l.Table,{columns:[{key:"id",name:"Property",formatter:e=>r.default.createElement("strong",null,e.id)},{key:"type",name:"Type"},{key:"description",name:"Description"}],compact:!0,rows:e.props.map((e=>({data:e})))})))))),r.default.createElement(l.Panel,{title:"Examples",expanded:!0},o.map(((e,t)=>r.default.createElement("div",{key:`example-${t}`},r.default.createElement(l.Title,{className:"demo-page-item-title",level:l.TitleLevels.H3,levelVisual:l.TitleLevels.H5,text:e.title}),u(e.description),r.default.createElement(i.CodePanel,{title:"",result:e.result,code:e.code})))))))},t.demoCallback=e=>{console.log(e),alert(e)}},6884:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AvatarDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Avatar",labels:[{label:"",text:"version 0.0.3",accentColor:l.AccentColors.COLOR_8},{label:"",text:"on going",accentColor:l.AccentColors.COLOR_6},{label:"",text:"themable",accentColor:l.AccentColors.COLOR_3}],description:"The avatar component displays an image, icon or user initials, and is used for user profiles, placeholder images, icons or business-related images i.e. product photos.",types:[{id:"Avatar",props:[{id:"ariaLabel",type:"string",description:"Accessibility label for the avatar"},{id:"ariaLabelZoom",type:"string",description:"(Optional)"},{id:"ariaControls",type:"string",description:"(Optional)"},{id:"ariaExpanded",type:"boolean",description:"(Optional)"},{id:"ariaHaspopup",type:"boolean",description:"(Optional)"},{id:"accentColor",type:"AccentColor",description:'(Optional) Sets the color accent of the avatar (exclusive with "design" property)'},{id:"bordered",type:"boolean",description:"(Optional) Displays light borders around the avatar"},{id:"circle",type:"boolean",description:"(Optional) Displays the avatar as a circle (default display is a square)"},{id:"design",type:"AvatarDesign",description:'(Optional) Sets the design of the avatar (exclusive with "accentColor" property)'},{id:"icon",type:"string",description:'(Optional) Sets the content of the avatar to an icon (exclusive with "initials" property)'},{id:"iconZoom",type:"string",description:"(Optional) Sets an additionnal icon for clickable avatars (requires onClick)"},{id:"initials",type:"string",description:'(Optional) Sets the content of the avatar to some initials (xclusive with "icon" property)'},{id:"size",type:"Size",description:"(Optional) Sets the size of the avatar"},{id:"onClick",type:"() => void",description:"(Optional) Event fired when the avatar is clicked"}]}],examples:[{title:"Icon",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"The icon avatar can be used to display non-interactive icons. If you want the icon to be interactive, use the Button component with an icon inside instead."),r.default.createElement("p",null,'When using the icon avatar for illustrative purposes only, include role="presentation" in the element.')),result:r.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",icon:"washing-machine",size:l.Sizes.X_SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",icon:"washing-machine",size:l.Sizes.SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",icon:"washing-machine"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",icon:"washing-machine",size:l.Sizes.LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",icon:"washing-machine",size:l.Sizes.X_LARGE})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' icon='washing-machine' size={Sizes.X_SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' icon='washing-machine' size={Sizes.SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' icon='washing-machine' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' icon='washing-machine' size={Sizes.LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' icon='washing-machine' size={Sizes.X_LARGE} />"),r.default.createElement("div",null,"</div>"))},{title:"Initials",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"The initials avatar can display up to three alphabetical characters representing the first and last name(s) of a person, for example: MvV for Marjolein van Veen. The order in which the first and last name(s) are displayed depends on the language-specific settings."),r.default.createElement("p",null,"When there is no equivalent text for the avatar, include aria-label in the element. This isn’t necessary if the avatar is used for illustrative purposes only. See Icon above.")),result:r.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",initials:"WW",size:l.Sizes.X_SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",initials:"WW",size:l.Sizes.SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",initials:"WW"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",initials:"WW",size:l.Sizes.LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",initials:"WW",size:l.Sizes.X_LARGE})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' initials='WW' size={Sizes.X_SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' initials='WW' size={Sizes.SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' initials='WW' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' initials='WW' size={Sizes.LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' initials='WW' size={Sizes.X_LARGE} />"),r.default.createElement("div",null,"</div>"))},{title:"Circle",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"A circle style can be displayed by adding the fd-avatar--circle modifier class to the fd-avatar base class.")),result:r.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,icon:"money-bills",size:l.Sizes.X_SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,icon:"money-bills",size:l.Sizes.SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,icon:"money-bills",size:l.Sizes.LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,icon:"money-bills",size:l.Sizes.X_LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,initials:"WW",size:l.Sizes.X_SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,initials:"WW",size:l.Sizes.SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,initials:"WW"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,initials:"WW",size:l.Sizes.LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,initials:"WW",size:l.Sizes.X_LARGE})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle icon='money-bills' size={Sizes.X_SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle icon='money-bills' size={Sizes.SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle icon='money-bills' size={Sizes.LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle icon='money-bills' size={Sizes.X_LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle initials='WW' size={Sizes.X_SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle initials='WW' size={Sizes.SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle initials='WW' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle initials='WW' size={Sizes.LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle initials='WW' size={Sizes.X_LARGE} />"),r.default.createElement("div",null,"</div>"))},{title:"Transparent",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"A transparent style can be displayed by adding the fd-avatar--transparent modifier class to the fd-avatar base class. This can be useful for displaying descriptive illustrations and decorative pictures, for example.")),result:r.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TRANSPARENT,icon:"money-bills",size:l.Sizes.X_SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TRANSPARENT,icon:"money-bills",size:l.Sizes.SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TRANSPARENT,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TRANSPARENT,icon:"money-bills",size:l.Sizes.LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TRANSPARENT,icon:"money-bills",size:l.Sizes.X_LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TRANSPARENT,initials:"WW",size:l.Sizes.X_SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TRANSPARENT,initials:"WW",size:l.Sizes.SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TRANSPARENT,initials:"WW"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TRANSPARENT,initials:"WW",size:l.Sizes.LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TRANSPARENT,initials:"WW",size:l.Sizes.X_LARGE})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.X_SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.X_LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.X_SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} initials='WW' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.X_LARGE} />"),r.default.createElement("div",null,"</div>"))},{title:"Placeholder",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"An avatar with a placeholder background can be displayed by adding the fd-avatar--placeholder modifier class.")),result:r.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.PLACEHOLDER,icon:"money-bills",size:l.Sizes.X_SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.PLACEHOLDER,icon:"money-bills",size:l.Sizes.SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.PLACEHOLDER,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.PLACEHOLDER,icon:"money-bills",size:l.Sizes.LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.PLACEHOLDER,icon:"money-bills",size:l.Sizes.X_LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.PLACEHOLDER,initials:"WW",size:l.Sizes.X_SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.PLACEHOLDER,initials:"WW",size:l.Sizes.SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.PLACEHOLDER,initials:"WW"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.PLACEHOLDER,initials:"WW",size:l.Sizes.LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.PLACEHOLDER,initials:"WW",size:l.Sizes.X_LARGE})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} icon='money-bills' size={Sizes.X_SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} icon='money-bills' size={Sizes.SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} icon='money-bills' size={Sizes.LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} icon='money-bills' size={Sizes.X_LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} initials='WW' size={Sizes.X_SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} initials='WW' size={Sizes.SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} initials='WW' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} initials='WW' size={Sizes.LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} initials='WW' size={Sizes.X_LARGE} />"),r.default.createElement("div",null,"</div>"))},{title:"Tile Icon Background",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"An avatar with a tile icon background can be displayed by adding the fd-avatar--tile modifier class.")),result:r.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TILE,icon:"money-bills",size:l.Sizes.X_SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TILE,icon:"money-bills",size:l.Sizes.SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TILE,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TILE,icon:"money-bills",size:l.Sizes.LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TILE,icon:"money-bills",size:l.Sizes.X_LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TILE,initials:"WW",size:l.Sizes.X_SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TILE,initials:"WW",size:l.Sizes.SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TILE,initials:"WW"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TILE,initials:"WW",size:l.Sizes.LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",circle:!0,design:l.AvatarDesigns.TILE,initials:"WW",size:l.Sizes.X_LARGE})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} icon='money-bills' size={Sizes.X_SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} icon='money-bills' size={Sizes.SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} icon='money-bills' size={Sizes.LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} icon='money-bills' size={Sizes.X_LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} initials='WW' size={Sizes.X_SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} initials='WW' size={Sizes.SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} initials='WW' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} initials='WW' size={Sizes.LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} initials='WW' size={Sizes.X_LARGE} />"),r.default.createElement("div",null,"</div>"))},{title:"Accent Colors",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"To change the accent background color, add the fd-avatar--accent-color-* class with the number indicating the desired color. The color options include numbers ranging from 1 to 10, for example: fd-avatar--accent-color-10.")),result:r.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_1,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_2,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_3,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_4,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_5,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_6,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_7,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_8,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_9,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_10,icon:"money-bills"})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_1} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_2} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_3} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_4} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_5} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_6} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_7} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_8} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_9} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_10} icon='money-bills' />"),r.default.createElement("div",null,"</div>"))},{title:"Accent Colors Shell Header Context",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"When used in Shell header context, an additional modifier class fd-avatar--shell should be added to the fd-avatar base class and the modifier class specifying the accent color fd-avatar--accent-color-*.")),result:r.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_1,design:l.AvatarDesigns.SHELL,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_2,design:l.AvatarDesigns.SHELL,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_3,design:l.AvatarDesigns.SHELL,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_4,design:l.AvatarDesigns.SHELL,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_5,design:l.AvatarDesigns.SHELL,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_6,design:l.AvatarDesigns.SHELL,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_7,design:l.AvatarDesigns.SHELL,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_8,design:l.AvatarDesigns.SHELL,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_9,design:l.AvatarDesigns.SHELL,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",accentColor:l.AccentColors.COLOR_10,design:l.AvatarDesigns.SHELL,icon:"money-bills"})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_1} design={AvatarDesigns.SHELL} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_2} design={AvatarDesigns.SHELL} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_3} design={AvatarDesigns.SHELL} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_4} design={AvatarDesigns.SHELL} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_5} design={AvatarDesigns.SHELL} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_6} design={AvatarDesigns.SHELL} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_7} design={AvatarDesigns.SHELL} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_8} design={AvatarDesigns.SHELL} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_9} design={AvatarDesigns.SHELL} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_10} design={AvatarDesigns.SHELL} icon='money-bills' />"),r.default.createElement("div",null,"</div>"))},{title:"Zoom Icon",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"If an avatar is clickable, you can show an optional badge and icon. The badge indicates that the avatar is interactive and the icon indicates the action triggered by clicking the avatar. This feature gives users visual affordance of the available action, and is particularly useful for images.")),result:r.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:l.AccentColors.COLOR_1,circle:!0,iconZoom:"edit",icon:"money-bills",size:l.Sizes.X_SMALL,onClick:()=>alert("Avatar clicked 1")}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:l.AccentColors.COLOR_2,circle:!0,iconZoom:"edit",icon:"money-bills",size:l.Sizes.SMALL,onClick:()=>alert("Avatar clicked 2")}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:l.AccentColors.COLOR_3,circle:!0,iconZoom:"edit",icon:"money-bills",onClick:()=>alert("Avatar clicked 3")}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:l.AccentColors.COLOR_4,circle:!0,iconZoom:"edit",icon:"money-bills",size:l.Sizes.LARGE,onClick:()=>alert("Avatar clicked 4")}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:l.AccentColors.COLOR_5,circle:!0,iconZoom:"edit",icon:"money-bills",size:l.Sizes.X_LARGE,onClick:()=>alert("Avatar clicked 5")}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:l.AccentColors.COLOR_6,iconZoom:"edit",initials:"WW",size:l.Sizes.X_SMALL,onClick:()=>alert("Avatar clicked 6")}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:l.AccentColors.COLOR_7,iconZoom:"edit",initials:"WW",size:l.Sizes.SMALL,onClick:()=>alert("Avatar clicked 7")}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:l.AccentColors.COLOR_8,iconZoom:"edit",initials:"WW",onClick:()=>alert("Avatar clicked 8")}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:l.AccentColors.COLOR_9,iconZoom:"edit",initials:"WW",size:l.Sizes.LARGE,onClick:()=>alert("Avatar clicked 9")}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:l.AccentColors.COLOR_10,iconZoom:"edit",initials:"WW",size:l.Sizes.X_LARGE,onClick:()=>alert("Avatar clicked 10")})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.X_SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.X_LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.X_SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.X_LARGE} />"),r.default.createElement("div",null,"</div>"))},{title:"Borders",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"You can add a very subtle border to the avatar with the fd-avatar--border modifier class.")),result:r.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",bordered:!0,design:l.AvatarDesigns.TRANSPARENT,icon:"money-bills",size:l.Sizes.X_SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",bordered:!0,design:l.AvatarDesigns.TRANSPARENT,icon:"money-bills",size:l.Sizes.SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",bordered:!0,design:l.AvatarDesigns.TRANSPARENT,icon:"money-bills"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",bordered:!0,design:l.AvatarDesigns.TRANSPARENT,icon:"money-bills",size:l.Sizes.LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",bordered:!0,design:l.AvatarDesigns.TRANSPARENT,icon:"money-bills",size:l.Sizes.X_LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",bordered:!0,circle:!0,design:l.AvatarDesigns.TRANSPARENT,initials:"WW",size:l.Sizes.X_SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",bordered:!0,circle:!0,design:l.AvatarDesigns.TRANSPARENT,initials:"WW",size:l.Sizes.SMALL}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",bordered:!0,circle:!0,design:l.AvatarDesigns.TRANSPARENT,initials:"WW"}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",bordered:!0,circle:!0,design:l.AvatarDesigns.TRANSPARENT,initials:"WW",size:l.Sizes.LARGE}),r.default.createElement(l.Avatar,{ariaLabel:"My Avatar",bordered:!0,circle:!0,design:l.AvatarDesigns.TRANSPARENT,initials:"WW",size:l.Sizes.X_LARGE})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.X_SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.X_LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.X_SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.SMALL} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.LARGE} />"),r.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.X_LARGE} />"),r.default.createElement("div",null,"</div>"))}]};t.AvatarDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},7532:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BarDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Bar",labels:[{label:"",text:"version 0.0.6",accentColor:l.AccentColors.COLOR_8},{label:"",text:"in progress",accentColor:l.AccentColors.COLOR_5},{label:"",text:"themable",accentColor:l.AccentColors.COLOR_3}],description:"The bar component is a container that holds titles, buttons and input controls. Its contents are distributed into three areas: left, middle and right. This component’s primary function is to display page headers and footers. It is mainly used to construct a Page, and acts as a building block for other components like Dialog, Popover etc.",types:[{id:"Bar",props:[{id:"cozy",type:"boolean",description:"..."},{id:"left",type:"ReactElement[]",description:"The elements to display on the left"},{id:"middle",type:"ReactElement[]",description:"The elements to display on the middle"},{id:"responsivePaddings",type:"boolean",description:"..."},{id:"right",type:"ReactElement[]",description:"The elements to display on the right"},{id:"type",type:"BarType",description:"..."}]}],examples:[{title:"Default",description:"The default bar contains a back button, page title, segmented button and product switch button. It can be displayed by using the fd-bar class, and is responsive to desktop screen sizes. The default bar is in compact mode.",result:r.default.createElement(l.Bar,{left:[r.default.createElement(l.Title,{text:"TEXT",level:l.TitleLevels.H5})],middle:[r.default.createElement(l.SegmentedButton,null,r.default.createElement(l.Button,{compact:!0,icon:"email"}),r.default.createElement(l.Button,{compact:!0,icon:"iphone",selected:!0}),r.default.createElement(l.Button,{compact:!0,icon:"notification-2"}))],right:[r.default.createElement(l.Avatar,{ariaLabel:"Avatar",circle:!0,initials:"JS",size:l.Sizes.X_SMALL}),r.default.createElement(l.Button,{compact:!0,design:l.ButtonDesigns.TRANSPARENT,icon:"grid"})]}),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<Bar"),r.default.createElement("div",null,"  left={["),r.default.createElement("div",null,"    <Title text='TEXT' level={TitleLevels.H5} />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  middle={["),r.default.createElement("div",null,"    <SegmentedButton>"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        compact"),r.default.createElement("div",null,"        icon='email'"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        compact"),r.default.createElement("div",null,"        icon='iphone'"),r.default.createElement("div",null,"        selected"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        compact"),r.default.createElement("div",null,"        icon='notification-2'"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"    </SegmentedButton>"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  right={["),r.default.createElement("div",null,"    <Avatar"),r.default.createElement("div",null,"      ariaLabel='Avatar'"),r.default.createElement("div",null,"      circle"),r.default.createElement("div",null,"      initials='JS'"),r.default.createElement("div",null,"      size={Sizes.X_SMALL}"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      compact"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='grid'"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))},{title:"Cozy",description:"The cozy bar contains a back button, icon buttons, segmented button and product switch button. It is responsive to tablet and mobile screen sizes. To apply cozy mode, add the --cozy modifier class to the container element.",result:r.default.createElement(l.Bar,{cozy:!0,left:[r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,icon:"navigation-left-arrow"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,icon:"home"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,icon:"account"})],middle:[r.default.createElement(l.SegmentedButton,null,r.default.createElement(l.Button,{icon:"email"}),r.default.createElement(l.Button,{icon:"iphone",selected:!0}),r.default.createElement(l.Button,{icon:"notification-2"}))],right:[r.default.createElement(l.Avatar,{ariaLabel:"Avatar",circle:!0,initials:"JS",size:l.Sizes.X_SMALL}),r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,icon:"grid"})]}),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<Bar"),r.default.createElement("div",null,"  left={["),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='navigation-left-arrow'"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='home'"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='account'"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  middle={["),r.default.createElement("div",null,"    <SegmentedButton>"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        icon='email'"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        icon='iphone'"),r.default.createElement("div",null,"        selected"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        icon='notification-2'"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"    </SegmentedButton>"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  right={["),r.default.createElement("div",null,"    <Avatar"),r.default.createElement("div",null,"      ariaLabel='Avatar'"),r.default.createElement("div",null,"      circle"),r.default.createElement("div",null,"      initials='JS'"),r.default.createElement("div",null,"      size={Sizes.X_SMALL}"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='grid'"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))},{title:"Responsive",description:"The bar can be made responsive with the --responsive-paddings modifier class. The paddings will automatically change with the screen size.",result:r.default.createElement(l.Bar,{responsivePaddings:!0,left:[r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,icon:"navigation-left-arrow"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,icon:"home"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,icon:"account"})],middle:[r.default.createElement(l.SegmentedButton,null,r.default.createElement(l.Button,{icon:"email"}),r.default.createElement(l.Button,{icon:"iphone",selected:!0}),r.default.createElement(l.Button,{icon:"notification-2"}))],right:[r.default.createElement(l.Avatar,{ariaLabel:"Avatar",circle:!0,initials:"JS",size:l.Sizes.X_SMALL}),r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,icon:"grid"})]}),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<Bar"),r.default.createElement("div",null,"  left={["),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='navigation-left-arrow'"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='home'"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='account'"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  middle={["),r.default.createElement("div",null,"    <SegmentedButton>"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        icon='email'"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        icon='iphone'"),r.default.createElement("div",null,"        selected"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        icon='notification-2'"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"    </SegmentedButton>"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  right={["),r.default.createElement("div",null,"    <Avatar"),r.default.createElement("div",null,"      ariaLabel='Avatar'"),r.default.createElement("div",null,"      circle"),r.default.createElement("div",null,"      initials='JS'"),r.default.createElement("div",null,"      size={Sizes.X_SMALL}"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='grid'"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))},{title:"Header",description:"The header bar contains actions that impact the entire page. It can be displayed by adding the --header modifier class to the container element.",result:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,r.default.createElement("b",null,"Default (desktop)")),r.default.createElement(l.Bar,{type:l.BarTypes.HEADER,left:[r.default.createElement(l.Button,{compact:!0,design:l.ButtonDesigns.TRANSPARENT,icon:"navigation-left-arrow"}),r.default.createElement(l.Button,{compact:!0,design:l.ButtonDesigns.TRANSPARENT,icon:"home"}),r.default.createElement(l.Button,{compact:!0,design:l.ButtonDesigns.TRANSPARENT,icon:"account"})],middle:[r.default.createElement(l.SegmentedButton,null,r.default.createElement(l.Button,{compact:!0,icon:"email"}),r.default.createElement(l.Button,{compact:!0,icon:"iphone",selected:!0}),r.default.createElement(l.Button,{compact:!0,icon:"notification-2"}))],right:[r.default.createElement(l.Avatar,{ariaLabel:"Avatar",circle:!0,initials:"JS",size:l.Sizes.X_SMALL}),r.default.createElement(l.Button,{compact:!0,design:l.ButtonDesigns.TRANSPARENT,icon:"grid"})]}),r.default.createElement("p",null,r.default.createElement("b",null,"Cozy (tablet and mobile)")),r.default.createElement(l.Bar,{cozy:!0,type:l.BarTypes.HEADER,left:[r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,icon:"navigation-left-arrow"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,icon:"home"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,icon:"account"})],middle:[r.default.createElement(l.SegmentedButton,null,r.default.createElement(l.Button,{icon:"email"}),r.default.createElement(l.Button,{icon:"iphone",selected:!0}),r.default.createElement(l.Button,{icon:"notification-2"}))],right:[r.default.createElement(l.Avatar,{ariaLabel:"Avatar",circle:!0,initials:"JS",size:l.Sizes.X_SMALL}),r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,icon:"grid"})]})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<p><b>Default (desktop)</b></p>"),r.default.createElement("div",null,"<Bar"),r.default.createElement("div",null,"  type={BarTypes.HEADER}"),r.default.createElement("div",null,"  left={["),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      compact"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='navigation-left-arrow'"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      compact"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='home'"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      compact"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='account'"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  middle={["),r.default.createElement("div",null,"    <SegmentedButton>"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        compact"),r.default.createElement("div",null,"        icon='email'"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        compact"),r.default.createElement("div",null,"        icon='iphone'"),r.default.createElement("div",null,"        selected"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        compact"),r.default.createElement("div",null,"        icon='notification-2'"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"    </SegmentedButton>"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  right={["),r.default.createElement("div",null,"    <Avatar"),r.default.createElement("div",null,"      ariaLabel='Avatar'"),r.default.createElement("div",null,"      circle"),r.default.createElement("div",null,"      initials='JS'"),r.default.createElement("div",null,"      size={Sizes.X_SMALL}"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      compact"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='grid'"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"),r.default.createElement("div",null,"<p><b>Cozy (tablet and mobile)</b></p>"),r.default.createElement("div",null,"<Bar"),r.default.createElement("div",null,"  cozy"),r.default.createElement("div",null,"  type={BarTypes.HEADER}"),r.default.createElement("div",null,"  left={["),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='navigation-left-arrow'"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='home'"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='account'"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  middle={["),r.default.createElement("div",null,"    <SegmentedButton>"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        icon='email'"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        icon='iphone'"),r.default.createElement("div",null,"        selected"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        icon='notification-2'"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"    </SegmentedButton>"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  right={["),r.default.createElement("div",null,"    <Avatar"),r.default.createElement("div",null,"      ariaLabel='Avatar'"),r.default.createElement("div",null,"      circle"),r.default.createElement("div",null,"      initials='JS'"),r.default.createElement("div",null,"      size={Sizes.X_SMALL}"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='grid'"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))},{title:"Header With Subheader",description:"To add a subheader under a header bar, the container element should have the --header-with-subheader modifier class, which will remove the element’s box shadow.",result:r.default.createElement(r.default.Fragment,null,r.default.createElement(l.Bar,{type:l.BarTypes.HEADER_WITH_SUBHEADER,left:[r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,icon:"navigation-left-arrow"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,icon:"home"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,icon:"account"})],middle:[r.default.createElement(l.SegmentedButton,null,r.default.createElement(l.Button,{icon:"email"}),r.default.createElement(l.Button,{icon:"iphone",selected:!0}),r.default.createElement(l.Button,{icon:"notification-2"}))],right:[r.default.createElement(l.Avatar,{ariaLabel:"Avatar",circle:!0,initials:"JS",size:l.Sizes.X_SMALL}),r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,icon:"grid"})]}),r.default.createElement(l.Bar,{type:l.BarTypes.SUBHEADER,middle:[r.default.createElement(l.Title,{level:l.TitleLevels.H5,text:"Title"})]})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<Bar"),r.default.createElement("div",null,"  type={BarTypes.HEADER_WITH_SUBHEADER}"),r.default.createElement("div",null,"  left={["),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='navigation-left-arrow'"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='home'"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='account'"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  middle={["),r.default.createElement("div",null,"    <SegmentedButton>"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        icon='email'"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        icon='iphone'"),r.default.createElement("div",null,"        selected"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        icon='notification-2'"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"    </SegmentedButton>"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  right={["),r.default.createElement("div",null,"    <Avatar"),r.default.createElement("div",null,"      ariaLabel='Avatar'"),r.default.createElement("div",null,"      circle"),r.default.createElement("div",null,"      initials='JS'"),r.default.createElement("div",null,"      size={Sizes.X_SMALL}"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      icon='grid'"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"),r.default.createElement("div",null,"<Bar"),r.default.createElement("div",null,"  type={BarTypes.SUBHEADER}"),r.default.createElement("div",null,"  middle={["),r.default.createElement("div",null,"    <Title"),r.default.createElement("div",null,"      level={TitleLevels.H5}"),r.default.createElement("div",null,"      text='Title'"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))},{title:"Footer",description:"The footer bar should display only closing and finalizing action buttons that impact the entire page such as Save or Cancel. It can be displayed by adding the --footer modifier class to the container element.",result:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,r.default.createElement("b",null,"Default (desktop)")),r.default.createElement(l.Bar,{type:l.BarTypes.FOOTER,right:[r.default.createElement(l.Button,{compact:!0,design:l.ButtonDesigns.EMPHASIZED,text:"Save"}),r.default.createElement(l.Button,{compact:!0,design:l.ButtonDesigns.TRANSPARENT,text:"Cancel"})]}),r.default.createElement("p",null,r.default.createElement("b",null,"Cozy (tablet and mobile)")),r.default.createElement(l.Bar,{cozy:!0,type:l.BarTypes.FOOTER,right:[r.default.createElement(l.Button,{design:l.ButtonDesigns.EMPHASIZED,text:"Save"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,text:"Cancel"})]})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<p><b>Default (desktop)</b></p>"),r.default.createElement("div",null,"<Bar"),r.default.createElement("div",null,"  type={BarTypes.FOOTER}"),r.default.createElement("div",null,"  right={["),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      compact"),r.default.createElement("div",null,"      design={ButtonDesigns.EMPHASIZED}"),r.default.createElement("div",null,"      text='Save'"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      compact"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      text='Cancel'"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"),r.default.createElement("div",null,"<p><b>Cozy (tablet and mobile)</b></p>"),r.default.createElement("div",null,"<Bar"),r.default.createElement("div",null,"  cozy"),r.default.createElement("div",null,"  type={BarTypes.FOOTER}"),r.default.createElement("div",null,"  right={["),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.EMPHASIZED}"),r.default.createElement("div",null,"      text='Save'"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      text='Cancel'"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))},{title:"Floating Footer",description:"The floating footer bar should also display only finalizing action buttons that impact the entire page. This type floats above the page at the bottom of the screen and is always visible when scrolling. It can be displayed by adding the --floating-footer modifier class to the container element.",result:r.default.createElement(r.default.Fragment,null,r.default.createElement("div",null,r.default.createElement("p",null,r.default.createElement("b",null,"Default (desktop)"))),r.default.createElement("div",{style:{position:"relative",height:"3rem"}},r.default.createElement(l.Bar,{type:l.BarTypes.FOOTER_FLOATING,right:[r.default.createElement(l.Button,{compact:!0,design:l.ButtonDesigns.EMPHASIZED,text:"Save"}),r.default.createElement(l.Button,{compact:!0,design:l.ButtonDesigns.TRANSPARENT,text:"Cancel"})]})),r.default.createElement("div",null,r.default.createElement("p",null,r.default.createElement("b",null,"Cozy (tablet and mobile)"))),r.default.createElement("div",{style:{position:"relative",height:"3rem"}},r.default.createElement(l.Bar,{cozy:!0,type:l.BarTypes.FOOTER_FLOATING,right:[r.default.createElement(l.Button,{design:l.ButtonDesigns.EMPHASIZED,text:"Save"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,text:"Cancel"})]}))),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<p><b>Default (desktop)</b></p>"),r.default.createElement("div",null,"<Bar"),r.default.createElement("div",null,"  type={BarTypes.FOOTER_FLOATING}"),r.default.createElement("div",null,"  right={["),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      compact"),r.default.createElement("div",null,"      design={ButtonDesigns.EMPHASIZED}"),r.default.createElement("div",null,"      text='Save'"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      compact"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      text='Cancel'"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"),r.default.createElement("div",null,"<p><b>Cozy (tablet and mobile)</b></p>"),r.default.createElement("div",null,"<Bar"),r.default.createElement("div",null,"  cozy"),r.default.createElement("div",null,"  type={BarTypes.FOOTER_FLOATING}"),r.default.createElement("div",null,"  right={["),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.EMPHASIZED}"),r.default.createElement("div",null,"      text='Save'"),r.default.createElement("div",null,"    />,"),r.default.createElement("div",null,"    <Button"),r.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"      text='Cancel'"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))}]};t.BarDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},6533:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BreadcrumbDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Breadcrumb",labels:[{label:"",text:"version 0.0.6",accentColor:l.AccentColors.COLOR_8},{label:"",text:"in progress",accentColor:l.AccentColors.COLOR_5},{label:"",text:"themable",accentColor:l.AccentColors.COLOR_3}],description:"The breadcrumb component is a type of navigation that indicates the position of a page within the application’s page hierarchy. Users can navigate backward by selecting the previous pages in the navigation path.",types:[{id:"Breadcrumb",props:[{id:"ariaLabel",type:"string",description:"Event called when a tab is selected"},{id:"items",type:"BreadcrumbItem[]",description:"Event called when a tab is selected"},{id:"onItemSelected",type:"(string) => void",description:"Event called when a tab is selected"}]},{id:"BreadcrumbItem",props:[{id:"text",type:"string",description:"Event called when a tab is selected"},{id:"current",type:"boolean",description:"Event called when a tab is selected"},{id:"onItemSelected",type:"() => void",description:"Event called when a tab is selected"}]}],examples:[{title:"Standard",description:"The standard breadcrumb component displays several pages in text format separated by dividers, indicating a navigation path. Each page can be specifically selected to navigate to its corresponding page. It can be displayed by using the fd-breadcrumb class.",result:r.default.createElement(l.Breadcrumb,{ariaLabel:"Product Breadcrumb",items:[{text:"Product"},{text:"Suppliers"},{text:"Titanium"},{text:"Ultra Portable"},{text:"12 inch"},{text:"Super portable deluxe"},{text:"Laptop"}]}),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<Breadcrumb"),r.default.createElement("div",null,"  ariaLabel='Product Breadcrumb'"),r.default.createElement("div",null,"  items={["),r.default.createElement("div",null,"    { text: 'Product' },"),r.default.createElement("div",null,"    { text: 'Suppliers' },"),r.default.createElement("div",null,"    { text: 'Titanium' },"),r.default.createElement("div",null,"    { text: 'Ultra Portable' },"),r.default.createElement("div",null,"    { text: '12 inch' },"),r.default.createElement("div",null,"    { text: 'Super portable deluxe' },"),r.default.createElement("div",null,"    { text: 'Laptop' },"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  onItemSelected={() => {}}"),r.default.createElement("div",null,"/>"))}]};t.BreadcrumbDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},5030:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BusyIndicatorDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Busy Indicator",labels:[{label:"",text:"version 0.0.6",accentColor:l.AccentColors.COLOR_8},{label:"",text:"in progress",accentColor:l.AccentColors.COLOR_5},{label:"",text:"themable",accentColor:l.AccentColors.COLOR_3}],description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"The busy indicator component informs the user about an ongoing operation. Only one busy indicator should be shown at a time."),r.default.createElement("p",null,r.default.createElement("strong",null,"Use the busy indicator if:")),r.default.createElement("p",null,"The ongoing operation only covers part of a screen that has multiple controls, and:"),r.default.createElement("ul",null,r.default.createElement("li",null,"You need to display additional information, or"),r.default.createElement("li",null,"The user needs to be able to cancel the operation.")),r.default.createElement("p",null,r.default.createElement("strong",null,"Do not use the busy indicator if:")),r.default.createElement("ul",null,r.default.createElement("li",null,"The operation takes less than one second."),r.default.createElement("li",null,"You need to block the screen because the user is not supposed to start another operation. In this case, use the Busy Dialog component."))),types:[{id:"BusyIndicator",props:[{id:"ariaLabel",type:"string",description:'(Optional) The aria label provided for this busy indicator (defaults to "Loading")'},{id:"size",type:"BusyIndicatorSize",description:"(Optional) The size of the busy indicator (defaults to SMALL)"},{id:"contrast",type:"boolean",description:"(Optional) Sets the busy indicator to contrst mode for display on darker backgrounds"},{id:"label",type:"string",description:"(Optional) Disaplys an additional text information below the indicator"}]}],examples:[{title:"Standard",description:"The standard busy indicator animates a sequence of cascading dots expanding and shrinking in a loop. The component comes in three sizes detailed above. To display the busy indicator, use the fd-busy-indicator class. If you want to display a certain size, add the modifier class of the desired size i.e. --m to the element.",result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"2rem"}},r.default.createElement(l.BusyIndicator,{size:l.BusyIndicatorSizes.LARGE}),r.default.createElement(l.BusyIndicator,{size:l.BusyIndicatorSizes.MEDIUM}),r.default.createElement(l.BusyIndicator,null)),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', flexDirection: 'column', gap: '2rem' }}>"),r.default.createElement("br",null),r.default.createElement("div",null,"  <BusyIndicator"),r.default.createElement("div",null,"    size={BusyIndicatorSizes.LARGE}"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("div",null,"  <BusyIndicator"),r.default.createElement("div",null,"    size={BusyIndicatorSizes.MEDIUM}"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("div",null,"  <BusyIndicator />"),r.default.createElement("br",null),r.default.createElement("div",null,"</div>>"))},{title:"Contrast Mode",description:"The busy indicator also comes in contrast mode and displays white dots against a dark background. To apply contrast mode, add contrast into the element i.e. fd-busy-indicator--m contrast.",result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"2rem",background:"cadetblue",padding:"2rem"}},r.default.createElement(l.BusyIndicator,{contrast:!0,size:l.BusyIndicatorSizes.LARGE}),r.default.createElement(l.BusyIndicator,{contrast:!0,size:l.BusyIndicatorSizes.MEDIUM}),r.default.createElement(l.BusyIndicator,{contrast:!0})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', flexDirection: 'column', gap: '2rem', background: 'cadetblue', padding: '2rem' }}>"),r.default.createElement("br",null),r.default.createElement("div",null,"  <BusyIndicator"),r.default.createElement("div",null,"    contrast"),r.default.createElement("div",null,"    size={BusyIndicatorSizes.LARGE}"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("div",null,"  <BusyIndicator"),r.default.createElement("div",null,"    contrast"),r.default.createElement("div",null,"    size={BusyIndicatorSizes.MEDIUM}"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("div",null,"  <BusyIndicator"),r.default.createElement("div",null,"    contrast"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("div",null,"</div>>"))},{title:"Extended Busy Indicator",description:"If more information needs to be displayed with the loading animation, it is replaced by the Extended Busy Indicator fd-busy-indicator-extended. The additional information is wrapped in an element with fd-busy-indicator-extended__label class.",result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"2rem"}},r.default.createElement(l.BusyIndicator,{label:"Loading data...",size:l.BusyIndicatorSizes.LARGE})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', flexDirection: 'column', gap: '2rem' }}>"),r.default.createElement("br",null),r.default.createElement("div",null,"  <BusyIndicator"),r.default.createElement("div",null,"    label='Loading data...'"),r.default.createElement("div",null,"    size={BusyIndicatorSizes.LARGE}"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("br",null),r.default.createElement("div",null,"</div>>"))},{title:"Extended Busy Indicator Inside Message Toast",description:"At the Page level the Busy Indicator should always be placed in a container. The simplest form of container will be centred on the page and inherit the color values from Message Toast.",result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",alignItems:"center"}},r.default.createElement(l.BusyIndicator,{toast:!0,label:"Loading data...",size:l.BusyIndicatorSizes.LARGE})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', flexDirection: 'column', gap: '2rem', alignItems: 'center' }}>"),r.default.createElement("br",null),r.default.createElement("div",null,"  <BusyIndicator"),r.default.createElement("div",null,"    toast"),r.default.createElement("div",null,"    label='Loading data...'"),r.default.createElement("div",null,"    size={BusyIndicatorSizes.LARGE}"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("div",null,"</div>>"))}]};t.BusyIndicatorDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},1055:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Button",labels:[{label:"",text:"version 0.0.3",accentColor:l.AccentColors.COLOR_8},{label:"",text:"in progress",accentColor:l.AccentColors.COLOR_5},{label:"",text:"themable",accentColor:l.AccentColors.COLOR_3}],description:"The button component is used to trigger an action. All buttons are characterized by the fd-button class and an additional modifier class to specify each button type.",types:[{id:"Button",props:[{id:"selectedTab",type:"boolean",description:"The identifier of the currently selected tab"}]}],examples:[{title:"Primary",result:r.default.createElement("div",{style:{display:"flex",gap:"0.5rem"}},r.default.createElement(l.Button,{text:"Create"}),r.default.createElement(l.Button,{ariaLabel:"Add to cart",icon:"cart"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.EMPHASIZED,text:"Save"})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem' }}>"),r.default.createElement("br",null),r.default.createElement("div",null,"  <Button"),r.default.createElement("div",null,"    text='Create'"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("div",null,"  <Button"),r.default.createElement("div",null,"    ariaLabel='Add to cart'"),r.default.createElement("div",null,"    icon='cart'"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("div",null,"  <Button"),r.default.createElement("div",null,"    design={ButtonDesigns.EMPHASIZED}"),r.default.createElement("div",null,"    text='Save'"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("div",null,"</div>"))},{title:"Button styles",description:r.default.createElement("ul",null,r.default.createElement("li",null,r.default.createElement("strong",null,"Default button")," is used for neutral or informative (secondary) actions."),r.default.createElement("li",null,r.default.createElement("strong",null,"Emphasized button")," is used to indicate the primary action on the screen."),r.default.createElement("li",null,r.default.createElement("strong",null,"Ghost button")," is used to trigger secondary actions. If a page already has a primary action, but you also need to highlight the most important action in a content toolbar, use the ghost style."),r.default.createElement("li",null,r.default.createElement("strong",null,"Positive button")," is used to trigger positive semantic actions, such as Accept and should always be accompanied by text."),r.default.createElement("li",null,r.default.createElement("strong",null,"Negative button")," is used to trigger negative semantic actions, such as Reject and should always be accompanied by text."),r.default.createElement("li",null,r.default.createElement("strong",null,"Attention button")," is used to trigger a semantic action that needs attention and should always be accompanied by text."),r.default.createElement("li",null,r.default.createElement("strong",null,"Transparent button")," is used to trigger a negative path action within a header or footer bar, and secondary actions in toolbars.")),result:r.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap"}},r.default.createElement(l.Button,{text:"Default Button"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.EMPHASIZED,text:"Emphasized Button"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.GHOST,text:"Ghost Button"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.POSITIVE,text:"Positive Button"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.NEGATIVE,text:"Negative Button"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.ATTENTION,text:"Attention Button"}),r.default.createElement(l.Button,{design:l.ButtonDesigns.TRANSPARENT,text:"Transparent Button"})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>"),r.default.createElement("br",null),r.default.createElement("div",null,"  <Button"),r.default.createElement("div",null,"    text='Default Button'"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("div",null,"  <Button"),r.default.createElement("div",null,"    design={ButtonDesigns.EMPHASIZED}"),r.default.createElement("div",null,"    text='Emphasized Button'"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("div",null,"  <Button"),r.default.createElement("div",null,"    design={ButtonDesigns.GHOST}"),r.default.createElement("div",null,"    text='Ghost Button'"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("div",null,"  <Button"),r.default.createElement("div",null,"    design={ButtonDesigns.POSITIVE}"),r.default.createElement("div",null,"    text='Positive Button'"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("div",null,"  <Button"),r.default.createElement("div",null,"    design={ButtonDesigns.NEGATIVE}"),r.default.createElement("div",null,"    text='Negative Button'"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("div",null,"  <Button"),r.default.createElement("div",null,"    design={ButtonDesigns.ATTENTION}"),r.default.createElement("div",null,"    text='Attention Button'"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("div",null,"  <Button"),r.default.createElement("div",null,"    design={ButtonDesigns.TRANSPARENT}"),r.default.createElement("div",null,"    text='Transparent Button'"),r.default.createElement("div",null,"  />"),r.default.createElement("br",null),r.default.createElement("div",null,"</div>"))},{title:"Segmented button",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,'The segmented button displays a group of options. Only one option can be active at a time by selecting it, while the others remain or become inactive when the initial option is selected. This button type was previously known as "button group" and is comparable to a radio button group.'),r.default.createElement("p",null,'It can be displayed by using the fd-segmented-button class with role="group" and the aria-label="Group label" attribute.')),result:r.default.createElement("div",{style:{display:"flex",alignItems:"center",gap:"0.5rem",flexWrap:"wrap"}},r.default.createElement(l.SegmentedButton,{ariaLabel:"Group label"},r.default.createElement(l.Button,{icon:"survey"}),r.default.createElement(l.Button,{icon:"pie-chart",selected:!0}),r.default.createElement(l.Button,{icon:"pool"})),r.default.createElement(l.SegmentedButton,{ariaLabel:"Group label"},r.default.createElement(l.Button,{text:"Left",compact:!0}),r.default.createElement(l.Button,{text:"Middle 1",compact:!0}),r.default.createElement(l.Button,{text:"Middle 2",compact:!0,selected:!0}),r.default.createElement(l.Button,{text:"Right",compact:!0}))),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', flexWrap: 'wrap' }}>"),r.default.createElement("br",null),r.default.createElement("div",null,"  <SegmentedButton ariaLabel='Group label'>"),r.default.createElement("div",null,"    <Button icon='survey' />"),r.default.createElement("div",null,"    <Button icon='pie-chart' selected />"),r.default.createElement("div",null,"    <Button icon='pool' />"),r.default.createElement("div",null,"  </SegmentedButton>"),r.default.createElement("br",null),r.default.createElement("div",null,"  <SegmentedButton ariaLabel='Group label'>"),r.default.createElement("div",null,"    <Button text='Left' compact />"),r.default.createElement("div",null,"    <Button text='Middle 1' compact />"),r.default.createElement("div",null,"    <Button text='Middle 2' compact selected />"),r.default.createElement("div",null,"    <Button text='Right' compact />"),r.default.createElement("div",null,"  </SegmentedButton>"),r.default.createElement("br",null),r.default.createElement("div",null,"</div>"))}]};t.ButtonDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},7340:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarDemo=void 0;const r=a(n(7294));t.CalendarDemo=()=>r.default.createElement("div",null,"CALENDAR")},1974:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CardDemo=void 0;const r=a(n(7294));t.CardDemo=()=>r.default.createElement("div",null,"CARD")},3242:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DialogDemo=void 0;const r=a(n(7294));t.DialogDemo=()=>r.default.createElement("div",null,"DIALOG")},7663:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormCheckBoxDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Form Check Box",labels:[{label:"",text:"version 0.0.3",accentColor:l.AccentColors.COLOR_8},{label:"",text:"on going",accentColor:l.AccentColors.COLOR_6},{label:"",text:"themable",accentColor:l.AccentColors.COLOR_3}],description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"A checkbox lets the user set a binary value such as “true/false”. When the user selects the checkbox, it toggles between:"),r.default.createElement("ul",null,r.default.createElement("li",null,r.default.createElement("strong",null,"Checked"),": the state described by the checkbox text applies, or that the item has been chosen."),r.default.createElement("li",null,r.default.createElement("strong",null,"Un-checked"),": the state described by the checkbox is not applied."),r.default.createElement("li",null,r.default.createElement("strong",null,"Tri-state"),": a state that indicates it is neither checked nor unchecked. JavaScript must be used to set the input's 'indeterminate' property to true. The main purpose of the tri-state is to represent a mixed selection of states of dependent input fields. If some (but not all) of the dependent fields are selected, the checkbox shows a partially selected state. This is only a visual state and can’t be achieved by a direct user interaction. In this example the indeterminate state is set on page load.")),r.default.createElement("p",null,"Note: With checkboxes, all options are visible, and the user can make one or more selections.")),types:[{id:"FormCheckBox",props:[{id:"",type:"",description:""}]}],examples:[{title:"Desktop",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"A checkbox can be displayed in two different sizes desktop (compact) and mobile (default). On desktop screens, the checkbox appears smaller and uses the fd-checkbox__label--compact modifier class.")),result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},r.default.createElement(l.FormCheckBox,{compact:!0,text:"Apple",onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{checked:!0,compact:!0,text:"Banana",onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{compact:!0,disabled:!0,text:"Kiwi",onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{checked:!0,compact:!0,disabled:!0,text:"Lemon",onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{compact:!0,indeterminate:!0,text:"All Fruits",onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{compact:!0,disabled:!0,indeterminate:!0,text:"All Vegetables",onChange:e=>{alert(`Checkbox: ${e}`)}})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Required",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"To show that a checkbox input is required, use the fd-checkbox__label--required class.")),result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},r.default.createElement(l.FormCheckBox,{compact:!0,text:"Required Checkbox",required:!0,onChange:e=>{alert(`Checkbox: ${e}`)}})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"State",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"Checkboxes can display several interaction states to communicate semantic meaning to the users. To display different states, add the classes below to the fd-form-item:")),result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column"}},r.default.createElement(l.FormCheckBox,{text:"Error Checkbox",state:l.InputStates.ERROR,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{text:"Error Checkbox Selected",state:l.InputStates.ERROR,checked:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{text:"Error Checkbox Indeterminate",state:l.InputStates.ERROR,indeterminate:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement("br",null),r.default.createElement(l.FormCheckBox,{text:"Success Checkbox",state:l.InputStates.SUCCESS,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{text:"Success Checkbox Selected",state:l.InputStates.SUCCESS,checked:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{text:"Success Checkbox Indeterminate",state:l.InputStates.SUCCESS,indeterminate:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement("br",null),r.default.createElement(l.FormCheckBox,{text:"Warning Checkbox",state:l.InputStates.WARNING,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{text:"Warning Checkbox Selected",state:l.InputStates.WARNING,checked:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{text:"Warning Checkbox Indeterminate",state:l.InputStates.WARNING,indeterminate:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement("br",null),r.default.createElement(l.FormCheckBox,{text:"Information Checkbox",state:l.InputStates.INFORMATION,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{text:"Information Checkbox Selected",state:l.InputStates.INFORMATION,checked:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{text:"Information Checkbox Indeterminate",state:l.InputStates.INFORMATION,indeterminate:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement("br",null),r.default.createElement(l.FormCheckBox,{text:"Disabled Checkbox",disabled:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{text:"Disabled Checkbox Selected",disabled:!0,checked:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{text:"Disabled Checkbox Indeterminate",disabled:!0,indeterminate:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement("br",null),r.default.createElement(l.FormCheckBox,{text:"Read-Only Checkbox",readOnly:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{text:"Read-Only Checkbox Selected",readOnly:!0,checked:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),r.default.createElement(l.FormCheckBox,{text:"Read-Only Checkbox Indeterminate",readOnly:!0,indeterminate:!0,onChange:e=>{alert(`Checkbox: ${e}`)}})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.FormCheckBoxDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},6661:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormDemo=void 0;const r=a(n(7294));t.FormDemo=()=>r.default.createElement("div",null,"FORM")},9033:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormInputDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Form Input",labels:[{label:"",text:"version 0.0.3",accentColor:l.AccentColors.COLOR_8},{label:"",text:"on going",accentColor:l.AccentColors.COLOR_6},{label:"",text:"themable",accentColor:l.AccentColors.COLOR_3}],description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"Inputs are used to collect data from the user and should always be paired with a label. When a field is required, the label should include an asterisk (*)."),r.default.createElement("p",null,"A text input field allows users to enter and edit text or numeric values in one line. To help users enter a valid value, it provides additional features like “auto-complete”, “suggestions”, and “value help”.")),types:[{id:"FormInput",props:[{id:"",type:"",description:""}]}],examples:[{title:"Default",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"The standard input component can be displayed by using fd-input class. It can also be displayed in compact mode by adding the fd-input--compact class.")),result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},r.default.createElement(l.FormInput,{label:"Default Input:",placeholder:"Field placeholder text",value:"",onChange:e=>{alert(`Input: ${e}`)}}),r.default.createElement(l.FormInput,{compact:!0,label:"Compact Input:",placeholder:"Field placeholder text",value:"",onChange:e=>{alert(`Input: ${e}`)}}),r.default.createElement(l.FormInput,{label:"Required Input:",placeholder:"Field placeholder text",required:!0,value:"",onChange:e=>{alert(`Input: ${e}`)}}),r.default.createElement(l.FormInput,{label:"Password Input:",type:l.InputTypes.PASSWORD,value:"",onChange:e=>{alert(`Input: ${e}`)}})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Horizontal",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"Forms can be displayed in a horizontal direction instad of the default vertical one.")),result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},r.default.createElement(l.FormInput,{label:"Default Input:",horizontal:!0,placeholder:"Field placeholder text",value:"",onChange:e=>{alert(`Input: ${e}`)}}),r.default.createElement(l.FormInput,{compact:!0,horizontal:!0,label:"Compact Input:",placeholder:"Field placeholder text",value:"",onChange:e=>{alert(`Input: ${e}`)}}),r.default.createElement(l.FormInput,{horizontal:!0,label:"Required Input:",placeholder:"Field placeholder text",required:!0,value:"",onChange:e=>{alert(`Input: ${e}`)}}),r.default.createElement(l.FormInput,{horizontal:!0,label:"Password Input:",type:l.InputTypes.PASSWORD,value:"",onChange:e=>{alert(`Input: ${e}`)}})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"States",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"The state of the input field can reflect validity of the data entered, whether the input data is editable or disabled."),r.default.createElement("ul",null,r.default.createElement("li",null,"Default: The field is editable but no validation has occurred"),r.default.createElement("li",null,"Success: The data format entered has been validated and it's correct, such as an email address."),r.default.createElement("li",null,"Error: The data entered is not valid and must be corrected."),r.default.createElement("li",null,"Warning: The data entered is formatted correctly but there are other issues are problematic but will not stop the user from moving forward."),r.default.createElement("li",null,"Disabled: This indicates the field is not editable. A common use case is that this field is dependent on a previous entry or selection within the form."),r.default.createElement("li",null,"Read Only: Used to display static information in the context of a form.")),r.default.createElement("p",null,"Along with Error and Warning, error messages should be displayed below the field so the user can correct the error and move forward.")),result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},r.default.createElement(l.FormInput,{label:"Default Input:",placeholder:"Field placeholder text",value:"",onChange:e=>{alert(`Input: ${e}`)}}),r.default.createElement(l.FormInput,{label:"Error Input:",placeholder:"Field placeholder text",state:l.InputStates.ERROR,value:"",onChange:e=>{alert(`Input: ${e}`)}}),r.default.createElement(l.FormInput,{label:"Success Input:",placeholder:"Field placeholder text",state:l.InputStates.SUCCESS,value:"",onChange:e=>{alert(`Input: ${e}`)}}),r.default.createElement(l.FormInput,{label:"Warning Input:",placeholder:"Field placeholder text",state:l.InputStates.WARNING,value:"",onChange:e=>{alert(`Input: ${e}`)}}),r.default.createElement(l.FormInput,{label:"Information Input:",placeholder:"Field placeholder text",state:l.InputStates.INFORMATION,value:"",onChange:e=>{alert(`Input: ${e}`)}}),r.default.createElement(l.FormInput,{disabled:!0,label:"Disabled Input:",placeholder:"Field placeholder text",value:"",onChange:e=>{alert(`Input: ${e}`)}}),r.default.createElement(l.FormInput,{label:"Read-Only Input:",placeholder:"Field placeholder text",readOnly:!0,value:"",onChange:e=>{alert(`Input: ${e}`)}})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"State Messages",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"Along with Error and Warning, error messages should be displayed below the field so the user can correct the error and move forward.")),result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},r.default.createElement(l.FormInput,{label:"Error Input:",placeholder:"Field placeholder text",state:l.InputStates.ERROR,stateMessage:"Error message",value:"",onChange:e=>{alert(`Input: ${e}`)}}),r.default.createElement(l.FormInput,{label:"Success Input:",placeholder:"Field placeholder text",state:l.InputStates.SUCCESS,stateMessage:"Success message",value:"",onChange:e=>{alert(`Input: ${e}`)}}),r.default.createElement(l.FormInput,{label:"Warning Input:",placeholder:"Field placeholder text",state:l.InputStates.WARNING,stateMessage:"Warning message",value:"",onChange:e=>{alert(`Input: ${e}`)}}),r.default.createElement(l.FormInput,{label:"Information Input:",placeholder:"Field placeholder text",state:l.InputStates.INFORMATION,stateMessage:"Information message",value:"",onChange:e=>{alert(`Input: ${e}`)}})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.FormInputDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},8438:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormStepInputDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Form Step Input",labels:[{text:"version 0.0.3",accentColor:l.AccentColors.COLOR_8},{text:"on going",accentColor:l.AccentColors.COLOR_6},{text:"themable",accentColor:l.AccentColors.COLOR_3}],description:"The step input control allows the user to change the input values in predefined increments (steps).",types:[{id:"FormStepInput",props:[{id:"",type:"",description:""}]}],examples:[{title:"Default",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"The default step input displays an input field with a plus and minus icon on opposing sides to either increase or decrease the value. It is displayed in cozy mode, which is ideal for mobile and tablet screens.")),result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},r.default.createElement(l.FormStepInput,{label:"Default Step Input:",value:0,onChange:e=>{alert(`Step Input: ${e}`)}})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Compact",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"The step input can be displayed in compact mode, which is ideal for desktop screens. To display a compact step input, add the --compact modifier class to the main element, as well as the button and input elements.")),result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},r.default.createElement(l.FormStepInput,{compact:!0,label:"Compact Step Input:",value:0,onChange:e=>{alert(`Step Input: ${e}`)}})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"States",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"Step input can be displayed in various states such as Success, Information, Error and Warning.")),result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},r.default.createElement(l.FormStepInput,{label:"Error Step Input:",state:l.InputStates.ERROR,value:0,onChange:e=>{alert(`Step Input: ${e}`)}}),r.default.createElement(l.FormStepInput,{label:"Succes Step Input:",state:l.InputStates.SUCCESS,value:0,onChange:e=>{alert(`Step Input: ${e}`)}}),r.default.createElement(l.FormStepInput,{label:"Warning Step Input:",state:l.InputStates.WARNING,value:0,onChange:e=>{alert(`Step Input: ${e}`)}}),r.default.createElement(l.FormStepInput,{label:"Information Step Input:",state:l.InputStates.INFORMATION,value:0,onChange:e=>{alert(`Step Input: ${e}`)}})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Disabled",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"Step input can be disabled by adding the is-disabled class to the main element.")),result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},r.default.createElement(l.FormStepInput,{label:"Disabled Step Input:",disabled:!0,value:0,onChange:e=>{alert(`Step Input: ${e}`)}})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Read Only",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"Step input can be disabled by adding the is-disabled class to the main element.")),result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},r.default.createElement(l.FormStepInput,{label:"Read-Only Step Input:",readOnly:!0,value:0,onChange:e=>{alert(`Step Input: ${e}`)}})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.FormStepInputDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},4757:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IconDemo=void 0;const r=a(n(7294));t.IconDemo=()=>r.default.createElement("div",null,"ICON")},6170:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IconTabBarDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Icon Tab Bar",labels:[{text:"version 0.0.7",accentColor:l.AccentColors.COLOR_8},{text:"in progress",accentColor:l.AccentColors.COLOR_5},{text:"themable",accentColor:l.AccentColors.COLOR_3}],description:"Info Label is a small non-interactive numeric or text-based label. Its primary use is to add user-defined characteristic to an object.",types:[{id:"InfoTabBar",props:[{id:"selectedTab",type:"boolean",description:"The identifier of the currently selected tab"},{id:"tabs",type:"IconTabBarItemProperties[]",description:"List of tabs to display"},{id:"onTabSelect",type:"Callback (string) => void",description:"Event called when a tab is selected"}]}],examples:[{title:"Text Only (Inline mode)",description:"The text-only variant is one of the most common types. It allows longer labels, and can also display counters next to the text to indicate the number of items on the tab page. The labels of the tabs do not get truncated. The full text is always shown. As a result, you need to ensure that your labels do not become too long. They should still be easy to read on smaller screens. The control has the same look and feel in Cozy and Compact mode.",result:r.default.createElement(l.IconTabBar,{selectedTab:"tab1",tabs:[{id:"tab1",title:"Info"},{id:"tab2",title:"Attachements (16)"},{id:"tab3",title:"Approvals (42)"}]}),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<IconTabBar"),r.default.createElement("div",null,"  selectedTab='tab1'"),r.default.createElement("div",null,"  tabs={["),r.default.createElement("div",null,"    { id: 'tab1', title: 'Info' },"),r.default.createElement("div",null,"    { id: 'tab2', title: 'Attachements (16)' },"),r.default.createElement("div",null,"    { id: 'tab3', title: 'Approvals (42)' },"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))},{title:"Text Only (Inline mode) Semantic Colors",result:r.default.createElement(l.IconTabBar,{tabs:[{id:"tab1",title:"Section Positive",semantic:l.Semantics.POSITIVE,selected:!0},{id:"tab2",title:"Section Negative",semantic:l.Semantics.NEGATIVE,selected:!0},{id:"tab3",title:"Section Critical",semantic:l.Semantics.CRITICAL,selected:!0},{id:"tab4",title:"Section Informative",semantic:l.Semantics.INFORMATIVE,selected:!0}]}),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<IconTabBar"),r.default.createElement("div",null,"  tabs={["),r.default.createElement("div",null,"    { id: 'tab1', title: 'Section Positive', semantic: Semantics.POSITIVE, selected: true },"),r.default.createElement("div",null,"    { id: 'tab2', title: 'Section Negative', semantic: Semantics.NEGATIVE, selected: true },"),r.default.createElement("div",null,"    { id: 'tab3', title: 'Section Critical', semantic: Semantics.CRITICAL, selected: true },"),r.default.createElement("div",null,"    { id: 'tab4', title: 'Section Informative', semantic: Semantics.INFORMATIVE, selected: true },"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))},{title:"Counters and Text",description:"Counters can be shown on top of labels. In this case you need to apply the fd-icon-tab-bar--counters modifier class. The control has the same look and feel in Cozy and Compact mode.",result:r.default.createElement(l.IconTabBar,{design:l.IconTabBarDesigns.COUNTERS,tabs:[{id:"tab1",title:"Info"},{id:"tab2",title:"Attachements",counter:"16",selected:!0},{id:"tab3",title:"Approvals",counter:"42"}]}),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Icon Only in Compact Mode",description:"In compact mode you need to apply an additional modifier class fd-icon-tab-bar--compact.",result:r.default.createElement(l.IconTabBar,{compact:!0,design:l.IconTabBarDesigns.ICON_ONLY,tabs:[{id:"tab1",icon:"cart",counter:"2"},{id:"tab2",icon:"pending",counter:"23",selected:!0},{id:"tab3",icon:"picture",counter:"10"}]}),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Icon Only Semantic Colors",result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"2rem"}},r.default.createElement(l.IconTabBar,{design:l.IconTabBarDesigns.ICON_ONLY,tabs:[{id:"tab1",counter:"2",icon:"history",semantic:l.Semantics.POSITIVE},{id:"tab2",counter:"23",icon:"card",selected:!0,semantic:l.Semantics.NEGATIVE},{id:"tab3",counter:"10",icon:"cart",semantic:l.Semantics.CRITICAL},{id:"tab4",counter:"10",icon:"cart",semantic:l.Semantics.INFORMATIVE}]}),r.default.createElement(l.IconTabBar,{compact:!0,design:l.IconTabBarDesigns.ICON_ONLY,tabs:[{id:"tab1",counter:"2",icon:"history",semantic:l.Semantics.POSITIVE},{id:"tab2",counter:"23",icon:"card",selected:!0,semantic:l.Semantics.NEGATIVE},{id:"tab3",counter:"10",icon:"cart",semantic:l.Semantics.CRITICAL},{id:"tab4",counter:"10",icon:"cart",semantic:l.Semantics.INFORMATIVE}]})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Icon",description:"To display Icon Tabs with labels and counters you need to apply the fd-icon-tab-bar--icon modifier class. The counters are optional and can be ommited. The label is always positioned at the bottom. If you decide to use labels, use them for all tabs. The badge is rendered at the top right hand corner of the icon container. Consider using shorter labels or text tabs (without icons), since text tabs cannot get truncated.",result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"2rem"}},r.default.createElement(l.IconTabBar,{design:l.IconTabBarDesigns.ICON,tabs:[{id:"tab1",icon:"filter",selected:!0,title:"Description"},{id:"tab2",counter:"99",icon:"customer",title:"Description"},{id:"tab3",counter:"56 of 123",icon:"chain-link",title:"Description"}]}),r.default.createElement(l.IconTabBar,{compact:!0,design:l.IconTabBarDesigns.ICON,tabs:[{id:"tab1",counter:"25 of 789 items",icon:"iphone",title:"Claim Overweights"},{id:"tab2",icon:"record",selected:!0,title:"Confirm"},{id:"tab3",counter:"12",icon:"world",title:"Checks"}]}),r.default.createElement(l.IconTabBar,{design:l.IconTabBarDesigns.ICON,tabs:[{id:"tab1",counter:"2",icon:"play",selected:!0,semantic:l.Semantics.POSITIVE,title:"Description"},{id:"tab2",counter:"2",icon:"unfavorite",semantic:l.Semantics.NEGATIVE,title:"Description"},{id:"tab3",counter:"2",icon:"shipping-status",semantic:l.Semantics.CRITICAL,title:"Description"}]})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Process",description:"You can also use the tab bar to depict a process. In this case, each tab stands for one step. You need to add the fd-icon-tab-bar--process modifier class and a sibling html element with fd-icon-tab-bar__separator class to the tab.",result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"2rem"}},r.default.createElement(l.IconTabBar,{design:l.IconTabBarDesigns.ICON,process:!0,tabs:[{id:"tab1",badge:!0,icon:"filter",selected:!0,title:"Description"},{id:"tab2",counter:"99",icon:"customer",title:"Description"},{id:"tab3",counter:"56 of 123",icon:"chain-link",title:"Description"}]}),r.default.createElement(l.IconTabBar,{compact:!0,design:l.IconTabBarDesigns.ICON,process:!0,tabs:[{id:"tab1",icon:"iphone",counter:"25 of 789 items",title:"Claim Overweights"},{id:"tab2",icon:"record",title:"Confirm",selected:!0},{id:"tab3",icon:"world",counter:"12",title:"Checks"}]}),r.default.createElement(l.IconTabBar,{design:l.IconTabBarDesigns.ICON,process:!0,tabs:[{id:"tab1",counter:"2",icon:"play",title:"Description",semantic:l.Semantics.POSITIVE,selected:!0},{id:"tab2",counter:"2",icon:"unfavorite",semantic:l.Semantics.NEGATIVE,title:"Description"},{id:"tab3",counter:"2",icon:"shipping-status",semantic:l.Semantics.CRITICAL,title:"Description"}]})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Universal Icon Tab Bar Multi Click Area",description:"In case of two click areas for tabs with sub-tabs, the behaviour for regular tabs (without sub-items) remains unchanged, like described above the tabs get selected immediately. Tabs with two click areas behave differently: when the main part of the tab is clicked, it is highlighted and then selected immediately. Clicking the second area opens a menu (Popover) containing the sub-items. Once a sub-item is clicked, the main tab is highlighted as selected.",result:r.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"2rem"}},r.default.createElement(l.IconTabBar,{design:l.IconTabBarDesigns.ICON,tabs:[{id:"tab1",action:"decline",badge:!0,icon:"filter",selected:!0,title:"Description"},{id:"tab2",action:"decline",counter:"99",icon:"customer",title:"Description"},{id:"tab3",action:"decline",counter:"56 of 123",icon:"chain-link",title:"Description"}]}),r.default.createElement(l.IconTabBar,{compact:!0,tabs:[{id:"tab1",badge:!0,action:"decline",title:"Claim Overweights"},{id:"tab2",action:"decline",title:"Confirm",selected:!0},{id:"tab3",action:"decline",title:"Checks"}]})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.IconTabBarDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},6446:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.InfoLabelDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Info Label",labels:[{text:"version 0.0.3",accentColor:l.AccentColors.COLOR_8},{text:"reviewed 0.0.3",accentColor:l.AccentColors.COLOR_6},{text:"themable",accentColor:l.AccentColors.COLOR_3}],description:"Info Label is a small non-interactive numeric or text-based label. Its primary use is to add user-defined characteristic to an object. Use the Info Label base class with following modifiers:",types:[{id:"InfoLabel",props:[{id:"icon",type:"string",description:"(Optional) If provided, an icon will be displayed as the first element of the Info Label"},{id:"text",type:"string",description:"(Optional) If provided, a text will be displayed in the Info Label"},{id:"display",type:"boolean",description:"(Optional) Apply the default styling to the Info Label"},{id:"numeric",type:"boolean",description:"(Optional) Subbtle style modification to enhance display in case of numeric information"},{id:"accentColor",type:"AccentColor",description:"(Optional) Apply semantic color to Info Label"}]}],examples:[{title:"Color Flavors",description:"Use the fd-info-label--accent-color-* modifier class to apply semantic color to Info Label. Options include numbers from 1 to 10.",result:r.default.createElement("div",{style:{display:"flex",gap:"0.25rem",flexWrap:"wrap"}},r.default.createElement(l.InfoLabel,{text:"color 1",accentColor:l.AccentColors.COLOR_1}),r.default.createElement(l.InfoLabel,{text:"color 2",accentColor:l.AccentColors.COLOR_2}),r.default.createElement(l.InfoLabel,{text:"color 3",accentColor:l.AccentColors.COLOR_3}),r.default.createElement(l.InfoLabel,{text:"color 4",accentColor:l.AccentColors.COLOR_4}),r.default.createElement(l.InfoLabel,{text:"color 5",accentColor:l.AccentColors.COLOR_5}),r.default.createElement(l.InfoLabel,{text:"color 6",accentColor:l.AccentColors.COLOR_6}),r.default.createElement(l.InfoLabel,{text:"color 7",accentColor:l.AccentColors.COLOR_7}),r.default.createElement(l.InfoLabel,{text:"color 8",accentColor:l.AccentColors.COLOR_8}),r.default.createElement(l.InfoLabel,{text:"color 9",accentColor:l.AccentColors.COLOR_9}),r.default.createElement(l.InfoLabel,{text:"color 10",accentColor:l.AccentColors.COLOR_10})),code:r.default.createElement("div",null,r.default.createElement("div",null,"<InfoLabel text='color 1' accentColor={AccentColors.COLOR_1} />"),r.default.createElement("div",null,"<InfoLabel text='color 2' accentColor={AccentColors.COLOR_2} />"),r.default.createElement("div",null,"<InfoLabel text='color 3' accentColor={AccentColors.COLOR_3} />"),r.default.createElement("div",null,"<InfoLabel text='color 4' accentColor={AccentColors.COLOR_4} />"),r.default.createElement("div",null,"<InfoLabel text='color 5' accentColor={AccentColors.COLOR_5} />"),r.default.createElement("div",null,"<InfoLabel text='color 6' accentColor={AccentColors.COLOR_6} />"),r.default.createElement("div",null,"<InfoLabel text='color 7' accentColor={AccentColors.COLOR_7} />"),r.default.createElement("div",null,"<InfoLabel text='color 8' accentColor={AccentColors.COLOR_8} />"),r.default.createElement("div",null,"<InfoLabel text='color 9' accentColor={AccentColors.COLOR_9} />"),r.default.createElement("div",null,"<InfoLabel text='color 10' accentColor={AccentColors.COLOR_10} />"))},{title:"Info Label with Icon",description:"Use the fd-info-label--icon modifier class and icon type to create Info Label with Icon.",result:r.default.createElement("div",{style:{display:"flex",gap:"0.25rem",flexWrap:"wrap"}},r.default.createElement(l.InfoLabel,{text:"Info Label",icon:"past",accentColor:l.AccentColors.COLOR_1}),r.default.createElement(l.InfoLabel,{icon:"action",accentColor:l.AccentColors.COLOR_2})),code:r.default.createElement("div",null,r.default.createElement("div",null,"<InfoLabel text='Info Label' icon='past' accentColor={AccentColors.COLOR_1} />"),r.default.createElement("div",null,"<InfoLabel icon='action' accentColor={AccentColors.COLOR_2} />"))},{title:"Numeric Info Label",description:"For Numeric Info Label use the fd-info-label--numeric modifier class.",result:r.default.createElement("div",{style:{display:"flex",gap:"0.25rem",flexWrap:"wrap"}},r.default.createElement(l.InfoLabel,{text:"6",numeric:!0,accentColor:l.AccentColors.COLOR_1}),r.default.createElement(l.InfoLabel,{text:"6.2",numeric:!0,accentColor:l.AccentColors.COLOR_2}),r.default.createElement(l.InfoLabel,{text:"42K",numeric:!0,accentColor:l.AccentColors.COLOR_3})),code:r.default.createElement("div",null,r.default.createElement("div",null,"<InfoLabel text='6' numeric accentColor={AccentColors.COLOR_1} />"),r.default.createElement("div",null,"<InfoLabel text='6.2' numeric accentColor={AccentColors.COLOR_2} />"),r.default.createElement("div",null,"<InfoLabel text='42K' numeric accentColor={AccentColors.COLOR_3} />"))},{title:"Display Only Info Label",description:"For Display Only Info Label use the fd-info-label--display modifier class",result:r.default.createElement("div",{style:{display:"flex",gap:"0.25rem",flexWrap:"wrap"}},r.default.createElement(l.InfoLabel,{text:"system status",display:!0}),r.default.createElement(l.InfoLabel,{text:"42",display:!0,numeric:!0}),r.default.createElement(l.InfoLabel,{icon:"action",display:!0}),r.default.createElement(l.InfoLabel,{text:"Info Label",icon:"past",display:!0})),code:r.default.createElement("div",null,r.default.createElement("div",null,"<InfoLabel text='system status' display />"),r.default.createElement("div",null,"<InfoLabel text='42' display numeric />"),r.default.createElement("div",null,"<InfoLabel icon='action' display />"),r.default.createElement("div",null,"<InfoLabel text='Info Label' icon='past' display />"))}]};t.InfoLabelDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},8398:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.LinkDemo=void 0;const r=a(n(7294));t.LinkDemo=()=>r.default.createElement("div",null,"LINK")},74:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ListDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o=n(2531),u={title:"List",labels:[{text:"version 0.0.7",accentColor:l.AccentColors.COLOR_8},{text:"in progress",accentColor:l.AccentColors.COLOR_5},{text:"themable",accentColor:l.AccentColors.COLOR_3}],description:"In SAP Fiori, we distinguish between tables and lists. Both usually contain homogeneous data, but lists generally have rather basic data, while the data in tables tend to be more complex. Lists are mostly used in the master list for a master-detail scenario using the flexible column layout, as well as in Popovers or Dialogs.",types:[{id:"List",props:[{id:"selectedTab",type:"boolean",description:"The identifier of the currently selected tab"},{id:"tabs",type:"IconTabBarItemProperties[]",description:"List of tabs to display"},{id:"onTabSelect",type:"Callback (string) => void",description:"Event called when a tab is selected"}]},{id:"ListItem",props:[{id:"selectedTab",type:"boolean",description:"The identifier of the currently selected tab"},{id:"tabs",type:"IconTabBarItemProperties[]",description:"List of tabs to display"},{id:"onTabSelect",type:"Callback (string) => void",description:"Event called when a tab is selected"}]}],examples:[{title:"Default",description:"The default standard list dislays list items in the standard size, which is ideal for mobile.",result:r.default.createElement(r.default.Fragment,null,r.default.createElement(l.List,{items:[{text:"List Item 1"},{text:"List Item 2"},{text:"List Item 3"},{text:"List Item 4"}]})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Compact",description:"To display the standard list in compact mode (for desktop), add the fd-list--compact modifier class to the main element.",result:r.default.createElement(r.default.Fragment,null,r.default.createElement(l.List,{compact:!0,items:[{text:"List Item 1"},{text:"List Item 2"},{text:"List Item 3"},{text:"List Item 4"}]})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<List"),r.default.createElement("div",null,"  compact"),r.default.createElement("div",null,"  items={["),r.default.createElement("div",null,"    { text: 'List Item 1' },"),r.default.createElement("div",null,"    { text: 'List Item 2' },"),r.default.createElement("div",null,"    { text: 'List Item 3' },"),r.default.createElement("div",null,"    { text: 'List Item 4' },"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))},{title:"Unread",description:"The fd-list__item--unread modifier will change the font weight to bold for easier legibility.",result:r.default.createElement(r.default.Fragment,null,r.default.createElement(l.List,{items:[{text:"List Item 1 Unread",unread:!0},{text:"List Item 2 Unread",unread:!0},{text:"List Item 3"},{text:"List Item 4"}]})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<List"),r.default.createElement("div",null,"  items={["),r.default.createElement("div",null,"    { text: 'List Item 1 Unread', unread: true },"),r.default.createElement("div",null,"    { text: 'List Item 2 Unread', unread: true },"),r.default.createElement("div",null,"    { text: 'List Item 3' },"),r.default.createElement("div",null,"    { text: 'List Item 4' },"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))},{title:"Interactive",description:"The fd-list__item--interractive will force list item to handle hover and active states. Usage of this modifier is not needed on Selection, Navigation and Action modes.",result:r.default.createElement(r.default.Fragment,null,r.default.createElement(l.List,{items:[{text:"List Item 1",interactive:!0},{text:"List Item 2",interactive:!0},{text:"List Item 3",interactive:!0},{text:"List Item 4",interactive:!0},{text:"List Item 5 Selected",interactive:!0,selected:!0}]})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<List"),r.default.createElement("div",null,"  items={["),r.default.createElement("div",null,"    { text: 'List Item 1', interactive: true },"),r.default.createElement("div",null,"    { text: 'List Item 2', interactive: true },"),r.default.createElement("div",null,"    { text: 'List Item 3', interactive: true },"),r.default.createElement("div",null,"    { text: 'List Item 4', interactive: true },"),r.default.createElement("div",null,"    { text: 'List Item 5 Selected', interactive: true, selected: true },"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))},{title:"Navigation",description:"Standard list items can contain navigation links. To add navigation, add the fd-list—navigation modifier class to the list and the fd-list__item--link modifier class to the list elements that contain links. All items should be navigable.",result:r.default.createElement(r.default.Fragment,null,r.default.createElement(l.List,{type:o.ListTypes.NAVIGATION,items:[{text:"List Item 1"},{text:"List Item 2"},{text:"List Item 3"}]})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<List"),r.default.createElement("div",null,"  navigation"),r.default.createElement("div",null,"  items={["),r.default.createElement("div",null,"    { text: 'List Item 1' },"),r.default.createElement("div",null,"    { text: 'List Item 2' },"),r.default.createElement("div",null,"    { text: 'List Item 3' },"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))},{title:"Icon",description:"To display an icon inside standard list items, add the fd-list__icon class along with the icon within the list elements. For example, fd-list__icon sap-icon—lightbulb.",result:r.default.createElement(r.default.Fragment,null,r.default.createElement(l.List,{items:[{text:"List Item 1",iconLeft:"cart"},{text:"List Item 2",iconLeft:"wrench"},{text:"List Item 3",iconRight:"lightbulb"},{text:"List Item 3",iconRight:"history"}]})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<List"),r.default.createElement("div",null,"  items={["),r.default.createElement("div",null,"    { text: 'List Item 1', iconLeft: 'cart' },"),r.default.createElement("div",null,"    { text: 'List Item 2', iconLeft: 'wrench' },"),r.default.createElement("div",null,"    { text: 'List Item 3', iconRight: 'lightbulb' },"),r.default.createElement("div",null,"    { text: 'List Item 3', iconRight: 'history' },"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))}]};t.ListDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},u))},6226:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MenuDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Menu",labels:[{text:"version 0.0.5",accentColor:l.AccentColors.COLOR_8},{text:"reviewed 0.0.5",accentColor:l.AccentColors.COLOR_6},{text:"themable",accentColor:l.AccentColors.COLOR_3}],description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"The menu component is the listing structure with optional headers to create menus."),r.default.createElement("p",null,'Commonly used as the contents when composing "dropdowns", "contextual menus", etc, when paired with the popover component.')),types:[{id:"Menu",props:[{id:"compact",type:"boolean",description:"(Optional) If provided, the Menu is displayed in compact mode."},{id:"noShadow",type:"boolean",description:"(Optional) If provided, the Menu is displayed in compact mode."},{id:"items",type:"MenuItem[]",description:"The items to be displayed in the Menu."},{id:"onItemSelected",type:"(string) => void",description:"(Optional) Called when an item is selected in the menu"}]},{id:"MenuItem",props:[{id:"id",type:"string",description:"The unique identifier of the MenuItem in the Menu"},{id:"text",type:"string",description:"The label of the MenuItem in the Menu"},{id:"shortcut",type:"string",description:"(Optionnal) ..."},{id:"active",type:"boolean",description:"(Optionnal) ..."},{id:"hover",type:"boolean",description:"(Optionnal) ..."},{id:"selected",type:"boolean",description:"(Optionnal) ..."},{id:"disabled",type:"boolean",description:"(Optionnal) ..."},{id:"iconBefore",type:"string",description:"(Optionnal) ..."},{id:"iconAfter",type:"string",description:"(Optionnal) ..."}]}],examples:[{title:"Desktop and Tablet Modes",description:"The basic stucture of a menu. Place the menu item title in a <span> tag using class fd-menu__title and wrap it in the fd-menu__link and fd-menu__item classes as shown. Default mode is the cozy tablet mode, no class has to be added for this. Use class modifierfd-menu--compact on menu container level for desktop mode.",result:r.default.createElement("div",null,r.default.createElement("label",{className:"fd-form-label"},"Basic Menu"),r.default.createElement("br",null),r.default.createElement("br",null),r.default.createElement(l.Menu,{items:[{id:"item1",text:"Item 1"},{id:"item2",text:"Item 2"},{id:"item3",text:"Item 3"},{id:"item4",text:"Item 4"}]}),r.default.createElement("br",null),r.default.createElement("br",null),r.default.createElement("label",{className:"fd-form-label"},"Compact Menu"),r.default.createElement("br",null),r.default.createElement("br",null),r.default.createElement(l.Menu,{compact:!0,items:[{id:"item1",text:"Item 1"},{id:"item2",text:"Item 2"},{id:"item3",text:"Item 3"},{id:"item4",text:"Item 4"}]})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,'<label className="fd-form-label">'),r.default.createElement("div",null,"  Basic Menu"),r.default.createElement("div",null,"</label>"),r.default.createElement("div",null,"<br />"),r.default.createElement("div",null,"<br />"),r.default.createElement("div",null,"<Menu"),r.default.createElement("div",null,"  items={["),r.default.createElement("div",null,"    { id: 'item1', text: 'Item 1' },"),r.default.createElement("div",null,"    { id: 'item2', text: 'Item 2' },"),r.default.createElement("div",null,"    { id: 'item3', text: 'Item 3' },"),r.default.createElement("div",null,"    { id: 'item4', text: 'Item 4' },"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"),r.default.createElement("div",null,"<br />"),r.default.createElement("div",null,"<br />"),r.default.createElement("div",null,'<label className="fd-form-label">'),r.default.createElement("div",null,"  Compact Menu"),r.default.createElement("div",null,"</label>"),r.default.createElement("div",null,"<br />"),r.default.createElement("div",null,"<br />"),r.default.createElement("div",null,"<Menu"),r.default.createElement("div",null,"  compact"),r.default.createElement("div",null,"  items={["),r.default.createElement("div",null,"    { id: 'item1', text: 'Item 1' },"),r.default.createElement("div",null,"    { id: 'item2', text: 'Item 2' },"),r.default.createElement("div",null,"    { id: 'item3', text: 'Item 3' },"),r.default.createElement("div",null,"    { id: 'item4', text: 'Item 4' },"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))},{title:"List different states",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"Simulate different states to show state behaviour between the items."),r.default.createElement("ul",null,r.default.createElement("li",null,"For simulating hover state, use class is-hover on the menu item."),r.default.createElement("li",null,"For simulating active state, use class is-active on the menu item."),r.default.createElement("li",null,"For simulating selected state, use class is-selected on the menu item."),r.default.createElement("li",null,"For simulating selected-hover state, use classes is-selected is-hover on the menu item."),r.default.createElement("li",null,"For simulating disabled state, use class is-disabled on the menu item.")),r.default.createElement("p",null,"To remove default box shadow from menu containers use fd-menu__list--no-shadow or fd-menu__sublist--no-shadow.")),result:r.default.createElement("div",null,r.default.createElement(l.Menu,{items:[{id:"item1",text:"Option 1 - Regular"},{id:"item2",text:"Option 2 - Hover",hover:!0},{id:"item3",text:"Option 3 - Active",active:!0},{id:"item4",text:"Option 4 - Selected",selected:!0},{id:"item5",text:"Option 5 - Selected-Hover",hover:!0,selected:!0},{id:"item6",text:"Option 6 - Disabled",disabled:!0}]})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<Menu"),r.default.createElement("div",null,"  items={["),r.default.createElement("div",null,"    { id: 'item1', text: 'Item 1', iconBefore: 'grid', iconAfter: 'wrench' },"),r.default.createElement("div",null,"    { id: 'item2', text: 'Item 2', iconBefore: 'accept', iconAfter: 'history' },"),r.default.createElement("div",null,"    { id: 'item3', text: 'Item 3', iconBefore: 'wrench', iconAfter: 'lightbulb' },"),r.default.createElement("div",null,"    { id: 'item4', text: 'Item 4', iconBefore: 'cart', iconAfter: 'history', shortcut: 'Ctrl+A' },"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))},{title:"Menu with decoration content",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"To create an addon before or after fd-menu__title element, use elements with folowing classes inside fd-menu__link:"),r.default.createElement("ul",null,r.default.createElement("li",null,"fd-menu__addon-before: styles addon befotre fd-menu__title"),r.default.createElement("li",null,"fd-menu__addon-after: styles addon after fd-menu__title"),r.default.createElement("li",null,"fd-menu__shortcut: styles shortcut placed after fd-menu__title According to Fiori3 design shortcuts should be on desktop devices."))),result:r.default.createElement("div",null,r.default.createElement(l.Menu,{items:[{id:"item1",text:"Item 1",iconBefore:"grid",iconAfter:"wrench"},{id:"item2",text:"Item 2",iconBefore:"accept",iconAfter:"history"},{id:"item3",text:"Item 3",iconBefore:"wrench",iconAfter:"lightbulb"},{id:"item4",text:"Item 4",iconBefore:"cart",iconAfter:"history",shortcut:"Ctrl+A"}]})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<Menu"),r.default.createElement("div",null,"  items={["),r.default.createElement("div",null,"    { id: 'item1', text: 'Item 1', iconBefore: 'grid', iconAfter: 'wrench' },"),r.default.createElement("div",null,"    { id: 'item2', text: 'Item 2', iconBefore: 'accept', iconAfter: 'history' },"),r.default.createElement("div",null,"    { id: 'item3', text: 'Item 3', iconBefore: 'wrench', iconAfter: 'lightbulb' },"),r.default.createElement("div",null,"    { id: 'item4', text: 'Item 4', iconBefore: 'cart', iconAfter: 'history', shortcut: 'Ctrl+A' },"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))}]};t.MenuDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},6358:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectDemo=void 0;const r=a(n(7294));t.ObjectDemo=()=>r.default.createElement("div",null,"OBJECT")},3675:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PageDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Page",labels:[{label:"Version",text:"version 0.0.7",accentColor:l.AccentColors.COLOR_8},{label:"Status",text:"in progress",accentColor:l.AccentColors.COLOR_5},{label:"Theme",text:"themable",accentColor:l.AccentColors.COLOR_3}],description:"Page...",types:[{id:"Page",props:[{id:"selectedTab",type:"boolean",description:""}]},{id:"PageHeader",props:[{id:"selectedTab",type:"boolean",description:""}]},{id:"PageBody",props:[{id:"selectedTab",type:"boolean",description:""}]},{id:"PageFooter",props:[{id:"selectedTab",type:"boolean",description:""}]}],examples:[{title:"Page Floorplan",description:"...",result:r.default.createElement(l.Page,{style:{height:"400px"}},r.default.createElement(l.PageHeader,{breadcrumb:r.default.createElement(l.Breadcrumb,{ariaLabel:"breadcrumb",items:[{text:"Level 1"},{text:"Level 2"},{text:"Level 3"}]}),title:"My Page",subtitle:"Its a great page",actions:[r.default.createElement(l.Button,{compact:!0,icon:"cart"}),r.default.createElement(l.Button,{compact:!0,icon:"action",design:l.ButtonDesigns.TRANSPARENT})],avatar:{ariaLabel:"",initials:"AV",accentColor:l.AccentColors.COLOR_9},attributes:[{label:"Marker 1",semantic:l.Semantics.POSITIVE,text:"Positive Marker",type:"status"},{label:"Marker 2",semantic:l.Semantics.NEGATIVE,text:"-2345.78€",type:"status"},{label:"My property",text:"Text Property are used for longer text such as description that can span a lot and require several lines to display.",type:"text"}]}),r.default.createElement(l.PageBody,null,r.default.createElement("div",null,"MY PAGE CONTENT"))),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<IconTabBar"),r.default.createElement("div",null,"  selectedTab='tab1'"),r.default.createElement("div",null,"  tabs={["),r.default.createElement("div",null,"    { id: 'tab1', title: 'Info' },"),r.default.createElement("div",null,"    { id: 'tab2', title: 'Attachements (16)' },"),r.default.createElement("div",null,"    { id: 'tab3', title: 'Approvals (42)' },"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"/>"))}]};t.PageDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},5135:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PanelDemo=void 0;const r=a(n(7294));t.PanelDemo=()=>r.default.createElement("div",null,"PANEL")},7688:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PopoverDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Popover",labels:[{text:"version 0.0.3",accentColor:l.AccentColors.COLOR_8},{text:"on going",accentColor:l.AccentColors.COLOR_5},{text:"themable",accentColor:l.AccentColors.COLOR_3}],description:"The popover displays additional information for an object in a compact way without leaving the page. The component contains two essential elements: the control (trigger) and body (content). It can also be paired with a Menu, whereas the menu button would trigger a dropdown (body).",types:[{id:"Popover",props:[{id:"icon",type:"string",description:"(Optional) If provided, an icon will be displayed as the first element of the Info Label"}]}],examples:[{title:"Alignment",description:"The popover body can be aligned to the left or right of the control. Additionally, it’s possible to remove the arrow from the body by adding the fd-popover__body--no-arrow modifier class to the body element.",result:r.default.createElement("div",{style:{display:"flex",gap:"2rem",flexWrap:"wrap"}},r.default.createElement("div",{style:{flexBasis:0,flexGrow:1,flexShrink:0}},r.default.createElement(l.Popover,{control:r.default.createElement("button",{className:"fd-button",role:"button"},r.default.createElement("i",{className:"sap-icon--navigation-down-arrow"}))},r.default.createElement(l.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"},{id:"item3",text:"Option 3"},{id:"item4",text:"Option 4"}]})),"Left-aligned (default)"),r.default.createElement("div",{style:{flexBasis:0,flexGrow:1,flexShrink:0}},"Right-aligned",r.default.createElement(l.Popover,{alignRight:!0,control:r.default.createElement("button",{className:"fd-button",role:"button"},r.default.createElement("i",{className:"sap-icon--navigation-down-arrow"}))},r.default.createElement(l.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"},{id:"item3",text:"Option 3"},{id:"item4",text:"Option 4"}]}))),r.default.createElement("div",{style:{flexBasis:0,flexGrow:1,flexShrink:0}},r.default.createElement(l.Popover,{noArrow:!0,control:r.default.createElement("button",{className:"fd-button",role:"button"},r.default.createElement("i",{className:"sap-icon--navigation-down-arrow"}),"Left-aligned (no arrow)")},r.default.createElement(l.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"},{id:"item3",text:"Option 3"},{id:"item4",text:"Option 4"}]}))),r.default.createElement("div",{style:{flexBasis:0,flexGrow:1,flexShrink:0}},r.default.createElement(l.Popover,{alignRight:!0,noArrow:!0,control:r.default.createElement("button",{className:"fd-button",role:"button"},"Right-aligned (no arrow)",r.default.createElement("i",{className:"sap-icon--navigation-down-arrow"}))},r.default.createElement(l.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"},{id:"item3",text:"Option 3"},{id:"item4",text:"Option 4"}]})))),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ flexBasis: 0, flexGrow: 1, flexShrink: 0 }}>"),r.default.createElement("div",null,"  <Popover"),r.default.createElement("div",null,"    control={("),r.default.createElement("div",null,"      <button"),r.default.createElement("div",null,"        className='fd-button'"),r.default.createElement("div",null,"        role='button'"),r.default.createElement("div",null,"      >"),r.default.createElement("div",null,"        <i className='sap-icon--navigation-down-arrow'></i>"),r.default.createElement("div",null,"      </button>"),r.default.createElement("div",null,"    )}"),r.default.createElement("div",null,"  >"),r.default.createElement("div",null,"    <Menu"),r.default.createElement("div",null,"      noShadow"),r.default.createElement("div",null,"      items={["),r.default.createElement("div",null,"        { id: 'item1', text: 'Option 1' },"),r.default.createElement("div",null,"        { id: 'item2', text: 'Option 2' },"),r.default.createElement("div",null,"        { id: 'item3', text: 'Option 3' },"),r.default.createElement("div",null,"        { id: 'item4', text: 'Option 4' },"),r.default.createElement("div",null,"      ]}"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  </Popover>"),r.default.createElement("div",null,"  Left-aligned (default)"),r.default.createElement("div",null,"</div>"),r.default.createElement("br",null),r.default.createElement("div",null,"<div style={{ flexBasis: 0, flexGrow: 1, flexShrink: 0 }}>"),r.default.createElement("div",null,"  Right-aligned"),r.default.createElement("div",null,"  <Popover"),r.default.createElement("div",null,"    alignRight"),r.default.createElement("div",null,"    control={("),r.default.createElement("div",null,"      <button"),r.default.createElement("div",null,"        className='fd-button'"),r.default.createElement("div",null,"        role='button'"),r.default.createElement("div",null,"      >"),r.default.createElement("div",null,"        <i className='sap-icon--navigation-down-arrow'></i>"),r.default.createElement("div",null,"      </button>"),r.default.createElement("div",null,"    )}"),r.default.createElement("div",null,"  >"),r.default.createElement("div",null,"    <Menu"),r.default.createElement("div",null,"      noShadow"),r.default.createElement("div",null,"      items={["),r.default.createElement("div",null,"        { id: 'item1', text: 'Option 1' },"),r.default.createElement("div",null,"        { id: 'item2', text: 'Option 2' },"),r.default.createElement("div",null,"        { id: 'item3', text: 'Option 3' },"),r.default.createElement("div",null,"        { id: 'item4', text: 'Option 4' },"),r.default.createElement("div",null,"      ]}"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  </Popover>"),r.default.createElement("div",null,"</div>"),r.default.createElement("br",null),r.default.createElement("div",null,"<div style={{ flexBasis: 0, flexGrow: 1, flexShrink: 0 }}>"),r.default.createElement("div",null,"  <Popover"),r.default.createElement("div",null,"    noArrow"),r.default.createElement("div",null,"    control={("),r.default.createElement("div",null,"      <button"),r.default.createElement("div",null,"        className='fd-button'"),r.default.createElement("div",null,"        role='button'"),r.default.createElement("div",null,"      >"),r.default.createElement("div",null,"        <i className='sap-icon--navigation-down-arrow'></i>"),r.default.createElement("div",null,"        Left-aligned (no arrow)"),r.default.createElement("div",null,"      </button>"),r.default.createElement("div",null,"    )}"),r.default.createElement("div",null,"  >"),r.default.createElement("div",null,"    <Menu"),r.default.createElement("div",null,"      noShadow"),r.default.createElement("div",null,"      items={["),r.default.createElement("div",null,"        { id: 'item1', text: 'Option 1' },"),r.default.createElement("div",null,"        { id: 'item2', text: 'Option 2' },"),r.default.createElement("div",null,"        { id: 'item3', text: 'Option 3' },"),r.default.createElement("div",null,"        { id: 'item4', text: 'Option 4' },"),r.default.createElement("div",null,"      ]}"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  </Popover>"),r.default.createElement("div",null,"</div>"),r.default.createElement("br",null),r.default.createElement("div",null,"<div style={{ flexBasis: 0, flexGrow: 1, flexShrink: 0 }}>"),r.default.createElement("div",null,"  <Popover"),r.default.createElement("div",null,"    alignRight"),r.default.createElement("div",null,"    noArrow"),r.default.createElement("div",null,"    control={("),r.default.createElement("div",null,"      <button"),r.default.createElement("div",null,"        className='fd-button'"),r.default.createElement("div",null,"        role='button'"),r.default.createElement("div",null,"      >"),r.default.createElement("div",null,"        Right-aligned (no arrow)"),r.default.createElement("div",null,"        <i className='sap-icon--navigation-down-arrow'></i>"),r.default.createElement("div",null,"      </button>"),r.default.createElement("div",null,"    )}"),r.default.createElement("div",null,"  >"),r.default.createElement("div",null,"    <Menu"),r.default.createElement("div",null,"      noShadow"),r.default.createElement("div",null,"      items={["),r.default.createElement("div",null,"        { id: 'item1', text: 'Option 1' },"),r.default.createElement("div",null,"        { id: 'item2', text: 'Option 2' },"),r.default.createElement("div",null,"        { id: 'item3', text: 'Option 3' },"),r.default.createElement("div",null,"        { id: 'item4', text: 'Option 4' },"),r.default.createElement("div",null,"      ]}"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  </Popover>"),r.default.createElement("div",null,"</div>"))},{title:"Control variants",description:"Controls can be displayed as buttons, images, icons, and more. In the example below, the Avatar and Icon act as controls.",result:r.default.createElement("div",{style:{display:"flex",gap:"2rem",flexWrap:"wrap"}},r.default.createElement("div",{style:{flexBasis:0,flexGrow:1,flexShrink:0}},r.default.createElement(l.Popover,{control:r.default.createElement(l.Avatar,{ariaLabel:"Popover avatar",icon:"settings",size:l.Sizes.SMALL,circle:!0})},r.default.createElement(l.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"},{id:"item3",text:"Option 3"},{id:"item4",text:"Option 4"}]}))),r.default.createElement("div",{style:{flexBasis:0,flexGrow:1,flexShrink:0}},r.default.createElement(l.Popover,{alignRight:!0,noArrow:!0,control:r.default.createElement(l.Button,{icon:"cart"})},r.default.createElement(l.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"},{id:"item3",text:"Option 3"},{id:"item4",text:"Option 4"}]})))),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<div style={{ flexBasis: 0, flexGrow: 1, flexShrink: 0 }}>"),r.default.createElement("div",null,"  <Popover"),r.default.createElement("div",null,"    control={("),r.default.createElement("div",null,"      <Avatar"),r.default.createElement("div",null,"        ariaLabel='Popover avatar'"),r.default.createElement("div",null,"        icon='settings'"),r.default.createElement("div",null,"        size={Sizes.SMALL}"),r.default.createElement("div",null,"        circle"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"    )}"),r.default.createElement("div",null,"  >"),r.default.createElement("div",null,"    <Menu"),r.default.createElement("div",null,"      noShadow"),r.default.createElement("div",null,"      items={["),r.default.createElement("div",null,"        { id: 'item1', text: 'Option 1' },"),r.default.createElement("div",null,"        { id: 'item2', text: 'Option 2' },"),r.default.createElement("div",null,"        { id: 'item3', text: 'Option 3' },"),r.default.createElement("div",null,"        { id: 'item4', text: 'Option 4' },"),r.default.createElement("div",null,"      ]}"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  </Popover>"),r.default.createElement("div",null,"</div>"),r.default.createElement("br",null),r.default.createElement("div",null,"<div style={{ flexBasis: 0, flexGrow: 1, flexShrink: 0 }}>"),r.default.createElement("div",null,"  <Popover"),r.default.createElement("div",null,"    alignRight"),r.default.createElement("div",null,"    noArrow"),r.default.createElement("div",null,"    control={("),r.default.createElement("div",null,"      <Button"),r.default.createElement("div",null,"        icon='cart'"),r.default.createElement("div",null,"      />"),r.default.createElement("div",null,"    )}"),r.default.createElement("div",null,"  >"),r.default.createElement("div",null,"    <Menu"),r.default.createElement("div",null,"      noShadow"),r.default.createElement("div",null,"      items={["),r.default.createElement("div",null,"        { id: 'item1', text: 'Option 1' },"),r.default.createElement("div",null,"        { id: 'item2', text: 'Option 2' },"),r.default.createElement("div",null,"        { id: 'item3', text: 'Option 3' },"),r.default.createElement("div",null,"        { id: 'item4', text: 'Option 4' },"),r.default.createElement("div",null,"      ]}"),r.default.createElement("div",null,"    />"),r.default.createElement("div",null,"  </Popover>"),r.default.createElement("div",null,"</div>"))}]};t.PopoverDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},8165:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Select",labels:[{text:"version 0.0.3",accentColor:l.AccentColors.COLOR_8},{text:"on going",accentColor:l.AccentColors.COLOR_6},{text:"themable",accentColor:l.AccentColors.COLOR_3}],description:"The select component is commonly used to enable users to select an item from a predefined list. It should be used when there are less than 12 items to choose from.",types:[{id:"Select",props:[{id:"",type:"",description:""}]}],examples:[{title:"Cozy",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"Select displays a predefined option and a button that triggers a dropdown menu to view more options (list items). By default, it is displayed in cozy mode.")),result:r.default.createElement("div",{style:{height:"220px"}},r.default.createElement(l.Select,{placeholder:"Select",items:[{text:"List Item 1"},{text:"List Item 2"},{text:"List Item 3"},{text:"List Item 4"}],onChange:e=>(0,i.demoCallback)(e.text)})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<Select"),r.default.createElement("div",null,"  placeholder='Select'"),r.default.createElement("div",null,"  items={["),r.default.createElement("div",null,"    { text: 'List Item 1' },"),r.default.createElement("div",null,"    { text: 'List Item 2' },"),r.default.createElement("div",null,"    { text: 'List Item 3' },"),r.default.createElement("div",null,"    { text: 'List Item 4' }"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  onChange={(item) => alert(item.text)}"),r.default.createElement("div",null,"/>"))},{title:"Compact",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"When in compact mode, select displays a dropdown menu that can contain long list items with text that wraps to the next line. The maximum width should be 37.5rem (600px) to avoid readability issues, unless the list contains more than 2 columns. If the list has 3 or more columns, the dropdown menu should not be limited to a max width. To display select in compact mode, add fd-select--compact to the main element.")),result:r.default.createElement("div",{style:{height:"220px"}},r.default.createElement(l.Select,{compact:!0,placeholder:"Select",items:[{text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."},{text:"List Item 2"},{text:"List Item 3"},{text:"List Item 4"}],onChange:e=>(0,i.demoCallback)(e.text)})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<Select"),r.default.createElement("div",null,"  compact"),r.default.createElement("div",null,"  placeholder='Select'"),r.default.createElement("div",null,"  items={["),r.default.createElement("div",null,"    { text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.' },"),r.default.createElement("div",null,"    { text: 'List Item 2' },"),r.default.createElement("div",null,"    { text: 'List Item 3' },"),r.default.createElement("div",null,"    { text: 'List Item 4' }"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  onChange={(item) => alert(item.text)}"),r.default.createElement("div",null,"/>"))},{title:"States",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"Select can be displayed in semantic states to communicate Success, Error, Warning or Information to the users. They can be displayed as either messages within the dropdown list, or by itself as a static message. To display select in various semantic states, add the class (shown below) to the fd-select__control element.")),result:r.default.createElement("div",{style:{display:"flex",gap:"1rem",height:"220px",width:"100%"}},r.default.createElement("div",{style:{flexGrow:1,flexBasis:0}},r.default.createElement(l.Select,{placeholder:"Success",state:l.InputStates.SUCCESS,stateMessage:"Success message",style:{width:"200px"},items:[{text:"List Item 1"},{text:"List Item 2"},{text:"List Item 3"},{text:"List Item 4"}],onChange:e=>(0,i.demoCallback)(e.text)})),r.default.createElement("div",{style:{flexGrow:1,flexBasis:0}},r.default.createElement(l.Select,{placeholder:"Error",state:l.InputStates.ERROR,stateMessage:"Error message",style:{width:"200px"},items:[{text:"Error"}],onChange:e=>(0,i.demoCallback)(e.text)})),r.default.createElement("div",{style:{flexGrow:1,flexBasis:0}},r.default.createElement(l.Select,{placeholder:"Warning",state:l.InputStates.WARNING,stateMessage:"Warning message",style:{width:"200px"},items:[{text:"List Item 1"},{text:"List Item 2"},{text:"List Item 3"},{text:"List Item 4"}],onChange:e=>(0,i.demoCallback)(e.text)})),r.default.createElement("div",{style:{flexGrow:1,flexBasis:0}},r.default.createElement(l.Select,{placeholder:"Information",state:l.InputStates.INFORMATION,stateMessage:"Information message",style:{width:"200px"},items:[{text:"List Item 1"}],onChange:e=>(0,i.demoCallback)(e.text)}))),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<Select"),r.default.createElement("div",null,"  placeholder='Success'"),r.default.createElement("div",null,"  state={InputStates.SUCCESS}"),r.default.createElement("div",null,"  stateMessage='Success message'"),r.default.createElement("div",null,"  style={{ width: '200px' }}"),r.default.createElement("div",null,"  items={["),r.default.createElement("div",null,"    { text: 'List Item 1' },"),r.default.createElement("div",null,"    { text: 'List Item 2' },"),r.default.createElement("div",null,"    { text: 'List Item 3' },"),r.default.createElement("div",null,"    { text: 'List Item 4' }"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  onChange={(item) => alert(item.text)}"),r.default.createElement("div",null,"/>"),r.default.createElement("br",null),r.default.createElement("div",null,"<Select"),r.default.createElement("div",null,"  placeholder='Error'"),r.default.createElement("div",null,"  state={InputStates.ERROR}"),r.default.createElement("div",null,"  stateMessage='Error message'"),r.default.createElement("div",null,"  style={{ width: '200px' }}"),r.default.createElement("div",null,"  items={["),r.default.createElement("div",null,"    { text: 'Error' },"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  onChange={(item) => alert(item.text)}"),r.default.createElement("div",null,"/>"),r.default.createElement("br",null),r.default.createElement("div",null,"<Select"),r.default.createElement("div",null,"  placeholder='Warning'"),r.default.createElement("div",null,"  state={InputStates.WARNING}"),r.default.createElement("div",null,"  stateMessage='Warning message'"),r.default.createElement("div",null,"  style={{ width: '200px' }}"),r.default.createElement("div",null,"  items={["),r.default.createElement("div",null,"    { text: 'List Item 1' },"),r.default.createElement("div",null,"    { text: 'List Item 2' },"),r.default.createElement("div",null,"    { text: 'List Item 3' },"),r.default.createElement("div",null,"    { text: 'List Item 4' }"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  onChange={(item) => alert(item.text)}"),r.default.createElement("div",null,"/>"),r.default.createElement("br",null),r.default.createElement("div",null,"<Select"),r.default.createElement("div",null,"  placeholder='Information'"),r.default.createElement("div",null,"  state={InputStates.INFORMATION}"),r.default.createElement("div",null,"  stateMessage='Information message'"),r.default.createElement("div",null,"  style={{ width: '200px' }}"),r.default.createElement("div",null,"  items={["),r.default.createElement("div",null,"    { text: 'List Item 1' },"),r.default.createElement("div",null,"  ]}"),r.default.createElement("div",null,"  onChange={(item) => alert(item.text)}"),r.default.createElement("div",null,"/>"))}]};t.SelectDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},6615:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ShellBarDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Shell Bar",labels:[{text:"version 0.0.3",accentColor:l.AccentColors.COLOR_8},{text:"on going",accentColor:l.AccentColors.COLOR_6},{text:"themable",accentColor:l.AccentColors.COLOR_3}],description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"The shellbar offers consistent, responsive navigation across all products and applications. It also includes support for branding, product navigation, search, notifications, and user settings. This is a composite component comprised of mandatory and optional elements. Shellbar should always be placed inside the shell layout container. As mentioned earlier, it is completely responsive by default with margins and padding already built in."),r.default.createElement("p",null,r.default.createElement("strong",null,"Shellbar has two primary container groups:")),r.default.createElement("ul",null,r.default.createElement("li",null,"Product: for branding and product elements."),r.default.createElement("li",null,"Actions: for search, product links, and user settings.")),r.default.createElement("p",null,r.default.createElement("strong",null,"Note"),": There is a third container group for SAP CoPilot, which is a chatbot feature leveraged internally at SAP. The SAP CoPilot icon is displayed in the product switch example, and can act as a placeholder for third-party chatbot applications.")),types:[{id:"ShellBar",props:[{id:"",type:"",description:""}]}],examples:[{title:"Primary",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"The primary shellbar displays a logo, title, and an avatar where the user settings are found. If the avatar does not contain a thumbnail, then the initials of the user will be displayed.")),result:r.default.createElement("div",null,r.default.createElement(l.ShellBar,{logo:"/images/sap-logo.png",logoAlt:"SAP",title:"Corporate Portal",profile:{name:"User Name",initials:"WW",menu:[{id:"settings",text:"Settings",iconBefore:"action-settings",onItemSelected:()=>{alert("Settings")}},{id:"logout",text:"Signout",iconBefore:"log",onItemSelected:()=>{alert("Signout")}}]}})),code:r.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.ShellBarDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},7055:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TableDemo=void 0;const r=n(6039),l=a(n(7294)),i=n(2531),o=n(7027),u={title:"Table",labels:[{text:"version 0.0.3",accentColor:i.AccentColors.COLOR_8},{text:"on going",accentColor:i.AccentColors.COLOR_5},{text:"themable",accentColor:i.AccentColors.COLOR_3}],description:"A table contains a set of line items and usually comprises rows (with each row showing one line item) and columns. Line items can contain data of any kind, but also interactive elements, for example, for editing the data, navigating, or triggering actions relating to the line item.",types:[],examples:[{title:"Primary",description:"The primary table contains columns with headers, and rows with links. In the first column, links are displayed. To display links within a table, add the fd-link class within the table data.",result:l.default.createElement("div",null,l.default.createElement(i.Table,{borderedHorizontal:!0,borderedVertical:!0,onRowClick:e=>(0,o.demoCallback)(`row clicked ${e}`),columns:[{key:"avatar",name:"User",render:e=>l.default.createElement(i.Avatar,{ariaLabel:`${e.name} ${e.lastName}`,initials:`${r.StringUtils.capitalizeFirst(e.name)}${r.StringUtils.capitalizeFirst(e.lastName)}`,size:i.Sizes.X_SMALL})},{key:"email",name:"Email",render:e=>l.default.createElement("a",{href:"#"},e.email)},{key:"text",name:"Text"},{key:"date",name:"Date",formatter:e=>e.date.toLocaleString()},{key:"actions",name:"",render:()=>l.default.createElement(i.Button,{icon:"overflow",design:i.ButtonDesigns.TRANSPARENT,compact:!0,onClick:()=>(0,o.demoCallback)("actions clicked")})}],rows:[{data:{id:"user1",text:"I am User One",email:"user1@email.com",name:"User",lastName:"One",date:new Date(2010,1,5)}},{data:{id:"user2",text:"I am User Two",email:"user2@email.com",name:"User",lastName:"Two",date:new Date(2011,1,5)}},{data:{id:"user3",text:"I am User Three",email:"user3@email.com",name:"User",lastName:"Three",date:new Date(2012,1,5)}}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"/>"))},{title:"Borderless",description:"Table can be displayed without borders that separate the columns, column headers, and rows. To display a borderless table, add the fd-table--no-horizontal-borders and fd-table--no-vertical-borders modifier classes to the main element.",result:l.default.createElement("div",null,l.default.createElement(i.Table,{columns:[{key:"avatar",name:"User",render:e=>l.default.createElement(i.Avatar,{ariaLabel:`${e.name} ${e.lastName}`,initials:`${r.StringUtils.capitalizeFirst(e.name)}${r.StringUtils.capitalizeFirst(e.lastName)}`,size:i.Sizes.X_SMALL})},{key:"email",name:"Email",render:e=>l.default.createElement("a",{href:"#"},e.email)},{key:"text",name:"Text"},{key:"date",name:"Date",formatter:e=>e.date.toLocaleString()},{key:"actions",name:"",render:()=>l.default.createElement(i.Button,{icon:"overflow",design:i.ButtonDesigns.TRANSPARENT,compact:!0})}],rows:[{data:{id:"user1",text:"I am User One",email:"user1@email.com",name:"User",lastName:"One",date:new Date(2010,1,5)}},{data:{id:"user2",text:"I am User Two",email:"user2@email.com",name:"User",lastName:"Two",date:new Date(2011,1,5)}},{data:{id:"user3",text:"I am User Three",email:"user3@email.com",name:"User",lastName:"Three",date:new Date(2012,1,5)}}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Interactive",description:"The table component can be interactive with hoverable and activable cells and rows.",result:l.default.createElement("div",null,l.default.createElement(i.Table,{borderedHorizontal:!0,borderedVertical:!0,columns:[{key:"avatar",name:"User",render:e=>l.default.createElement(i.Avatar,{ariaLabel:`${e.name} ${e.lastName}`,initials:`${r.StringUtils.capitalizeFirst(e.name)}${r.StringUtils.capitalizeFirst(e.lastName)}`,size:i.Sizes.X_SMALL})},{key:"email",name:"Email",render:e=>l.default.createElement("a",{href:"#"},e.email)},{key:"text",name:"Text"},{key:"date",name:"Date",formatter:e=>e.date.toLocaleString()},{key:"actions",name:"",render:()=>l.default.createElement(i.Button,{icon:"overflow",design:i.ButtonDesigns.TRANSPARENT,compact:!0})}],rows:[{hoverable:!0,data:{id:"user1",text:"I am User One",email:"user1@email.com",name:"User",lastName:"One",date:new Date(2010,1,5)}},{activable:!0,hoverable:!0,data:{id:"user2",text:"I am User Two",email:"user2@email.com",name:"User",lastName:"Two",date:new Date(2011,1,5)}},{activable:!0,data:{id:"user3",text:"I am User Three",email:"user3@email.com",name:"User",lastName:"Three",date:new Date(2012,1,5)}}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"/>"))},{title:"Click Events",description:"",result:l.default.createElement("div",null,l.default.createElement(i.Table,{borderedHorizontal:!0,borderedVertical:!0,onRowClick:e=>window.alert(`[Table] Row clicked ${e}`),columns:[{key:"avatar",name:"User",render:e=>l.default.createElement(i.Avatar,{ariaLabel:`${e.name} ${e.lastName}`,initials:`${r.StringUtils.capitalizeFirst(e.name)}${r.StringUtils.capitalizeFirst(e.lastName)}`,size:i.Sizes.X_SMALL})},{key:"email",name:"Email",render:e=>l.default.createElement("a",{href:"#"},e.email)},{key:"text",name:"Text"},{key:"date",name:"Date",formatter:e=>e.date.toLocaleString()},{key:"actions",name:"",render:()=>l.default.createElement(i.Button,{icon:"overflow",design:i.ButtonDesigns.TRANSPARENT,compact:!0})}],rows:[{activable:!0,hoverable:!0,data:{id:"user1",text:"I am User One",email:"user1@email.com",name:"User",lastName:"One",date:new Date(2010,1,5)}},{activable:!0,hoverable:!0,data:{id:"user2",text:"I am User Two",email:"user2@email.com",name:"User",lastName:"Two",date:new Date(2011,1,5)}},{activable:!0,hoverable:!0,data:{id:"user3",text:"I am User Three",email:"user3@email.com",name:"User",lastName:"Three",date:new Date(2012,1,5)}}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Table"),l.default.createElement("div",null,"  borderedHorizontal={true}"),l.default.createElement("div",null,"  borderedVertical={true}"),l.default.createElement("div",null,"  onRowClick={(id) => window.alert(`[Table] Row clicked ${id}`)}"),l.default.createElement("div",null,"  columns={[...]}"),l.default.createElement("div",null,"  rows={[...]}"),l.default.createElement("div",null,"/>"))}]};t.TableDemo=()=>l.default.createElement(o.DemoPage,Object.assign({},u))},2612:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TileDemo=void 0;const r=a(n(7294));t.TileDemo=()=>r.default.createElement("div",null,"TILE")},8566:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TitleDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Title",labels:[{text:"version 0.0.3",accentColor:l.AccentColors.COLOR_8},{text:"reviewed 0.0.7",accentColor:l.AccentColors.COLOR_6},{text:"themable",accentColor:l.AccentColors.COLOR_3}],description:"A title component whose semantic level and visual appearance can be set separately, providing flexibility in design while adhering to accessibility best practices.",types:[{id:"Title",props:[{id:"level",type:"TitleLevel",description:"(Optionnal) The semantic level of the tile (defaults to h1)"},{id:"levelVisual",type:"TitleLevel",description:"(Optionnal) The visual level of the title (defaults to the semantic level)"},{id:"text",type:"string",description:"The text to display"},{id:"wrap",type:"boolean",description:"(Optionnal) If true forces the title to wrap instead of truncate"}]}],examples:[{title:"Semantic Level",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"There are 6 semantic levels of a heading element. There should only be one H1 on a page, and headings should only appear in ascending order without skipping a level; i.e. even if there are only 3 levels on a page, the order must be H1-H2-H3, and no other levels used.")),result:r.default.createElement(r.default.Fragment,null,r.default.createElement(l.Title,{level:l.TitleLevels.H1,text:"Title Level 1"}),r.default.createElement(l.Title,{level:l.TitleLevels.H2,text:"Title Level 2"}),r.default.createElement(l.Title,{level:l.TitleLevels.H3,text:"Title Level 3"}),r.default.createElement(l.Title,{level:l.TitleLevels.H4,text:"Title Level 4"}),r.default.createElement(l.Title,{level:l.TitleLevels.H5,text:"Title Level 5"}),r.default.createElement(l.Title,{level:l.TitleLevels.H6,text:"Title Level 6"})),code:r.default.createElement("div",null,r.default.createElement("div",null,"<Title level={TitleLevels.H1} text='Title Level 1' />"),r.default.createElement("div",null,"<Title level={TitleLevels.H2} text='Title Level 2' />"),r.default.createElement("div",null,"<Title level={TitleLevels.H3} text='Title Level 3' />"),r.default.createElement("div",null,"<Title level={TitleLevels.H4} text='Title Level 4' />"),r.default.createElement("div",null,"<Title level={TitleLevels.H5} text='Title Level 5' />"),r.default.createElement("div",null,"<Title level={TitleLevels.H6} text='Title Level 6' />"))},{title:"Visual Level",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"If a design requires it, the visual level can be set to something different than the semantic level. This allows the sequential order to be maintained while providing flexibility in appearance.")),result:r.default.createElement(r.default.Fragment,null,r.default.createElement(l.Title,{level:l.TitleLevels.H1,levelVisual:l.TitleLevels.H6,text:"Title Level 1"}),r.default.createElement(l.Title,{level:l.TitleLevels.H2,levelVisual:l.TitleLevels.H5,text:"Title Level 2"}),r.default.createElement(l.Title,{level:l.TitleLevels.H3,levelVisual:l.TitleLevels.H4,text:"Title Level 3"}),r.default.createElement(l.Title,{level:l.TitleLevels.H4,levelVisual:l.TitleLevels.H3,text:"Title Level 4"}),r.default.createElement(l.Title,{level:l.TitleLevels.H5,levelVisual:l.TitleLevels.H2,text:"Title Level 5"}),r.default.createElement(l.Title,{level:l.TitleLevels.H6,levelVisual:l.TitleLevels.H1,text:"Title Level 6"})),code:r.default.createElement("div",null,r.default.createElement("div",null,"<Title level={TitleLevels.H1} levelVisual={TitleLevels.H6} text='Title Level 1' />"),r.default.createElement("div",null,"<Title level={TitleLevels.H2} levelVisual={TitleLevels.H5} text='Title Level 2' />"),r.default.createElement("div",null,"<Title level={TitleLevels.H3} levelVisual={TitleLevels.H4} text='Title Level 3' />"),r.default.createElement("div",null,"<Title level={TitleLevels.H4} levelVisual={TitleLevels.H3} text='Title Level 4' />"),r.default.createElement("div",null,"<Title level={TitleLevels.H5} levelVisual={TitleLevels.H2} text='Title Level 5' />"),r.default.createElement("div",null,"<Title level={TitleLevels.H6} levelVisual={TitleLevels.H1} text='Title Level 6' />"))},{title:"Text Elision",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"By default the Title text overflow will be elided when longer than its container.")),result:r.default.createElement("div",{style:{width:"300px"}},r.default.createElement(l.Title,{level:l.TitleLevels.H1,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),r.default.createElement(l.Title,{level:l.TitleLevels.H2,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),r.default.createElement(l.Title,{level:l.TitleLevels.H3,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),r.default.createElement(l.Title,{level:l.TitleLevels.H4,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),r.default.createElement(l.Title,{level:l.TitleLevels.H5,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),r.default.createElement(l.Title,{level:l.TitleLevels.H6,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"})),code:r.default.createElement("div",null,r.default.createElement("div",null,"<div style={{ width: '300px' }}>"),r.default.createElement("div",null,"  <Title level={TitleLevels.H1} text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),r.default.createElement("div",null,"  <Title level={TitleLevels.H2} text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),r.default.createElement("div",null,"  <Title level={TitleLevels.H3} text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),r.default.createElement("div",null,"  <Title level={TitleLevels.H4} text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),r.default.createElement("div",null,"  <Title level={TitleLevels.H5} text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),r.default.createElement("div",null,"  <Title level={TitleLevels.H6} text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),r.default.createElement("div",null,"</div>"))},{title:"Text Wrapping",description:r.default.createElement(r.default.Fragment,null,r.default.createElement("p",null,"Add the --wrap modifier to cause the overflow text to wrap instead.")),result:r.default.createElement("div",{style:{width:"300px"}},r.default.createElement(l.Title,{level:l.TitleLevels.H1,wrap:!0,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),r.default.createElement(l.Title,{level:l.TitleLevels.H2,wrap:!0,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),r.default.createElement(l.Title,{level:l.TitleLevels.H3,wrap:!0,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),r.default.createElement(l.Title,{level:l.TitleLevels.H4,wrap:!0,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),r.default.createElement(l.Title,{level:l.TitleLevels.H5,wrap:!0,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),r.default.createElement(l.Title,{level:l.TitleLevels.H6,wrap:!0,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"})),code:r.default.createElement("div",null,r.default.createElement("div",null,"<div style={{ width: '300px' }}>"),r.default.createElement("div",null,"  <Title level={TitleLevels.H1} wrap text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),r.default.createElement("div",null,"  <Title level={TitleLevels.H2} wrap text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),r.default.createElement("div",null,"  <Title level={TitleLevels.H3} wrap text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),r.default.createElement("div",null,"  <Title level={TitleLevels.H4} wrap text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),r.default.createElement("div",null,"  <Title level={TitleLevels.H5} wrap text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),r.default.createElement("div",null,"  <Title level={TitleLevels.H6} wrap text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),r.default.createElement("div",null,"</div>"))}]};t.TitleDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},7026:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ToolbarDemo=void 0;const r=a(n(7294));t.ToolbarDemo=()=>r.default.createElement("div",null,"TOOLBAR")},4392:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.VerticalNavigationDemo=void 0;const r=a(n(7294)),l=n(2531),i=n(7027),o={title:"Vertical Navigation",labels:[{text:"version 0.0.6",accentColor:l.AccentColors.COLOR_8},{text:"in progress",accentColor:l.AccentColors.COLOR_5},{text:"themable",accentColor:l.AccentColors.COLOR_3}],description:"",types:[{id:"VerticalNavigation",props:[{id:"",type:"",description:""}]}],examples:[{title:"Default",description:"The default vertical navigation is comprised of several navigation list items.",result:r.default.createElement(l.VerticalNavigation,{label:"Main Menu",itemsLabel:"Main Menu List",items:[{id:"overview",text:"Overview",icon:"home"},{id:"calendar",text:"Calendar Calendar Calendar Calendar Calendar Calendar ",icon:"calendar",expanded:!0,items:[{id:"calendar-item-1",text:"Second level item 1 "},{id:"calendar-item-2",text:"Second level item 2 "}]},{id:"customers",text:"Customers",icon:"customer",expanded:!0,items:[{id:"customers-item-1",text:"Second level item 1 "},{id:"customers-item-2",text:"Second level item 2 "}]},{id:"deliveries",text:"Deliveries",icon:"shipping-status"}]}),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<VerticalNavigation"),r.default.createElement("div",null,"  label='Main Menu'"),r.default.createElement("div",null,"  itemsLabel='Main Menu List'"),r.default.createElement("div",null,"  items={[{"),r.default.createElement("div",null,"    id: 'overview',"),r.default.createElement("div",null,"    text: 'Overview',"),r.default.createElement("div",null,"    icon: 'home',"),r.default.createElement("div",null,"  }, {"),r.default.createElement("div",null,"    id: 'calendar',"),r.default.createElement("div",null,"    text: 'Calendar Calendar Calendar Calendar Calendar Calendar ',"),r.default.createElement("div",null,"    icon: 'calendar',"),r.default.createElement("div",null,"    expanded: true,"),r.default.createElement("div",null,"    items: [{"),r.default.createElement("div",null,"      id: 'calendar-item-1',"),r.default.createElement("div",null,"      text: 'Second level item 1 ',"),r.default.createElement("div",null,"    }, {"),r.default.createElement("div",null,"      id: 'calendar-item-2',"),r.default.createElement("div",null,"      text: 'Second level item 2 ',"),r.default.createElement("div",null,"    }]"),r.default.createElement("div",null,"  }, {"),r.default.createElement("div",null,"    id: 'customers',"),r.default.createElement("div",null,"    text: 'Customers',"),r.default.createElement("div",null,"    icon: 'customer',"),r.default.createElement("div",null,"    expanded: true,"),r.default.createElement("div",null,"    items: [{"),r.default.createElement("div",null,"      id: 'customers-item-1',"),r.default.createElement("div",null,"      text: 'Second level item 1 ',"),r.default.createElement("div",null,"    }, {"),r.default.createElement("div",null,"      id: 'customers-item-2',"),r.default.createElement("div",null,"      text: 'Second level item 2 ',"),r.default.createElement("div",null,"    }]"),r.default.createElement("div",null,"  }, {"),r.default.createElement("div",null,"    id: 'deliveries',"),r.default.createElement("div",null,"    text: 'Deliveries',"),r.default.createElement("div",null,"    icon: 'shipping-status',"),r.default.createElement("div",null,"  }]}"),r.default.createElement("div",null,"/>"))},{title:"Condensed",description:"In condensed mode, only icons are shown unless some navigation items have second levels and the second level is expanded.",result:r.default.createElement(l.VerticalNavigation,{label:"Main Menu",itemsLabel:"Main Menu List",condensed:!0,items:[{id:"overview",text:"Overview",icon:"home"},{id:"calendar",text:"Calendar Calendar Calendar Calendar Calendar Calendar ",icon:"calendar",expanded:!1},{id:"customers",text:"Customers",icon:"customer",expanded:!1},{id:"deliveries",text:"Deliveries",icon:"shipping-status"}]}),code:r.default.createElement("div",{style:{whiteSpace:"pre"}},r.default.createElement("div",null,"<VerticalNavigation"),r.default.createElement("div",null,"  label='Main Menu'"),r.default.createElement("div",null,"  itemsLabel='Main Menu List'"),r.default.createElement("div",null,"  condensed={true}"),r.default.createElement("div",null,"  items={[{"),r.default.createElement("div",null,"    id: 'overview',"),r.default.createElement("div",null,"    text: 'Overview',"),r.default.createElement("div",null,"    icon: 'home',"),r.default.createElement("div",null,"  }, {"),r.default.createElement("div",null,"    id: 'calendar',"),r.default.createElement("div",null,"    text: 'Calendar Calendar Calendar Calendar Calendar Calendar ',"),r.default.createElement("div",null,"    icon: 'calendar',"),r.default.createElement("div",null,"    expanded: false,"),r.default.createElement("div",null,"  }, {"),r.default.createElement("div",null,"    id: 'customers',"),r.default.createElement("div",null,"    text: 'Customers',"),r.default.createElement("div",null,"    icon: 'customer',"),r.default.createElement("div",null,"    expanded: false,"),r.default.createElement("div",null,"  }, {"),r.default.createElement("div",null,"    id: 'deliveries',"),r.default.createElement("div",null,"    text: 'Deliveries',"),r.default.createElement("div",null,"    icon: 'shipping-status',"),r.default.createElement("div",null,"  }]}"),r.default.createElement("div",null,"/>"))}]};t.VerticalNavigationDemo=()=>r.default.createElement(i.DemoPage,Object.assign({},o))},6212:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=a(n(7294)),l=n(9818),i=n(6113),o=n(745),u=a(n(2509)),c=a(n(1079)),s=document.getElementById("reactroot");(0,o.createRoot)(s).render(r.default.createElement(i.Provider,{store:c.default},r.default.createElement(l.HashRouter,null,r.default.createElement(u.default,null))))},8277:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Avatar=void 0;const r=a(n(7294)),l=n(3723),i=n(7876);t.Avatar=({className:e,style:t,ariaLabel:n,ariaLabelZoom:a,ariaControls:o,ariaExpanded:u,ariaHaspopup:c,accentColor:s,bordered:d,circle:f,design:m,icon:p,iconZoom:v,initials:h,size:b=l.Sizes.MEDIUM,onClick:g})=>{const E=["fd-avatar"];return e&&E.push(e),b&&E.push(`fd-avatar--${b}`),s&&E.push(`fd-avatar--${s}`),d&&E.push("fd-avatar--border"),m&&E.push(`fd-avatar--${m}`),f&&E.push("fd-avatar--circle"),r.default.createElement("span",{className:E.join(" "),"aria-label":n,"aria-controls":o,"aria-expanded":u,"aria-haspopup":c,style:t,role:g?"button":void 0,tabIndex:g?0:void 0,onClick:g},p?r.default.createElement(i.Icon,{className:"fd-avatar__icon",icon:p}):h,g&&v?r.default.createElement(i.Icon,{className:"fd-avatar__zoom-icon",icon:v,ariaLabel:a||"Edit"}):null)}},9128:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Bar=void 0;const r=a(n(7294)),l=n(4413),i=n(3494),o=n(2574),u=n(2300);t.Bar=({className:e,style:t,cozy:n,left:a,middle:c,responsivePaddings:s,right:d,type:f})=>{const m=e=>Array.isArray(e)?e.map(((e,t)=>p(e,`element-${t}`))):p(e),p=(e,t)=>r.default.createElement(l.BarElement,{key:t},e),v=["fd-bar"];return e&&v.push(e),n&&v.push("fd-bar--cozy"),s&&v.push("fd-bar--responsive-paddings"),f&&v.push(`fd-bar--${f}`),r.default.createElement("div",{className:v.join(" "),style:t},a?r.default.createElement(i.BarLeft,null,m(a)):null,c?r.default.createElement(o.BarMiddle,null,m(c)):null,d?r.default.createElement(u.BarRight,null,m(d)):null)}},4413:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BarElement=void 0;const r=a(n(7294));t.BarElement=({className:e,style:t,children:n})=>{const a=["fd-bar__element"];return e&&a.push(e),r.default.createElement("div",{className:a.join(" "),style:t},n)}},3494:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BarLeft=void 0;const r=a(n(7294));t.BarLeft=({className:e,style:t,children:n})=>{const a=["fd-bar__left"];return e&&a.push(e),r.default.createElement("div",{className:a.join(" "),style:t},n)}},2574:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BarMiddle=void 0;const r=a(n(7294));t.BarMiddle=({className:e,style:t,children:n})=>{const a=["fd-bar__middle"];return e&&a.push(e),r.default.createElement("div",{className:a.join(" "),style:t},n)}},2300:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BarRight=void 0;const r=a(n(7294));t.BarRight=({className:e,style:t,children:n})=>{const a=["fd-bar__right"];return e&&a.push(e),r.default.createElement("div",{className:a.join(" "),style:t},n)}},8677:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Breadcrumb=void 0;const r=a(n(7294)),l=n(6859);t.Breadcrumb=({className:e,style:t,ariaLabel:n,items:a,onItemSelected:i})=>{const o=[];return e&&o.push(e),r.default.createElement("nav",{className:o.join(" "),style:t,"aria-label":n},r.default.createElement("ul",{className:"fd-breadcrumb"},a.map(((e,t)=>r.default.createElement(l.BreadcrumbItem,{key:t,text:e.text,current:t===a.length-1,onItemSelected:()=>(e=>(e.onItemSelected?e.onItemSelected():i&&i(e.text),!1))(e)})))))}},6859:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BreadcrumbItem=void 0;const r=a(n(7294));t.BreadcrumbItem=({className:e,style:t,text:n,current:a,onItemSelected:l})=>{const i=["fd-breadcrumb__item"];return e&&i.push(e),a?r.default.createElement("li",{className:i.join(" "),style:t,"aria-current":"page"},n):r.default.createElement("li",{className:i.join(" "),style:t},r.default.createElement("a",{className:"fd-link",tabIndex:0,href:"#",onClick:()=>(l(),!1)},r.default.createElement("span",{className:"fd-link__content"},n)))}},7289:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BusyIndicator=void 0;const r=a(n(7294));t.BusyIndicator=({className:e,style:t,ariaLabel:n,contrast:a,label:l,size:i,toast:o})=>{const u=l||o,c=["fd-busy-indicator"];i&&c.push(`fd-busy-indicator--${i}`),e&&c.push(e),a&&c.push("fd-busy-indicator--contrast");const s=r.default.createElement("div",{className:c.join(" "),style:t,"aria-hidden":"false","aria-label":n||"Loading"},r.default.createElement("div",{className:"fd-busy-indicator__circle"}),r.default.createElement("div",{className:"fd-busy-indicator__circle"}),r.default.createElement("div",{className:"fd-busy-indicator__circle"}));if(u){const e=["fd-busy-indicator-extended"];return o&&(e.push("fd-message-toast"),l&&e.push("fd-busy-indicator-extended--message-toast")),r.default.createElement("div",{className:e.join(" ")},s,l?r.default.createElement("div",{className:"fd-busy-indicator-extended__label"},l):null)}return s}},4326:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Button=void 0;const r=a(n(7294)),l=n(1903);t.Button=({className:e,style:t,ariaLabel:n,ariaControls:a,ariaExpanded:i,ariaHaspopup:o,badge:u,compact:c,design:s,disabled:d,icon:f,iconAfter:m,menu:p,selected:v,tabIndex:h,text:b,type:g=l.ButtonTypes.BUTTON,onClick:E})=>{const y=["fd-button"];return e&&y.push(e),s&&y.push(`fd-button--${s}`),v&&y.push("is-selected"),c&&y.push("fd-button--compact"),p&&y.push("fd-button--menu"),r.default.createElement("button",{className:y.join(" "),style:t,"aria-label":n,"aria-controls":a,"aria-expanded":i,"aria-haspopup":o,onClick:e=>{e.stopPropagation(),E&&E()},tabIndex:h||0,type:g,"aria-disabled":!!d,disabled:d},f&&!m?r.default.createElement("i",{className:`sap-icon--${f}`,role:"presentation"}):null,b?r.default.createElement("span",{className:"fd-button__text"},b):null,f&&m?r.default.createElement("i",{className:`sap-icon--${f}`,role:"presentation"}):null,p?r.default.createElement("i",{className:"sap-icon--slim-arrow-down"}):null,u?r.default.createElement("span",{className:"fd-button__badge"},u):null)}},6232:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SegmentedButton=void 0;const r=a(n(7294));t.SegmentedButton=({className:e,style:t,ariaLabel:n,children:a})=>{const l=["fd-segmented-button"];return e&&l.push(e),r.default.createElement("div",{className:l.join(" "),style:t,"aria-label":n||"Group label",role:"group"},a)}},8681:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Calendar=t.DISPLAY_MODE=void 0;const i=l(n(7294)),o=n(7280),u=n(8551),c=n(1663);t.DISPLAY_MODE={DAYS:"DAYS",MONTHS:"MONTHS",YEARS:"YEARS"},t.Calendar=({date:e=new Date,selectedDate:n,compact:a,onSelectedDateChange:r})=>{let l=t.DISPLAY_MODE.DAYS;const[s,d]=(0,i.useState)(e),[f,m]=(0,i.useState)(t.DISPLAY_MODE.DAYS);(0,i.useEffect)((()=>{f!==t.DISPLAY_MODE.YEARS&&(l=f)}),[f]);const p=e=>{d(e)},v=e=>{m(e)},h=e=>{m(e)},b=e=>{m(l||e)};switch(f){case t.DISPLAY_MODE.MONTHS:return i.default.createElement(u.CalendarMonths,{date:s,onDisplayDateChange:p,onDisplayModeChange:h});case t.DISPLAY_MODE.YEARS:return i.default.createElement(c.CalendarYears,{date:s,onDisplayDateChange:p,onDisplayModeChange:b});default:return i.default.createElement(o.CalendarDays,{date:s,selectedDate:n,compact:a,onDisplayDateChange:p,onDisplayModeChange:v,onSelectedDateChange:r})}}},7280:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarDays=void 0;const i=l(n(7294)),o=n(6039),u=n(4326),c=n(8681),s=n(5958);t.CalendarDays=({date:e,selectedDate:t,compact:n,onDisplayDateChange:a,onDisplayModeChange:r,onSelectedDateChange:l})=>{const p="en",v=new Intl.Locale(p),{firstDay:h,minimalDays:b,weekend:g}=v.weekInfo,[E,y]=(0,i.useState)([]),[_,A]=(0,i.useState)([]);(0,i.useEffect)((()=>{const e=[],t=new Date;for(;t.getDay()!==h%7;)t.setDate(t.getDate()-1);for(let n=0;n<7;n++){const n=t.toLocaleString(p,{weekday:"short"});e.push(n.substring(0,1).toUpperCase()),t.setDate(t.getDate()+1)}A(e)}),[]),(0,i.useEffect)((()=>{const n=new Date,a=[],r=new Date(e.getFullYear(),e.getMonth(),1);for(;r.getDay()!==h%7;)r.setDate(r.getDate()-1);for(let l=0;l<5;l++){const l=[];for(let a=1;a<8;a++){const i=n.getFullYear()===r.getFullYear(),o=n.getMonth()===r.getMonth(),u=n.getDate()===r.getDate(),c=!!t&&t.getFullYear()===r.getFullYear(),s=!!t&&t.getMonth()===r.getMonth(),d=!!t&&t.getDate()===r.getDate();l.push({date:new Date(r.getTime()),text:r.getDate(),otherMonth:r.getMonth()!==e.getMonth(),current:i&&o&&u,active:c&&s&&d,weekend:g.includes(a)}),r.setDate(r.getDate()+1)}a.push(l)}y(a)}),[e,t]);const S=["fd-calendar"];return n&&S.push("fd-calendar--compact"),i.default.createElement("section",{className:S.join(" ")},i.default.createElement("header",{className:"fd-calendar__header"},i.default.createElement("div",{className:"fd-calendar__navigation"},i.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-left"},i.default.createElement(u.Button,{design:s.ButtonDesigns.TRANSPARENT,icon:"slim-arrow-left",onClick:()=>{const t=new Date(e.getFullYear(),e.getMonth(),0);a(t)}})),i.default.createElement("div",{className:"fd-calendar__action"},i.default.createElement(u.Button,{design:s.ButtonDesigns.TRANSPARENT,text:o.StringUtils.capitalize(e.toLocaleString(p,{month:"long"})),onClick:()=>{r(c.DISPLAY_MODE.MONTHS)}})),i.default.createElement("div",{className:"fd-calendar__action"},i.default.createElement(u.Button,{design:s.ButtonDesigns.TRANSPARENT,text:e.getFullYear(),onClick:()=>{r(c.DISPLAY_MODE.YEARS)}})),i.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-right"},i.default.createElement(u.Button,{design:s.ButtonDesigns.TRANSPARENT,icon:"slim-arrow-right",onClick:()=>{const t=new Date(e.getFullYear(),e.getMonth()+1,1);a(t)}})))),i.default.createElement("div",{className:"fd-calendar__content fd-calendar__content--dates"},i.default.createElement("table",{className:"fd-calendar__table",role:"grid"},i.default.createElement("thead",{className:"fd-calendar__group"},i.default.createElement("tr",{className:"fd-calendar__row"},i.default.createElement(d,null),_.map(((e,t)=>i.default.createElement(d,{key:`calendar-week-day-${t}`,text:e}))))),i.default.createElement("tbody",{className:"fd-calendar__group"},E.map(((e,t)=>i.default.createElement("tr",{key:`calendar-week-${t}`,className:"fd-calendar__row"},i.default.createElement(f,{text:t+1}),e.map((e=>i.default.createElement(m,Object.assign({key:`calendar-week-${t}-day-${e.text}`},e,{onCalendarDayClicked:()=>l&&l(e.date)})))))))))),i.default.createElement("div",{"aria-live":"polite",className:"fd-calendar__content fd-calendar__content--screen-reader-only"},"Use arrow keys to navigate dates"))};const d=({text:e})=>i.default.createElement("th",{className:"fd-calendar__item fd-calendar__item--side-helper"},e?i.default.createElement("span",{className:"fd-calendar__text",role:"button"},e):null),f=({text:e})=>i.default.createElement("td",{className:"fd-calendar__item fd-calendar__item--side-helper"},i.default.createElement("span",{className:"fd-calendar__text",role:"button"},e)),m=({text:e,active:t,current:n,otherMonth:a,range:r,specialDay:l,weekend:o,onCalendarDayClicked:u})=>{const c=["fd-calendar__item"];return t&&c.push("is-active"),n&&c.push("fd-calendar__item--current"),a&&c.push("fd-calendar__item--other-month"),r&&c.push("fd-calendar__item--range"),l&&c.push(`fd-calendar__special-day--${l}`),o&&c.push("fd-calendar__item--weekend"),i.default.createElement("td",{className:c.join(" "),role:"gridcell",style:{cursor:"pointer"}},i.default.createElement("span",{className:"fd-calendar__text",role:"button",onClick:u},e))}},8551:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarMonths=void 0;const i=l(n(7294)),o=n(6039),u=n(4326),c=n(8681),s=n(5958);t.CalendarMonths=({date:e,onDisplayDateChange:t,onDisplayModeChange:n})=>{const[a,r]=(0,i.useState)([]);(0,i.useEffect)((()=>{const t=new Date,n=[];for(let a=0;a<4;a++){const r=[];for(let n=0;n<3;n++){const l=4*n+a,i=e.getFullYear()===t.getFullYear(),o=t.getMonth()===l;r.push({month:l,current:i&&o})}n.push(r)}r(n)}),[e]);const l=e=>{const t=new Date(2e3,e).toLocaleString("en",{month:"long"});return o.StringUtils.capitalize(t)};return i.default.createElement("section",{className:["fd-calendar"].join(" ")},i.default.createElement("header",{className:"fd-calendar__header"},i.default.createElement("div",{className:"fd-calendar__navigation"},i.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-left"},i.default.createElement(u.Button,{design:s.ButtonDesigns.TRANSPARENT,icon:"slim-arrow-left",onClick:()=>{const n=new Date(e.getFullYear()-1,e.getMonth(),1);t(n)}})),i.default.createElement("div",{className:"fd-calendar__action"},i.default.createElement(u.Button,{design:s.ButtonDesigns.TRANSPARENT,text:e.getFullYear(),onClick:()=>{n(c.DISPLAY_MODE.YEARS)}})),i.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-right"},i.default.createElement(u.Button,{design:s.ButtonDesigns.TRANSPARENT,icon:"slim-arrow-right",onClick:()=>{const n=new Date(e.getFullYear()+1,e.getMonth(),1);t(n)}})))),i.default.createElement("div",{className:"fd-calendar__content fd-calendar__content--months"},i.default.createElement("table",{className:"fd-calendar__table",role:"grid"},i.default.createElement("tbody",{className:"fd-calendar__group"},a.map(((a,r)=>i.default.createElement("tr",{key:`'calendar-month-row-${r}`,className:"fd-calendar__row"},a.map((a=>i.default.createElement(d,{key:`'calendar-month-${a.month}`,text:l(a.month),current:a.current,onClick:()=>(a=>{const r=new Date(e.getFullYear(),a,1);t(r),n(c.DISPLAY_MODE.DAYS)})(a.month)}))))))))),i.default.createElement("div",{"aria-live":"polite",className:"fd-calendar__content fd-calendar__content--screen-reader-only"},"Use arrow keys to navigate dates"))};const d=({text:e,active:t,current:n,onClick:a})=>{const r=["fd-calendar__item"];n&&r.push("fd-calendar__item--current");const l=["fd-button fd-button--transparent fd-calendar__item-button"];return t&&l.push("is-active"),i.default.createElement("td",{className:r.join(" "),role:"gridcell"},i.default.createElement("button",{className:l.join(" "),type:"button",onClick:a},i.default.createElement("span",{className:"fd-calendar__text"},e)))}},1663:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarYears=void 0;const i=l(n(7294)),o=n(4326),u=n(8681),c=n(5958);t.CalendarYears=({date:e,onDisplayDateChange:t,onDisplayModeChange:n})=>{const[a,r]=(0,i.useState)([]);return(0,i.useEffect)((()=>{const t=new Date;let n=10*Math.floor(e.getFullYear()/10);const a=[];for(let e=0;e<4;e++){const e=[];for(let a=0;a<5;a++)e.push({current:n===t.getFullYear(),year:n++});a.push(e)}r(a)}),[e]),i.default.createElement("section",{className:["fd-calendar"].join(" "),style:{marginBottom:"1rem"}},i.default.createElement("header",{className:"fd-calendar__header"},i.default.createElement("div",{className:"fd-calendar__navigation"},i.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-left"},i.default.createElement(o.Button,{design:c.ButtonDesigns.TRANSPARENT,icon:"slim-arrow-left",onClick:()=>{const n=new Date(e.getFullYear()-20,e.getMonth(),1);t(n)}})),i.default.createElement("div",{className:"fd-calendar__action"},i.default.createElement(o.Button,{design:c.ButtonDesigns.TRANSPARENT,text:a&&a.length?`${a[0][0].year} - ${a[3][4].year}`:void 0})),i.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-right"},i.default.createElement(o.Button,{design:c.ButtonDesigns.TRANSPARENT,icon:"slim-arrow-right",onClick:()=>{const n=new Date(e.getFullYear()+20,e.getMonth(),1);t(n)}})))),i.default.createElement("div",{className:"fd-calendar__content fd-calendar__content--years ",id:"57YUZ521"},i.default.createElement("table",{className:"fd-calendar__table",role:"grid"},i.default.createElement("tbody",{className:"fd-calendar__group"},a.map(((a,r)=>i.default.createElement("tr",{key:`'calendar-years-row-${r}`,className:"fd-calendar__row"},a.map((a=>i.default.createElement(s,{key:`'calendar-years-${a.year}`,text:a.year,current:a.current,onClick:()=>(a=>{const r=new Date(a,e.getMonth(),1);t(r),n(u.DISPLAY_MODE.MONTHS)})(a.year)}))))))))),i.default.createElement("div",{"aria-live":"polite",className:"fd-calendar__content fd-calendar__content--screen-reader-only"},"Use arrow keys to navigate dates"))};const s=({text:e,active:t,current:n,onClick:a})=>{const r=["fd-calendar__item"];n&&r.push("fd-calendar__item--current");const l=["fd-button fd-button--transparent fd-calendar__item-button"];return t&&l.push("is-active"),i.default.createElement("td",{className:r.join(" "),role:"gridcell"},i.default.createElement("button",{className:l.join(" "),type:"button",onClick:a},i.default.createElement("span",{className:"fd-calendar__text"},e)))}},6369:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Card=void 0;const r=a(n(7294)),l=n(3824),i=n(6864),o=n(4229);t.Card=({badge:e,header:t,footer:n,children:a})=>r.default.createElement("div",{className:["fd-card"].join(" ")},e?r.default.createElement(o.InfoLabel,Object.assign({},e)):null,r.default.createElement(l.CardHeader,Object.assign({},t)),a?r.default.createElement("div",{className:"fd-card__content",role:"group","aria-label":"Card Content"},a):null,r.default.createElement(i.CardFooter,Object.assign({},n)))},6864:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CardFooter=void 0;const r=a(n(7294));t.CardFooter=({className:e,children:t})=>{const n=["fd-card__footer"];return e&&n.push(e),r.default.createElement("a",{className:n.join(" ")},t)}},3824:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CardHeader=void 0;const r=a(n(7294)),l=n(8277);t.CardHeader=({avatar:e,title:t,titleCounter:n,subTitle:a,onClick:i})=>r.default.createElement("a",{className:["fd-card__header"].join(" "),tabIndex:0,onClick:()=>{i&&i()},onKeyUp:e=>{switch(e.code){case"Enter":case"Space":e.stopPropagation(),i&&i()}}},e?r.default.createElement(l.Avatar,Object.assign({},e)):null,t||n?r.default.createElement("div",{className:"fd-card__title-area"},r.default.createElement("div",{className:"fd-card__title"},t),r.default.createElement("span",{className:"fd-object-status fd-card__counter"},n)):null,a?r.default.createElement("div",{className:"fd-card__subtitle-area"},r.default.createElement("div",{className:"fd-card__subtitle"},a)):null)},9456:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Dialog=void 0;const i=l(n(7294)),o=n(8329),u=n(9929);t.Dialog=({resizable:e,header:t,footer:n,children:a})=>{const r=(0,i.useRef)(null);return(0,i.useEffect)((()=>{const e=null==r?void 0:r.current;if(e){const t=e.querySelector('[tabindex="0"]');t&&t.focus()}}),[]),i.default.createElement("section",{className:"fd-dialog-docs-static fd-dialog fd-dialog--active"},i.default.createElement("div",{className:"fd-dialog__content",role:"dialog","aria-modal":"true","aria-labelledby":"dialog-title-1",ref:r},e?i.default.createElement("span",{className:"fd-dialog__resize-handle"}):null,t?i.default.createElement(u.DialogHeader,Object.assign({},t)):null,i.default.createElement("div",{className:"fd-dialog__body"},a),n?i.default.createElement(o.DialogFooter,Object.assign({},n)):null))}},8329:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DialogFooter=void 0;const r=a(n(7294));t.DialogFooter=({left:e,right:t,children:n})=>{const a=e=>e?Array.isArray(e)?r.default.createElement(r.default.Fragment,null,e.map(((e,t)=>l(e,`elem-${t}`)))):l(e):null,l=(e,t)=>r.default.createElement("div",{key:t,className:"fd-bar__element"},e);return r.default.createElement("footer",{className:"fd-dialog__footer fd-bar fd-bar--footer"},r.default.createElement("div",{className:"fd-bar__left"},e?a(e):null),r.default.createElement("div",{className:"fd-bar__right"},a(t||n)))}},9929:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DialogHeader=void 0;const r=a(n(7294));t.DialogHeader=({left:e,right:t,subheader:n})=>{const a=["fd-dialog__header fd-bar"];n?a.push("fd-bar--header-with-subheader"):a.push("fd-bar--header");const l=e=>{if(e)return Array.isArray(e)?r.default.createElement(r.default.Fragment,null,e.map(((e,t)=>i(e,`elem-${t}`)))):i(e)},i=(e,t)=>r.default.createElement("div",{key:t,className:"fd-bar__element"},e);return r.default.createElement("header",{className:a.join(" ")},r.default.createElement("div",{className:"fd-bar__left"},e?l(e):null),r.default.createElement("div",{className:"fd-bar__right"},l(t)))}},4171:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CheckBox=void 0;const i=l(n(7294)),o=n(6039);t.CheckBox=({className:e,style:t,compact:n,disabled:a,checked:r,indeterminate:l,readOnly:u,required:c,state:s,text:d,onChange:f})=>{const[m]=(0,i.useState)(`checkbox-${o.UUID.next()}`),p=(0,i.useRef)(null);(0,i.useEffect)((()=>{p.current&&(p.current.indeterminate=!(r||!l))}));const v=["fd-checkbox"],h=["fd-checkbox__label"];return e&&v.push(e),n&&(v.push("fd-checkbox--compact"),h.push("fd-checkbox__label--compact")),c&&h.push("fd-checkbox__label--required"),s&&v.push(`is-${s}`),i.default.createElement(i.default.Fragment,null,i.default.createElement("input",{ref:p,id:m,className:v.join(" "),style:t,checked:r,disabled:a,readOnly:u,type:"checkbox",onChange:e=>{f(e.currentTarget.checked)}}),i.default.createElement("label",{className:h.join(" "),htmlFor:m},i.default.createElement("div",{className:"fd-checkbox__label-container"},i.default.createElement("span",{className:"fd-checkbox__text"},d))))}},3088:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormCheckBox=void 0;const r=a(n(7294)),l=n(8157);t.FormCheckBox=({className:e,style:t,compact:n,checked:a,disabled:i,indeterminate:o,readOnly:u,required:c,state:s,text:d,onChange:f})=>r.default.createElement(l.FormItem,{label:"",className:e,style:t,checkbox:{compact:n,checked:a,disabled:i,indeterminate:o,readOnly:u,required:c,state:s,text:d,onChange:f}})},5291:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormInput=void 0;const r=a(n(7294)),l=n(8157);t.FormInput=({className:e,style:t,ariaLabel:n,compact:a,disabled:i,horizontal:o,label:u,placeholder:c,readOnly:s,required:d,state:f,stateMessage:m,type:p,value:v,onChange:h})=>r.default.createElement(l.FormItem,{className:e,style:t,label:u,horizontal:o,required:d,input:{ariaLabel:n,compact:a,disabled:i,placeholder:c,readOnly:s,state:f,stateMessage:m,type:p,value:v,onChange:h}})},8157:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.FormItem=void 0;const i=l(n(7294)),o=n(6039),u=n(4171),c=n(4977),s=n(48),d=n(7674),f=n(9884);t.FormItem=({id:e,className:t,style:n,horizontal:a,label:r,required:l,checkbox:m,input:p,select:v,stepinput:h})=>{const[b]=(0,i.useState)(`form-item-${e||o.UUID.next()}`),g=["fd-form-item"];return t&&g.push(t),a&&g.push("fd-form-item--horizontal"),i.default.createElement("div",{className:g.join(" "),style:n},m?null:i.default.createElement(c.FormLabel,{required:l,text:r,htmlFor:b}),m?i.default.createElement(u.CheckBox,Object.assign({},m)):p?i.default.createElement(s.Input,Object.assign({},p,{id:b})):v?i.default.createElement(d.Select,Object.assign({},v,{id:b})):h?i.default.createElement(f.StepInput,Object.assign({},h,{id:b})):null)}},4977:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormLabel=void 0;const r=a(n(7294));t.FormLabel=({className:e,style:t,htmlFor:n,required:a,text:l})=>{const i=["fd-form-label"];return e&&i.push(e),a&&i.push("fd-form-label--required"),r.default.createElement("label",{className:i.join(" "),htmlFor:n,style:t},l)}},1074:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormSelect=void 0;const r=a(n(7294)),l=n(8157);n(177),t.FormSelect=({className:e,style:t,alignRight:n,compact:a,horizontal:i,items:o,label:u,placeholder:c,required:s,state:d,stateMessage:f,value:m,onChange:p})=>{const v=["fd-form-select"];return e&&v.push(e),r.default.createElement(l.FormItem,{className:v.join(" "),style:t,horizontal:i,label:u,required:s,select:{alignRight:n,compact:a,items:o,placeholder:c,state:d,stateMessage:f,value:m,onChange:p}})}},2923:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormStepInput=void 0;const r=a(n(7294)),l=n(8157);t.FormStepInput=({className:e,style:t,compact:n,disabled:a,horizontal:i,label:o,max:u,min:c,readOnly:s,required:d,state:f,value:m,onChange:p})=>r.default.createElement(l.FormItem,{className:e,style:t,label:o,horizontal:i,required:d,stepinput:{compact:n,disabled:a,max:u,min:c,readOnly:s,state:f,value:m,onChange:p}})},48:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Input=void 0;const r=a(n(7294)),l=n(6414),i=n(805);t.Input=({id:e,className:t,style:n,ariaLabel:a,compact:o,disabled:u,placeholder:c,readOnly:s,state:d,stateMessage:f,type:m=l.InputTypes.TEXT,value:p,onChange:v})=>{const h=e=>{v(e.currentTarget.value)},b=()=>r.default.createElement("input",{id:e,className:g.join(" "),disabled:u,style:n,"aria-label":a,placeholder:c,readOnly:s,type:m,value:p,onChange:h}),g=["fd-input"];if(t&&g.push(t),o&&g.push("fd-input--compact"),d&&g.push(`is-${d}`),f){const e=["fd-form-message"];return e.push(`fd-form-message--${d}`),r.default.createElement(i.Popover,{className:"fd-popover--input-message-group",control:b(),noArrow:!0},r.default.createElement("div",{className:e.join(" ")},f))}return b()}},9884:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.StepInput=void 0;const i=l(n(7294)),o=n(5958),u=n(4326);t.StepInput=({id:e,className:t,style:n,compact:a,disabled:r,min:l,max:c,readOnly:s,state:d,value:f,onChange:m})=>{const[p,v]=(0,i.useState)(f||l||0),[h,b]=(0,i.useState)(!1);(0,i.useEffect)((()=>{g(f)}),[f]);const g=e=>{let t=e;l&&!isNaN(l)&&t<l&&(t=l),c&&!isNaN(c)&&t>c&&(t=c),v(t),m(t)},E=()=>{b(!0)},y=["fd-step-input"],_=["fd-step-input__button"],A=["fd-input fd-input--no-number-spinner fd-step-input__input"];return t&&y.push(t),a&&(y.push("fd-step-input--compact"),_.push("fd-button--compact"),A.push("fd-input--compact")),r&&y.push("is-disabled"),h&&y.push("is-focus"),s&&y.push("is-readonly"),d&&y.push(`is-${d}`),i.default.createElement("div",{className:y.join(" "),style:n},i.default.createElement(u.Button,{className:_.join(" "),ariaLabel:"Step down",design:o.ButtonDesigns.TRANSPARENT,tabIndex:-1,icon:"less",onClick:()=>{g(p-1)}}),i.default.createElement("input",{id:e,className:A.join(" "),style:{width:"100%"},disabled:r,readOnly:s,type:"number",value:p,onChange:e=>{g(Number(e.target.value))},onBlur:E,onFocus:E}),i.default.createElement(u.Button,{className:_.join(" "),ariaLabel:"Step Up",design:o.ButtonDesigns.TRANSPARENT,tabIndex:-1,icon:"add",onClick:()=>{g(p+1)}}))}},7876:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Icon=void 0;const r=a(n(7294));t.Icon=({className:e,style:t,ariaLabel:n,ariaControls:a,ariaExpanded:l,ariaHaspopup:i,icon:o,preferSpan:u,onClick:c})=>{const s=[`sap-icon--${o}`];return e&&s.push(e),u&&s.push("sap-icon"),u?r.default.createElement("span",{className:s.join(" "),style:t,"aria-label":n,"aria-controls":a,"aria-expanded":l,"aria-haspopup":i,role:c?"button":"presentation",onClick:c}):r.default.createElement("i",{className:s.join(" "),style:t,"aria-label":n,"aria-controls":a,"aria-expanded":l,"aria-haspopup":i,role:c?"button":"presentation",onClick:c})}},1058:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IconTabBar=void 0;const r=a(n(7294)),l=n(5426);n(4902),t.IconTabBar=({className:e,style:t,compact:n,design:a,process:i,selectedTab:o,tabs:u,onTabSelect:c,children:s})=>{const d=["fd-icon-tab-bar"];return e&&d.push(e),n&&d.push("fd-icon-tab-bar--compact"),a&&d.push(`fd-icon-tab-bar--${a}`),i&&d.push("fd-icon-tab-bar--process"),r.default.createElement("div",{className:d.join(" "),style:t},r.default.createElement("ul",{className:"fd-icon-tab-bar__header",role:"tablist"},null==u?void 0:u.map(((e,t)=>r.default.createElement(l.IconTabBarItem,Object.assign({key:e.id,selected:o===e.id},e,{process:t<u.length-1&&(i||e.process),design:a||e.design,onTabSelect:c})))),s))}},5426:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IconTabBarItem=void 0;const r=a(n(7294)),l=n(2569);t.IconTabBarItem=({className:e,style:t,action:n,actionAriaLabel:a,badge:i,counter:o,icon:u,design:c,id:s,process:d,selected:f,semantic:m,title:p,onTabSelect:v,onActionSelect:h})=>{const b=["fd-icon-tab-bar__item"];return e&&b.push(e),m&&b.push(`fd-icon-tab-bar__item--${m}`),r.default.createElement("li",{className:b.join(" "),style:t,role:"presentation"},r.default.createElement("a",{id:s,className:"fd-icon-tab-bar__tab","aria-selected":!!f,role:"tab",tabIndex:0,onClick:()=>{v&&v(s)},onKeyUp:e=>{switch(e.code){case"Enter":case"Space":e.stopPropagation(),v&&v(s)}}},(()=>{switch(c){case l.IconTabBarDesigns.ICON:return r.default.createElement(r.default.Fragment,null,r.default.createElement("div",{className:"fd-icon-tab-bar__container"},r.default.createElement("span",{className:"fd-icon-tab-bar__icon"},r.default.createElement("i",{className:`sap-icon--${u}`,role:"presentation"})),i?r.default.createElement("span",{className:"fd-icon-tab-bar__badge"}):null),r.default.createElement("div",{className:"fd-icon-tab-bar__details"},o?r.default.createElement("span",{className:"fd-icon-tab-bar__counter"},o):null,p?r.default.createElement("span",{className:"fd-icon-tab-bar__label"},p):null));case l.IconTabBarDesigns.ICON_ONLY:return r.default.createElement(r.default.Fragment,null,r.default.createElement("span",{className:"fd-icon-tab-bar__icon"},r.default.createElement("i",{className:`sap-icon--${u}`,role:"presentation"})),i?r.default.createElement("span",{className:"fd-icon-tab-bar__badge"}):null,o?r.default.createElement("span",{className:"fd-icon-tab-bar__counter"},o):null);case l.IconTabBarDesigns.COUNTERS:return r.default.createElement(r.default.Fragment,null,o?r.default.createElement("span",{className:"fd-icon-tab-bar__counter"},o):null,p?r.default.createElement("span",{className:"fd-icon-tab-bar__label"},p):null,i?r.default.createElement("span",{className:"fd-icon-tab-bar__badge"}):null);default:return r.default.createElement(r.default.Fragment,null,r.default.createElement("span",{className:"fd-icon-tab-bar__tag"},p),i?r.default.createElement("span",{className:"fd-icon-tab-bar__badge"}):null)}})()),n?r.default.createElement("div",{className:"fd-icon-tab-bar__button-container"},r.default.createElement("button",{className:"fd-button fd-button--transparent fd-button--compact  fd-icon-tab-bar__button","aria-label":a,onClick:e=>{h&&h()}},r.default.createElement("i",{className:`sap-icon--${n}`}))):null,d?r.default.createElement("span",{className:"fd-icon-tab-bar__separator"},r.default.createElement("i",{className:"sap-icon--process",role:"presentation"})):null)}},4229:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.InfoLabel=void 0;const r=a(n(7294));t.InfoLabel=({className:e,style:t,accentColor:n,display:a,icon:l,numeric:i,text:o})=>{const u=["fd-info-label"];return e&&u.push(e),n&&u.push(`fd-info-label--${n}`),i&&u.push("fd-info-label--numeric"),a&&u.push("fd-info-label--display"),r.default.createElement("span",{className:u.join(" "),style:t},l?r.default.createElement("i",{className:`fd-info-label__icon sap-icon--${l}`,role:"presentation"}):null,o?r.default.createElement("span",{className:"fd-info-label__text"},o):null)}},6374:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Link=void 0;const r=a(n(7294));t.Link=({href:e,className:t,ariaLabel:n,style:a,icon:l,iconAfter:i,text:o,disabled:u,tabIndex:c})=>{const s=["fd-link"];return t&&s.push(t),a&&s.push(`fd-link--${a}`),r.default.createElement("a",{href:e,className:s.join(" "),"aria-label":n,tabIndex:c||0,"aria-disabled":!!u},r.default.createElement("span",{className:"fd-link__content"},l&&!i?r.default.createElement("span",{className:`sap-icon--${l}`}):null,o,l&&i?r.default.createElement("span",{className:`sap-icon--${l}`}):null))}},3595:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.List=void 0;const i=l(n(7294)),o=n(6039),u=n(2752);t.List=({className:e,style:t,compact:n,items:a,stateMessage:r,state:l,type:c,onItemSelected:s})=>{const[d]=(0,i.useState)(`list-state-${o.UUID.next()}`),f=["fd-list"];e&&f.push(e),n&&f.push("fd-list--compact"),c&&f.push(`fd-list--${c}`),r&&f.push("fd-list--has-message");const m=["fd-list__message"];return l&&m.push(`fd-list__message--${l}`),i.default.createElement(i.default.Fragment,null,r?i.default.createElement("div",{className:m.join(" "),"aria-live":"assertive",role:"alert"},r):null,i.default.createElement("ul",{className:f.join(" "),"aria-activedescendant":d,role:"list",style:t},a.map(((e,t)=>i.default.createElement(u.ListItem,Object.assign({id:0===t?d:void 0,key:`item-${t}`},e,{onItemSelected:()=>(e=>(e.onItemSelected?e.onItemSelected():s&&s(e),!1))(e),type:c}))))))}},2752:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ListItem=void 0;const r=a(n(7294)),l=n(5571);t.ListItem=({id:e,className:t,style:n,iconLeft:a,iconRight:i,interactive:o,selected:u,text:c,type:s,unread:d,onItemSelected:f})=>{const m=()=>r.default.createElement(r.default.Fragment,null,a?r.default.createElement("i",{className:`fd-list__icon sap-icon--${a}`,role:"presentation"}):null,r.default.createElement("span",{className:"fd-list__title"},c),i?r.default.createElement("i",{className:`fd-list__icon sap-icon--${i}`,role:"presentation"}):null),p=["fd-list__item"];return t&&p.push(t),o&&p.push("fd-list__item--interractive"),s===l.ListTypes.NAVIGATION&&p.push("fd-list__item--link"),u&&p.push("is-selected"),d&&p.push("fd-list__item--unread"),r.default.createElement("li",{id:e||void 0,className:p.join(" "),role:s===l.ListTypes.DROPDOWN?"option":"listitem",tabIndex:s===l.ListTypes.NAVIGATION?-1:0,style:n,onClick:()=>(f&&f(),!1)},s===l.ListTypes.NAVIGATION?r.default.createElement("a",{className:"fd-list__link",tabIndex:0},m()):m())}},1665:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Menu=void 0;const r=a(n(7294)),l=n(7541);t.Menu=({className:e,style:t,compact:n,items:a,noShadow:i,onItemSelected:o})=>{const u=["fd-menu"];e&&u.push(e),n&&u.push("fd-menu--compact");const c=["fd-menu__list"];return i&&c.push("fd-menu__list--no-shadow"),r.default.createElement("nav",{className:u.join(" "),"aria-label":"options",role:"navigation",style:t},r.default.createElement("ul",{className:c.join(" "),role:"menu"},a.map(((e,t)=>r.default.createElement(l.MenuItem,Object.assign({},e,{key:`menu-item-${t}`,onItemSelected:()=>e.onItemSelected?e.onItemSelected():(e=>(o&&o(e),!1))(e)}))))))}},7541:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MenuItem=void 0;const r=a(n(7294));t.MenuItem=({className:e,style:t,active:n,disabled:a,hover:l,iconAfter:i,iconBefore:o,selected:u,shortcut:c,text:s,onItemSelected:d})=>{const f=["fd-menu__item"];e&&f.push(e);const m=["fd-menu__link"];return n&&m.push("is-active"),l&&m.push("is-hover"),u&&m.push("is-selected"),a&&m.push("is-disabled"),r.default.createElement("li",{className:f.join(" "),role:"presentation",style:t},r.default.createElement("a",{className:m.join(" "),role:"menuitem",onClick:()=>(d&&d(),!1)},o?r.default.createElement("span",{className:"fd-menu__addon-before"},r.default.createElement("i",{className:`sap-icon--${o}`,role:"presentation"})):null,r.default.createElement("span",{className:"fd-menu__title"},s),c?r.default.createElement("span",{className:"fd-menu__shortcut"},c):null,i?r.default.createElement("span",{className:"fd-menu__addon-after"},r.default.createElement("i",{className:`sap-icon--${i}`,role:"presentation"})):null))}},3417:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectIdentifier=void 0;const r=a(n(7294));t.ObjectIdentifier=({className:e,style:t,bold:n,medium:a,text:l,title:i})=>{const o=["fd-object-identifier"];a&&o.push("fd-object-identifier--medium"),e&&o.push(e);const u=["fd-object-identifier__title"];return n&&u.push("fd-object-identifier__title--bold"),r.default.createElement("div",{className:o.join(" "),style:t},r.default.createElement("p",{className:u.join(" ")},i),l?r.default.createElement("p",{className:"fd-object-identifier__text"},l):null)}},225:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectList=void 0;const r=a(n(7294)),l=n(3610);t.ObjectList=({ariaLabeledBy:e,items:t,children:n,bordered:a})=>{const i=["fd-list fd-object-list"];return a||i.push("fd-list--no-border"),r.default.createElement("ul",{className:i.join(" "),role:"list","aria-labelledby":e},null==t?void 0:t.map(((e,t)=>r.default.createElement(l.ObjectListItem,Object.assign({key:`item-${t}`},e)))),n)}},3610:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectListItem=void 0;const r=a(n(7294)),l=n(8277),i=n(7778),o=n(3417),u=n(6519),c=n(3501),s=n(4279),d=n(3723);t.ObjectListItem=({intro:e,avatar:t,title:n,info:a,attributes:u,children:c})=>r.default.createElement("li",{className:"fd-list__item fd-object-list__item",style:{height:"auto"},role:"listitem",tabIndex:0},r.default.createElement("div",{className:"fd-object-list__container"},e?r.default.createElement("div",{className:"fd-object-list__intro"},e):null,a&&t&&n?r.default.createElement(f,{avatar:r.default.createElement(l.Avatar,Object.assign({},t,{size:d.Sizes.SMALL})),left:r.default.createElement(o.ObjectIdentifier,{className:"fd-object-list__object-identifier",title:n}),right:r.default.createElement(g,{type:a.type,props:a.props})}):null,r.default.createElement("div",{className:"fd-object-list__content"},null==u?void 0:u.map(((e,t)=>{var n;return r.default.createElement(v,{key:`attribute-${t}`},r.default.createElement(h,null,r.default.createElement(i.ObjectText,{text:e.name})),r.default.createElement(b,null,null===(n=e.items)||void 0===n?void 0:n.map(((e,n)=>r.default.createElement(g,Object.assign({key:`item-${t}-${n}`},e))))))})),c)));const f=({avatar:e,left:t,right:n,children:a})=>r.default.createElement("div",{className:"fd-object-list__header"},e||a,t?r.default.createElement(m,null,t):null,n?r.default.createElement(p,null,n):null),m=({children:e})=>r.default.createElement("div",{className:"fd-object-list__header-left"},e),p=({children:e})=>r.default.createElement("div",{className:"fd-object-list__header-right"},e),v=({left:e,right:t,children:n})=>r.default.createElement("div",{className:"fd-object-list__row"},e?r.default.createElement(h,null,e):null,t?r.default.createElement(b,null,t):null,e||t?null:n),h=({children:e})=>r.default.createElement("div",{className:"fd-object-list__row-left"},e),b=({children:e})=>r.default.createElement("div",{className:"fd-object-list__row-right"},e),g=({type:e,props:t})=>{switch(e){case"attribute":return r.default.createElement(i.ObjectText,{text:t.text});case"marker":return r.default.createElement(u.ObjectMarker,{icon:t.icon,iconOnly:t.iconOnly,text:t.text});case"number":return r.default.createElement(c.ObjectNumber,{className:"fd-object-list__object-number",value:t.value,unit:t.unit});case"status":return r.default.createElement(s.ObjectStatus,{text:t.text,semantic:t.semantic});case"identifier":return r.default.createElement(o.ObjectIdentifier,{className:"fd-object-list__object-identifier",title:t.title});default:return null}}},6519:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectMarker=void 0;const r=a(n(7294));t.ObjectMarker=({className:e,style:t,icon:n,iconOnly:a,text:l})=>{const i=["fd-object-marker"];return e&&i.push(e),r.default.createElement("div",{className:i.join(" "),style:t},n?r.default.createElement("i",{className:`fd-object-marker__icon sap-icon--${n}`,"aria-label":a?l:void 0,role:a?void 0:"presentation"}):null,!a&&l?r.default.createElement("span",{className:"fd-object-marker__text"},l):null)}},3501:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectNumber=void 0;const r=a(n(7294));t.ObjectNumber=({className:e,style:t,bold:n,large:a,semantic:l,unit:i,value:o})=>{const u=["fd-object-number"];e&&u.push(e),a&&u.push("fd-object-number--large"),l&&u.push(`fd-object-number--${l}`);const c=["fd-object-number__text"];return n&&c.push("fd-object-number__text--bold"),r.default.createElement("span",{className:u.join(" "),style:t},r.default.createElement("span",{className:c.join(" ")},o),r.default.createElement("span",{className:"fd-object-number__unit"},i))}},4279:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectStatus=void 0;const r=a(n(7294));t.ObjectStatus=({className:e,style:t,icon:n,iconOnly:a,inverted:l,large:i,semantic:o,text:u})=>{const c=["fd-object-status"];return o&&c.push(`fd-object-status--${o}`),l&&c.push("fd-object-status--inverted"),i&&c.push("fd-object-status--large"),e&&c.push(e),r.default.createElement("span",{className:c.join(" "),style:t},n?r.default.createElement("i",{className:`fd-object-status__icon sap-icon--${n}`,"aria-label":a?u:void 0,role:a?void 0:"presentation"}):null,a?null:r.default.createElement("span",{className:"fd-object-status__text"},u))}},7778:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectText=void 0;const r=a(n(7294));t.ObjectText=({className:e,style:t,text:n})=>{const a=["fd-object-text"];return e&&a.push(e),r.default.createElement("div",{className:a.join(" "),style:t},n)}},2192:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Page=void 0;const r=a(n(7294));n(6040),t.Page=({className:e,style:t,children:[n,a,l]})=>{const i=["ap-fd-page"];return e&&i.push(e),r.default.createElement("div",{className:i.join(" "),style:t},n,r.default.createElement("div",{className:"ap-fd-page__content"},a,l))}},8087:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PageBody=void 0;const r=a(n(7294));t.PageBody=({className:e,style:t,children:n})=>{const a=["ap-fd-page__body"];return e&&a.push(e),r.default.createElement("div",{className:a.join(" "),style:t},n)}},8327:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PageFooter=void 0;const r=a(n(7294));t.PageFooter=({className:e,style:t,children:n})=>{const a=["ap-fd-page__footer"];return e&&a.push(e),r.default.createElement("div",{className:a.join(" "),style:t},n)}},9283:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.PageHeader=void 0;const i=l(n(7294)),o=n(2780),u=n(3723),c=n(3904),s=n(8277),d=n(9128),f=n(4326),m=n(3845),p=n(5791);n(6821),t.PageHeader=({className:e,style:t,actions:n,attributes:a,avatar:r,breadcrumb:l,hideBoxShadow:v,subtitle:h,title:b})=>{const[g,E]=(0,i.useState)(!1),[y,_]=(0,i.useState)(Boolean(a&&(!Array.isArray(a)||a.length))),[A,S]=(0,i.useState)(!1);(0,i.useEffect)((()=>{const e=Boolean(a&&(!Array.isArray(a)||a.length));E(e),_(e)}),[a]);const C=(e,t)=>i.default.createElement(m.PageHeaderAttribute,Object.assign({},e,{key:t})),w=["ap-fd-page-header"];return e&&w.push(e),y&&w.push("ap-fd-page-header--expanded"),i.default.createElement("div",{className:w.join(" "),style:v?Object.assign(Object.assign({},t),{boxShadow:"none"}):t},i.default.createElement("div",{className:"ap-fd-page-header__controls"},i.default.createElement("div",{className:"ap-fd-page-header__controls__breadcrumb"},l),i.default.createElement("div",{className:"ap-fd-page-header__controls__title"},i.default.createElement("div",{style:{paddingTop:"0.3125rem",display:"flex"}},g&&y||!r?null:i.default.createElement(s.Avatar,Object.assign({},r,{className:"ap-fd-page-header__controls__title__avatar",ariaLabel:b,size:u.Sizes.SMALL})),i.default.createElement("div",null,i.default.createElement(p.Title,{className:"ap-fd-page-header__controls__title__title",level:c.TitleLevels.H1,text:b}),h?i.default.createElement(p.Title,{className:"ap-fd-page-header__controls__title__subtitle",level:c.TitleLevels.H6,text:h}):null)),n?i.default.createElement(d.Bar,{className:"ap-fd-page-header__controls__title__actions",right:n,type:o.BarTypes.HEADER_WITH_SUBHEADER}):null)),g&&y?i.default.createElement("div",{className:"ap-fd-page-header__content",style:{display:"flex",flexWrap:"wrap",gap:"1rem"}},r?i.default.createElement(s.Avatar,Object.assign({},r,{className:"ap-fd-page-header__content__avatar",ariaLabel:b})):null,a?(x=a,Array.isArray(x)?x.map(((e,t)=>C(e,`attribute-${t}`))):C(x)):null):null,g?i.default.createElement("div",{className:"ap-fd-page-header__expander"},i.default.createElement(f.Button,{className:"ap-fd-page-header__expander-button",icon:y?"slim-arrow-up":"slim-arrow-down",onClick:()=>{_(!y)}}),i.default.createElement(f.Button,{className:"ap-fd-page-header__expander-button",icon:A?"pushpin-off":"pushpin-on",onClick:()=>{S(!A)}})):null);var x}},3845:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.PageHeaderAttribute=void 0;const i=l(n(7294)),o=n(6039),u=n(9347),c=n(4229),s=n(4279),d=n(7778);n(3788),t.PageHeaderAttribute=({className:e,style:t,accentColor:n,label:a,semantic:r,text:l,type:f})=>{const[m]=(0,i.useState)(`page-header-attribute-${o.UUID.next()}`),p=["ap-fd-page-header-attribute"];return e&&p.push(e),i.default.createElement("div",{className:p.join(" "),style:t},i.default.createElement("label",{className:"ap-fd-page-header-attribute__label",htmlFor:m},a),(()=>{switch(f){case u.PageHeaderAttributeTypes.INFO_LABEL:return i.default.createElement(c.InfoLabel,{className:"ap-fd-page-header-attribute__control",accentColor:n,text:l});case u.PageHeaderAttributeTypes.STATUS:return i.default.createElement(s.ObjectStatus,{className:"ap-fd-page-header-attribute__control",semantic:r,text:l});case u.PageHeaderAttributeTypes.TEXT:return i.default.createElement(d.ObjectText,{className:"ap-fd-page-header-attribute__control",text:l});default:return null}})())}},7774:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Panel=void 0;const i=l(n(7294));t.Panel=({compact:e,expanded:t,expandable:n,title:a,toolbar:r,children:l})=>{const[o,u]=(0,i.useState)(null);(0,i.useEffect)((()=>{u(t)}),[t]);const c=["fd-panel"];return e&&c.push("fd-panel--compact"),n||c.push("fd-panel--fixed"),i.default.createElement("div",{className:c.join(" ")},i.default.createElement("div",{className:"fd-panel__header"},n?i.default.createElement("div",{className:"fd-panel__expand"},i.default.createElement("button",{className:"fd-button fd-button--compact fd-button--transparent fd-panel__button","aria-expanded":!!o,"aria-haspopup":"true","aria-controls":"panel-content","aria-labelledby":"panel-title",onClick:()=>{u(!o)}},i.default.createElement("i",{className:o?"sap-icon--slim-arrow-down":"sap-icon--slim-arrow-right"}))):null,i.default.createElement("h4",{className:"fd-panel__title",id:"panel-title"},a),r||null),i.default.createElement("div",{id:"panel-content",className:"fd-panel__content",role:"region","aria-hidden":!o},l))}},805:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Popover=void 0;const i=l(n(7294)),o=n(6039);t.Popover=({className:e,style:t,alignRight:n,compact:a,control:r,dropdown:l,noArrow:u,children:c})=>{const[s]=(0,i.useState)(o.UUID.next()),[d,f]=(0,i.useState)(!1),m=()=>{f(!1),window.removeEventListener("click",m),window.removeEventListener("scroll",m,!0),window.removeEventListener("resize",m,!0),window.removeEventListener("keyup",m,!0)},p=()=>{d?m():(f(!0),setTimeout((()=>{window.addEventListener("click",m),window.addEventListener("scroll",m,!0),window.addEventListener("resize",m,!0),window.addEventListener("keyup",m,!0)}),0))},v=["fd-popover"];e&&v.push(e),n&&v.push("fd-popover--right");const h=["fd-popover__body"];return n&&h.push("fd-popover__body--right"),u&&h.push("fd-popover__body--no-arrow"),l&&h.push("fd-popover__body--dropdown"),i.default.createElement("div",{className:v.join(" "),style:t},i.default.createElement("div",{className:"fd-popover__control"},(()=>{if(i.default.isValidElement(r)){const e={onClick:p};return"string"==typeof r.type?(e["aria-controls"]=s,e["aria-expanded"]=d,e["aria-haspopup"]=!0,e.role="button"):(e.ariaControls=s,e.ariaExpanded=d,e.ariaHaspopup=!0),i.default.cloneElement(r,e)}return r})()),i.default.createElement("div",{className:h.join(" "),"aria-hidden":!d,id:s},c))}},7674:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Select=void 0;const r=a(n(7294)),l=n(5571),i=n(3595),o=n(805);t.Select=({className:e,style:t,alignRight:n,compact:a,items:u,placeholder:c,state:s,stateMessage:d,value:f,onChange:m})=>{const p=["fd-select"];e&&p.push(e),a&&p.push("fd-select--compact");const v=["fd-select__control"];return s&&v.push(`is-${s}`),r.default.createElement(o.Popover,{style:t,control:r.default.createElement("div",{className:p.join(" ")},r.default.createElement("button",{className:v.join(" "),tabIndex:0,value:f||c},r.default.createElement("span",{className:"fd-select__text-content"},f||c),r.default.createElement("span",{className:"fd-button fd-select__button fd-button--transparent"},r.default.createElement("i",{className:"sap-icon--slim-arrow-down"})))),alignRight:n,dropdown:!0,noArrow:!0},r.default.createElement(i.List,{compact:a,items:u,state:s,stateMessage:d,type:l.ListTypes.DROPDOWN,onItemSelected:e=>{m(e)}}))}},7893:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ShellBar=void 0;const r=a(n(7294)),l=n(3723),i=n(8277),o=n(1665),u=n(805);n(3281),t.ShellBar=({logo:e,logoAlt:t,title:n,subTitle:a,actions:c,profile:s})=>r.default.createElement("div",{className:"fd-shellbar"},r.default.createElement("div",{className:"fd-shellbar__group fd-shellbar__group--product"},r.default.createElement("span",{className:"fd-shellbar__logo"},r.default.createElement("img",{src:e,width:"48",height:"24",alt:t})),r.default.createElement("span",{className:"fd-shellbar__title"},n),a?r.default.createElement("div",{className:"fd-shellbar__subtitle"},a):null),r.default.createElement("div",{className:"fd-shellbar__group fd-shellbar__group--actions"},null==c?void 0:c.map(((e,t)=>r.default.createElement("div",{key:`action-${t}`,className:"fd-shellbar__action fd-shellbar__action--desktop"},e))),s?r.default.createElement("div",{className:"fd-shellbar__action"},r.default.createElement(u.Popover,{alignRight:!0,control:r.default.createElement(i.Avatar,{ariaLabel:s.name,initials:s.initials,size:l.Sizes.X_SMALL,circle:!0})},r.default.createElement(o.Menu,{items:s.menu,noShadow:!0}))):null))},524:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Table=t.TableCellIndicators=void 0;const r=a(n(7294)),l=n(4111),i=n(5270),o=n(9027);n(7844),t.TableCellIndicators={VALID:"valid",WARNING:"warning",ERROR:"error",INFORMATION:"information"},t.Table=({borderedHorizontal:e,borderedVertical:t,compact:n,indicator:a,columns:u,rows:c,onRowClick:s,children:d})=>{const f=["fd-table"];return t||f.push("fd-table--no-vertical-borders"),e||f.push("fd-table--no-horizontal-borders"),n&&f.push("fd-table--compact"),r.default.createElement("table",{className:f.join(" ")},r.default.createElement("thead",{className:"fd-table__header"},r.default.createElement(o.TableRow,null,r.default.createElement(r.default.Fragment,null,a?r.default.createElement(l.TableCell,{type:"status-indicator"}):null,u.map((e=>r.default.createElement(i.TableHeaderCell,{key:e.key,type:e.type},r.default.createElement("span",null,e.name))))))),r.default.createElement("tbody",{className:"fd-table__body"},null==c?void 0:c.map(((e,t)=>r.default.createElement(o.TableRow,{key:e.data.id,activable:e.activable,hoverable:e.hoverable,onClick:()=>{return t=e.data.id,void(s&&s(t));var t}},r.default.createElement(r.default.Fragment,null,a?r.default.createElement(l.TableCell,{type:"status-indicator",indicator:e.indicator}):null,u.map((t=>{const n=t.render||(e=>r.default.createElement("span",{className:"fd-table__cell__label"},t.formatter?t.formatter(e):e[t.key]));return r.default.createElement(l.TableCell,{key:t.key},n(e.data))})))))),d))}},4111:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TableCell=void 0;const r=a(n(7294));t.TableCell=({type:e,indicator:t,activable:n,hoverable:a,children:l})=>{const i=["fd-table__cell"];return e&&i.push(`fd-table__cell--${e}`),"status-indicator"===e&&t&&i.push(`fd-table__cell--status-indicator--${t}`),n&&i.push("fd-table__cell--activable"),a&&i.push("fd-table__cell--hoverable"),r.default.createElement("td",{className:i.join(" ")},l)}},5270:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TableHeaderCell=void 0;const r=a(n(7294));t.TableHeaderCell=({children:e,type:t})=>{const n=["fd-table__cell"];return t&&n.push(`fd-table__cell--${t}`),r.default.createElement("th",{className:n.join(" "),scope:"col"},e)}},9027:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TableRow=void 0;const r=a(n(7294));t.TableRow=({className:e,style:t,activable:n,hoverable:a,onClick:l,children:i})=>{const o=["fd-table__row"];return n&&o.push("fd-table__row--activable"),a&&o.push("fd-table__row--hoverable"),e&&o.push(e),r.default.createElement("tr",{className:o.join(" "),style:t,onClick:l},i)}},9268:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Tile=void 0;const r=a(n(7294)),l=n(4229),i=n(3723);t.Tile=({className:e,badge:t,title:n,subTitle:a,footer:o,size:u=i.Sizes.LARGE,children:c,onClick:s})=>{const d=["fd-tile"];return e&&d.push(e),u&&d.push(`fd-tile--${u}`),r.default.createElement("div",{className:d.join(" "),role:"button",tabIndex:0,onClick:()=>{s&&s()}},t?r.default.createElement(l.InfoLabel,{text:t}):null,r.default.createElement("div",{className:"fd-tile__header"},r.default.createElement("div",{className:"fd-tile__title"},n),a?r.default.createElement("div",{className:"fd-tile__subtitle"},a):null),r.default.createElement("div",{className:"fd-tile__content"},c),o?r.default.createElement("div",{className:"fd-tile__footer"},r.default.createElement("span",{className:"fd-tile__footer-text"},o)):null)}},6056:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TileContainer=void 0;const r=a(n(7294));t.TileContainer=({className:e,children:t})=>{const n=["fd-tile fd-tile-container"];return e&&n.push(e),r.default.createElement("div",{className:n.join(" "),style:{minHeight:0,maxHeight:"none",height:"auto",minWidth:0,maxWidth:"none",width:"100%"}},t)}},153:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TileContentNumeric=void 0;const r=a(n(7294)),l=n(3723);t.TileContentNumeric=({value:e,size:t=l.Sizes.LARGE,semantic:n})=>{const a=["fd-numeric-content"];t&&a.push(`fd-numeric-content--${t}`);const i=["fd-numeric-content__kpi"];return n&&i.push(`fd-numeric-content__kpi--${n}`),r.default.createElement("div",{className:a.join(" ")},r.default.createElement("div",{className:"fd-numeric-content__kpi-container"},r.default.createElement("div",{className:i.join(" ")},e)))}},5791:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Title=void 0;const r=a(n(7294)),l=n(3904);t.Title=({className:e,style:t,level:n,levelVisual:a,text:i,wrap:o})=>{const u=["fd-title"];switch(u.push(`fd-title--h${a||n||l.TitleLevels.H1}`),e&&u.push(e),o&&u.push("fd-title--wrap"),n){case l.TitleLevels.H6:return r.default.createElement("h6",{className:u.join(" "),style:t},i);case l.TitleLevels.H5:return r.default.createElement("h5",{className:u.join(" "),style:t},i);case l.TitleLevels.H4:return r.default.createElement("h4",{className:u.join(" "),style:t},i);case l.TitleLevels.H3:return r.default.createElement("h3",{className:u.join(" "),style:t},i);case l.TitleLevels.H2:return r.default.createElement("h2",{className:u.join(" "),style:t},i);default:return r.default.createElement("h1",{className:u.join(" "),style:t},i)}}},1054:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Toolbar=void 0;const r=a(n(7294)),l=n(2744),i=n(5791),o=n(3904);n(792),t.Toolbar=({title:e,titleLevel:t=o.TitleLevels.H4,active:n,clear:a,transparent:u,solid:c,children:s})=>{const d=["fd-toolbar"];return n&&d.push("fd-toolbar-active"),e&&d.push("fd-toolbar--title"),a&&d.push("fd-toolbar--clear"),u&&d.push("fd-toolbar--transparent"),c&&d.push("fd-toolbar--solid"),r.default.createElement("div",{className:d.join(" ")},e?r.default.createElement(i.Title,{className:"fd-toolbar__title",level:t,text:e}):null,r.default.createElement(l.ToolbarSpacer,null),s)}},5703:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ToolbarSeparator=void 0;const r=a(n(7294));t.ToolbarSeparator=()=>r.default.createElement("span",{className:"fd-toolbar__separator"})},2744:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ToolbarSpacer=void 0;const r=a(n(7294));t.ToolbarSpacer=()=>r.default.createElement("span",{className:"fd-toolbar__spacer"})},4419:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.VerticalNavigation=void 0;const r=a(n(7294)),l=n(8927);t.VerticalNavigation=({className:e,style:t,condensed:n,label:a,items:i,itemsLabel:o,onItemSelect:u,children:c})=>{const s=["fd-vertical-nav"];return e&&s.push(e),n&&s.push("fd-vertical-nav--condensed"),r.default.createElement("div",{className:s.join(" "),style:t},r.default.createElement("nav",{className:"fd-vertical-nav__main-navigation","aria-label":a},r.default.createElement("ul",{className:"fd-list","aria-label":o},null==i?void 0:i.map((e=>r.default.createElement(l.VerticalNavigationItem,{key:e.id,className:e.className,id:e.id,condensed:n||e.condensed,expanded:e.expanded,items:e.items,icon:e.icon,text:e.text,selected:e.selected,onItemSelect:e.onItemSelect||u}))),c)))}},8927:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,r)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.VerticalNavigationItem=void 0;const i=l(n(7294));t.VerticalNavigationItem=({className:e,style:n,id:a,condensed:r,expanded:l,icon:o,items:u,selected:c,text:s,onItemSelect:d,children:f})=>{const[m,p]=(0,i.useState)(l),v=Boolean(null==u?void 0:u.length)||Boolean(f),h=["fd-list__navigation-item"];e&&h.push(e),r&&h.push("fd-list__navigation-item--condensed"),v&&h.push("fd-list__navigation-item--expandable"),m&&h.push("is-expanded"),c&&h.push("fd-list__navigation-item--indicated");const b=["fd-list__navigation-item-arrow"];return m?(b.push("is-expanded"),b.push("sap-icon--navigation-down-arrow")):b.push("sap-icon--navigation-right-arrow"),i.default.createElement("li",{className:h.join(" "),style:n,tabIndex:0,onClick:e=>{e.stopPropagation(),d&&d(a)},onKeyUp:e=>{switch(e.code){case"Enter":case"Space":e.stopPropagation(),d&&d(a)}}},o?i.default.createElement("i",{className:`fd-list__navigation-item-icon sap-icon--${o}`,role:"presentation"}):null,i.default.createElement("span",{className:"fd-list__navigation-item-text"},s),v?i.default.createElement("button",{className:b.join(" "),"aria-label":"Expand second submenu",onClick:()=>p(!m)}):null,v&&m?i.default.createElement("ul",{className:"fd-list"},null==u?void 0:u.map((e=>i.default.createElement(t.VerticalNavigationItem,{key:e.id,className:e.className,style:n||e.style,id:e.id,condensed:r||e.condensed,expanded:e.expanded,icon:e.icon,items:e.items,selected:e.selected,text:e.text,onItemSelect:d}))),f):null)}},7517:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AccentColors=void 0,t.AccentColors={COLOR_1:"accent-color-1",COLOR_2:"accent-color-2",COLOR_3:"accent-color-3",COLOR_4:"accent-color-4",COLOR_5:"accent-color-5",COLOR_6:"accent-color-6",COLOR_7:"accent-color-7",COLOR_8:"accent-color-8",COLOR_9:"accent-color-9",COLOR_10:"accent-color-10"}},2545:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AvatarDesigns=void 0,t.AvatarDesigns={PLACEHOLDER:"placeholder",SHELL:"shell",TILE:"tile",TRANSPARENT:"transparent"}},2780:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BarTypes=void 0,t.BarTypes={HEADER:"header",HEADER_WITH_SUBHEADER:"header-with-subheader",SUBHEADER:"subheader",FOOTER:"footer",FOOTER_FLOATING:"floating-footer"}},9313:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BusyIndicatorSizes=void 0,t.BusyIndicatorSizes={SMALL:"s",MEDIUM:"m",LARGE:"l"}},5958:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonDesigns=void 0,t.ButtonDesigns={EMPHASIZED:"emphasized",GHOST:"ghost",POSITIVE:"positive",NEGATIVE:"negative",ATTENTION:"attention",TRANSPARENT:"transparent"}},1903:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonTypes=void 0,t.ButtonTypes={BUTTON:"button",SUBMIT:"submit",RESET:"reset"}},2569:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.IconTabBarDesigns=void 0,t.IconTabBarDesigns={ICON:"icon",ICON_ONLY:"icon-only",COUNTERS:"counters"}},6273:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InputStates=void 0,t.InputStates={SUCCESS:"success",ERROR:"error",WARNING:"warning",INFORMATION:"information"}},6414:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InputTypes=void 0,t.InputTypes={TEXT:"text",PASSWORD:"password"}},2563:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LinkTypes=void 0,t.LinkTypes={EMPHASIZED:"emphasized",SUBTLE:"subtle",INVERTED:"inverted"}},5571:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ListTypes=void 0,t.ListTypes={DROPDOWN:"dropdown",NAVIGATION:"navigation"}},9347:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PageHeaderAttributeTypes=void 0,t.PageHeaderAttributeTypes={INFO_LABEL:"infolabel",TEXT:"text",STATUS:"status"}},9041:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Semantics=void 0,t.Semantics={POSITIVE:"positive",NEGATIVE:"negative",CRITICAL:"critical",INFORMATIVE:"informative"}},3723:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Sizes=void 0,t.Sizes={X_SMALL:"xs",SMALL:"s",MEDIUM:"m",LARGE:"l",X_LARGE:"xl"}},497:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Themes=t.Theme=void 0,t.Theme={FIORI_3:{id:"sap_fiori_3",name:"Fiori 3",family:"fiori3"},FIORI_3_DARK:{id:"sap_fiori_3_dark",name:"Fiori 3 Dark",family:"fiori3"},FIORI_3_HCB:{id:"sap_fiori_3_hcb",name:"Fiori 3 High Contrast Black",family:"fiori3"},FIORI_3_HCW:{id:"sap_fiori_3_hcw",name:"Fiori 3 High Contrast White",family:"fiori3"},FIORI_3_LIGHT_DARK:{id:"sap_fiori_3_light_dark",name:"Fiori 3 High Light Dark",family:"fiori3"},HORIZON:{id:"sap_horizon",name:"Horizon",family:"horizon"},HORIZON_DARK:{id:"sap_horizon_dark",name:"Horizon Dark",family:"horizon"},HORIZON_HCB:{id:"sap_horizon_hcb",name:"Horizon High Contrast Black",family:"horizon"},HORIZON_HCW:{id:"sap_horizon_hcw",name:"Horizon High Contrast White",family:"horizon"}},t.Themes=Object.values(t.Theme)},3904:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TitleLevels=void 0,t.TitleLevels={H1:1,H2:2,H3:3,H4:4,H5:5,H6:6}},1175:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.injectThemeCss=t.injectCss=void 0,t.injectCss=(e,t)=>new Promise(((n,a)=>{const r=document.getElementById(e);r&&r.setAttribute("id",`${e}-old`);const l=document.createElement("link");l.setAttribute("id",e),l.setAttribute("rel","stylesheet"),l.setAttribute("href",t),l.addEventListener("load",(()=>{r&&r.parentNode&&r.parentNode.removeChild(r),n()})),l.addEventListener("error",(()=>{r&&r.parentNode&&r.parentNode.removeChild(r),a()})),document.head.appendChild(l)})),t.injectThemeCss=e=>Promise.allSettled([(0,t.injectCss)("theming-icons",`/fundamentals-icons-${e.family}.css`),(0,t.injectCss)("theming-base-content",`/theme/${e.id}/css_variables.css`),(0,t.injectCss)("theming",`/theme/${e.id}/${e.id}.css`)])},6042:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.COMPONENTS=t.COMPONENT=void 0;const a=n(6884),r=n(7532),l=n(6533),i=n(5030),o=n(1055),u=n(7340),c=n(1974),s=n(3242),d=n(6661),f=n(7663),m=n(9033),p=n(8438),v=n(4757),h=n(6170),b=n(6446),g=n(74),E=n(8398),y=n(6226),_=n(6358),A=n(3675),S=n(5135),C=n(7688),w=n(8165),x=n(6615),O=n(7055),L=n(2612),T=n(8566),P=n(7026),k=n(4392);t.COMPONENT={AVATAR:{id:"avatar",text:"Avatar",demo:a.AvatarDemo},BAR:{id:"bar",text:"Bar",demo:r.BarDemo},BREADCRUMB:{id:"breadcrumb",text:"Breadcrumb",demo:l.BreadcrumbDemo},BUSY_INDICATOR:{id:"busyindicator",text:"Busy Indicator",demo:i.BusyIndicatorDemo},BUTTON:{id:"button",text:"Button",demo:o.ButtonDemo},CALENDAR:{id:"calendar",text:"Calendar",demo:u.CalendarDemo},CARD:{id:"card",text:"Card",demo:c.CardDemo},DIALOG:{id:"dialog",text:"Dialog",demo:s.DialogDemo},FORM:{id:"form",text:"Form",demo:d.FormDemo},FORM_CHECK_BOX:{id:"formcheckbox",text:"Form CheckBox",demo:f.FormCheckBoxDemo},FORM_INPUT:{id:"forminput",text:"Form Input",demo:m.FormInputDemo},FORM_STEP_INPUT:{id:"formstepinput",text:"Form Step Input",demo:p.FormStepInputDemo},ICON:{id:"icon",text:"Icon",demo:v.IconDemo},ICON_TAB_BAR:{id:"icontabbar",text:"IconTabBar",demo:h.IconTabBarDemo},INFO_LABEL:{id:"infolabel",text:"InfoLabel",demo:b.InfoLabelDemo},LIST:{id:"list",text:"List",demo:g.ListDemo},LINK:{id:"link",text:"Link",demo:E.LinkDemo},MENU:{id:"menu",text:"Menu",demo:y.MenuDemo},OBJECT:{id:"object",text:"Object",demo:_.ObjectDemo},PAGE:{id:"page",text:"Page",demo:A.PageDemo},PANEL:{id:"panel",text:"Panel",demo:S.PanelDemo},POPOVER:{id:"popover",text:"Popover",demo:C.PopoverDemo},SELECT:{id:"select",text:"Select",demo:w.SelectDemo},SHELL_BAR:{id:"shellbar",text:"ShellBar",demo:x.ShellBarDemo},TABLE:{id:"table",text:"Table",demo:O.TableDemo},TILE:{id:"tile",text:"Tile",demo:L.TileDemo},TITLE:{id:"title",text:"Title",demo:T.TitleDemo},TOOLBAR:{id:"toolbar",text:"Toolbar",demo:P.ToolbarDemo},VERTICAL_NAVIGATION:{id:"verticalnavigation",text:"VerticalNavigation",demo:k.VerticalNavigationDemo}},t.COMPONENTS=Object.values(t.COMPONENT)},2531:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectMarker=t.ObjectListItem=t.ObjectList=t.ObjectIdentifier=t.ObjectText=t.Menu=t.Link=t.List=t.InfoLabel=t.IconTabBarItem=t.IconTabBar=t.Icon=t.FormStepInput=t.FormSelect=t.FormInput=t.FormCheckBox=t.DialogFooter=t.DialogHeader=t.Dialog=t.CardFooter=t.CardHeader=t.Card=t.Calendar=t.SegmentedButton=t.Button=t.BusyIndicator=t.Breadcrumb=t.BarRight=t.BarMiddle=t.BarLeft=t.BarElement=t.Bar=t.Avatar=t.TitleLevels=t.Themes=t.Theme=t.Sizes=t.Semantics=t.PageHeaderAttributeTypes=t.LinkTypes=t.ListTypes=t.InputTypes=t.InputStates=t.IconTabBarDesigns=t.ButtonTypes=t.ButtonDesigns=t.BusyIndicatorSizes=t.BarTypes=t.AvatarDesigns=t.AccentColors=void 0,t.VerticalNavigationItem=t.VerticalNavigation=t.ToolbarSpacer=t.ToolbarSeparator=t.Toolbar=t.Title=t.TileContentNumeric=t.TileContainer=t.Tile=t.TableRow=t.TableHeaderCell=t.TableCell=t.Table=t.ShellBar=t.Select=t.Popover=t.Panel=t.PageFooter=t.PageBody=t.PageHeaderAttribute=t.PageHeader=t.Page=t.ObjectStatus=t.ObjectNumber=void 0;var a=n(7517);Object.defineProperty(t,"AccentColors",{enumerable:!0,get:function(){return a.AccentColors}});var r=n(2545);Object.defineProperty(t,"AvatarDesigns",{enumerable:!0,get:function(){return r.AvatarDesigns}});var l=n(2780);Object.defineProperty(t,"BarTypes",{enumerable:!0,get:function(){return l.BarTypes}});var i=n(9313);Object.defineProperty(t,"BusyIndicatorSizes",{enumerable:!0,get:function(){return i.BusyIndicatorSizes}});var o=n(5958);Object.defineProperty(t,"ButtonDesigns",{enumerable:!0,get:function(){return o.ButtonDesigns}});var u=n(1903);Object.defineProperty(t,"ButtonTypes",{enumerable:!0,get:function(){return u.ButtonTypes}});var c=n(2569);Object.defineProperty(t,"IconTabBarDesigns",{enumerable:!0,get:function(){return c.IconTabBarDesigns}});var s=n(6273);Object.defineProperty(t,"InputStates",{enumerable:!0,get:function(){return s.InputStates}});var d=n(6414);Object.defineProperty(t,"InputTypes",{enumerable:!0,get:function(){return d.InputTypes}});var f=n(5571);Object.defineProperty(t,"ListTypes",{enumerable:!0,get:function(){return f.ListTypes}});var m=n(2563);Object.defineProperty(t,"LinkTypes",{enumerable:!0,get:function(){return m.LinkTypes}});var p=n(9347);Object.defineProperty(t,"PageHeaderAttributeTypes",{enumerable:!0,get:function(){return p.PageHeaderAttributeTypes}});var v=n(9041);Object.defineProperty(t,"Semantics",{enumerable:!0,get:function(){return v.Semantics}});var h=n(3723);Object.defineProperty(t,"Sizes",{enumerable:!0,get:function(){return h.Sizes}});var b=n(497);Object.defineProperty(t,"Theme",{enumerable:!0,get:function(){return b.Theme}}),Object.defineProperty(t,"Themes",{enumerable:!0,get:function(){return b.Themes}});var g=n(3904);Object.defineProperty(t,"TitleLevels",{enumerable:!0,get:function(){return g.TitleLevels}});var E=n(8277);Object.defineProperty(t,"Avatar",{enumerable:!0,get:function(){return E.Avatar}});var y=n(9128);Object.defineProperty(t,"Bar",{enumerable:!0,get:function(){return y.Bar}});var _=n(4413);Object.defineProperty(t,"BarElement",{enumerable:!0,get:function(){return _.BarElement}});var A=n(3494);Object.defineProperty(t,"BarLeft",{enumerable:!0,get:function(){return A.BarLeft}});var S=n(2574);Object.defineProperty(t,"BarMiddle",{enumerable:!0,get:function(){return S.BarMiddle}});var C=n(2300);Object.defineProperty(t,"BarRight",{enumerable:!0,get:function(){return C.BarRight}});var w=n(8677);Object.defineProperty(t,"Breadcrumb",{enumerable:!0,get:function(){return w.Breadcrumb}});var x=n(7289);Object.defineProperty(t,"BusyIndicator",{enumerable:!0,get:function(){return x.BusyIndicator}});var O=n(4326);Object.defineProperty(t,"Button",{enumerable:!0,get:function(){return O.Button}});var L=n(6232);Object.defineProperty(t,"SegmentedButton",{enumerable:!0,get:function(){return L.SegmentedButton}});var T=n(8681);Object.defineProperty(t,"Calendar",{enumerable:!0,get:function(){return T.Calendar}});var P=n(6369);Object.defineProperty(t,"Card",{enumerable:!0,get:function(){return P.Card}});var k=n(3824);Object.defineProperty(t,"CardHeader",{enumerable:!0,get:function(){return k.CardHeader}});var N=n(6864);Object.defineProperty(t,"CardFooter",{enumerable:!0,get:function(){return N.CardFooter}});var I=n(9456);Object.defineProperty(t,"Dialog",{enumerable:!0,get:function(){return I.Dialog}});var D=n(9929);Object.defineProperty(t,"DialogHeader",{enumerable:!0,get:function(){return D.DialogHeader}});var M=n(8329);Object.defineProperty(t,"DialogFooter",{enumerable:!0,get:function(){return M.DialogFooter}});var R=n(3088);Object.defineProperty(t,"FormCheckBox",{enumerable:!0,get:function(){return R.FormCheckBox}});var B=n(5291);Object.defineProperty(t,"FormInput",{enumerable:!0,get:function(){return B.FormInput}});var j=n(1074);Object.defineProperty(t,"FormSelect",{enumerable:!0,get:function(){return j.FormSelect}});var z=n(2923);Object.defineProperty(t,"FormStepInput",{enumerable:!0,get:function(){return z.FormStepInput}});var F=n(7876);Object.defineProperty(t,"Icon",{enumerable:!0,get:function(){return F.Icon}});var H=n(1058);Object.defineProperty(t,"IconTabBar",{enumerable:!0,get:function(){return H.IconTabBar}});var U=n(5426);Object.defineProperty(t,"IconTabBarItem",{enumerable:!0,get:function(){return U.IconTabBarItem}});var W=n(4229);Object.defineProperty(t,"InfoLabel",{enumerable:!0,get:function(){return W.InfoLabel}});var $=n(3595);Object.defineProperty(t,"List",{enumerable:!0,get:function(){return $.List}});var V=n(6374);Object.defineProperty(t,"Link",{enumerable:!0,get:function(){return V.Link}});var G=n(1665);Object.defineProperty(t,"Menu",{enumerable:!0,get:function(){return G.Menu}});var q=n(7778);Object.defineProperty(t,"ObjectText",{enumerable:!0,get:function(){return q.ObjectText}});var X=n(3417);Object.defineProperty(t,"ObjectIdentifier",{enumerable:!0,get:function(){return X.ObjectIdentifier}});var Y=n(225);Object.defineProperty(t,"ObjectList",{enumerable:!0,get:function(){return Y.ObjectList}});var Z=n(3610);Object.defineProperty(t,"ObjectListItem",{enumerable:!0,get:function(){return Z.ObjectListItem}});var K=n(6519);Object.defineProperty(t,"ObjectMarker",{enumerable:!0,get:function(){return K.ObjectMarker}});var Q=n(3501);Object.defineProperty(t,"ObjectNumber",{enumerable:!0,get:function(){return Q.ObjectNumber}});var J=n(4279);Object.defineProperty(t,"ObjectStatus",{enumerable:!0,get:function(){return J.ObjectStatus}});var ee=n(2192);Object.defineProperty(t,"Page",{enumerable:!0,get:function(){return ee.Page}});var te=n(9283);Object.defineProperty(t,"PageHeader",{enumerable:!0,get:function(){return te.PageHeader}});var ne=n(3845);Object.defineProperty(t,"PageHeaderAttribute",{enumerable:!0,get:function(){return ne.PageHeaderAttribute}});var ae=n(8087);Object.defineProperty(t,"PageBody",{enumerable:!0,get:function(){return ae.PageBody}});var re=n(8327);Object.defineProperty(t,"PageFooter",{enumerable:!0,get:function(){return re.PageFooter}});var le=n(7774);Object.defineProperty(t,"Panel",{enumerable:!0,get:function(){return le.Panel}});var ie=n(805);Object.defineProperty(t,"Popover",{enumerable:!0,get:function(){return ie.Popover}});var oe=n(7674);Object.defineProperty(t,"Select",{enumerable:!0,get:function(){return oe.Select}});var ue=n(7893);Object.defineProperty(t,"ShellBar",{enumerable:!0,get:function(){return ue.ShellBar}});var ce=n(524);Object.defineProperty(t,"Table",{enumerable:!0,get:function(){return ce.Table}});var se=n(4111);Object.defineProperty(t,"TableCell",{enumerable:!0,get:function(){return se.TableCell}});var de=n(5270);Object.defineProperty(t,"TableHeaderCell",{enumerable:!0,get:function(){return de.TableHeaderCell}});var fe=n(9027);Object.defineProperty(t,"TableRow",{enumerable:!0,get:function(){return fe.TableRow}});var me=n(9268);Object.defineProperty(t,"Tile",{enumerable:!0,get:function(){return me.Tile}});var pe=n(6056);Object.defineProperty(t,"TileContainer",{enumerable:!0,get:function(){return pe.TileContainer}});var ve=n(153);Object.defineProperty(t,"TileContentNumeric",{enumerable:!0,get:function(){return ve.TileContentNumeric}});var he=n(5791);Object.defineProperty(t,"Title",{enumerable:!0,get:function(){return he.Title}});var be=n(1054);Object.defineProperty(t,"Toolbar",{enumerable:!0,get:function(){return be.Toolbar}});var ge=n(5703);Object.defineProperty(t,"ToolbarSeparator",{enumerable:!0,get:function(){return ge.ToolbarSeparator}});var Ee=n(2744);Object.defineProperty(t,"ToolbarSpacer",{enumerable:!0,get:function(){return Ee.ToolbarSpacer}});var ye=n(4419);Object.defineProperty(t,"VerticalNavigation",{enumerable:!0,get:function(){return ye.VerticalNavigation}});var _e=n(8927);Object.defineProperty(t,"VerticalNavigationItem",{enumerable:!0,get:function(){return _e.VerticalNavigationItem}})},2509:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=a(n(7294)),l=n(9818),i=a(n(2420)),o=a(n(9266)),u=a(n(9240));t.default=()=>r.default.createElement(l.Routes,null,r.default.createElement(l.Route,{path:"*",element:r.default.createElement(i.default,null)},r.default.createElement(l.Route,{path:"components",element:r.default.createElement(o.default,null)},r.default.createElement(l.Route,{path:":componentId",element:r.default.createElement(u.default,null)}))))},9240:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.RouteComponent=void 0;const r=a(n(7294)),l=n(9818),i=n(6042);t.RouteComponent=()=>{const e=(0,l.useParams)().componentId,t=i.COMPONENTS.find((t=>t.id===e));return t?r.default.createElement(t.demo,null):r.default.createElement("div",null,"INDALID")},t.default=t.RouteComponent},9266:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.RouteComponents=void 0;const r=a(n(7294)),l=n(9818);t.RouteComponents=()=>r.default.createElement(l.Outlet,null),t.default=t.RouteComponents},2420:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=a(n(7294)),l=n(9818),i=n(4529),o=n(4110),u=n(5487);t.default=()=>r.default.createElement("div",{style:{display:"flex",flexDirection:"column",height:"100%"}},r.default.createElement("div",{style:{flexShrink:0}},r.default.createElement(i.AppHeader,null)),r.default.createElement("div",{style:{display:"flex",flexBasis:0,flexGrow:1,overflow:"hidden"}},r.default.createElement("div",{style:{overflow:"auto",flexShrink:0}},r.default.createElement(u.AppSidePanel,null)),r.default.createElement("div",{style:{flexBasis:0,flexGrow:1}},r.default.createElement(o.AppMainContent,null,r.default.createElement(l.Outlet,null)))))},8932:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.changeTheme=void 0;const r=a(n(6386)),l=n(1175);t.changeTheme=(e,t)=>{e(r.default.actions.setBusy({busy:!0,busyMessage:"Changing Theme"})),e(r.default.actions.setTheme({theme:t})),(0,l.injectThemeCss)(t).finally((()=>{e(r.default.actions.setBusy({busy:!1}))}))}},8989:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default={busy:e=>e.app.busy,theme:e=>e.app.theme}},6386:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const a=n(4899),r={busy:!1,busyMessage:"",theme:n(497).Theme.FIORI_3},l=(0,a.createSlice)({name:"app",initialState:r,reducers:{setBusy:(e,t)=>{const{busy:n,busyMessage:a}=t.payload;e.busy=n,e.busyMessage=n&&a||""},setTheme:(e,t)=>{e.theme=t.payload.theme}}});t.default=l},1079:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=n(4899),l=a(n(6386));t.default=(0,r.configureStore)({reducer:{app:l.default.reducer}})},3250:(e,t,n)=>{var a=n(7294),r="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},l=a.useState,i=a.useEffect,o=a.useLayoutEffect,u=a.useDebugValue;function c(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!r(e,n)}catch(e){return!0}}var s="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),a=l({inst:{value:n,getSnapshot:t}}),r=a[0].inst,s=a[1];return o((function(){r.value=n,r.getSnapshot=t,c(r)&&s({inst:r})}),[e,n,t]),i((function(){return c(r)&&s({inst:r}),e((function(){c(r)&&s({inst:r})}))}),[e]),u(n),n};t.useSyncExternalStore=void 0!==a.useSyncExternalStore?a.useSyncExternalStore:s},139:(e,t,n)=>{var a=n(7294),r=n(1688),l="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},i=r.useSyncExternalStore,o=a.useRef,u=a.useEffect,c=a.useMemo,s=a.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,a,r){var d=o(null);if(null===d.current){var f={hasValue:!1,value:null};d.current=f}else f=d.current;d=c((function(){function e(e){if(!u){if(u=!0,i=e,e=a(e),void 0!==r&&f.hasValue){var t=f.value;if(r(t,e))return o=t}return o=e}if(t=o,l(i,e))return t;var n=a(e);return void 0!==r&&r(t,n)?t:(i=e,o=n)}var i,o,u=!1,c=void 0===n?null:n;return[function(){return e(t())},null===c?void 0:function(){return e(c())}]}),[t,n,a,r]);var m=i(e,d[0],d[1]);return u((function(){f.hasValue=!0,f.value=m}),[m]),s(m),m}},1688:(e,t,n)=>{e.exports=n(3250)},2798:(e,t,n)=>{e.exports=n(139)}},a={};function r(e){var t=a[e];if(void 0!==t)return t.exports;var l=a[e]={id:e,exports:{}};return n[e].call(l.exports,l,l.exports,r),l.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,r.t=function(n,a){if(1&a&&(n=this(n)),8&a)return n;if("object"==typeof n&&n){if(4&a&&n.__esModule)return n;if(16&a&&"function"==typeof n.then)return n}var l=Object.create(null);r.r(l);var i={};e=e||[null,t({}),t([]),t(t)];for(var o=2&a&&n;"object"==typeof o&&!~e.indexOf(o);o=t(o))Object.getOwnPropertyNames(o).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,r.d(l,i),l},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nc=void 0,r(6212)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,