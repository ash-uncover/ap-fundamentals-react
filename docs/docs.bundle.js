/*! For license information please see docs.bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={3629:(e,t,n)=>{function a(e){for(var t=arguments.length,n=Array(t>1?t-1:0),a=1;a<t;a++)n[a-1]=arguments[a];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function l(e){return!!e&&!!e[V]}function r(e){var t;return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===G}(e)||Array.isArray(e)||!!e[$]||!!(null===(t=e.constructor)||void 0===t?void 0:t[$])||f(e)||m(e))}function i(e){return l(e)||a(23,e),e[V].t}function o(e,t,n){void 0===n&&(n=!1),0===u(e)?(n?Object.keys:q)(e).forEach((function(a){n&&"symbol"==typeof a||t(a,e[a],e)})):e.forEach((function(n,a){return t(a,n,e)}))}function u(e){var t=e[V];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:f(e)?2:m(e)?3:0}function c(e,t){return 2===u(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function s(e,t,n){var a=u(e);2===a?e.set(t,n):3===a?(e.delete(t),e.add(n)):e[t]=n}function d(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function f(e){return F&&e instanceof Map}function m(e){return H&&e instanceof Set}function p(e){return e.o||e.t}function v(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=X(e);delete t[V];for(var n=q(t),a=0;a<n.length;a++){var l=n[a],r=t[l];!1===r.writable&&(r.writable=!0,r.configurable=!0),(r.get||r.set)&&(t[l]={configurable:!0,writable:!0,enumerable:r.enumerable,value:e[l]})}return Object.create(Object.getPrototypeOf(e),t)}function h(e,t){return void 0===t&&(t=!1),g(e)||l(e)||!r(e)||(u(e)>1&&(e.set=e.add=e.clear=e.delete=b),Object.freeze(e),t&&o(e,(function(e,t){return h(t,!0)}),!0)),e}function b(){a(2)}function g(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function E(e){var t=Y[e];return t||a(18,e),t}function y(){return j}function _(e,t){t&&(E("Patches"),e.u=[],e.s=[],e.v=t)}function A(e){S(e),e.p.forEach(x),e.p=null}function S(e){e===j&&(j=e.l)}function C(e){return j={p:[],l:j,h:e,m:!0,_:0}}function x(e){var t=e[V];0===t.i||1===t.i?t.j():t.O=!0}function w(e,t){t._=t.p.length;var n=t.p[0],l=void 0!==e&&e!==n;return t.h.g||E("ES5").S(t,e,l),l?(n[V].P&&(A(t),a(4)),r(e)&&(e=O(t,e),t.l||L(t,e)),t.u&&E("Patches").M(n[V].t,e,t.u,t.s)):e=O(t,n,[]),A(t),t.u&&t.v(t.u,t.s),e!==W?e:void 0}function O(e,t,n){if(g(t))return t;var a=t[V];if(!a)return o(t,(function(l,r){return T(e,a,t,l,r,n)}),!0),t;if(a.A!==e)return t;if(!a.P)return L(e,a.t,!0),a.t;if(!a.I){a.I=!0,a.A._--;var l=4===a.i||5===a.i?a.o=v(a.k):a.o;o(3===a.i?new Set(l):l,(function(t,r){return T(e,a,l,t,r,n)})),L(e,l,!1),n&&e.u&&E("Patches").R(a,n,e.u,e.s)}return a.o}function T(e,t,n,a,i,o){if(l(i)){var u=O(e,i,o&&t&&3!==t.i&&!c(t.D,a)?o.concat(a):void 0);if(s(n,a,u),!l(u))return;e.m=!1}if(r(i)&&!g(i)){if(!e.h.F&&e._<1)return;O(e,i),t&&t.A.l||L(e,i)}}function L(e,t,n){void 0===n&&(n=!1),e.h.F&&e.m&&h(t,n)}function P(e,t){var n=e[V];return(n?p(n):e)[t]}function I(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var a=Object.getOwnPropertyDescriptor(n,t);if(a)return a;n=Object.getPrototypeOf(n)}}function N(e){e.P||(e.P=!0,e.l&&N(e.l))}function D(e){e.o||(e.o=v(e.t))}function k(e,t,n){var a=f(t)?E("MapSet").N(t,n):m(t)?E("MapSet").T(t,n):e.g?function(e,t){var n=Array.isArray(e),a={i:n?1:0,A:t?t.A:y(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},l=a,r=Z;n&&(l=[a],r=K);var i=Proxy.revocable(l,r),o=i.revoke,u=i.proxy;return a.k=u,a.j=o,u}(t,n):E("ES5").J(t,n);return(n?n.A:y()).p.push(a),a}function R(e){return l(e)||a(22,e),function e(t){if(!r(t))return t;var n,a=t[V],l=u(t);if(a){if(!a.P&&(a.i<4||!E("ES5").K(a)))return a.t;a.I=!0,n=M(t,l),a.I=!1}else n=M(t,l);return o(n,(function(t,l){a&&function(e,t){return 2===u(e)?e.get(t):e[t]}(a.t,t)===l||s(n,t,e(l))})),3===l?new Set(n):n}(e)}function M(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return v(e)}n.r(t),n.d(t,{MiddlewareArray:()=>$e,SHOULD_AUTOBATCH:()=>Kt,TaskAbortError:()=>kt,__DO_NOT_USE__ActionTypes:()=>ce,addListener:()=>$t,applyMiddleware:()=>be,autoBatchEnhancer:()=>nn,bindActionCreators:()=>ve,clearAllListeners:()=>Vt,combineReducers:()=>me,compose:()=>he,configureStore:()=>Qe,createAction:()=>Je,createAsyncThunk:()=>ht,createDraftSafeSelector:()=>He,createEntityAdapter:()=>st,createImmutableStateInvariantMiddleware:()=>qe,createListenerMiddleware:()=>Yt,createNextState:()=>te,createReducer:()=>at,createSelector:()=>Se,createSerializableStateInvariantMiddleware:()=>Ze,createSlice:()=>lt,createStore:()=>de,current:()=>R,findNonSerializableValue:()=>Ye,freeze:()=>h,getDefaultMiddleware:()=>Ke,getType:()=>tt,isAllOf:()=>yt,isAnyOf:()=>Et,isAsyncThunkAction:()=>Ot,isDraft:()=>l,isFulfilled:()=>wt,isImmutableDefault:()=>Ge,isPending:()=>St,isPlain:()=>Xe,isPlainObject:()=>We,isRejected:()=>Ct,isRejectedWithValue:()=>xt,legacy_createStore:()=>fe,miniSerializeError:()=>vt,nanoid:()=>dt,original:()=>i,prepareAutoBatched:()=>Qt,removeListener:()=>Gt,unwrapResult:()=>bt});var B,j,z="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),F="undefined"!=typeof Map,H="undefined"!=typeof Set,U="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,W=z?Symbol.for("immer-nothing"):((B={})["immer-nothing"]=!0,B),$=z?Symbol.for("immer-draftable"):"__$immer_draftable",V=z?Symbol.for("immer-state"):"__$immer_state",G=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),q="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,X=Object.getOwnPropertyDescriptors||function(e){var t={};return q(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},Y={},Z={get:function(e,t){if(t===V)return e;var n=p(e);if(!c(n,t))return function(e,t,n){var a,l=I(t,n);return l?"value"in l?l.value:null===(a=l.get)||void 0===a?void 0:a.call(e.k):void 0}(e,n,t);var a=n[t];return e.I||!r(a)?a:a===P(e.t,t)?(D(e),e.o[t]=k(e.A.h,a,e)):a},has:function(e,t){return t in p(e)},ownKeys:function(e){return Reflect.ownKeys(p(e))},set:function(e,t,n){var a=I(p(e),t);if(null==a?void 0:a.set)return a.set.call(e.k,n),!0;if(!e.P){var l=P(p(e),t),r=null==l?void 0:l[V];if(r&&r.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(d(n,l)&&(void 0!==n||c(e.t,t)))return!0;D(e),N(e)}return e.o[t]===n&&"number"!=typeof n&&(void 0!==n||t in e.o)||(e.o[t]=n,e.D[t]=!0,!0)},deleteProperty:function(e,t){return void 0!==P(e.t,t)||t in e.t?(e.D[t]=!1,D(e),N(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=p(e),a=Reflect.getOwnPropertyDescriptor(n,t);return a?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:a.enumerable,value:n[t]}:a},defineProperty:function(){a(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){a(12)}},K={};o(Z,(function(e,t){K[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),K.deleteProperty=function(e,t){return K.set.call(this,e,t,void 0)},K.set=function(e,t,n){return Z.set.call(this,e[0],t,n,e[0])};var Q=function(){function e(e){var t=this;this.g=U,this.F=!0,this.produce=function(e,n,l){if("function"==typeof e&&"function"!=typeof n){var i=n;n=e;var o=t;return function(e){var t=this;void 0===e&&(e=i);for(var a=arguments.length,l=Array(a>1?a-1:0),r=1;r<a;r++)l[r-1]=arguments[r];return o.produce(e,(function(e){var a;return(a=n).call.apply(a,[t,e].concat(l))}))}}var u;if("function"!=typeof n&&a(6),void 0!==l&&"function"!=typeof l&&a(7),r(e)){var c=C(t),s=k(t,e,void 0),d=!0;try{u=n(s),d=!1}finally{d?A(c):S(c)}return"undefined"!=typeof Promise&&u instanceof Promise?u.then((function(e){return _(c,l),w(e,c)}),(function(e){throw A(c),e})):(_(c,l),w(u,c))}if(!e||"object"!=typeof e){if(void 0===(u=n(e))&&(u=e),u===W&&(u=void 0),t.F&&h(u,!0),l){var f=[],m=[];E("Patches").M(e,u,f,m),l(f,m)}return u}a(21,e)},this.produceWithPatches=function(e,n){if("function"==typeof e)return function(n){for(var a=arguments.length,l=Array(a>1?a-1:0),r=1;r<a;r++)l[r-1]=arguments[r];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(l))}))};var a,l,r=t.produce(e,n,(function(e,t){a=e,l=t}));return"undefined"!=typeof Promise&&r instanceof Promise?r.then((function(e){return[e,a,l]})):[r,a,l]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){r(e)||a(8),l(e)&&(e=R(e));var t=C(this),n=k(this,e,void 0);return n[V].C=!0,S(t),n},t.finishDraft=function(e,t){var n=(e&&e[V]).A;return _(n,t),w(void 0,n)},t.setAutoFreeze=function(e){this.F=e},t.setUseProxies=function(e){e&&!U&&a(20),this.g=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var a=t[n];if(0===a.path.length&&"replace"===a.op){e=a.value;break}}n>-1&&(t=t.slice(n+1));var r=E("Patches").$;return l(e)?r(e,t):this.produce(e,(function(e){return r(e,t)}))},e}(),J=new Q,ee=J.produce;J.produceWithPatches.bind(J),J.setAutoFreeze.bind(J),J.setUseProxies.bind(J),J.applyPatches.bind(J),J.createDraft.bind(J),J.finishDraft.bind(J);const te=ee;function ne(e){return ne="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ne(e)}function ae(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==ne(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var a=n.call(e,t);if("object"!==ne(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e,"string");return"symbol"===ne(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function le(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function re(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?le(Object(n),!0).forEach((function(t){ae(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):le(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ie(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var oe="function"==typeof Symbol&&Symbol.observable||"@@observable",ue=function(){return Math.random().toString(36).substring(7).split("").join(".")},ce={INIT:"@@redux/INIT"+ue(),REPLACE:"@@redux/REPLACE"+ue(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+ue()}};function se(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function de(e,t,n){var a;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(ie(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(ie(1));return n(de)(e,t)}if("function"!=typeof e)throw new Error(ie(2));var l=e,r=t,i=[],o=i,u=!1;function c(){o===i&&(o=i.slice())}function s(){if(u)throw new Error(ie(3));return r}function d(e){if("function"!=typeof e)throw new Error(ie(4));if(u)throw new Error(ie(5));var t=!0;return c(),o.push(e),function(){if(t){if(u)throw new Error(ie(6));t=!1,c();var n=o.indexOf(e);o.splice(n,1),i=null}}}function f(e){if(!se(e))throw new Error(ie(7));if(void 0===e.type)throw new Error(ie(8));if(u)throw new Error(ie(9));try{u=!0,r=l(r,e)}finally{u=!1}for(var t=i=o,n=0;n<t.length;n++)(0,t[n])();return e}function m(e){if("function"!=typeof e)throw new Error(ie(10));l=e,f({type:ce.REPLACE})}function p(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(ie(11));function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[oe]=function(){return this},e}return f({type:ce.INIT}),(a={dispatch:f,subscribe:d,getState:s,replaceReducer:m})[oe]=p,a}var fe=de;function me(e){for(var t=Object.keys(e),n={},a=0;a<t.length;a++){var l=t[a];"function"==typeof e[l]&&(n[l]=e[l])}var r,i=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:ce.INIT}))throw new Error(ie(12));if(void 0===n(void 0,{type:ce.PROBE_UNKNOWN_ACTION()}))throw new Error(ie(13))}))}(n)}catch(e){r=e}return function(e,t){if(void 0===e&&(e={}),r)throw r;for(var a=!1,l={},o=0;o<i.length;o++){var u=i[o],c=n[u],s=e[u],d=c(s,t);if(void 0===d)throw t&&t.type,new Error(ie(14));l[u]=d,a=a||d!==s}return(a=a||i.length!==Object.keys(e).length)?l:e}}function pe(e,t){return function(){return t(e.apply(this,arguments))}}function ve(e,t){if("function"==typeof e)return pe(e,t);if("object"!=typeof e||null===e)throw new Error(ie(16));var n={};for(var a in e){var l=e[a];"function"==typeof l&&(n[a]=pe(l,t))}return n}function he(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function be(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),a=function(){throw new Error(ie(15))},l={getState:n.getState,dispatch:function(){return a.apply(void 0,arguments)}},r=t.map((function(e){return e(l)}));return a=he.apply(void 0,r)(n.dispatch),re(re({},n),{},{dispatch:a})}}}var ge="NOT_FOUND",Ee=function(e,t){return e===t};function ye(e,t){var n,a,l="object"==typeof t?t:{equalityCheck:t},r=l.equalityCheck,i=void 0===r?Ee:r,o=l.maxSize,u=void 0===o?1:o,c=l.resultEqualityCheck,s=function(e){return function(t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var a=t.length,l=0;l<a;l++)if(!e(t[l],n[l]))return!1;return!0}}(i),d=1===u?(n=s,{get:function(e){return a&&n(a.key,e)?a.value:ge},put:function(e,t){a={key:e,value:t}},getEntries:function(){return a?[a]:[]},clear:function(){a=void 0}}):function(e,t){var n=[];function a(e){var a=n.findIndex((function(n){return t(e,n.key)}));if(a>-1){var l=n[a];return a>0&&(n.splice(a,1),n.unshift(l)),l.value}return ge}return{get:a,put:function(t,l){a(t)===ge&&(n.unshift({key:t,value:l}),n.length>e&&n.pop())},getEntries:function(){return n},clear:function(){n=[]}}}(u,s);function f(){var t=d.get(arguments);if(t===ge){if(t=e.apply(null,arguments),c){var n=d.getEntries(),a=n.find((function(e){return c(e.value,t)}));a&&(t=a.value)}d.put(arguments,t)}return t}return f.clearCache=function(){return d.clear()},f}function _e(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return"function"==typeof e?"function "+(e.name||"unnamed")+"()":typeof e})).join(", ");throw new Error("createSelector expects all input-selectors to be functions, but received the following types: ["+n+"]")}return t}function Ae(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),a=1;a<t;a++)n[a-1]=arguments[a];var l=function(){for(var t=arguments.length,a=new Array(t),l=0;l<t;l++)a[l]=arguments[l];var r,i=0,o={memoizeOptions:void 0},u=a.pop();if("object"==typeof u&&(o=u,u=a.pop()),"function"!=typeof u)throw new Error("createSelector expects an output function after the inputs, but received: ["+typeof u+"]");var c=o,s=c.memoizeOptions,d=void 0===s?n:s,f=Array.isArray(d)?d:[d],m=_e(a),p=e.apply(void 0,[function(){return i++,u.apply(null,arguments)}].concat(f)),v=e((function(){for(var e=[],t=m.length,n=0;n<t;n++)e.push(m[n].apply(null,arguments));return r=p.apply(null,e)}));return Object.assign(v,{resultFunc:u,memoizedResultFunc:p,dependencies:m,lastResult:function(){return r},recomputations:function(){return i},resetRecomputations:function(){return i=0}}),v};return l}var Se=Ae(ye);function Ce(e){return function(t){var n=t.dispatch,a=t.getState;return function(t){return function(l){return"function"==typeof l?l(n,a,e):t(l)}}}}var xe=Ce();xe.withExtraArgument=Ce;const we=xe;var Oe,Te=(Oe=function(e,t){return Oe=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},Oe(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Oe(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),Le=function(e,t){var n,a,l,r,i={label:0,sent:function(){if(1&l[0])throw l[1];return l[1]},trys:[],ops:[]};return r={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function o(r){return function(o){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,a&&(l=2&r[0]?a.return:r[0]?a.throw||((l=a.return)&&l.call(a),0):a.next)&&!(l=l.call(a,r[1])).done)return l;switch(a=0,l&&(r=[2&r[0],l.value]),r[0]){case 0:case 1:l=r;break;case 4:return i.label++,{value:r[1],done:!1};case 5:i.label++,a=r[1],r=[0];continue;case 7:r=i.ops.pop(),i.trys.pop();continue;default:if(!((l=(l=i.trys).length>0&&l[l.length-1])||6!==r[0]&&2!==r[0])){i=0;continue}if(3===r[0]&&(!l||r[1]>l[0]&&r[1]<l[3])){i.label=r[1];break}if(6===r[0]&&i.label<l[1]){i.label=l[1],l=r;break}if(l&&i.label<l[2]){i.label=l[2],i.ops.push(r);break}l[2]&&i.ops.pop(),i.trys.pop();continue}r=t.call(e,i)}catch(e){r=[6,e],a=0}finally{n=l=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,o])}}},Pe=function(e,t){for(var n=0,a=t.length,l=e.length;n<a;n++,l++)e[l]=t[n];return e},Ie=Object.defineProperty,Ne=Object.defineProperties,De=Object.getOwnPropertyDescriptors,ke=Object.getOwnPropertySymbols,Re=Object.prototype.hasOwnProperty,Me=Object.prototype.propertyIsEnumerable,Be=function(e,t,n){return t in e?Ie(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},je=function(e,t){for(var n in t||(t={}))Re.call(t,n)&&Be(e,n,t[n]);if(ke)for(var a=0,l=ke(t);a<l.length;a++)n=l[a],Me.call(t,n)&&Be(e,n,t[n]);return e},ze=function(e,t){return Ne(e,De(t))},Fe=function(e,t,n){return new Promise((function(a,l){var r=function(e){try{o(n.next(e))}catch(e){l(e)}},i=function(e){try{o(n.throw(e))}catch(e){l(e)}},o=function(e){return e.done?a(e.value):Promise.resolve(e.value).then(r,i)};o((n=n.apply(e,t)).next())}))},He=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Se.apply(void 0,e),a=function(e){for(var t=[],a=1;a<arguments.length;a++)t[a-1]=arguments[a];return n.apply(void 0,Pe([l(e)?R(e):e],t))};return a},Ue="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?he:he.apply(null,arguments)};function We(e){if("object"!=typeof e||null===e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return t===n}"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var $e=function(e){function t(){for(var n=[],a=0;a<arguments.length;a++)n[a]=arguments[a];var l=e.apply(this,n)||this;return Object.setPrototypeOf(l,t.prototype),l}return Te(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,Pe([void 0],e[0].concat(this)))):new(t.bind.apply(t,Pe([void 0],e.concat(this))))},t}(Array);function Ve(e){return r(e)?te(e,(function(){})):e}function Ge(e){return"object"!=typeof e||null==e||Object.isFrozen(e)}function qe(e){return void 0===e&&(e={}),function(){return function(e){return function(t){return e(t)}}}}function Xe(e){var t=typeof e;return null==e||"string"===t||"boolean"===t||"number"===t||Array.isArray(e)||We(e)}function Ye(e,t,n,a,l){var r;if(void 0===t&&(t=""),void 0===n&&(n=Xe),void 0===l&&(l=[]),!n(e))return{keyPath:t||"<root>",value:e};if("object"!=typeof e||null===e)return!1;for(var i=null!=a?a(e):Object.entries(e),o=l.length>0,u=0,c=i;u<c.length;u++){var s=c[u],d=s[0],f=s[1],m=t?t+"."+d:d;if(!(o&&l.indexOf(m)>=0)){if(!n(f))return{keyPath:m,value:f};if("object"==typeof f&&(r=Ye(f,m,n,a,l)))return r}}return!1}function Ze(e){return void 0===e&&(e={}),function(){return function(e){return function(t){return e(t)}}}}function Ke(e){void 0===e&&(e={});var t=e.thunk,n=void 0===t||t,a=(e.immutableCheck,e.serializableCheck,new $e);return n&&(function(e){return"boolean"==typeof e}(n)?a.push(we):a.push(we.withExtraArgument(n.extraArgument))),a}function Qe(e){var t,n=function(e){return Ke(e)},a=e||{},l=a.reducer,r=void 0===l?void 0:l,i=a.middleware,o=void 0===i?n():i,u=a.devTools,c=void 0===u||u,s=a.preloadedState,d=void 0===s?void 0:s,f=a.enhancers,m=void 0===f?void 0:f;if("function"==typeof r)t=r;else{if(!We(r))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=me(r)}var p=o;"function"==typeof p&&(p=p(n));var v=be.apply(void 0,p),h=he;c&&(h=Ue(je({trace:!1},"object"==typeof c&&c)));var b=[v];return Array.isArray(m)?b=Pe([v],m):"function"==typeof m&&(b=m(b)),de(t,d,h.apply(void 0,b))}function Je(e,t){function n(){for(var n=[],a=0;a<arguments.length;a++)n[a]=arguments[a];if(t){var l=t.apply(void 0,n);if(!l)throw new Error("prepareAction did not return an object");return je(je({type:e,payload:l.payload},"meta"in l&&{meta:l.meta}),"error"in l&&{error:l.error})}return{type:e,payload:n[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function et(e){return["type","payload","error","meta"].indexOf(e)>-1}function tt(e){return""+e}function nt(e){var t,n={},a=[],l={addCase:function(e,t){var a="string"==typeof e?e:e.type;if(a in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[a]=t,l},addMatcher:function(e,t){return a.push({matcher:e,reducer:t}),l},addDefaultCase:function(e){return t=e,l}};return e(l),[n,a,t]}function at(e,t,n,a){void 0===n&&(n=[]);var i,o="function"==typeof t?nt(t):[t,n,a],u=o[0],c=o[1],s=o[2];if(function(e){return"function"==typeof e}(e))i=function(){return Ve(e())};else{var d=Ve(e);i=function(){return d}}function f(e,t){void 0===e&&(e=i());var n=Pe([u[t.type]],c.filter((function(e){return(0,e.matcher)(t)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[s]),n.reduce((function(e,n){if(n){var a;if(l(e))return void 0===(a=n(e,t))?e:a;if(r(e))return te(e,(function(e){return n(e,t)}));if(void 0===(a=n(e,t))){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return a}return e}),e)}return f.getInitialState=i,f}function lt(e){var t=e.name;if(!t)throw new Error("`name` is a required option for createSlice");var n,a="function"==typeof e.initialState?e.initialState:Ve(e.initialState),l=e.reducers||{},r=Object.keys(l),i={},o={},u={};function c(){var t="function"==typeof e.extraReducers?nt(e.extraReducers):[e.extraReducers],n=t[0],l=void 0===n?{}:n,r=t[1],i=void 0===r?[]:r,u=t[2],c=void 0===u?void 0:u,s=je(je({},l),o);return at(a,(function(e){for(var t in s)e.addCase(t,s[t]);for(var n=0,a=i;n<a.length;n++){var l=a[n];e.addMatcher(l.matcher,l.reducer)}c&&e.addDefaultCase(c)}))}return r.forEach((function(e){var n,a,r=l[e],c=t+"/"+e;"reducer"in r?(n=r.reducer,a=r.prepare):n=r,i[e]=n,o[c]=n,u[e]=a?Je(c,a):Je(c)})),{name:t,reducer:function(e,t){return n||(n=c()),n(e,t)},actions:u,caseReducers:i,getInitialState:function(){return n||(n=c()),n.getInitialState()}}}function rt(e){return function(t,n){var a=function(t){var a;We(a=n)&&"string"==typeof a.type&&Object.keys(a).every(et)?e(n.payload,t):e(n,t)};return l(t)?(a(t),t):te(t,a)}}function it(e,t){return t(e)}function ot(e){return Array.isArray(e)||(e=Object.values(e)),e}function ut(e,t,n){for(var a=[],l=[],r=0,i=e=ot(e);r<i.length;r++){var o=i[r],u=it(o,t);u in n.entities?l.push({id:u,changes:o}):a.push(o)}return[a,l]}function ct(e){function t(t,n){var a=it(t,e);a in n.entities||(n.ids.push(a),n.entities[a]=t)}function n(e,n){for(var a=0,l=e=ot(e);a<l.length;a++)t(l[a],n)}function a(t,n){var a=it(t,e);a in n.entities||n.ids.push(a),n.entities[a]=t}function l(e,t){var n=!1;e.forEach((function(e){e in t.entities&&(delete t.entities[e],n=!0)})),n&&(t.ids=t.ids.filter((function(e){return e in t.entities})))}function r(t,n){var a={},l={};if(t.forEach((function(e){e.id in n.entities&&(l[e.id]={id:e.id,changes:je(je({},l[e.id]?l[e.id].changes:null),e.changes)})})),(t=Object.values(l)).length>0){var r=t.filter((function(t){return function(t,n,a){var l=a.entities[n.id],r=Object.assign({},l,n.changes),i=it(r,e),o=i!==n.id;return o&&(t[n.id]=i,delete a.entities[n.id]),a.entities[i]=r,o}(a,t,n)})).length>0;r&&(n.ids=Object.keys(n.entities))}}function i(t,a){var l=ut(t,e,a),i=l[0];r(l[1],a),n(i,a)}return{removeAll:(o=function(e){Object.assign(e,{ids:[],entities:{}})},u=rt((function(e,t){return o(t)})),function(e){return u(e,void 0)}),addOne:rt(t),addMany:rt(n),setOne:rt(a),setMany:rt((function(e,t){for(var n=0,l=e=ot(e);n<l.length;n++)a(l[n],t)})),setAll:rt((function(e,t){e=ot(e),t.ids=[],t.entities={},n(e,t)})),updateOne:rt((function(e,t){return r([e],t)})),updateMany:rt(r),upsertOne:rt((function(e,t){return i([e],t)})),upsertMany:rt(i),removeOne:rt((function(e,t){return l([e],t)})),removeMany:rt(l)};var o,u}function st(e){void 0===e&&(e={});var t=je({sortComparer:!1,selectId:function(e){return e.id}},e),n=t.selectId,a=t.sortComparer,l={getInitialState:function(e){return void 0===e&&(e={}),Object.assign({ids:[],entities:{}},e)}},r={getSelectors:function(e){var t=function(e){return e.ids},n=function(e){return e.entities},a=He(t,n,(function(e,t){return e.map((function(e){return t[e]}))})),l=function(e,t){return t},r=function(e,t){return e[t]},i=He(t,(function(e){return e.length}));if(!e)return{selectIds:t,selectEntities:n,selectAll:a,selectTotal:i,selectById:He(n,l,r)};var o=He(e,n);return{selectIds:He(e,t),selectEntities:o,selectAll:He(e,a),selectTotal:He(e,i),selectById:He(o,l,r)}}},i=a?function(e,t){var n=ct(e);function a(t,n){var a=(t=ot(t)).filter((function(t){return!(it(t,e)in n.entities)}));0!==a.length&&o(a,n)}function l(e,t){0!==(e=ot(e)).length&&o(e,t)}function r(t,n){for(var a=!1,l=0,r=t;l<r.length;l++){var i=r[l],o=n.entities[i.id];if(o){a=!0,Object.assign(o,i.changes);var c=e(o);i.id!==c&&(delete n.entities[i.id],n.entities[c]=o)}}a&&u(n)}function i(t,n){var l=ut(t,e,n),i=l[0];r(l[1],n),a(i,n)}function o(t,n){t.forEach((function(t){n.entities[e(t)]=t})),u(n)}function u(n){var a=Object.values(n.entities);a.sort(t);var l=a.map(e);(function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(e[n]!==t[n])return!1;return!0})(n.ids,l)||(n.ids=l)}return{removeOne:n.removeOne,removeMany:n.removeMany,removeAll:n.removeAll,addOne:rt((function(e,t){return a([e],t)})),updateOne:rt((function(e,t){return r([e],t)})),upsertOne:rt((function(e,t){return i([e],t)})),setOne:rt((function(e,t){return l([e],t)})),setMany:rt(l),setAll:rt((function(e,t){e=ot(e),t.entities={},t.ids=[],a(e,t)})),addMany:rt(a),updateMany:rt(r),upsertMany:rt(i)}}(n,a):ct(n);return je(je(je({selectId:n,sortComparer:a},l),r),i)}var dt=function(e){void 0===e&&(e=21);for(var t="",n=e;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t},ft=["name","message","stack","code"],mt=function(e,t){this.payload=e,this.meta=t},pt=function(e,t){this.payload=e,this.meta=t},vt=function(e){if("object"==typeof e&&null!==e){for(var t={},n=0,a=ft;n<a.length;n++){var l=a[n];"string"==typeof e[l]&&(t[l]=e[l])}return t}return{message:String(e)}},ht=function(){function e(e,t,n){var a=Je(e+"/fulfilled",(function(e,t,n,a){return{payload:e,meta:ze(je({},a||{}),{arg:n,requestId:t,requestStatus:"fulfilled"})}})),l=Je(e+"/pending",(function(e,t,n){return{payload:void 0,meta:ze(je({},n||{}),{arg:t,requestId:e,requestStatus:"pending"})}})),r=Je(e+"/rejected",(function(e,t,a,l,r){return{payload:l,error:(n&&n.serializeError||vt)(e||"Rejected"),meta:ze(je({},r||{}),{arg:a,requestId:t,rejectedWithValue:!!l,requestStatus:"rejected",aborted:"AbortError"===(null==e?void 0:e.name),condition:"ConditionError"===(null==e?void 0:e.name)})}})),i="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){},reason:void 0,throwIfAborted:function(){}}}return e.prototype.abort=function(){},e}();return Object.assign((function(e){return function(o,u,c){var s,d=(null==n?void 0:n.idGenerator)?n.idGenerator(e):dt(),f=new i;function m(e){s=e,f.abort()}var p=function(){return Fe(this,null,(function(){var i,p,v,h,b,g;return Le(this,(function(E){switch(E.label){case 0:return E.trys.push([0,4,,5]),null===(y=h=null==(i=null==n?void 0:n.condition)?void 0:i.call(n,e,{getState:u,extra:c}))||"object"!=typeof y||"function"!=typeof y.then?[3,2]:[4,h];case 1:h=E.sent(),E.label=2;case 2:if(!1===h||f.signal.aborted)throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return b=new Promise((function(e,t){return f.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:s||"Aborted"})}))})),o(l(d,e,null==(p=null==n?void 0:n.getPendingMeta)?void 0:p.call(n,{requestId:d,arg:e},{getState:u,extra:c}))),[4,Promise.race([b,Promise.resolve(t(e,{dispatch:o,getState:u,extra:c,requestId:d,signal:f.signal,abort:m,rejectWithValue:function(e,t){return new mt(e,t)},fulfillWithValue:function(e,t){return new pt(e,t)}})).then((function(t){if(t instanceof mt)throw t;return t instanceof pt?a(t.payload,d,e,t.meta):a(t,d,e)}))])];case 3:return v=E.sent(),[3,5];case 4:return g=E.sent(),v=g instanceof mt?r(null,d,e,g.payload,g.meta):r(g,d,e),[3,5];case 5:return n&&!n.dispatchConditionRejection&&r.match(v)&&v.meta.condition||o(v),[2,v]}var y}))}))}();return Object.assign(p,{abort:m,requestId:d,arg:e,unwrap:function(){return p.then(bt)}})}}),{pending:l,rejected:r,fulfilled:a,typePrefix:e})}return e.withTypes=function(){return e},e}();function bt(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}var gt=function(e,t){return function(e){return e&&"function"==typeof e.match}(e)?e.match(t):e(t)};function Et(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return e.some((function(e){return gt(e,t)}))}}function yt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return e.every((function(e){return gt(e,t)}))}}function _t(e,t){if(!e||!e.meta)return!1;var n="string"==typeof e.meta.requestId,a=t.indexOf(e.meta.requestStatus)>-1;return n&&a}function At(e){return"function"==typeof e[0]&&"pending"in e[0]&&"fulfilled"in e[0]&&"rejected"in e[0]}function St(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?function(e){return _t(e,["pending"])}:At(e)?function(t){var n=e.map((function(e){return e.pending}));return Et.apply(void 0,n)(t)}:St()(e[0])}function Ct(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?function(e){return _t(e,["rejected"])}:At(e)?function(t){var n=e.map((function(e){return e.rejected}));return Et.apply(void 0,n)(t)}:Ct()(e[0])}function xt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=function(e){return e&&e.meta&&e.meta.rejectedWithValue};return 0===e.length||At(e)?function(t){return yt(Ct.apply(void 0,e),n)(t)}:xt()(e[0])}function wt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?function(e){return _t(e,["fulfilled"])}:At(e)?function(t){var n=e.map((function(e){return e.fulfilled}));return Et.apply(void 0,n)(t)}:wt()(e[0])}function Ot(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?function(e){return _t(e,["pending","fulfilled","rejected"])}:At(e)?function(t){for(var n=[],a=0,l=e;a<l.length;a++){var r=l[a];n.push(r.pending,r.rejected,r.fulfilled)}return Et.apply(void 0,n)(t)}:Ot()(e[0])}var Tt=function(e,t){if("function"!=typeof e)throw new TypeError(t+" is not a function")},Lt=function(){},Pt=function(e,t){return void 0===t&&(t=Lt),e.catch(t),e},It=function(e,t){e.addEventListener("abort",t,{once:!0})},Nt=function(e,t){var n=e.signal;n.aborted||("reason"in n||Object.defineProperty(n,"reason",{enumerable:!0,value:t,configurable:!0,writable:!0}),e.abort(t))},Dt="listener-cancelled",kt=function(e){this.code=e,this.name="TaskAbortError",this.message="task cancelled (reason: "+e+")"},Rt=function(e){if(e.aborted)throw new kt(e.reason)},Mt=function(e){return Pt(new Promise((function(t,n){var a=function(){return n(new kt(e.reason))};e.aborted?a():It(e,a)})))},Bt=function(e){return function(t){return Pt(Promise.race([Mt(e),t]).then((function(t){return Rt(e),t})))}},jt=function(e){var t=Bt(e);return function(e){return t(new Promise((function(t){return setTimeout(t,e)})))}},zt=Object.assign,Ft={},Ht="listenerMiddleware",Ut=function(e){var t=e.type,n=e.actionCreator,a=e.matcher,l=e.predicate,r=e.effect;if(t)l=Je(t).match;else if(n)t=n.type,l=n.match;else if(a)l=a;else if(!l)throw new Error("Creating or removing a listener requires one of the known fields for matching an action");return Tt(r,"options.listener"),{predicate:l,type:t,effect:r}},Wt=function(e,t,n){try{e(t,n)}catch(e){setTimeout((function(){throw e}),0)}},$t=Je(Ht+"/add"),Vt=Je(Ht+"/removeAll"),Gt=Je(Ht+"/remove"),qt=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.error.apply(console,Pe([Ht+"/error"],e))},Xt=function(e){e.pending.forEach((function(e){Nt(e,Dt)}))};function Yt(e){var t=this;void 0===e&&(e={});var n=new Map,a=e.extra,l=e.onError,r=void 0===l?qt:l;Tt(r,"onError");var i=function(e){for(var t=0,a=Array.from(n.values());t<a.length;t++){var l=a[t];if(e(l))return l}},o=function(e){var t=i((function(t){return t.effect===e.effect}));return t||(t=function(e){var t=Ut(e),n=t.type,a=t.predicate,l=t.effect;return{id:dt(),effect:l,type:n,predicate:a,pending:new Set,unsubscribe:function(){throw new Error("Unsubscribe not initialized")}}}(e)),function(e){return e.unsubscribe=function(){return n.delete(e.id)},n.set(e.id,e),function(t){e.unsubscribe(),(null==t?void 0:t.cancelActive)&&Xt(e)}}(t)},u=function(e){var t=Ut(e),n=t.type,a=t.effect,l=t.predicate,r=i((function(e){return("string"==typeof n?e.type===n:e.predicate===l)&&e.effect===a}));return r&&(r.unsubscribe(),e.cancelActive&&Xt(r)),!!r},c=function(e,l,i,u){return Fe(t,null,(function(){var t,c,s;return Le(this,(function(d){switch(d.label){case 0:t=new AbortController,c=function(e,t){return function(n,a){return Pt(function(n,a){return Fe(void 0,null,(function(){var l,r,i,o;return Le(this,(function(u){switch(u.label){case 0:Rt(t),l=function(){},r=new Promise((function(t){l=e({predicate:n,effect:function(e,n){n.unsubscribe(),t([e,n.getState(),n.getOriginalState()])}})})),i=[Mt(t),r],null!=a&&i.push(new Promise((function(e){return setTimeout(e,a,null)}))),u.label=1;case 1:return u.trys.push([1,,3,4]),[4,Promise.race(i)];case 2:return o=u.sent(),Rt(t),[2,o];case 3:return l(),[7];case 4:return[2]}}))}))}(n,a))}}(o,t.signal),d.label=1;case 1:return d.trys.push([1,3,4,5]),e.pending.add(t),[4,Promise.resolve(e.effect(l,zt({},i,{getOriginalState:u,condition:function(e,t){return c(e,t).then(Boolean)},take:c,delay:jt(t.signal),pause:Bt(t.signal),extra:a,signal:t.signal,fork:(f=t.signal,function(e){Tt(e,"taskExecutor");var t,n=new AbortController;t=n,It(f,(function(){return Nt(t,f.reason)}));var a,l,r=(a=function(){return Fe(void 0,null,(function(){var t;return Le(this,(function(a){switch(a.label){case 0:return Rt(f),Rt(n.signal),[4,e({pause:Bt(n.signal),delay:jt(n.signal),signal:n.signal})];case 1:return t=a.sent(),Rt(n.signal),[2,t]}}))}))},l=function(){return Nt(n,"task-completed")},Fe(void 0,null,(function(){var e;return Le(this,(function(t){switch(t.label){case 0:return t.trys.push([0,3,4,5]),[4,Promise.resolve()];case 1:return t.sent(),[4,a()];case 2:return[2,{status:"ok",value:t.sent()}];case 3:return[2,{status:(e=t.sent())instanceof kt?"cancelled":"rejected",error:e}];case 4:return null==l||l(),[7];case 5:return[2]}}))})));return{result:Bt(f)(r),cancel:function(){Nt(n,"task-cancelled")}}}),unsubscribe:e.unsubscribe,subscribe:function(){n.set(e.id,e)},cancelActiveListeners:function(){e.pending.forEach((function(e,n,a){e!==t&&(Nt(e,Dt),a.delete(e))}))}})))];case 2:return d.sent(),[3,5];case 3:return(s=d.sent())instanceof kt||Wt(r,s,{raisedBy:"effect"}),[3,5];case 4:return Nt(t,"listener-completed"),e.pending.delete(t),[7];case 5:return[2]}var f}))}))},s=function(e){return function(){e.forEach(Xt),e.clear()}}(n);return{middleware:function(e){return function(t){return function(a){if($t.match(a))return o(a.payload);if(!Vt.match(a)){if(Gt.match(a))return u(a.payload);var l,i=e.getState(),d=function(){if(i===Ft)throw new Error(Ht+": getOriginalState can only be called synchronously");return i};try{if(l=t(a),n.size>0)for(var f=e.getState(),m=Array.from(n.values()),p=0,v=m;p<v.length;p++){var h=v[p],b=!1;try{b=h.predicate(a,f,i)}catch(e){b=!1,Wt(r,e,{raisedBy:"predicate"})}b&&c(h,a,e,d)}}finally{i=Ft}return l}s()}}},startListening:o,stopListening:u,clearListeners:s}}var Zt,Kt="RTK_autoBatch",Qt=function(){return function(e){var t;return{payload:e,meta:(t={},t[Kt]=!0,t)}}},Jt="function"==typeof queueMicrotask?queueMicrotask.bind("undefined"!=typeof window?window:void 0!==n.g?n.g:globalThis):function(e){return(Zt||(Zt=Promise.resolve())).then(e).catch((function(e){return setTimeout((function(){throw e}),0)}))},en=function(e){return function(t){setTimeout(t,e)}},tn="undefined"!=typeof window&&window.requestAnimationFrame?window.requestAnimationFrame:en(10),nn=function(e){return void 0===e&&(e={type:"raf"}),function(t){return function(){for(var n=[],a=0;a<arguments.length;a++)n[a]=arguments[a];var l=t.apply(void 0,n),r=!0,i=!1,o=!1,u=new Set,c="tick"===e.type?Jt:"raf"===e.type?tn:"callback"===e.type?e.queueNotification:en(e.timeout),s=function(){o=!1,i&&(i=!1,u.forEach((function(e){return e()})))};return Object.assign({},l,{subscribe:function(e){var t=l.subscribe((function(){return r&&e()}));return u.add(e),function(){t(),u.delete(e)}},dispatch:function(e){var t;try{return r=!(null==(t=null==e?void 0:e.meta)?void 0:t[Kt]),(i=!r)&&(o||(o=!0,c(s))),l.dispatch(e)}finally{r=!0}}})}}};!function(){function e(e,t){var n=r[e];return n?n.enumerable=t:r[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[V];return Z.get(t,e)},set:function(t){var n=this[V];Z.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var l=e[t][V];if(!l.P)switch(l.i){case 5:a(l)&&N(l);break;case 4:n(l)&&N(l)}}}function n(e){for(var t=e.t,n=e.k,a=q(n),l=a.length-1;l>=0;l--){var r=a[l];if(r!==V){var i=t[r];if(void 0===i&&!c(t,r))return!0;var o=n[r],u=o&&o[V];if(u?u.t!==i:!d(o,i))return!0}}var s=!!t[V];return a.length!==q(t).length+(s?0:1)}function a(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);if(n&&!n.get)return!0;for(var a=0;a<t.length;a++)if(!t.hasOwnProperty(a))return!0;return!1}var r={};!function(e,t){Y[e]||(Y[e]=t)}("ES5",{J:function(t,n){var a=Array.isArray(t),l=function(t,n){if(t){for(var a=Array(n.length),l=0;l<n.length;l++)Object.defineProperty(a,""+l,e(l,!0));return a}var r=X(n);delete r[V];for(var i=q(r),o=0;o<i.length;o++){var u=i[o];r[u]=e(u,t||!!r[u].enumerable)}return Object.create(Object.getPrototypeOf(n),r)}(a,t),r={i:a?5:4,A:n?n.A:y(),P:!1,I:!1,D:{},l:n,t,k:l,o:null,O:!1,C:!1};return Object.defineProperty(l,V,{value:r,writable:!0}),l},S:function(e,n,r){r?l(n)&&n[V].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[V];if(n){var l=n.t,r=n.k,i=n.D,u=n.i;if(4===u)o(r,(function(t){t!==V&&(void 0!==l[t]||c(l,t)?i[t]||e(r[t]):(i[t]=!0,N(n)))})),o(l,(function(e){void 0!==r[e]||c(r,e)||(i[e]=!1,N(n))}));else if(5===u){if(a(n)&&(N(n),i.length=!0),r.length<l.length)for(var s=r.length;s<l.length;s++)i[s]=!1;else for(var d=l.length;d<r.length;d++)i[d]=!0;for(var f=Math.min(r.length,l.length),m=0;m<f;m++)r.hasOwnProperty(m)||(i[m]=!0),void 0===i[m]&&e(r[m])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):a(e)}})}()},6380:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default={LETTERS:{A:"a",B:"b",C:"c",D:"d",E:"e",F:"f",G:"g",H:"h",I:"i",J:"j",K:"k",L:"l",M:"m",N:"n",O:"o",P:"p",Q:"q",R:"r",S:"s",T:"t",U:"u",V:"v",W:"w",X:"x",Y:"y",Z:"z"}}},51:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.removeElement=t.randomSubArray=t.shuffle=t.createIntArray=void 0,t.createIntArray=function(e){void 0===e&&(e=0);for(var t=[],n=0;n<e;n++)t.push(n);return t},t.shuffle=function(e){void 0===e&&(e=[]);for(var t=e.slice(),n=[];t.length;){var a=Math.floor(Math.random()*t.length);n.push(t.splice(a,1)[0])}return n},t.randomSubArray=function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);for(var n=e.slice(),a=[],l=0;l<t;l++){var r=Math.floor(Math.random()*n.length);a.push(n.splice(r,1)[0])}return a},t.removeElement=function(e,t){var n=e.indexOf(t),a=e.slice();return-1!==n&&a.splice(n,1),a}},2920:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default={NEVER:"NEVER",FETCHING_FIRST:"FETCHING_FIRST",FETCHING:"FETCHING",SUCCESS:"SUCCESS",FAILURE:"FAILURE",OUTDATED:"OUTDATED"}},2684:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.mergeDataStates=void 0;var l=a(n(2920));t.mergeDataStates=function(e){return 0===e.length?l.default.NEVER:e.some((function(e){return e===l.default.FAILURE}))?l.default.FAILURE:e.some((function(e){return e===l.default.OUTDATED}))?l.default.OUTDATED:e.some((function(e){return e===l.default.NEVER}))?l.default.NEVER:e.some((function(e){return e===l.default.FETCHING_FIRST}))?l.default.FETCHING_FIRST:e.some((function(e){return e===l.default.FETCHING}))?l.default.FETCHING:l.default.SUCCESS}},207:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.nowString=t.dateString=t.normalizeTime=t.durationToHumanTime=t.TimeConstants=void 0;var n=1e3,a=36e5;t.TimeConstants={MIL_PER_SEC:n,SEC_PER_MIN:60,MIL_PER_MIN:6e4,MIN_PER_HOU:60,SEC_PER_HOU:3600,MIL_PER_HOU:a,HOU_PER_DAY:24,MIN_PER_DAY:1440,SEC_PER_DAY:86400,MIL_PER_DAY:864e5},t.durationToHumanTime=function(e){return{millis:e%n,seconds:Math.floor(e/n)%60,minutes:Math.floor(e/6e4)%60,hours:Math.floor(e/a)}},t.normalizeTime=function(e){return"".concat(e).padStart(2,"0")},t.dateString=function(e){var n=(0,t.normalizeTime)(e.getFullYear()),a=(0,t.normalizeTime)(e.getMonth()),l=(0,t.normalizeTime)(e.getDate()),r=(0,t.normalizeTime)(e.getHours()),i=(0,t.normalizeTime)(e.getMinutes()),o=(0,t.normalizeTime)(e.getSeconds());return"".concat(n,"-").concat(a,"-").concat(l," ").concat(r,":").concat(i,":").concat(o)},t.nowString=function(){return(0,t.dateString)(new Date(Date.now()))}},2993:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.decodeBasicHeader=t.encodeBasicHeader=t.decode=t.encode=void 0,t.encode=function(e){return void 0===e&&(e=""),Buffer.from(e).toString("base64")},t.decode=function(e){return void 0===e&&(e=""),Buffer.from(e,"base64").toString()},t.encodeBasicHeader=function(e,n){void 0===e&&(e=""),void 0===n&&(n="");var a="".concat(e,":").concat(n),l=(0,t.encode)(a);return"Basic ".concat(l)},t.decodeBasicHeader=function(e){void 0===e&&(e="");var n=e.split("Basic ").join(""),a=(0,t.decode)(n).split(":");return 2===a.length?{username:a[0],password:a[1]}:{username:null,password:null}}},576:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.checkSize=t.checkExtension=t.getExtension=void 0,t.getExtension=function(e){var t=e.name;return t.substring(t.lastIndexOf(".")+1).toLowerCase()},t.checkExtension=function(e,n){return-1!==n.indexOf((0,t.getExtension)(e))},t.checkSize=function(e,t){return e.size<=t}},190:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getParamNames=void 0;var n=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,a=/([^\s,]+)/g;t.getParamNames=function(e){var t=e.toString().replace(n,""),l=t.slice(t.indexOf("(")+1,t.indexOf(")")).match(a);return null===l?[]:l}},9431:(e,t)=>{var n,a,l;Object.defineProperty(t,"__esModule",{value:!0}),t.HttpStatus=t.HttpMethod=t.HttpHeader=void 0,(l=t.HttpHeader||(t.HttpHeader={})).ACCESS_CONTROL_ALLOW_ORIGIN="Access-Control-Allow-Origin",l.ACCESS_CONTROL_ALLOW_HEADERS="Access-Control-Allow-Headers",l.ACCESS_CONTROL_ALLOW_METHODS="Access-Control-Allow-Methods",(a=t.HttpMethod||(t.HttpMethod={})).GET="GET",a.POST="POST",a.PUT="PUT",a.PATCH="PATCH",a.DELETE="DELETE",a.OPTIONS="OPTIONS",(n=t.HttpStatus||(t.HttpStatus={}))[n.OK=200]="OK",n[n.CREATED=201]="CREATED",n[n.REMOVED=204]="REMOVED",n[n.BAD_REQUEST=400]="BAD_REQUEST",n[n.UNAUTHORIZED=401]="UNAUTHORIZED",n[n.FORBIDDEN=403]="FORBIDDEN",n[n.NOT_FOUND=404]="NOT_FOUND",n[n.ERROR=500]="ERROR"},1738:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clone=t.getProperty=void 0,t.getProperty=function(e,t){return t.split(".").reduce((function(e,t){if(e&&"object"==typeof e)return e[t]}),e)},t.clone=function(e){return JSON.parse(JSON.stringify(e))}},2186:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.delayedPromise=void 0,t.delayedPromise=function(e,t){return void 0===t&&(t=0),Promise.all([e,new Promise((function(e){return setTimeout(e,t)}))]).then((function(e){return e[0]})).catch((function(e){throw e}))}},989:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.merge=t.remove=t.add=t.toSet=void 0,t.toSet=function(e){return e.reduce((function(e,t){return e.includes(t)||e.push(t),e}),[])},t.add=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.forEach((function(t){e.includes(t)||e.push(t)})),e},t.remove=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.forEach((function(t){var n=e.indexOf(t);-1!==n&&e.splice(n,1)})),e},t.merge=function(e,n){return(0,t.toSet)(e.concat(n))}},3838:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(953)),o=function(){function e(e,t){void 0===t&&(t=" "),this._value=e,this._words=e.split(t).map((function(e){return e.toLowerCase()})).filter((function(e){return Boolean(e)}))}return Object.defineProperty(e.prototype,"words",{get:function(){return this._words},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"camel",{get:function(){return this.words.map((function(e,t){return 0===t?e:i.capitalize(e)})).join("")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pascal",{get:function(){return this.words.map((function(e){return i.capitalize(e)})).join("")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"worm",{get:function(){return this.words.map((function(e){return e.toLowerCase()})).join("_")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"snake",{get:function(){return this.words.map((function(e){return i.capitalize(e)})).join("_")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"serpent",{get:function(){return this.words.map((function(e){return e.toUpperCase()})).join("_")},enumerable:!1,configurable:!0}),e}();t.default=o},953:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.replaceAll=t.capitalizeFirst=t.capitalize=void 0,t.capitalize=function(e){return e.length?e.substring(0,1).toUpperCase()+e.substring(1).toLowerCase():""},t.capitalizeFirst=function(e){return e.length?e.substring(0,1).toUpperCase():""},t.replaceAll=function(e,t,n){return e.split(t).join(n)}},8267:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var n={next:function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))}};t.default=n},6039:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.UUID=t.StringUtils=t.StringLabel=t.Sets=t.PromiseUtils=t.ObjectUtils=t.HttpUtils=t.FunctionUtils=t.FileUtils=t.EncodeUtils=t.DateUtils=t.DataStatesUtils=t.DataStates=t.ArrayUtils=t.Alphabet=void 0;var o=r(n(6380)),u=r(n(51)),c=i(n(2920)),s=r(n(2684)),d=r(n(207)),f=r(n(2993)),m=r(n(576)),p=r(n(190)),v=r(n(9431)),h=r(n(1738)),b=r(n(2186)),g=r(n(989)),E=i(n(3838)),y=r(n(953)),_=i(n(8267));t.Alphabet=o,t.ArrayUtils=u,t.DataStates=c.default,t.DataStatesUtils=s,t.DateUtils=d,t.EncodeUtils=f,t.FileUtils=m,t.FunctionUtils=p,t.HttpUtils=v,t.ObjectUtils=h,t.PromiseUtils=b,t.Sets=g,t.StringLabel=E.default,t.StringUtils=y,t.UUID=_.default},1171:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),l=n.n(a),r=n(3645),i=n.n(r)()(l());i.push([e.id,".code-panel {\r\n  border-radius: 0.5rem;\r\n  border: 2px solid #e5e5e5;\r\n  margin: 1rem 0;\r\n}\r\n.code-panel .header {\r\n  padding: 0.5rem;\r\n}\r\n.code-panel .rendering {\r\n  position: relative;\r\n  padding: 2rem 1rem 3rem 1rem;\r\n  background-color: #f7f7f7;\r\n}\r\n.code-panel .button-show {\r\n  position: absolute;\r\n  right: 0;\r\n  padding: 0.5rem;\r\n  cursor: pointer;\r\n  background: white;\r\n  border: 1px solid darkgray;\r\n  border-radius: 0.25rem;\r\n  bottom: 0;\r\n}\r\n.code-panel .code {\r\n  white-space: pre-line;\r\n  position: relative;\r\n  padding: 1rem;\r\n  background-color: #262626;\r\n  color: white;\r\n  font-size: 12px;\r\n  border-bottom-left-radius: 0.5rem;\r\n  border-bottom-right-radius: 0.5rem;\r\n  font-family: ui-monospace, Menlo, Monaco, 'Roboto Mono', 'Oxygen Mono', 'Ubuntu Monospace', 'Source Code Pro',\r\n    'Droid Sans Mono', 'Courier New', monospace;\r\n}\r\n.code-panel .button-copy {\r\n  position: absolute;\r\n  right: 0;\r\n  bottom: 0;\r\n  padding: 0.5rem;\r\n  cursor: pointer;\r\n  border: none;\r\n  border-radius: 0.25rem;\r\n  background-color: black;\r\n  color: white;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/common/CodePanel.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,yBAAyB;EACzB,cAAc;AAChB;AACA;EACE,eAAe;AACjB;AACA;EACE,kBAAkB;EAClB,4BAA4B;EAC5B,yBAAyB;AAC3B;AACA;EACE,kBAAkB;EAClB,QAAQ;EACR,eAAe;EACf,eAAe;EACf,iBAAiB;EACjB,0BAA0B;EAC1B,sBAAsB;EACtB,SAAS;AACX;AACA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,aAAa;EACb,yBAAyB;EACzB,YAAY;EACZ,eAAe;EACf,iCAAiC;EACjC,kCAAkC;EAClC;+CAC6C;AAC/C;AACA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,eAAe;EACf,eAAe;EACf,YAAY;EACZ,sBAAsB;EACtB,uBAAuB;EACvB,YAAY;AACd",sourcesContent:[".code-panel {\r\n  border-radius: 0.5rem;\r\n  border: 2px solid #e5e5e5;\r\n  margin: 1rem 0;\r\n}\r\n.code-panel .header {\r\n  padding: 0.5rem;\r\n}\r\n.code-panel .rendering {\r\n  position: relative;\r\n  padding: 2rem 1rem 3rem 1rem;\r\n  background-color: #f7f7f7;\r\n}\r\n.code-panel .button-show {\r\n  position: absolute;\r\n  right: 0;\r\n  padding: 0.5rem;\r\n  cursor: pointer;\r\n  background: white;\r\n  border: 1px solid darkgray;\r\n  border-radius: 0.25rem;\r\n  bottom: 0;\r\n}\r\n.code-panel .code {\r\n  white-space: pre-line;\r\n  position: relative;\r\n  padding: 1rem;\r\n  background-color: #262626;\r\n  color: white;\r\n  font-size: 12px;\r\n  border-bottom-left-radius: 0.5rem;\r\n  border-bottom-right-radius: 0.5rem;\r\n  font-family: ui-monospace, Menlo, Monaco, 'Roboto Mono', 'Oxygen Mono', 'Ubuntu Monospace', 'Source Code Pro',\r\n    'Droid Sans Mono', 'Courier New', monospace;\r\n}\r\n.code-panel .button-copy {\r\n  position: absolute;\r\n  right: 0;\r\n  bottom: 0;\r\n  padding: 0.5rem;\r\n  cursor: pointer;\r\n  border: none;\r\n  border-radius: 0.25rem;\r\n  background-color: black;\r\n  color: white;\r\n}\r\n"],sourceRoot:""}]);const o=i},8743:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),l=n.n(a),r=n(3645),i=n.n(r)()(l());i.push([e.id,"\r\n  .demo-page .fd-panel + .fd-panel {\r\n    margin-top: 2rem;\r\n  }\n.demo-page .fd-panel__header {\r\n    padding: 0 2rem;\r\n  }\n.demo-page .fd-panel__content {\r\n    padding: 0 2rem;\r\n    border-bottom: 0;\r\n  }\n.demo-page .demo-page-item-title {\r\n    margin-top : 1rem;\r\n  }\r\n\r\n","",{version:3,sources:["webpack://./src/components/common/DemoPage.css"],names:[],mappings:";EACE;IACE,gBAAgB;EAClB;AACA;IACE,eAAe;EACjB;AACA;IACE,eAAe;IACf,gBAAgB;EAClB;AACA;IACE,iBAAiB;EACnB",sourcesContent:[".demo-page {\r\n  & .fd-panel + .fd-panel {\r\n    margin-top: 2rem;\r\n  }\r\n  & .fd-panel__header {\r\n    padding: 0 2rem;\r\n  }\r\n  & .fd-panel__content {\r\n    padding: 0 2rem;\r\n    border-bottom: 0;\r\n  }\r\n  & .demo-page-item-title {\r\n    margin-top : 1rem;\r\n  }\r\n}\r\n\r\n"],sourceRoot:""}]);const o=i},5339:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),l=n.n(a),r=n(3645),i=n.n(r)()(l());i.push([e.id,".fd-form-select.fd-form-item--horizontal .fd-select__control {\r\n  margin: 0;\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/form/FormSelect.css"],names:[],mappings:"AAAA;EACE,SAAS;AACX",sourcesContent:[".fd-form-select.fd-form-item--horizontal .fd-select__control {\r\n  margin: 0;\r\n}\r\n"],sourceRoot:""}]);const o=i},2785:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),l=n.n(a),r=n(3645),i=n.n(r)()(l());i.push([e.id,".fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n@media (min-width: 600px) {\r\n  .fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n    padding: 0 2rem;\r\n  }\r\n}\r\n\r\n@media (min-width: 1400px) {\r\n  .fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n    padding: 0 3rem;\r\n  }\r\n}","",{version:3,sources:["webpack://./src/lib/components/icontabbar/IconTabBar.css"],names:[],mappings:"AAAA;EACE,iBAAiB;AACnB;;AAEA;EACE;IACE,eAAe;EACjB;AACF;;AAEA;EACE;IACE,eAAe;EACjB;AACF",sourcesContent:[".fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n@media (min-width: 600px) {\r\n  .fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n    padding: 0 2rem;\r\n  }\r\n}\r\n\r\n@media (min-width: 1400px) {\r\n  .fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n    padding: 0 3rem;\r\n  }\r\n}"],sourceRoot:""}]);const o=i},1976:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),l=n.n(a),r=n(3645),i=n.n(r)()(l());i.push([e.id,".ap-fd-page {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n.ap-fd-page .ap-fd-page__content {\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  overflow: auto;\r\n}\r\n\r\n.ap-fd-page .ap-fd-page__content .ap-fd-page__body {\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n\r\n  background: var(--sapBackgroundColor);\r\n}\r\n\r\n.ap-fd-page .ap-fd-page__content .ap-fd-page__footer {\r\n  flex-shrink: 0;\r\n  flex-basis: 100px;\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/page/Page.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;;EAEtB,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,aAAa;;EAEb,aAAa;EACb,sBAAsB;;EAEtB,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,aAAa;;EAEb,qCAAqC;AACvC;;AAEA;EACE,cAAc;EACd,iBAAiB;AACnB",sourcesContent:[".ap-fd-page {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n.ap-fd-page .ap-fd-page__content {\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  overflow: auto;\r\n}\r\n\r\n.ap-fd-page .ap-fd-page__content .ap-fd-page__body {\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n\r\n  background: var(--sapBackgroundColor);\r\n}\r\n\r\n.ap-fd-page .ap-fd-page__content .ap-fd-page__footer {\r\n  flex-shrink: 0;\r\n  flex-basis: 100px;\r\n}\r\n"],sourceRoot:""}]);const o=i},1306:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),l=n.n(a),r=n(3645),i=n.n(r)()(l());i.push([e.id,".ap-fd-page-header {\r\n  flex-shrink: 0;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n\r\n  background: var(--sapPageHeader_Background);\r\n  color: var(--sapPageHeader_TextColor);\r\n\r\n  position: relative;\r\n}\r\n\r\n@media screen and (min-width: 600px) {\r\n  .ap-fd-page-header {\r\n    padding-left: 2rem;\r\n    padding-right: 2rem;\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 1400px) {\r\n  .ap-fd-page-header {\r\n    padding-left: 3rem;\r\n    padding-right: 3rem;\r\n  }\r\n}\r\n\r\n.ap-fd-page-header .ap-fd-page-header__controls {\r\n  padding-top: 0.5rem;\r\n  padding-bottom: 1rem;\r\n}\r\n\r\n.ap-fd-page-header.ap-fd-page-header--expanded .ap-fd-page-header__controls {\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.ap-fd-page-header .ap-fd-page-header__controls .ap-fd-page-header__controls__breadcrumb {\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.ap-fd-page-header .ap-fd-page-header__controls .ap-fd-page-header__controls__title {\r\n  display: flex;\r\n}\r\n\r\n.ap-fd-page-header\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__avatar {\r\n  margin-right: 1rem;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.ap-fd-page-header\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__title {\r\n  color: var(--sapObjectHeader_Title_TextColor);\r\n  font-family: var(--sapObjectHeader_Title_FontFamily);\r\n  font-size: var(--sapObjectHeader_Title_SnappedFontSize);\r\n  font-weight: bold;\r\n  margin-top: -0.2rem;\r\n}\r\n\r\n.ap-fd-page-header.ap-fd-page-header--expanded\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__title {\r\n  font-size: var(--sapFontHeader1Size);\r\n  margin-top: 0;\r\n}\r\n\r\n.ap-fd-page-header\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__subtitle {\r\n  font-family: var(--sapFontFamily);\r\n  font-size: var(--sapFontSize);\r\n  font-weight: normal;\r\n  color: var(--sapContent_LabelColor);\r\n}\r\n\r\n.ap-fd-page-header.ap-fd-page-header--expanded\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__subtitle {\r\n  margin-top: 0.25rem;\r\n}\r\n\r\n.ap-fd-page-header\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__actions {\r\n  flex-grow: 1;\r\n  padding: 0;\r\n  height: 2rem;\r\n}\r\n\r\n\r\n.ap-fd-page-header .ap-fd-page-header__content {\r\n  padding-top: 1rem;\r\n  padding-bottom: 1rem;\r\n}\r\n\r\n.ap-fd-page-header .ap-fd-page-header__content .ap-fd-page-header__content__avatar {\r\n  margin-right: 1rem;\r\n}\r\n.ap-fd-page-header .ap-fd-page-header__content .ap-fd-page-header-attribute:last-child {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n\r\n.ap-fd-page-header .ap-fd-page-header__expander {\r\n  position: absolute;\r\n  top: 100%;\r\n  height: 0;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 0 -2rem;\r\n  z-index: 5;\r\n}\r\n.ap-fd-page-header .ap-fd-page-header__expander:before {\r\n  content: '';\r\n  background: linear-gradient(\r\n    0.25turn,\r\n    var(--sapPageHeader_Background),\r\n    var(--sapButton_BorderColor),\r\n    var(--sapPageHeader_Background)\r\n  );\r\n  height: 1px;\r\n  position: absolute;\r\n  right: calc(50% - 200px);\r\n  left: calc(50% - 200px);\r\n}\r\n.ap-fd-page-header .ap-fd-page-header__expander .ap-fd-page-header__expander-button {\r\n  width: 1.5rem;\r\n  height: 1.5rem;\r\n  min-width: 0;\r\n}\r\n.ap-fd-page-header .ap-fd-page-header__expander .ap-fd-page-header__expander-button i {\r\n  font-size: 0.75rem;\r\n}\r\n\r\n.ap-fd-page\r\n  .ap-fd-page-header\r\n  .ap-fd-page-header__expander\r\n  .ap-fd-page-header__expander-button\r\n  + .ap-fd-page-header__expander-button {\r\n  margin-left: 0.35rem;\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/page/PageHeader.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,oBAAoB;EACpB,qBAAqB;;EAErB,2CAA2C;EAC3C,qCAAqC;;EAErC,kBAAkB;AACpB;;AAEA;EACE;IACE,kBAAkB;IAClB,mBAAmB;EACrB;AACF;;AAEA;EACE;IACE,kBAAkB;IAClB,mBAAmB;EACrB;AACF;;AAEA;EACE,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,sBAAsB;AACxB;;AAEA;EACE,aAAa;AACf;;AAEA;;;;EAIE,kBAAkB;EAClB,cAAc;AAChB;;AAEA;;;;EAIE,6CAA6C;EAC7C,oDAAoD;EACpD,uDAAuD;EACvD,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;;;;EAIE,oCAAoC;EACpC,aAAa;AACf;;AAEA;;;;EAIE,iCAAiC;EACjC,6BAA6B;EAC7B,mBAAmB;EACnB,mCAAmC;AACrC;;AAEA;;;;EAIE,mBAAmB;AACrB;;AAEA;;;;EAIE,YAAY;EACZ,UAAU;EACV,YAAY;AACd;;;AAGA;EACE,iBAAiB;EACjB,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,mBAAmB;AACrB;;;AAGA;EACE,kBAAkB;EAClB,SAAS;EACT,SAAS;EACT,WAAW;EACX,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,eAAe;EACf,UAAU;AACZ;AACA;EACE,WAAW;EACX;;;;;GAKC;EACD,WAAW;EACX,kBAAkB;EAClB,wBAAwB;EACxB,uBAAuB;AACzB;AACA;EACE,aAAa;EACb,cAAc;EACd,YAAY;AACd;AACA;EACE,kBAAkB;AACpB;;AAEA;;;;;EAKE,oBAAoB;AACtB",sourcesContent:[".ap-fd-page-header {\r\n  flex-shrink: 0;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n\r\n  background: var(--sapPageHeader_Background);\r\n  color: var(--sapPageHeader_TextColor);\r\n\r\n  position: relative;\r\n}\r\n\r\n@media screen and (min-width: 600px) {\r\n  .ap-fd-page-header {\r\n    padding-left: 2rem;\r\n    padding-right: 2rem;\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 1400px) {\r\n  .ap-fd-page-header {\r\n    padding-left: 3rem;\r\n    padding-right: 3rem;\r\n  }\r\n}\r\n\r\n.ap-fd-page-header .ap-fd-page-header__controls {\r\n  padding-top: 0.5rem;\r\n  padding-bottom: 1rem;\r\n}\r\n\r\n.ap-fd-page-header.ap-fd-page-header--expanded .ap-fd-page-header__controls {\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.ap-fd-page-header .ap-fd-page-header__controls .ap-fd-page-header__controls__breadcrumb {\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n.ap-fd-page-header .ap-fd-page-header__controls .ap-fd-page-header__controls__title {\r\n  display: flex;\r\n}\r\n\r\n.ap-fd-page-header\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__avatar {\r\n  margin-right: 1rem;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.ap-fd-page-header\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__title {\r\n  color: var(--sapObjectHeader_Title_TextColor);\r\n  font-family: var(--sapObjectHeader_Title_FontFamily);\r\n  font-size: var(--sapObjectHeader_Title_SnappedFontSize);\r\n  font-weight: bold;\r\n  margin-top: -0.2rem;\r\n}\r\n\r\n.ap-fd-page-header.ap-fd-page-header--expanded\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__title {\r\n  font-size: var(--sapFontHeader1Size);\r\n  margin-top: 0;\r\n}\r\n\r\n.ap-fd-page-header\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__subtitle {\r\n  font-family: var(--sapFontFamily);\r\n  font-size: var(--sapFontSize);\r\n  font-weight: normal;\r\n  color: var(--sapContent_LabelColor);\r\n}\r\n\r\n.ap-fd-page-header.ap-fd-page-header--expanded\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__subtitle {\r\n  margin-top: 0.25rem;\r\n}\r\n\r\n.ap-fd-page-header\r\n  .ap-fd-page-header__controls\r\n  .ap-fd-page-header__controls__title\r\n  .ap-fd-page-header__controls__title__actions {\r\n  flex-grow: 1;\r\n  padding: 0;\r\n  height: 2rem;\r\n}\r\n\r\n\r\n.ap-fd-page-header .ap-fd-page-header__content {\r\n  padding-top: 1rem;\r\n  padding-bottom: 1rem;\r\n}\r\n\r\n.ap-fd-page-header .ap-fd-page-header__content .ap-fd-page-header__content__avatar {\r\n  margin-right: 1rem;\r\n}\r\n.ap-fd-page-header .ap-fd-page-header__content .ap-fd-page-header-attribute:last-child {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n\r\n.ap-fd-page-header .ap-fd-page-header__expander {\r\n  position: absolute;\r\n  top: 100%;\r\n  height: 0;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 0 -2rem;\r\n  z-index: 5;\r\n}\r\n.ap-fd-page-header .ap-fd-page-header__expander:before {\r\n  content: '';\r\n  background: linear-gradient(\r\n    0.25turn,\r\n    var(--sapPageHeader_Background),\r\n    var(--sapButton_BorderColor),\r\n    var(--sapPageHeader_Background)\r\n  );\r\n  height: 1px;\r\n  position: absolute;\r\n  right: calc(50% - 200px);\r\n  left: calc(50% - 200px);\r\n}\r\n.ap-fd-page-header .ap-fd-page-header__expander .ap-fd-page-header__expander-button {\r\n  width: 1.5rem;\r\n  height: 1.5rem;\r\n  min-width: 0;\r\n}\r\n.ap-fd-page-header .ap-fd-page-header__expander .ap-fd-page-header__expander-button i {\r\n  font-size: 0.75rem;\r\n}\r\n\r\n.ap-fd-page\r\n  .ap-fd-page-header\r\n  .ap-fd-page-header__expander\r\n  .ap-fd-page-header__expander-button\r\n  + .ap-fd-page-header__expander-button {\r\n  margin-left: 0.35rem;\r\n}\r\n"],sourceRoot:""}]);const o=i},1322:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),l=n.n(a),r=n(3645),i=n.n(r)()(l());i.push([e.id,".ap-fd-page-header-attribute {\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 400px;\r\n}\r\n\r\n.ap-fd-page-header-attribute .ap-fd-page-header-attribute__label {\r\n  color: var(--sapContent_LabelColor);\r\n  font-family: var(--sapFontFamily);\r\n  font-size: var(--sapFontSize);\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.ap-fd-page-header-attribute .ap-fd-page-header-attribute__control.fd-object-status {\r\n  font-size: var(--sapObjectHeader_Title_SnappedFontSize);\r\n}\r\n\r\n.ap-fd-page-header-attribute .ap-fd-page-header-attribute__control.fd-object-text {\r\n  color: var(--sapPageHeader_TextColor);\r\n  font-family: var(--sapFontFamily);\r\n  font-size: var(--sapFontSize);\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/page/PageHeaderAttribute.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,gBAAgB;AAClB;;AAEA;EACE,mCAAmC;EACnC,iCAAiC;EACjC,6BAA6B;EAC7B,qBAAqB;AACvB;;AAEA;EACE,uDAAuD;AACzD;;AAEA;EACE,qCAAqC;EACrC,iCAAiC;EACjC,6BAA6B;AAC/B",sourcesContent:[".ap-fd-page-header-attribute {\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 400px;\r\n}\r\n\r\n.ap-fd-page-header-attribute .ap-fd-page-header-attribute__label {\r\n  color: var(--sapContent_LabelColor);\r\n  font-family: var(--sapFontFamily);\r\n  font-size: var(--sapFontSize);\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.ap-fd-page-header-attribute .ap-fd-page-header-attribute__control.fd-object-status {\r\n  font-size: var(--sapObjectHeader_Title_SnappedFontSize);\r\n}\r\n\r\n.ap-fd-page-header-attribute .ap-fd-page-header-attribute__control.fd-object-text {\r\n  color: var(--sapPageHeader_TextColor);\r\n  font-family: var(--sapFontFamily);\r\n  font-size: var(--sapFontSize);\r\n}\r\n"],sourceRoot:""}]);const o=i},4605:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),l=n.n(a),r=n(3645),i=n.n(r)()(l());i.push([e.id,".fd-shellbar {\r\n  --sapContent_LabelColor: var(--sapShell_TextColor);\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/shellbar/ShellBar.css"],names:[],mappings:"AAAA;EACE,kDAAkD;AACpD",sourcesContent:[".fd-shellbar {\r\n  --sapContent_LabelColor: var(--sapShell_TextColor);\r\n}\r\n"],sourceRoot:""}]);const o=i},348:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),l=n.n(a),r=n(3645),i=n.n(r)()(l());i.push([e.id,".fd-table .fd-table__row--activable:active[\\:has\\(button\\:active\\)],\r\n.fd-table .fd-table__row--activable:active[\\:has\\(button\\:active\\)] .fd-table__cell,\r\n.fd-table .fd-table__row--activable:active[\\:has\\(button\\:active\\)] .fd-table__cell .fd-table__cell__label {\r\n  background-color: var(--sapList_Background) !important;\r\n  color: var(--sapTextColor) !important;\r\n}\r\n.fd-table .fd-table__row--activable:active:has(button:active),\r\n.fd-table .fd-table__row--activable:active:has(button:active) .fd-table__cell,\r\n.fd-table .fd-table__row--activable:active:has(button:active) .fd-table__cell .fd-table__cell__label {\r\n  background-color: var(--sapList_Background) !important;\r\n  color: var(--sapTextColor) !important;\r\n}\r\n.fd-table .fd-table__row--activable:active[\\:has\\(button\\:active\\)] .fd-table__cell {\r\n  border-bottom-color: var(--sapList_BorderColor);\r\n}\r\n.fd-table .fd-table__row--activable:active:has(button:active) .fd-table__cell {\r\n  border-bottom-color: var(--sapList_BorderColor);\r\n}\r\n.fd-table .fd-table__row--activable:active[\\:has\\(button\\:active\\)] .fd-table__cell a {\r\n  color: -webkit-link !important;\r\n}\r\n.fd-table .fd-table__row--activable:active:has(button:active) .fd-table__cell a {\r\n  color: -webkit-link !important;\r\n}\r\n\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active[\\:has\\(button\\:active\\)],\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active[\\:has\\(button\\:active\\)] .fd-table__cell,\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active[\\:has\\(button\\:active\\)] .fd-table__cell .fd-table__cell__label {\r\n  background-color: var(--sapList_Hover_Background) !important;\r\n  color: var(--fdTable_Hover_Down_Color) !important;\r\n}\r\n\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active:has(button:active),\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active:has(button:active) .fd-table__cell,\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active:has(button:active) .fd-table__cell .fd-table__cell__label {\r\n  background-color: var(--sapList_Hover_Background) !important;\r\n  color: var(--fdTable_Hover_Down_Color) !important;\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/table/Table.css"],names:[],mappings:"AAAA;;;EAGE,sDAAsD;EACtD,qCAAqC;AACvC;AALA;;;EAGE,sDAAsD;EACtD,qCAAqC;AACvC;AACA;EACE,+CAA+C;AACjD;AAFA;EACE,+CAA+C;AACjD;AACA;EACE,8BAA8B;AAChC;AAFA;EACE,8BAA8B;AAChC;;AAEA;;;EAGE,4DAA4D;EAC5D,iDAAiD;AACnD;;AALA;;;EAGE,4DAA4D;EAC5D,iDAAiD;AACnD",sourcesContent:[".fd-table .fd-table__row--activable:active:has(button:active),\r\n.fd-table .fd-table__row--activable:active:has(button:active) .fd-table__cell,\r\n.fd-table .fd-table__row--activable:active:has(button:active) .fd-table__cell .fd-table__cell__label {\r\n  background-color: var(--sapList_Background) !important;\r\n  color: var(--sapTextColor) !important;\r\n}\r\n.fd-table .fd-table__row--activable:active:has(button:active) .fd-table__cell {\r\n  border-bottom-color: var(--sapList_BorderColor);\r\n}\r\n.fd-table .fd-table__row--activable:active:has(button:active) .fd-table__cell a {\r\n  color: -webkit-link !important;\r\n}\r\n\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active:has(button:active),\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active:has(button:active) .fd-table__cell,\r\n.fd-table .fd-table__row--hoverable.fd-table__row--activable:active:has(button:active) .fd-table__cell .fd-table__cell__label {\r\n  background-color: var(--sapList_Hover_Background) !important;\r\n  color: var(--fdTable_Hover_Down_Color) !important;\r\n}\r\n"],sourceRoot:""}]);const o=i},1047:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7537),l=n.n(a),r=n(3645),i=n.n(r)()(l());i.push([e.id,".fd-section .fd-toolbar {\r\n  padding: 0 0 0 0.25rem;\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/toolbar/Toolbar.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB",sourcesContent:[".fd-section .fd-toolbar {\r\n  padding: 0 0 0 0.25rem;\r\n}\r\n"],sourceRoot:""}]);const o=i},3645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,l,r){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(a)for(var o=0;o<this.length;o++){var u=this[o][0];null!=u&&(i[u]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);a&&i[s[0]]||(void 0!==r&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=r),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),l&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=l):s[4]="".concat(l)),t.push(s))}},t}},7537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),r="/*# ".concat(l," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},8679:(e,t,n)=>{var a=n(9864),l={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},r={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},o={};function u(e){return a.isMemo(e)?i:o[e.$$typeof]||l}o[a.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},o[a.Memo]=i;var c=Object.defineProperty,s=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,m=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,n,a){if("string"!=typeof n){if(p){var l=m(n);l&&l!==p&&e(t,l,a)}var i=s(n);d&&(i=i.concat(d(n)));for(var o=u(t),v=u(n),h=0;h<i.length;++h){var b=i[h];if(!(r[b]||a&&a[b]||v&&v[b]||o&&o[b])){var g=f(n,b);try{c(t,b,g)}catch(e){}}}}return t}},4448:(e,t,n)=>{var a=n(7294),l=n(3840);function r(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,o={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(o[e]=t,e=0;e<t.length;e++)i.add(t[e])}var s=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,m={},p={};function v(e,t,n,a,l,r,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=a,this.attributeNamespace=l,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=r,this.removeEmptyString=i}var h={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){h[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];h[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){h[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){h[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){h[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){h[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){h[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){h[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){h[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var b=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function E(e,t,n,a){var l=h.hasOwnProperty(t)?h[t]:null;(null!==l?0!==l.type:a||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,a){if(null==t||function(e,t,n,a){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!a&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,a))return!0;if(a)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,l,a)&&(n=null),a||null===l?function(e){return!!d.call(p,e)||!d.call(m,e)&&(f.test(e)?p[e]=!0:(m[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):l.mustUseProperty?e[l.propertyName]=null===n?3!==l.type&&"":n:(t=l.attributeName,a=l.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(l=l.type)||4===l&&!0===n?"":""+n,a?e.setAttributeNS(a,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(b,g);h[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(b,g);h[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(b,g);h[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){h[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),h.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){h[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var y=a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,_=Symbol.for("react.element"),A=Symbol.for("react.portal"),S=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),x=Symbol.for("react.profiler"),w=Symbol.for("react.provider"),O=Symbol.for("react.context"),T=Symbol.for("react.forward_ref"),L=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),I=Symbol.for("react.memo"),N=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var D=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var k=Symbol.iterator;function R(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=k&&e[k]||e["@@iterator"])?e:null}var M,B=Object.assign;function j(e){if(void 0===M)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);M=t&&t[1]||""}return"\n"+M+e}var z=!1;function F(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var a=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){a=e}e.call(t.prototype)}else{try{throw Error()}catch(e){a=e}e()}}catch(t){if(t&&a&&"string"==typeof t.stack){for(var l=t.stack.split("\n"),r=a.stack.split("\n"),i=l.length-1,o=r.length-1;1<=i&&0<=o&&l[i]!==r[o];)o--;for(;1<=i&&0<=o;i--,o--)if(l[i]!==r[o]){if(1!==i||1!==o)do{if(i--,0>--o||l[i]!==r[o]){var u="\n"+l[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=o);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?j(e):""}function H(e){switch(e.tag){case 5:return j(e.type);case 16:return j("Lazy");case 13:return j("Suspense");case 19:return j("SuspenseList");case 0:case 2:case 15:return F(e.type,!1);case 11:return F(e.type.render,!1);case 1:return F(e.type,!0);default:return""}}function U(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case A:return"Portal";case x:return"Profiler";case C:return"StrictMode";case L:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case w:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case I:return null!==(t=e.displayName||null)?t:U(e.type)||"Memo";case N:t=e._payload,e=e._init;try{return U(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return U(t);case 8:return t===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function $(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),a=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var l=n.get,r=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return l.call(this)},set:function(e){a=""+e,r.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return a},setValue:function(e){a=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),a="";return e&&(a=V(e)?e.checked?"true":"false":e.value),(e=a)!==n&&(t.setValue(e),!0)}function X(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var n=t.checked;return B({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Z(e,t){var n=null==t.defaultValue?"":t.defaultValue,a=null!=t.checked?t.checked:t.defaultChecked;n=$(null!=t.value?t.value:n),e._wrapperState={initialChecked:a,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function K(e,t){null!=(t=t.checked)&&E(e,"checked",t,!1)}function Q(e,t){K(e,t);var n=$(t.value),a=t.type;if(null!=n)"number"===a?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===a||"reset"===a)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,$(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var a=t.type;if(!("submit"!==a&&"reset"!==a||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&X(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,a){if(e=e.options,t){t={};for(var l=0;l<n.length;l++)t["$"+n[l]]=!0;for(n=0;n<e.length;n++)l=t.hasOwnProperty("$"+e[n].value),e[n].selected!==l&&(e[n].selected=l),l&&a&&(e[n].defaultSelected=!0)}else{for(n=""+$(n),t=null,l=0;l<e.length;l++){if(e[l].value===n)return e[l].selected=!0,void(a&&(e[l].defaultSelected=!0));null!==t||e[l].disabled||(t=e[l])}null!==t&&(t.selected=!0)}}function ae(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(r(91));return B({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(r(92));if(te(n)){if(1<n.length)throw Error(r(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:$(n)}}function re(e,t){var n=$(t.value),a=$(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=a&&(e.defaultValue=""+a)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function oe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?oe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,se,de=(se=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,a){MSApp.execUnsafeLocalFunction((function(){return se(e,t)}))}:se);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var me={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function ve(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||me.hasOwnProperty(e)&&me[e]?(""+t).trim():t+"px"}function he(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var a=0===n.indexOf("--"),l=ve(n,t[n],a);"float"===n&&(n="cssFloat"),a?e.setProperty(n,l):e[n]=l}}Object.keys(me).forEach((function(e){pe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),me[t]=me[e]}))}));var be=B({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(be[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(r(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(r(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(r(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(r(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ye=null;function _e(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ae=null,Se=null,Ce=null;function xe(e){if(e=El(e)){if("function"!=typeof Ae)throw Error(r(280));var t=e.stateNode;t&&(t=_l(t),Ae(e.stateNode,e.type,t))}}function we(e){Se?Ce?Ce.push(e):Ce=[e]:Se=e}function Oe(){if(Se){var e=Se,t=Ce;if(Ce=Se=null,xe(e),t)for(e=0;e<t.length;e++)xe(t[e])}}function Te(e,t){return e(t)}function Le(){}var Pe=!1;function Ie(e,t,n){if(Pe)return e(t,n);Pe=!0;try{return Te(e,t,n)}finally{Pe=!1,(null!==Se||null!==Ce)&&(Le(),Oe())}}function Ne(e,t){var n=e.stateNode;if(null===n)return null;var a=_l(n);if(null===a)return null;n=a[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(a=!a.disabled)||(a=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!a;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(r(231,t,typeof n));return n}var De=!1;if(s)try{var ke={};Object.defineProperty(ke,"passive",{get:function(){De=!0}}),window.addEventListener("test",ke,ke),window.removeEventListener("test",ke,ke)}catch(se){De=!1}function Re(e,t,n,a,l,r,i,o,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Me=!1,Be=null,je=!1,ze=null,Fe={onError:function(e){Me=!0,Be=e}};function He(e,t,n,a,l,r,i,o,u){Me=!1,Be=null,Re.apply(Fe,arguments)}function Ue(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function $e(e){if(Ue(e)!==e)throw Error(r(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ue(e)))throw Error(r(188));return t!==e?null:e}for(var n=e,a=t;;){var l=n.return;if(null===l)break;var i=l.alternate;if(null===i){if(null!==(a=l.return)){n=a;continue}break}if(l.child===i.child){for(i=l.child;i;){if(i===n)return $e(l),e;if(i===a)return $e(l),t;i=i.sibling}throw Error(r(188))}if(n.return!==a.return)n=l,a=i;else{for(var o=!1,u=l.child;u;){if(u===n){o=!0,n=l,a=i;break}if(u===a){o=!0,a=l,n=i;break}u=u.sibling}if(!o){for(u=i.child;u;){if(u===n){o=!0,n=i,a=l;break}if(u===a){o=!0,a=i,n=l;break}u=u.sibling}if(!o)throw Error(r(189))}}if(n.alternate!==a)throw Error(r(190))}if(3!==n.tag)throw Error(r(188));return n.stateNode.current===n?e:t}(e))?Ge(e):null}function Ge(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ge(e);if(null!==t)return t;e=e.sibling}return null}var qe=l.unstable_scheduleCallback,Xe=l.unstable_cancelCallback,Ye=l.unstable_shouldYield,Ze=l.unstable_requestPaint,Ke=l.unstable_now,Qe=l.unstable_getCurrentPriorityLevel,Je=l.unstable_ImmediatePriority,et=l.unstable_UserBlockingPriority,tt=l.unstable_NormalPriority,nt=l.unstable_LowPriority,at=l.unstable_IdlePriority,lt=null,rt=null,it=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(ot(e)/ut|0)|0},ot=Math.log,ut=Math.LN2,ct=64,st=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var a=0,l=e.suspendedLanes,r=e.pingedLanes,i=268435455&n;if(0!==i){var o=i&~l;0!==o?a=dt(o):0!=(r&=i)&&(a=dt(r))}else 0!=(i=n&~l)?a=dt(i):0!==r&&(a=dt(r));if(0===a)return 0;if(0!==t&&t!==a&&0==(t&l)&&((l=a&-a)>=(r=t&-t)||16===l&&0!=(4194240&r)))return t;if(0!=(4&a)&&(a|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=a;0<t;)l=1<<(n=31-it(t)),a|=e[n],t&=~l;return a}function mt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function pt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function vt(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function ht(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function bt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var a=31-it(n),l=1<<a;l&t|e[a]&t&&(e[a]|=t),n&=~l}}var Et=0;function yt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var _t,At,St,Ct,xt,wt=!1,Ot=[],Tt=null,Lt=null,Pt=null,It=new Map,Nt=new Map,Dt=[],kt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Rt(e,t){switch(e){case"focusin":case"focusout":Tt=null;break;case"dragenter":case"dragleave":Lt=null;break;case"mouseover":case"mouseout":Pt=null;break;case"pointerover":case"pointerout":It.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Nt.delete(t.pointerId)}}function Mt(e,t,n,a,l,r){return null===e||e.nativeEvent!==r?(e={blockedOn:t,domEventName:n,eventSystemFlags:a,nativeEvent:r,targetContainers:[l]},null!==t&&null!==(t=El(t))&&At(t),e):(e.eventSystemFlags|=a,t=e.targetContainers,null!==l&&-1===t.indexOf(l)&&t.push(l),e)}function Bt(e){var t=gl(e.target);if(null!==t){var n=Ue(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void xt(e.priority,(function(){St(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function jt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=El(n))&&At(t),e.blockedOn=n,!1;var a=new(n=e.nativeEvent).constructor(n.type,n);ye=a,n.target.dispatchEvent(a),ye=null,t.shift()}return!0}function zt(e,t,n){jt(e)&&n.delete(t)}function Ft(){wt=!1,null!==Tt&&jt(Tt)&&(Tt=null),null!==Lt&&jt(Lt)&&(Lt=null),null!==Pt&&jt(Pt)&&(Pt=null),It.forEach(zt),Nt.forEach(zt)}function Ht(e,t){e.blockedOn===t&&(e.blockedOn=null,wt||(wt=!0,l.unstable_scheduleCallback(l.unstable_NormalPriority,Ft)))}function Ut(e){function t(t){return Ht(t,e)}if(0<Ot.length){Ht(Ot[0],e);for(var n=1;n<Ot.length;n++){var a=Ot[n];a.blockedOn===e&&(a.blockedOn=null)}}for(null!==Tt&&Ht(Tt,e),null!==Lt&&Ht(Lt,e),null!==Pt&&Ht(Pt,e),It.forEach(t),Nt.forEach(t),n=0;n<Dt.length;n++)(a=Dt[n]).blockedOn===e&&(a.blockedOn=null);for(;0<Dt.length&&null===(n=Dt[0]).blockedOn;)Bt(n),null===n.blockedOn&&Dt.shift()}var Wt=y.ReactCurrentBatchConfig,$t=!0;function Vt(e,t,n,a){var l=Et,r=Wt.transition;Wt.transition=null;try{Et=1,qt(e,t,n,a)}finally{Et=l,Wt.transition=r}}function Gt(e,t,n,a){var l=Et,r=Wt.transition;Wt.transition=null;try{Et=4,qt(e,t,n,a)}finally{Et=l,Wt.transition=r}}function qt(e,t,n,a){if($t){var l=Yt(e,t,n,a);if(null===l)$a(e,t,a,Xt,n),Rt(e,a);else if(function(e,t,n,a,l){switch(t){case"focusin":return Tt=Mt(Tt,e,t,n,a,l),!0;case"dragenter":return Lt=Mt(Lt,e,t,n,a,l),!0;case"mouseover":return Pt=Mt(Pt,e,t,n,a,l),!0;case"pointerover":var r=l.pointerId;return It.set(r,Mt(It.get(r)||null,e,t,n,a,l)),!0;case"gotpointercapture":return r=l.pointerId,Nt.set(r,Mt(Nt.get(r)||null,e,t,n,a,l)),!0}return!1}(l,e,t,n,a))a.stopPropagation();else if(Rt(e,a),4&t&&-1<kt.indexOf(e)){for(;null!==l;){var r=El(l);if(null!==r&&_t(r),null===(r=Yt(e,t,n,a))&&$a(e,t,a,Xt,n),r===l)break;l=r}null!==l&&a.stopPropagation()}else $a(e,t,a,null,n)}}var Xt=null;function Yt(e,t,n,a){if(Xt=null,null!==(e=gl(e=_e(a))))if(null===(t=Ue(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Xt=e,null}function Zt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Qe()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case at:return 536870912;default:return 16}default:return 16}}var Kt=null,Qt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Qt,a=n.length,l="value"in Kt?Kt.value:Kt.textContent,r=l.length;for(e=0;e<a&&n[e]===l[e];e++);var i=a-e;for(t=1;t<=i&&n[a-t]===l[r-t];t++);return Jt=l.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function an(){return!1}function ln(e){function t(t,n,a,l,r){for(var i in this._reactName=t,this._targetInst=a,this.type=n,this.nativeEvent=l,this.target=r,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(l):l[i]);return this.isDefaultPrevented=(null!=l.defaultPrevented?l.defaultPrevented:!1===l.returnValue)?nn:an,this.isPropagationStopped=an,this}return B(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var rn,on,un,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=ln(cn),dn=B({},cn,{view:0,detail:0}),fn=ln(dn),mn=B({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:xn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(rn=e.screenX-un.screenX,on=e.screenY-un.screenY):on=rn=0,un=e),rn)},movementY:function(e){return"movementY"in e?e.movementY:on}}),pn=ln(mn),vn=ln(B({},mn,{dataTransfer:0})),hn=ln(B({},dn,{relatedTarget:0})),bn=ln(B({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=B({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),En=ln(gn),yn=ln(B({},cn,{data:0})),_n={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},An={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function xn(){return Cn}var wn=B({},dn,{key:function(e){if(e.key){var t=_n[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?An[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:xn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),On=ln(wn),Tn=ln(B({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Ln=ln(B({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:xn})),Pn=ln(B({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),In=B({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=ln(In),Dn=[9,13,27,32],kn=s&&"CompositionEvent"in window,Rn=null;s&&"documentMode"in document&&(Rn=document.documentMode);var Mn=s&&"TextEvent"in window&&!Rn,Bn=s&&(!kn||Rn&&8<Rn&&11>=Rn),jn=String.fromCharCode(32),zn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Dn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Hn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Vn(e,t,n,a){we(a),0<(t=Ga(t,"onChange")).length&&(n=new sn("onChange","change",null,n,a),e.push({event:n,listeners:t}))}var Gn=null,qn=null;function Xn(e){ja(e,0)}function Yn(e){if(q(yl(e)))return e}function Zn(e,t){if("change"===e)return t}var Kn=!1;if(s){var Qn;if(s){var Jn="oninput"in document;if(!Jn){var ea=document.createElement("div");ea.setAttribute("oninput","return;"),Jn="function"==typeof ea.oninput}Qn=Jn}else Qn=!1;Kn=Qn&&(!document.documentMode||9<document.documentMode)}function ta(){Gn&&(Gn.detachEvent("onpropertychange",na),qn=Gn=null)}function na(e){if("value"===e.propertyName&&Yn(qn)){var t=[];Vn(t,qn,e,_e(e)),Ie(Xn,t)}}function aa(e,t,n){"focusin"===e?(ta(),qn=n,(Gn=t).attachEvent("onpropertychange",na)):"focusout"===e&&ta()}function la(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(qn)}function ra(e,t){if("click"===e)return Yn(t)}function ia(e,t){if("input"===e||"change"===e)return Yn(t)}var oa="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ua(e,t){if(oa(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(a=0;a<n.length;a++){var l=n[a];if(!d.call(t,l)||!oa(e[l],t[l]))return!1}return!0}function ca(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sa(e,t){var n,a=ca(e);for(e=0;a;){if(3===a.nodeType){if(n=e+a.textContent.length,e<=t&&n>=t)return{node:a,offset:t-e};e=n}e:{for(;a;){if(a.nextSibling){a=a.nextSibling;break e}a=a.parentNode}a=void 0}a=ca(a)}}function da(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?da(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fa(){for(var e=window,t=X();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=X((e=t.contentWindow).document)}return t}function ma(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function pa(e){var t=fa(),n=e.focusedElem,a=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&da(n.ownerDocument.documentElement,n)){if(null!==a&&ma(n))if(t=a.start,void 0===(e=a.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var l=n.textContent.length,r=Math.min(a.start,l);a=void 0===a.end?r:Math.min(a.end,l),!e.extend&&r>a&&(l=a,a=r,r=l),l=sa(n,r);var i=sa(n,a);l&&i&&(1!==e.rangeCount||e.anchorNode!==l.node||e.anchorOffset!==l.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(l.node,l.offset),e.removeAllRanges(),r>a?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var va=s&&"documentMode"in document&&11>=document.documentMode,ha=null,ba=null,ga=null,Ea=!1;function ya(e,t,n){var a=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;Ea||null==ha||ha!==X(a)||(a="selectionStart"in(a=ha)&&ma(a)?{start:a.selectionStart,end:a.selectionEnd}:{anchorNode:(a=(a.ownerDocument&&a.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:a.anchorOffset,focusNode:a.focusNode,focusOffset:a.focusOffset},ga&&ua(ga,a)||(ga=a,0<(a=Ga(ba,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:a}),t.target=ha)))}function _a(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Aa={animationend:_a("Animation","AnimationEnd"),animationiteration:_a("Animation","AnimationIteration"),animationstart:_a("Animation","AnimationStart"),transitionend:_a("Transition","TransitionEnd")},Sa={},Ca={};function xa(e){if(Sa[e])return Sa[e];if(!Aa[e])return e;var t,n=Aa[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ca)return Sa[e]=n[t];return e}s&&(Ca=document.createElement("div").style,"AnimationEvent"in window||(delete Aa.animationend.animation,delete Aa.animationiteration.animation,delete Aa.animationstart.animation),"TransitionEvent"in window||delete Aa.transitionend.transition);var wa=xa("animationend"),Oa=xa("animationiteration"),Ta=xa("animationstart"),La=xa("transitionend"),Pa=new Map,Ia="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Na(e,t){Pa.set(e,t),u(t,[e])}for(var Da=0;Da<Ia.length;Da++){var ka=Ia[Da];Na(ka.toLowerCase(),"on"+(ka[0].toUpperCase()+ka.slice(1)))}Na(wa,"onAnimationEnd"),Na(Oa,"onAnimationIteration"),Na(Ta,"onAnimationStart"),Na("dblclick","onDoubleClick"),Na("focusin","onFocus"),Na("focusout","onBlur"),Na(La,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ra="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ma=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ra));function Ba(e,t,n){var a=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,a,l,i,o,u,c){if(He.apply(this,arguments),Me){if(!Me)throw Error(r(198));var s=Be;Me=!1,Be=null,je||(je=!0,ze=s)}}(a,t,void 0,e),e.currentTarget=null}function ja(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var a=e[n],l=a.event;a=a.listeners;e:{var r=void 0;if(t)for(var i=a.length-1;0<=i;i--){var o=a[i],u=o.instance,c=o.currentTarget;if(o=o.listener,u!==r&&l.isPropagationStopped())break e;Ba(l,o,c),r=u}else for(i=0;i<a.length;i++){if(u=(o=a[i]).instance,c=o.currentTarget,o=o.listener,u!==r&&l.isPropagationStopped())break e;Ba(l,o,c),r=u}}}if(je)throw e=ze,je=!1,ze=null,e}function za(e,t){var n=t[vl];void 0===n&&(n=t[vl]=new Set);var a=e+"__bubble";n.has(a)||(Wa(t,e,2,!1),n.add(a))}function Fa(e,t,n){var a=0;t&&(a|=4),Wa(n,e,a,t)}var Ha="_reactListening"+Math.random().toString(36).slice(2);function Ua(e){if(!e[Ha]){e[Ha]=!0,i.forEach((function(t){"selectionchange"!==t&&(Ma.has(t)||Fa(t,!1,e),Fa(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ha]||(t[Ha]=!0,Fa("selectionchange",!1,t))}}function Wa(e,t,n,a){switch(Zt(t)){case 1:var l=Vt;break;case 4:l=Gt;break;default:l=qt}n=l.bind(null,t,n,e),l=void 0,!De||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(l=!0),a?void 0!==l?e.addEventListener(t,n,{capture:!0,passive:l}):e.addEventListener(t,n,!0):void 0!==l?e.addEventListener(t,n,{passive:l}):e.addEventListener(t,n,!1)}function $a(e,t,n,a,l){var r=a;if(0==(1&t)&&0==(2&t)&&null!==a)e:for(;;){if(null===a)return;var i=a.tag;if(3===i||4===i){var o=a.stateNode.containerInfo;if(o===l||8===o.nodeType&&o.parentNode===l)break;if(4===i)for(i=a.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===l||8===u.nodeType&&u.parentNode===l))return;i=i.return}for(;null!==o;){if(null===(i=gl(o)))return;if(5===(u=i.tag)||6===u){a=r=i;continue e}o=o.parentNode}}a=a.return}Ie((function(){var a=r,l=_e(n),i=[];e:{var o=Pa.get(e);if(void 0!==o){var u=sn,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=On;break;case"focusin":c="focus",u=hn;break;case"focusout":c="blur",u=hn;break;case"beforeblur":case"afterblur":u=hn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=pn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Ln;break;case wa:case Oa:case Ta:u=bn;break;case La:u=Pn;break;case"scroll":u=fn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=En;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Tn}var s=0!=(4&t),d=!s&&"scroll"===e,f=s?null!==o?o+"Capture":null:o;s=[];for(var m,p=a;null!==p;){var v=(m=p).stateNode;if(5===m.tag&&null!==v&&(m=v,null!==f&&null!=(v=Ne(p,f))&&s.push(Va(p,v,m))),d)break;p=p.return}0<s.length&&(o=new u(o,c,null,n,l),i.push({event:o,listeners:s}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(o="mouseover"===e||"pointerover"===e)||n===ye||!(c=n.relatedTarget||n.fromElement)||!gl(c)&&!c[pl])&&(u||o)&&(o=l.window===l?l:(o=l.ownerDocument)?o.defaultView||o.parentWindow:window,u?(u=a,null!==(c=(c=n.relatedTarget||n.toElement)?gl(c):null)&&(c!==(d=Ue(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=a),u!==c)){if(s=pn,v="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(s=Tn,v="onPointerLeave",f="onPointerEnter",p="pointer"),d=null==u?o:yl(u),m=null==c?o:yl(c),(o=new s(v,p+"leave",u,n,l)).target=d,o.relatedTarget=m,v=null,gl(l)===a&&((s=new s(f,p+"enter",c,n,l)).target=m,s.relatedTarget=d,v=s),d=v,u&&c)e:{for(f=c,p=0,m=s=u;m;m=qa(m))p++;for(m=0,v=f;v;v=qa(v))m++;for(;0<p-m;)s=qa(s),p--;for(;0<m-p;)f=qa(f),m--;for(;p--;){if(s===f||null!==f&&s===f.alternate)break e;s=qa(s),f=qa(f)}s=null}else s=null;null!==u&&Xa(i,o,u,s,!1),null!==c&&null!==d&&Xa(i,d,c,s,!0)}if("select"===(u=(o=a?yl(a):window).nodeName&&o.nodeName.toLowerCase())||"input"===u&&"file"===o.type)var h=Zn;else if($n(o))if(Kn)h=ia;else{h=la;var b=aa}else(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(h=ra);switch(h&&(h=h(e,a))?Vn(i,h,n,l):(b&&b(e,o,a),"focusout"===e&&(b=o._wrapperState)&&b.controlled&&"number"===o.type&&ee(o,"number",o.value)),b=a?yl(a):window,e){case"focusin":($n(b)||"true"===b.contentEditable)&&(ha=b,ba=a,ga=null);break;case"focusout":ga=ba=ha=null;break;case"mousedown":Ea=!0;break;case"contextmenu":case"mouseup":case"dragend":Ea=!1,ya(i,n,l);break;case"selectionchange":if(va)break;case"keydown":case"keyup":ya(i,n,l)}var g;if(kn)e:{switch(e){case"compositionstart":var E="onCompositionStart";break e;case"compositionend":E="onCompositionEnd";break e;case"compositionupdate":E="onCompositionUpdate";break e}E=void 0}else Un?Fn(e,n)&&(E="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(E="onCompositionStart");E&&(Bn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==E?"onCompositionEnd"===E&&Un&&(g=en()):(Qt="value"in(Kt=l)?Kt.value:Kt.textContent,Un=!0)),0<(b=Ga(a,E)).length&&(E=new yn(E,e,null,n,l),i.push({event:E,listeners:b}),(g||null!==(g=Hn(n)))&&(E.data=g))),(g=Mn?function(e,t){switch(e){case"compositionend":return Hn(t);case"keypress":return 32!==t.which?null:(zn=!0,jn);case"textInput":return(e=t.data)===jn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!kn&&Fn(e,t)?(e=en(),Jt=Qt=Kt=null,Un=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Bn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(a=Ga(a,"onBeforeInput")).length&&(l=new yn("onBeforeInput","beforeinput",null,n,l),i.push({event:l,listeners:a}),l.data=g)}ja(i,t)}))}function Va(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ga(e,t){for(var n=t+"Capture",a=[];null!==e;){var l=e,r=l.stateNode;5===l.tag&&null!==r&&(l=r,null!=(r=Ne(e,n))&&a.unshift(Va(e,r,l)),null!=(r=Ne(e,t))&&a.push(Va(e,r,l))),e=e.return}return a}function qa(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Xa(e,t,n,a,l){for(var r=t._reactName,i=[];null!==n&&n!==a;){var o=n,u=o.alternate,c=o.stateNode;if(null!==u&&u===a)break;5===o.tag&&null!==c&&(o=c,l?null!=(u=Ne(n,r))&&i.unshift(Va(n,u,o)):l||null!=(u=Ne(n,r))&&i.push(Va(n,u,o))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Ya=/\r\n?/g,Za=/\u0000|\uFFFD/g;function Ka(e){return("string"==typeof e?e:""+e).replace(Ya,"\n").replace(Za,"")}function Qa(e,t,n){if(t=Ka(t),Ka(e)!==t&&n)throw Error(r(425))}function Ja(){}var el=null,tl=null;function nl(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var al="function"==typeof setTimeout?setTimeout:void 0,ll="function"==typeof clearTimeout?clearTimeout:void 0,rl="function"==typeof Promise?Promise:void 0,il="function"==typeof queueMicrotask?queueMicrotask:void 0!==rl?function(e){return rl.resolve(null).then(e).catch(ol)}:al;function ol(e){setTimeout((function(){throw e}))}function ul(e,t){var n=t,a=0;do{var l=n.nextSibling;if(e.removeChild(n),l&&8===l.nodeType)if("/$"===(n=l.data)){if(0===a)return e.removeChild(l),void Ut(t);a--}else"$"!==n&&"$?"!==n&&"$!"!==n||a++;n=l}while(n);Ut(t)}function cl(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function sl(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var dl=Math.random().toString(36).slice(2),fl="__reactFiber$"+dl,ml="__reactProps$"+dl,pl="__reactContainer$"+dl,vl="__reactEvents$"+dl,hl="__reactListeners$"+dl,bl="__reactHandles$"+dl;function gl(e){var t=e[fl];if(t)return t;for(var n=e.parentNode;n;){if(t=n[pl]||n[fl]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=sl(e);null!==e;){if(n=e[fl])return n;e=sl(e)}return t}n=(e=n).parentNode}return null}function El(e){return!(e=e[fl]||e[pl])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function yl(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(r(33))}function _l(e){return e[ml]||null}var Al=[],Sl=-1;function Cl(e){return{current:e}}function xl(e){0>Sl||(e.current=Al[Sl],Al[Sl]=null,Sl--)}function wl(e,t){Sl++,Al[Sl]=e.current,e.current=t}var Ol={},Tl=Cl(Ol),Ll=Cl(!1),Pl=Ol;function Il(e,t){var n=e.type.contextTypes;if(!n)return Ol;var a=e.stateNode;if(a&&a.__reactInternalMemoizedUnmaskedChildContext===t)return a.__reactInternalMemoizedMaskedChildContext;var l,r={};for(l in n)r[l]=t[l];return a&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=r),r}function Nl(e){return null!=e.childContextTypes}function Dl(){xl(Ll),xl(Tl)}function kl(e,t,n){if(Tl.current!==Ol)throw Error(r(168));wl(Tl,t),wl(Ll,n)}function Rl(e,t,n){var a=e.stateNode;if(t=t.childContextTypes,"function"!=typeof a.getChildContext)return n;for(var l in a=a.getChildContext())if(!(l in t))throw Error(r(108,W(e)||"Unknown",l));return B({},n,a)}function Ml(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ol,Pl=Tl.current,wl(Tl,e),wl(Ll,Ll.current),!0}function Bl(e,t,n){var a=e.stateNode;if(!a)throw Error(r(169));n?(e=Rl(e,t,Pl),a.__reactInternalMemoizedMergedChildContext=e,xl(Ll),xl(Tl),wl(Tl,e)):xl(Ll),wl(Ll,n)}var jl=null,zl=!1,Fl=!1;function Hl(e){null===jl?jl=[e]:jl.push(e)}function Ul(){if(!Fl&&null!==jl){Fl=!0;var e=0,t=Et;try{var n=jl;for(Et=1;e<n.length;e++){var a=n[e];do{a=a(!0)}while(null!==a)}jl=null,zl=!1}catch(t){throw null!==jl&&(jl=jl.slice(e+1)),qe(Je,Ul),t}finally{Et=t,Fl=!1}}return null}var Wl=[],$l=0,Vl=null,Gl=0,ql=[],Xl=0,Yl=null,Zl=1,Kl="";function Ql(e,t){Wl[$l++]=Gl,Wl[$l++]=Vl,Vl=e,Gl=t}function Jl(e,t,n){ql[Xl++]=Zl,ql[Xl++]=Kl,ql[Xl++]=Yl,Yl=e;var a=Zl;e=Kl;var l=32-it(a)-1;a&=~(1<<l),n+=1;var r=32-it(t)+l;if(30<r){var i=l-l%5;r=(a&(1<<i)-1).toString(32),a>>=i,l-=i,Zl=1<<32-it(t)+l|n<<l|a,Kl=r+e}else Zl=1<<r|n<<l|a,Kl=e}function er(e){null!==e.return&&(Ql(e,1),Jl(e,1,0))}function tr(e){for(;e===Vl;)Vl=Wl[--$l],Wl[$l]=null,Gl=Wl[--$l],Wl[$l]=null;for(;e===Yl;)Yl=ql[--Xl],ql[Xl]=null,Kl=ql[--Xl],ql[Xl]=null,Zl=ql[--Xl],ql[Xl]=null}var nr=null,ar=null,lr=!1,rr=null;function ir(e,t){var n=Ic(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function or(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,nr=e,ar=cl(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,nr=e,ar=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Yl?{id:Zl,overflow:Kl}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ic(18,null,null,0)).stateNode=t,n.return=e,e.child=n,nr=e,ar=null,!0);default:return!1}}function ur(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function cr(e){if(lr){var t=ar;if(t){var n=t;if(!or(e,t)){if(ur(e))throw Error(r(418));t=cl(n.nextSibling);var a=nr;t&&or(e,t)?ir(a,n):(e.flags=-4097&e.flags|2,lr=!1,nr=e)}}else{if(ur(e))throw Error(r(418));e.flags=-4097&e.flags|2,lr=!1,nr=e}}}function sr(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;nr=e}function dr(e){if(e!==nr)return!1;if(!lr)return sr(e),lr=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!nl(e.type,e.memoizedProps)),t&&(t=ar)){if(ur(e))throw fr(),Error(r(418));for(;t;)ir(e,t),t=cl(t.nextSibling)}if(sr(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(r(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ar=cl(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ar=null}}else ar=nr?cl(e.stateNode.nextSibling):null;return!0}function fr(){for(var e=ar;e;)e=cl(e.nextSibling)}function mr(){ar=nr=null,lr=!1}function pr(e){null===rr?rr=[e]:rr.push(e)}var vr=y.ReactCurrentBatchConfig;function hr(e,t){if(e&&e.defaultProps){for(var n in t=B({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var br=Cl(null),gr=null,Er=null,yr=null;function _r(){yr=Er=gr=null}function Ar(e){var t=br.current;xl(br),e._currentValue=t}function Sr(e,t,n){for(;null!==e;){var a=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==a&&(a.childLanes|=t)):null!==a&&(a.childLanes&t)!==t&&(a.childLanes|=t),e===n)break;e=e.return}}function Cr(e,t){gr=e,yr=Er=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(yo=!0),e.firstContext=null)}function xr(e){var t=e._currentValue;if(yr!==e)if(e={context:e,memoizedValue:t,next:null},null===Er){if(null===gr)throw Error(r(308));Er=e,gr.dependencies={lanes:0,firstContext:e}}else Er=Er.next=e;return t}var wr=null;function Or(e){null===wr?wr=[e]:wr.push(e)}function Tr(e,t,n,a){var l=t.interleaved;return null===l?(n.next=n,Or(t)):(n.next=l.next,l.next=n),t.interleaved=n,Lr(e,a)}function Lr(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Pr=!1;function Ir(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Nr(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Dr(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function kr(e,t,n){var a=e.updateQueue;if(null===a)return null;if(a=a.shared,0!=(2&Tu)){var l=a.pending;return null===l?t.next=t:(t.next=l.next,l.next=t),a.pending=t,Lr(e,n)}return null===(l=a.interleaved)?(t.next=t,Or(a)):(t.next=l.next,l.next=t),a.interleaved=t,Lr(e,n)}function Rr(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var a=t.lanes;n|=a&=e.pendingLanes,t.lanes=n,gt(e,n)}}function Mr(e,t){var n=e.updateQueue,a=e.alternate;if(null!==a&&n===(a=a.updateQueue)){var l=null,r=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===r?l=r=i:r=r.next=i,n=n.next}while(null!==n);null===r?l=r=t:r=r.next=t}else l=r=t;return n={baseState:a.baseState,firstBaseUpdate:l,lastBaseUpdate:r,shared:a.shared,effects:a.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Br(e,t,n,a){var l=e.updateQueue;Pr=!1;var r=l.firstBaseUpdate,i=l.lastBaseUpdate,o=l.shared.pending;if(null!==o){l.shared.pending=null;var u=o,c=u.next;u.next=null,null===i?r=c:i.next=c,i=u;var s=e.alternate;null!==s&&(o=(s=s.updateQueue).lastBaseUpdate)!==i&&(null===o?s.firstBaseUpdate=c:o.next=c,s.lastBaseUpdate=u)}if(null!==r){var d=l.baseState;for(i=0,s=c=u=null,o=r;;){var f=o.lane,m=o.eventTime;if((a&f)===f){null!==s&&(s=s.next={eventTime:m,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var p=e,v=o;switch(f=t,m=n,v.tag){case 1:if("function"==typeof(p=v.payload)){d=p.call(m,d,f);break e}d=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(f="function"==typeof(p=v.payload)?p.call(m,d,f):p))break e;d=B({},d,f);break e;case 2:Pr=!0}}null!==o.callback&&0!==o.lane&&(e.flags|=64,null===(f=l.effects)?l.effects=[o]:f.push(o))}else m={eventTime:m,lane:f,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===s?(c=s=m,u=d):s=s.next=m,i|=f;if(null===(o=o.next)){if(null===(o=l.shared.pending))break;o=(f=o).next,f.next=null,l.lastBaseUpdate=f,l.shared.pending=null}}if(null===s&&(u=d),l.baseState=u,l.firstBaseUpdate=c,l.lastBaseUpdate=s,null!==(t=l.shared.interleaved)){l=t;do{i|=l.lane,l=l.next}while(l!==t)}else null===r&&(l.shared.lanes=0);Mu|=i,e.lanes=i,e.memoizedState=d}}function jr(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var a=e[t],l=a.callback;if(null!==l){if(a.callback=null,a=n,"function"!=typeof l)throw Error(r(191,l));l.call(a)}}}var zr=(new a.Component).refs;function Fr(e,t,n,a){n=null==(n=n(a,t=e.memoizedState))?t:B({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Hr={isMounted:function(e){return!!(e=e._reactInternals)&&Ue(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var a=ec(),l=tc(e),r=Dr(a,l);r.payload=t,null!=n&&(r.callback=n),null!==(t=kr(e,r,l))&&(nc(t,e,l,a),Rr(t,e,l))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var a=ec(),l=tc(e),r=Dr(a,l);r.tag=1,r.payload=t,null!=n&&(r.callback=n),null!==(t=kr(e,r,l))&&(nc(t,e,l,a),Rr(t,e,l))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ec(),a=tc(e),l=Dr(n,a);l.tag=2,null!=t&&(l.callback=t),null!==(t=kr(e,l,a))&&(nc(t,e,a,n),Rr(t,e,a))}};function Ur(e,t,n,a,l,r,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(a,r,i):!(t.prototype&&t.prototype.isPureReactComponent&&ua(n,a)&&ua(l,r))}function Wr(e,t,n){var a=!1,l=Ol,r=t.contextType;return"object"==typeof r&&null!==r?r=xr(r):(l=Nl(t)?Pl:Tl.current,r=(a=null!=(a=t.contextTypes))?Il(e,l):Ol),t=new t(n,r),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Hr,e.stateNode=t,t._reactInternals=e,a&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=l,e.__reactInternalMemoizedMaskedChildContext=r),t}function $r(e,t,n,a){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,a),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,a),t.state!==e&&Hr.enqueueReplaceState(t,t.state,null)}function Vr(e,t,n,a){var l=e.stateNode;l.props=n,l.state=e.memoizedState,l.refs=zr,Ir(e);var r=t.contextType;"object"==typeof r&&null!==r?l.context=xr(r):(r=Nl(t)?Pl:Tl.current,l.context=Il(e,r)),l.state=e.memoizedState,"function"==typeof(r=t.getDerivedStateFromProps)&&(Fr(e,t,r,n),l.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||(t=l.state,"function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount(),t!==l.state&&Hr.enqueueReplaceState(l,l.state,null),Br(e,n,l,a),l.state=e.memoizedState),"function"==typeof l.componentDidMount&&(e.flags|=4194308)}function Gr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(r(309));var a=n.stateNode}if(!a)throw Error(r(147,e));var l=a,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=l.refs;t===zr&&(t=l.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(r(284));if(!n._owner)throw Error(r(290,e))}return e}function qr(e,t){throw e=Object.prototype.toString.call(t),Error(r(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Xr(e){return(0,e._init)(e._payload)}function Yr(e){function t(t,n){if(e){var a=t.deletions;null===a?(t.deletions=[n],t.flags|=16):a.push(n)}}function n(n,a){if(!e)return null;for(;null!==a;)t(n,a),a=a.sibling;return null}function a(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function l(e,t){return(e=Dc(e,t)).index=0,e.sibling=null,e}function i(t,n,a){return t.index=a,e?null!==(a=t.alternate)?(a=a.index)<n?(t.flags|=2,n):a:(t.flags|=2,n):(t.flags|=1048576,n)}function o(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,a){return null===t||6!==t.tag?((t=Bc(n,e.mode,a)).return=e,t):((t=l(t,n)).return=e,t)}function c(e,t,n,a){var r=n.type;return r===S?d(e,t,n.props.children,a,n.key):null!==t&&(t.elementType===r||"object"==typeof r&&null!==r&&r.$$typeof===N&&Xr(r)===t.type)?((a=l(t,n.props)).ref=Gr(e,t,n),a.return=e,a):((a=kc(n.type,n.key,n.props,null,e.mode,a)).ref=Gr(e,t,n),a.return=e,a)}function s(e,t,n,a){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=jc(n,e.mode,a)).return=e,t):((t=l(t,n.children||[])).return=e,t)}function d(e,t,n,a,r){return null===t||7!==t.tag?((t=Rc(n,e.mode,a,r)).return=e,t):((t=l(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Bc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case _:return(n=kc(t.type,t.key,t.props,null,e.mode,n)).ref=Gr(e,null,t),n.return=e,n;case A:return(t=jc(t,e.mode,n)).return=e,t;case N:return f(e,(0,t._init)(t._payload),n)}if(te(t)||R(t))return(t=Rc(t,e.mode,n,null)).return=e,t;qr(e,t)}return null}function m(e,t,n,a){var l=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==l?null:u(e,t,""+n,a);if("object"==typeof n&&null!==n){switch(n.$$typeof){case _:return n.key===l?c(e,t,n,a):null;case A:return n.key===l?s(e,t,n,a):null;case N:return m(e,t,(l=n._init)(n._payload),a)}if(te(n)||R(n))return null!==l?null:d(e,t,n,a,null);qr(e,n)}return null}function p(e,t,n,a,l){if("string"==typeof a&&""!==a||"number"==typeof a)return u(t,e=e.get(n)||null,""+a,l);if("object"==typeof a&&null!==a){switch(a.$$typeof){case _:return c(t,e=e.get(null===a.key?n:a.key)||null,a,l);case A:return s(t,e=e.get(null===a.key?n:a.key)||null,a,l);case N:return p(e,t,n,(0,a._init)(a._payload),l)}if(te(a)||R(a))return d(t,e=e.get(n)||null,a,l,null);qr(t,a)}return null}function v(l,r,o,u){for(var c=null,s=null,d=r,v=r=0,h=null;null!==d&&v<o.length;v++){d.index>v?(h=d,d=null):h=d.sibling;var b=m(l,d,o[v],u);if(null===b){null===d&&(d=h);break}e&&d&&null===b.alternate&&t(l,d),r=i(b,r,v),null===s?c=b:s.sibling=b,s=b,d=h}if(v===o.length)return n(l,d),lr&&Ql(l,v),c;if(null===d){for(;v<o.length;v++)null!==(d=f(l,o[v],u))&&(r=i(d,r,v),null===s?c=d:s.sibling=d,s=d);return lr&&Ql(l,v),c}for(d=a(l,d);v<o.length;v++)null!==(h=p(d,l,v,o[v],u))&&(e&&null!==h.alternate&&d.delete(null===h.key?v:h.key),r=i(h,r,v),null===s?c=h:s.sibling=h,s=h);return e&&d.forEach((function(e){return t(l,e)})),lr&&Ql(l,v),c}function h(l,o,u,c){var s=R(u);if("function"!=typeof s)throw Error(r(150));if(null==(u=s.call(u)))throw Error(r(151));for(var d=s=null,v=o,h=o=0,b=null,g=u.next();null!==v&&!g.done;h++,g=u.next()){v.index>h?(b=v,v=null):b=v.sibling;var E=m(l,v,g.value,c);if(null===E){null===v&&(v=b);break}e&&v&&null===E.alternate&&t(l,v),o=i(E,o,h),null===d?s=E:d.sibling=E,d=E,v=b}if(g.done)return n(l,v),lr&&Ql(l,h),s;if(null===v){for(;!g.done;h++,g=u.next())null!==(g=f(l,g.value,c))&&(o=i(g,o,h),null===d?s=g:d.sibling=g,d=g);return lr&&Ql(l,h),s}for(v=a(l,v);!g.done;h++,g=u.next())null!==(g=p(v,l,h,g.value,c))&&(e&&null!==g.alternate&&v.delete(null===g.key?h:g.key),o=i(g,o,h),null===d?s=g:d.sibling=g,d=g);return e&&v.forEach((function(e){return t(l,e)})),lr&&Ql(l,h),s}return function e(a,r,i,u){if("object"==typeof i&&null!==i&&i.type===S&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case _:e:{for(var c=i.key,s=r;null!==s;){if(s.key===c){if((c=i.type)===S){if(7===s.tag){n(a,s.sibling),(r=l(s,i.props.children)).return=a,a=r;break e}}else if(s.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===N&&Xr(c)===s.type){n(a,s.sibling),(r=l(s,i.props)).ref=Gr(a,s,i),r.return=a,a=r;break e}n(a,s);break}t(a,s),s=s.sibling}i.type===S?((r=Rc(i.props.children,a.mode,u,i.key)).return=a,a=r):((u=kc(i.type,i.key,i.props,null,a.mode,u)).ref=Gr(a,r,i),u.return=a,a=u)}return o(a);case A:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(a,r.sibling),(r=l(r,i.children||[])).return=a,a=r;break e}n(a,r);break}t(a,r),r=r.sibling}(r=jc(i,a.mode,u)).return=a,a=r}return o(a);case N:return e(a,r,(s=i._init)(i._payload),u)}if(te(i))return v(a,r,i,u);if(R(i))return h(a,r,i,u);qr(a,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==r&&6===r.tag?(n(a,r.sibling),(r=l(r,i)).return=a,a=r):(n(a,r),(r=Bc(i,a.mode,u)).return=a,a=r),o(a)):n(a,r)}}var Zr=Yr(!0),Kr=Yr(!1),Qr={},Jr=Cl(Qr),ei=Cl(Qr),ti=Cl(Qr);function ni(e){if(e===Qr)throw Error(r(174));return e}function ai(e,t){switch(wl(ti,t),wl(ei,e),wl(Jr,Qr),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}xl(Jr),wl(Jr,t)}function li(){xl(Jr),xl(ei),xl(ti)}function ri(e){ni(ti.current);var t=ni(Jr.current),n=ue(t,e.type);t!==n&&(wl(ei,e),wl(Jr,n))}function ii(e){ei.current===e&&(xl(Jr),xl(ei))}var oi=Cl(0);function ui(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ci=[];function si(){for(var e=0;e<ci.length;e++)ci[e]._workInProgressVersionPrimary=null;ci.length=0}var di=y.ReactCurrentDispatcher,fi=y.ReactCurrentBatchConfig,mi=0,pi=null,vi=null,hi=null,bi=!1,gi=!1,Ei=0,yi=0;function _i(){throw Error(r(321))}function Ai(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!oa(e[n],t[n]))return!1;return!0}function Si(e,t,n,a,l,i){if(mi=i,pi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,di.current=null===e||null===e.memoizedState?io:oo,e=n(a,l),gi){i=0;do{if(gi=!1,Ei=0,25<=i)throw Error(r(301));i+=1,hi=vi=null,t.updateQueue=null,di.current=uo,e=n(a,l)}while(gi)}if(di.current=ro,t=null!==vi&&null!==vi.next,mi=0,hi=vi=pi=null,bi=!1,t)throw Error(r(300));return e}function Ci(){var e=0!==Ei;return Ei=0,e}function xi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===hi?pi.memoizedState=hi=e:hi=hi.next=e,hi}function wi(){if(null===vi){var e=pi.alternate;e=null!==e?e.memoizedState:null}else e=vi.next;var t=null===hi?pi.memoizedState:hi.next;if(null!==t)hi=t,vi=e;else{if(null===e)throw Error(r(310));e={memoizedState:(vi=e).memoizedState,baseState:vi.baseState,baseQueue:vi.baseQueue,queue:vi.queue,next:null},null===hi?pi.memoizedState=hi=e:hi=hi.next=e}return hi}function Oi(e,t){return"function"==typeof t?t(e):t}function Ti(e){var t=wi(),n=t.queue;if(null===n)throw Error(r(311));n.lastRenderedReducer=e;var a=vi,l=a.baseQueue,i=n.pending;if(null!==i){if(null!==l){var o=l.next;l.next=i.next,i.next=o}a.baseQueue=l=i,n.pending=null}if(null!==l){i=l.next,a=a.baseState;var u=o=null,c=null,s=i;do{var d=s.lane;if((mi&d)===d)null!==c&&(c=c.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),a=s.hasEagerState?s.eagerState:e(a,s.action);else{var f={lane:d,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===c?(u=c=f,o=a):c=c.next=f,pi.lanes|=d,Mu|=d}s=s.next}while(null!==s&&s!==i);null===c?o=a:c.next=u,oa(a,t.memoizedState)||(yo=!0),t.memoizedState=a,t.baseState=o,t.baseQueue=c,n.lastRenderedState=a}if(null!==(e=n.interleaved)){l=e;do{i=l.lane,pi.lanes|=i,Mu|=i,l=l.next}while(l!==e)}else null===l&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Li(e){var t=wi(),n=t.queue;if(null===n)throw Error(r(311));n.lastRenderedReducer=e;var a=n.dispatch,l=n.pending,i=t.memoizedState;if(null!==l){n.pending=null;var o=l=l.next;do{i=e(i,o.action),o=o.next}while(o!==l);oa(i,t.memoizedState)||(yo=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,a]}function Pi(){}function Ii(e,t){var n=pi,a=wi(),l=t(),i=!oa(a.memoizedState,l);if(i&&(a.memoizedState=l,yo=!0),a=a.queue,Wi(ki.bind(null,n,a,e),[e]),a.getSnapshot!==t||i||null!==hi&&1&hi.memoizedState.tag){if(n.flags|=2048,ji(9,Di.bind(null,n,a,l,t),void 0,null),null===Lu)throw Error(r(349));0!=(30&mi)||Ni(n,t,l)}return l}function Ni(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=pi.updateQueue)?(t={lastEffect:null,stores:null},pi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Di(e,t,n,a){t.value=n,t.getSnapshot=a,Ri(t)&&Mi(e)}function ki(e,t,n){return n((function(){Ri(t)&&Mi(e)}))}function Ri(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!oa(e,n)}catch(e){return!0}}function Mi(e){var t=Lr(e,1);null!==t&&nc(t,e,1,-1)}function Bi(e){var t=xi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Oi,lastRenderedState:e},t.queue=e,e=e.dispatch=to.bind(null,pi,e),[t.memoizedState,e]}function ji(e,t,n,a){return e={tag:e,create:t,destroy:n,deps:a,next:null},null===(t=pi.updateQueue)?(t={lastEffect:null,stores:null},pi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(a=n.next,n.next=e,e.next=a,t.lastEffect=e),e}function zi(){return wi().memoizedState}function Fi(e,t,n,a){var l=xi();pi.flags|=e,l.memoizedState=ji(1|t,n,void 0,void 0===a?null:a)}function Hi(e,t,n,a){var l=wi();a=void 0===a?null:a;var r=void 0;if(null!==vi){var i=vi.memoizedState;if(r=i.destroy,null!==a&&Ai(a,i.deps))return void(l.memoizedState=ji(t,n,r,a))}pi.flags|=e,l.memoizedState=ji(1|t,n,r,a)}function Ui(e,t){return Fi(8390656,8,e,t)}function Wi(e,t){return Hi(2048,8,e,t)}function $i(e,t){return Hi(4,2,e,t)}function Vi(e,t){return Hi(4,4,e,t)}function Gi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function qi(e,t,n){return n=null!=n?n.concat([e]):null,Hi(4,4,Gi.bind(null,t,e),n)}function Xi(){}function Yi(e,t){var n=wi();t=void 0===t?null:t;var a=n.memoizedState;return null!==a&&null!==t&&Ai(t,a[1])?a[0]:(n.memoizedState=[e,t],e)}function Zi(e,t){var n=wi();t=void 0===t?null:t;var a=n.memoizedState;return null!==a&&null!==t&&Ai(t,a[1])?a[0]:(e=e(),n.memoizedState=[e,t],e)}function Ki(e,t,n){return 0==(21&mi)?(e.baseState&&(e.baseState=!1,yo=!0),e.memoizedState=n):(oa(n,t)||(n=vt(),pi.lanes|=n,Mu|=n,e.baseState=!0),t)}function Qi(e,t){var n=Et;Et=0!==n&&4>n?n:4,e(!0);var a=fi.transition;fi.transition={};try{e(!1),t()}finally{Et=n,fi.transition=a}}function Ji(){return wi().memoizedState}function eo(e,t,n){var a=tc(e);n={lane:a,action:n,hasEagerState:!1,eagerState:null,next:null},no(e)?ao(t,n):null!==(n=Tr(e,t,n,a))&&(nc(n,e,a,ec()),lo(n,t,a))}function to(e,t,n){var a=tc(e),l={lane:a,action:n,hasEagerState:!1,eagerState:null,next:null};if(no(e))ao(t,l);else{var r=e.alternate;if(0===e.lanes&&(null===r||0===r.lanes)&&null!==(r=t.lastRenderedReducer))try{var i=t.lastRenderedState,o=r(i,n);if(l.hasEagerState=!0,l.eagerState=o,oa(o,i)){var u=t.interleaved;return null===u?(l.next=l,Or(t)):(l.next=u.next,u.next=l),void(t.interleaved=l)}}catch(e){}null!==(n=Tr(e,t,l,a))&&(nc(n,e,a,l=ec()),lo(n,t,a))}}function no(e){var t=e.alternate;return e===pi||null!==t&&t===pi}function ao(e,t){gi=bi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function lo(e,t,n){if(0!=(4194240&n)){var a=t.lanes;n|=a&=e.pendingLanes,t.lanes=n,gt(e,n)}}var ro={readContext:xr,useCallback:_i,useContext:_i,useEffect:_i,useImperativeHandle:_i,useInsertionEffect:_i,useLayoutEffect:_i,useMemo:_i,useReducer:_i,useRef:_i,useState:_i,useDebugValue:_i,useDeferredValue:_i,useTransition:_i,useMutableSource:_i,useSyncExternalStore:_i,useId:_i,unstable_isNewReconciler:!1},io={readContext:xr,useCallback:function(e,t){return xi().memoizedState=[e,void 0===t?null:t],e},useContext:xr,useEffect:Ui,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Fi(4194308,4,Gi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Fi(4194308,4,e,t)},useInsertionEffect:function(e,t){return Fi(4,2,e,t)},useMemo:function(e,t){var n=xi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var a=xi();return t=void 0!==n?n(t):t,a.memoizedState=a.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},a.queue=e,e=e.dispatch=eo.bind(null,pi,e),[a.memoizedState,e]},useRef:function(e){return e={current:e},xi().memoizedState=e},useState:Bi,useDebugValue:Xi,useDeferredValue:function(e){return xi().memoizedState=e},useTransition:function(){var e=Bi(!1),t=e[0];return e=Qi.bind(null,e[1]),xi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var a=pi,l=xi();if(lr){if(void 0===n)throw Error(r(407));n=n()}else{if(n=t(),null===Lu)throw Error(r(349));0!=(30&mi)||Ni(a,t,n)}l.memoizedState=n;var i={value:n,getSnapshot:t};return l.queue=i,Ui(ki.bind(null,a,i,e),[e]),a.flags|=2048,ji(9,Di.bind(null,a,i,n,t),void 0,null),n},useId:function(){var e=xi(),t=Lu.identifierPrefix;if(lr){var n=Kl;t=":"+t+"R"+(n=(Zl&~(1<<32-it(Zl)-1)).toString(32)+n),0<(n=Ei++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=yi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},oo={readContext:xr,useCallback:Yi,useContext:xr,useEffect:Wi,useImperativeHandle:qi,useInsertionEffect:$i,useLayoutEffect:Vi,useMemo:Zi,useReducer:Ti,useRef:zi,useState:function(){return Ti(Oi)},useDebugValue:Xi,useDeferredValue:function(e){return Ki(wi(),vi.memoizedState,e)},useTransition:function(){return[Ti(Oi)[0],wi().memoizedState]},useMutableSource:Pi,useSyncExternalStore:Ii,useId:Ji,unstable_isNewReconciler:!1},uo={readContext:xr,useCallback:Yi,useContext:xr,useEffect:Wi,useImperativeHandle:qi,useInsertionEffect:$i,useLayoutEffect:Vi,useMemo:Zi,useReducer:Li,useRef:zi,useState:function(){return Li(Oi)},useDebugValue:Xi,useDeferredValue:function(e){var t=wi();return null===vi?t.memoizedState=e:Ki(t,vi.memoizedState,e)},useTransition:function(){return[Li(Oi)[0],wi().memoizedState]},useMutableSource:Pi,useSyncExternalStore:Ii,useId:Ji,unstable_isNewReconciler:!1};function co(e,t){try{var n="",a=t;do{n+=H(a),a=a.return}while(a);var l=n}catch(e){l="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:l,digest:null}}function so(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fo(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var mo="function"==typeof WeakMap?WeakMap:Map;function po(e,t,n){(n=Dr(-1,n)).tag=3,n.payload={element:null};var a=t.value;return n.callback=function(){$u||($u=!0,Vu=a),fo(0,t)},n}function vo(e,t,n){(n=Dr(-1,n)).tag=3;var a=e.type.getDerivedStateFromError;if("function"==typeof a){var l=t.value;n.payload=function(){return a(l)},n.callback=function(){fo(0,t)}}var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){fo(0,t),"function"!=typeof a&&(null===Gu?Gu=new Set([this]):Gu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ho(e,t,n){var a=e.pingCache;if(null===a){a=e.pingCache=new mo;var l=new Set;a.set(t,l)}else void 0===(l=a.get(t))&&(l=new Set,a.set(t,l));l.has(n)||(l.add(n),e=xc.bind(null,e,t,n),t.then(e,e))}function bo(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function go(e,t,n,a,l){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Dr(-1,1)).tag=2,kr(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=l,e)}var Eo=y.ReactCurrentOwner,yo=!1;function _o(e,t,n,a){t.child=null===e?Kr(t,null,n,a):Zr(t,e.child,n,a)}function Ao(e,t,n,a,l){n=n.render;var r=t.ref;return Cr(t,l),a=Si(e,t,n,a,r,l),n=Ci(),null===e||yo?(lr&&n&&er(t),t.flags|=1,_o(e,t,a,l),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~l,$o(e,t,l))}function So(e,t,n,a,l){if(null===e){var r=n.type;return"function"!=typeof r||Nc(r)||void 0!==r.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=kc(n.type,null,a,t,t.mode,l)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=r,Co(e,t,r,a,l))}if(r=e.child,0==(e.lanes&l)){var i=r.memoizedProps;if((n=null!==(n=n.compare)?n:ua)(i,a)&&e.ref===t.ref)return $o(e,t,l)}return t.flags|=1,(e=Dc(r,a)).ref=t.ref,e.return=t,t.child=e}function Co(e,t,n,a,l){if(null!==e){var r=e.memoizedProps;if(ua(r,a)&&e.ref===t.ref){if(yo=!1,t.pendingProps=a=r,0==(e.lanes&l))return t.lanes=e.lanes,$o(e,t,l);0!=(131072&e.flags)&&(yo=!0)}}return Oo(e,t,n,a,l)}function xo(e,t,n){var a=t.pendingProps,l=a.children,r=null!==e?e.memoizedState:null;if("hidden"===a.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},wl(Du,Nu),Nu|=n;else{if(0==(1073741824&n))return e=null!==r?r.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,wl(Du,Nu),Nu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},a=null!==r?r.baseLanes:n,wl(Du,Nu),Nu|=a}else null!==r?(a=r.baseLanes|n,t.memoizedState=null):a=n,wl(Du,Nu),Nu|=a;return _o(e,t,l,n),t.child}function wo(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Oo(e,t,n,a,l){var r=Nl(n)?Pl:Tl.current;return r=Il(t,r),Cr(t,l),n=Si(e,t,n,a,r,l),a=Ci(),null===e||yo?(lr&&a&&er(t),t.flags|=1,_o(e,t,n,l),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~l,$o(e,t,l))}function To(e,t,n,a,l){if(Nl(n)){var r=!0;Ml(t)}else r=!1;if(Cr(t,l),null===t.stateNode)Wo(e,t),Wr(t,n,a),Vr(t,n,a,l),a=!0;else if(null===e){var i=t.stateNode,o=t.memoizedProps;i.props=o;var u=i.context,c=n.contextType;c="object"==typeof c&&null!==c?xr(c):Il(t,c=Nl(n)?Pl:Tl.current);var s=n.getDerivedStateFromProps,d="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==a||u!==c)&&$r(t,i,a,c),Pr=!1;var f=t.memoizedState;i.state=f,Br(t,a,i,l),u=t.memoizedState,o!==a||f!==u||Ll.current||Pr?("function"==typeof s&&(Fr(t,n,s,a),u=t.memoizedState),(o=Pr||Ur(t,n,o,a,f,u,c))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=a,t.memoizedState=u),i.props=a,i.state=u,i.context=c,a=o):("function"==typeof i.componentDidMount&&(t.flags|=4194308),a=!1)}else{i=t.stateNode,Nr(e,t),o=t.memoizedProps,c=t.type===t.elementType?o:hr(t.type,o),i.props=c,d=t.pendingProps,f=i.context,u="object"==typeof(u=n.contextType)&&null!==u?xr(u):Il(t,u=Nl(n)?Pl:Tl.current);var m=n.getDerivedStateFromProps;(s="function"==typeof m||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==d||f!==u)&&$r(t,i,a,u),Pr=!1,f=t.memoizedState,i.state=f,Br(t,a,i,l);var p=t.memoizedState;o!==d||f!==p||Ll.current||Pr?("function"==typeof m&&(Fr(t,n,m,a),p=t.memoizedState),(c=Pr||Ur(t,n,c,a,f,p,u)||!1)?(s||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(a,p,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(a,p,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=a,t.memoizedState=p),i.props=a,i.state=p,i.context=u,a=c):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),a=!1)}return Lo(e,t,n,a,r,l)}function Lo(e,t,n,a,l,r){wo(e,t);var i=0!=(128&t.flags);if(!a&&!i)return l&&Bl(t,n,!1),$o(e,t,r);a=t.stateNode,Eo.current=t;var o=i&&"function"!=typeof n.getDerivedStateFromError?null:a.render();return t.flags|=1,null!==e&&i?(t.child=Zr(t,e.child,null,r),t.child=Zr(t,null,o,r)):_o(e,t,o,r),t.memoizedState=a.state,l&&Bl(t,n,!0),t.child}function Po(e){var t=e.stateNode;t.pendingContext?kl(0,t.pendingContext,t.pendingContext!==t.context):t.context&&kl(0,t.context,!1),ai(e,t.containerInfo)}function Io(e,t,n,a,l){return mr(),pr(l),t.flags|=256,_o(e,t,n,a),t.child}var No,Do,ko,Ro={dehydrated:null,treeContext:null,retryLane:0};function Mo(e){return{baseLanes:e,cachePool:null,transitions:null}}function Bo(e,t,n){var a,l=t.pendingProps,i=oi.current,o=!1,u=0!=(128&t.flags);if((a=u)||(a=(null===e||null!==e.memoizedState)&&0!=(2&i)),a?(o=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),wl(oi,1&i),null===e)return cr(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=l.children,e=l.fallback,o?(l=t.mode,o=t.child,u={mode:"hidden",children:u},0==(1&l)&&null!==o?(o.childLanes=0,o.pendingProps=u):o=Mc(u,l,0,null),e=Rc(e,l,n,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=Mo(n),t.memoizedState=Ro,e):jo(t,u));if(null!==(i=e.memoizedState)&&null!==(a=i.dehydrated))return function(e,t,n,a,l,i,o){if(n)return 256&t.flags?(t.flags&=-257,zo(e,t,o,a=so(Error(r(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=a.fallback,l=t.mode,a=Mc({mode:"visible",children:a.children},l,0,null),(i=Rc(i,l,o,null)).flags|=2,a.return=t,i.return=t,a.sibling=i,t.child=a,0!=(1&t.mode)&&Zr(t,e.child,null,o),t.child.memoizedState=Mo(o),t.memoizedState=Ro,i);if(0==(1&t.mode))return zo(e,t,o,null);if("$!"===l.data){if(a=l.nextSibling&&l.nextSibling.dataset)var u=a.dgst;return a=u,zo(e,t,o,a=so(i=Error(r(419)),a,void 0))}if(u=0!=(o&e.childLanes),yo||u){if(null!==(a=Lu)){switch(o&-o){case 4:l=2;break;case 16:l=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:l=32;break;case 536870912:l=268435456;break;default:l=0}0!==(l=0!=(l&(a.suspendedLanes|o))?0:l)&&l!==i.retryLane&&(i.retryLane=l,Lr(e,l),nc(a,e,l,-1))}return vc(),zo(e,t,o,a=so(Error(r(421))))}return"$?"===l.data?(t.flags|=128,t.child=e.child,t=Oc.bind(null,e),l._reactRetry=t,null):(e=i.treeContext,ar=cl(l.nextSibling),nr=t,lr=!0,rr=null,null!==e&&(ql[Xl++]=Zl,ql[Xl++]=Kl,ql[Xl++]=Yl,Zl=e.id,Kl=e.overflow,Yl=t),(t=jo(t,a.children)).flags|=4096,t)}(e,t,u,l,a,i,n);if(o){o=l.fallback,u=t.mode,a=(i=e.child).sibling;var c={mode:"hidden",children:l.children};return 0==(1&u)&&t.child!==i?((l=t.child).childLanes=0,l.pendingProps=c,t.deletions=null):(l=Dc(i,c)).subtreeFlags=14680064&i.subtreeFlags,null!==a?o=Dc(a,o):(o=Rc(o,u,n,null)).flags|=2,o.return=t,l.return=t,l.sibling=o,t.child=l,l=o,o=t.child,u=null===(u=e.child.memoizedState)?Mo(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},o.memoizedState=u,o.childLanes=e.childLanes&~n,t.memoizedState=Ro,l}return e=(o=e.child).sibling,l=Dc(o,{mode:"visible",children:l.children}),0==(1&t.mode)&&(l.lanes=n),l.return=t,l.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=l,t.memoizedState=null,l}function jo(e,t){return(t=Mc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function zo(e,t,n,a){return null!==a&&pr(a),Zr(t,e.child,null,n),(e=jo(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Fo(e,t,n){e.lanes|=t;var a=e.alternate;null!==a&&(a.lanes|=t),Sr(e.return,t,n)}function Ho(e,t,n,a,l){var r=e.memoizedState;null===r?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:a,tail:n,tailMode:l}:(r.isBackwards=t,r.rendering=null,r.renderingStartTime=0,r.last=a,r.tail=n,r.tailMode=l)}function Uo(e,t,n){var a=t.pendingProps,l=a.revealOrder,r=a.tail;if(_o(e,t,a.children,n),0!=(2&(a=oi.current)))a=1&a|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Fo(e,n,t);else if(19===e.tag)Fo(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}a&=1}if(wl(oi,a),0==(1&t.mode))t.memoizedState=null;else switch(l){case"forwards":for(n=t.child,l=null;null!==n;)null!==(e=n.alternate)&&null===ui(e)&&(l=n),n=n.sibling;null===(n=l)?(l=t.child,t.child=null):(l=n.sibling,n.sibling=null),Ho(t,!1,l,n,r);break;case"backwards":for(n=null,l=t.child,t.child=null;null!==l;){if(null!==(e=l.alternate)&&null===ui(e)){t.child=l;break}e=l.sibling,l.sibling=n,n=l,l=e}Ho(t,!0,n,null,r);break;case"together":Ho(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Wo(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function $o(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Mu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(r(153));if(null!==t.child){for(n=Dc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Dc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Vo(e,t){if(!lr)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var a=null;null!==n;)null!==n.alternate&&(a=n),n=n.sibling;null===a?t||null===e.tail?e.tail=null:e.tail.sibling=null:a.sibling=null}}function Go(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,a=0;if(t)for(var l=e.child;null!==l;)n|=l.lanes|l.childLanes,a|=14680064&l.subtreeFlags,a|=14680064&l.flags,l.return=e,l=l.sibling;else for(l=e.child;null!==l;)n|=l.lanes|l.childLanes,a|=l.subtreeFlags,a|=l.flags,l.return=e,l=l.sibling;return e.subtreeFlags|=a,e.childLanes=n,t}function qo(e,t,n){var a=t.pendingProps;switch(tr(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Go(t),null;case 1:case 17:return Nl(t.type)&&Dl(),Go(t),null;case 3:return a=t.stateNode,li(),xl(Ll),xl(Tl),si(),a.pendingContext&&(a.context=a.pendingContext,a.pendingContext=null),null!==e&&null!==e.child||(dr(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==rr&&(ic(rr),rr=null))),Go(t),null;case 5:ii(t);var l=ni(ti.current);if(n=t.type,null!==e&&null!=t.stateNode)Do(e,t,n,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!a){if(null===t.stateNode)throw Error(r(166));return Go(t),null}if(e=ni(Jr.current),dr(t)){a=t.stateNode,n=t.type;var i=t.memoizedProps;switch(a[fl]=t,a[ml]=i,e=0!=(1&t.mode),n){case"dialog":za("cancel",a),za("close",a);break;case"iframe":case"object":case"embed":za("load",a);break;case"video":case"audio":for(l=0;l<Ra.length;l++)za(Ra[l],a);break;case"source":za("error",a);break;case"img":case"image":case"link":za("error",a),za("load",a);break;case"details":za("toggle",a);break;case"input":Z(a,i),za("invalid",a);break;case"select":a._wrapperState={wasMultiple:!!i.multiple},za("invalid",a);break;case"textarea":le(a,i),za("invalid",a)}for(var u in ge(n,i),l=null,i)if(i.hasOwnProperty(u)){var c=i[u];"children"===u?"string"==typeof c?a.textContent!==c&&(!0!==i.suppressHydrationWarning&&Qa(a.textContent,c,e),l=["children",c]):"number"==typeof c&&a.textContent!==""+c&&(!0!==i.suppressHydrationWarning&&Qa(a.textContent,c,e),l=["children",""+c]):o.hasOwnProperty(u)&&null!=c&&"onScroll"===u&&za("scroll",a)}switch(n){case"input":G(a),J(a,i,!0);break;case"textarea":G(a),ie(a);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(a.onclick=Ja)}a=l,t.updateQueue=a,null!==a&&(t.flags|=4)}else{u=9===l.nodeType?l:l.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=oe(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof a.is?e=u.createElement(n,{is:a.is}):(e=u.createElement(n),"select"===n&&(u=e,a.multiple?u.multiple=!0:a.size&&(u.size=a.size))):e=u.createElementNS(e,n),e[fl]=t,e[ml]=a,No(e,t),t.stateNode=e;e:{switch(u=Ee(n,a),n){case"dialog":za("cancel",e),za("close",e),l=a;break;case"iframe":case"object":case"embed":za("load",e),l=a;break;case"video":case"audio":for(l=0;l<Ra.length;l++)za(Ra[l],e);l=a;break;case"source":za("error",e),l=a;break;case"img":case"image":case"link":za("error",e),za("load",e),l=a;break;case"details":za("toggle",e),l=a;break;case"input":Z(e,a),l=Y(e,a),za("invalid",e);break;case"option":default:l=a;break;case"select":e._wrapperState={wasMultiple:!!a.multiple},l=B({},a,{value:void 0}),za("invalid",e);break;case"textarea":le(e,a),l=ae(e,a),za("invalid",e)}for(i in ge(n,l),c=l)if(c.hasOwnProperty(i)){var s=c[i];"style"===i?he(e,s):"dangerouslySetInnerHTML"===i?null!=(s=s?s.__html:void 0)&&de(e,s):"children"===i?"string"==typeof s?("textarea"!==n||""!==s)&&fe(e,s):"number"==typeof s&&fe(e,""+s):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(o.hasOwnProperty(i)?null!=s&&"onScroll"===i&&za("scroll",e):null!=s&&E(e,i,s,u))}switch(n){case"input":G(e),J(e,a,!1);break;case"textarea":G(e),ie(e);break;case"option":null!=a.value&&e.setAttribute("value",""+$(a.value));break;case"select":e.multiple=!!a.multiple,null!=(i=a.value)?ne(e,!!a.multiple,i,!1):null!=a.defaultValue&&ne(e,!!a.multiple,a.defaultValue,!0);break;default:"function"==typeof l.onClick&&(e.onclick=Ja)}switch(n){case"button":case"input":case"select":case"textarea":a=!!a.autoFocus;break e;case"img":a=!0;break e;default:a=!1}}a&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Go(t),null;case 6:if(e&&null!=t.stateNode)ko(0,t,e.memoizedProps,a);else{if("string"!=typeof a&&null===t.stateNode)throw Error(r(166));if(n=ni(ti.current),ni(Jr.current),dr(t)){if(a=t.stateNode,n=t.memoizedProps,a[fl]=t,(i=a.nodeValue!==n)&&null!==(e=nr))switch(e.tag){case 3:Qa(a.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Qa(a.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(a=(9===n.nodeType?n:n.ownerDocument).createTextNode(a))[fl]=t,t.stateNode=a}return Go(t),null;case 13:if(xl(oi),a=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(lr&&null!==ar&&0!=(1&t.mode)&&0==(128&t.flags))fr(),mr(),t.flags|=98560,i=!1;else if(i=dr(t),null!==a&&null!==a.dehydrated){if(null===e){if(!i)throw Error(r(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(r(317));i[fl]=t}else mr(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Go(t),i=!1}else null!==rr&&(ic(rr),rr=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((a=null!==a)!=(null!==e&&null!==e.memoizedState)&&a&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&oi.current)?0===ku&&(ku=3):vc())),null!==t.updateQueue&&(t.flags|=4),Go(t),null);case 4:return li(),null===e&&Ua(t.stateNode.containerInfo),Go(t),null;case 10:return Ar(t.type._context),Go(t),null;case 19:if(xl(oi),null===(i=t.memoizedState))return Go(t),null;if(a=0!=(128&t.flags),null===(u=i.rendering))if(a)Vo(i,!1);else{if(0!==ku||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=ui(e))){for(t.flags|=128,Vo(i,!1),null!==(a=u.updateQueue)&&(t.updateQueue=a,t.flags|=4),t.subtreeFlags=0,a=n,n=t.child;null!==n;)e=a,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return wl(oi,1&oi.current|2),t.child}e=e.sibling}null!==i.tail&&Ke()>Uu&&(t.flags|=128,a=!0,Vo(i,!1),t.lanes=4194304)}else{if(!a)if(null!==(e=ui(u))){if(t.flags|=128,a=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Vo(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!lr)return Go(t),null}else 2*Ke()-i.renderingStartTime>Uu&&1073741824!==n&&(t.flags|=128,a=!0,Vo(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ke(),t.sibling=null,n=oi.current,wl(oi,a?1&n|2:1&n),t):(Go(t),null);case 22:case 23:return dc(),a=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==a&&(t.flags|=8192),a&&0!=(1&t.mode)?0!=(1073741824&Nu)&&(Go(t),6&t.subtreeFlags&&(t.flags|=8192)):Go(t),null;case 24:case 25:return null}throw Error(r(156,t.tag))}function Xo(e,t){switch(tr(t),t.tag){case 1:return Nl(t.type)&&Dl(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return li(),xl(Ll),xl(Tl),si(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return ii(t),null;case 13:if(xl(oi),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(r(340));mr()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return xl(oi),null;case 4:return li(),null;case 10:return Ar(t.type._context),null;case 22:case 23:return dc(),null;default:return null}}No=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Do=function(e,t,n,a){var l=e.memoizedProps;if(l!==a){e=t.stateNode,ni(Jr.current);var r,i=null;switch(n){case"input":l=Y(e,l),a=Y(e,a),i=[];break;case"select":l=B({},l,{value:void 0}),a=B({},a,{value:void 0}),i=[];break;case"textarea":l=ae(e,l),a=ae(e,a),i=[];break;default:"function"!=typeof l.onClick&&"function"==typeof a.onClick&&(e.onclick=Ja)}for(s in ge(n,a),n=null,l)if(!a.hasOwnProperty(s)&&l.hasOwnProperty(s)&&null!=l[s])if("style"===s){var u=l[s];for(r in u)u.hasOwnProperty(r)&&(n||(n={}),n[r]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(o.hasOwnProperty(s)?i||(i=[]):(i=i||[]).push(s,null));for(s in a){var c=a[s];if(u=null!=l?l[s]:void 0,a.hasOwnProperty(s)&&c!==u&&(null!=c||null!=u))if("style"===s)if(u){for(r in u)!u.hasOwnProperty(r)||c&&c.hasOwnProperty(r)||(n||(n={}),n[r]="");for(r in c)c.hasOwnProperty(r)&&u[r]!==c[r]&&(n||(n={}),n[r]=c[r])}else n||(i||(i=[]),i.push(s,n)),n=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(i=i||[]).push(s,c)):"children"===s?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(o.hasOwnProperty(s)?(null!=c&&"onScroll"===s&&za("scroll",e),i||u===c||(i=[])):(i=i||[]).push(s,c))}n&&(i=i||[]).push("style",n);var s=i;(t.updateQueue=s)&&(t.flags|=4)}},ko=function(e,t,n,a){n!==a&&(t.flags|=4)};var Yo=!1,Zo=!1,Ko="function"==typeof WeakSet?WeakSet:Set,Qo=null;function Jo(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Cc(e,t,n)}else n.current=null}function eu(e,t,n){try{n()}catch(n){Cc(e,t,n)}}var tu=!1;function nu(e,t,n){var a=t.updateQueue;if(null!==(a=null!==a?a.lastEffect:null)){var l=a=a.next;do{if((l.tag&e)===e){var r=l.destroy;l.destroy=void 0,void 0!==r&&eu(t,n,r)}l=l.next}while(l!==a)}}function au(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var a=n.create;n.destroy=a()}n=n.next}while(n!==t)}}function lu(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ru(e){var t=e.alternate;null!==t&&(e.alternate=null,ru(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fl],delete t[ml],delete t[vl],delete t[hl],delete t[bl]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function iu(e){return 5===e.tag||3===e.tag||4===e.tag}function ou(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||iu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uu(e,t,n){var a=e.tag;if(5===a||6===a)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Ja));else if(4!==a&&null!==(e=e.child))for(uu(e,t,n),e=e.sibling;null!==e;)uu(e,t,n),e=e.sibling}function cu(e,t,n){var a=e.tag;if(5===a||6===a)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==a&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}var su=null,du=!1;function fu(e,t,n){for(n=n.child;null!==n;)mu(e,t,n),n=n.sibling}function mu(e,t,n){if(rt&&"function"==typeof rt.onCommitFiberUnmount)try{rt.onCommitFiberUnmount(lt,n)}catch(e){}switch(n.tag){case 5:Zo||Jo(n,t);case 6:var a=su,l=du;su=null,fu(e,t,n),du=l,null!==(su=a)&&(du?(e=su,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):su.removeChild(n.stateNode));break;case 18:null!==su&&(du?(e=su,n=n.stateNode,8===e.nodeType?ul(e.parentNode,n):1===e.nodeType&&ul(e,n),Ut(e)):ul(su,n.stateNode));break;case 4:a=su,l=du,su=n.stateNode.containerInfo,du=!0,fu(e,t,n),su=a,du=l;break;case 0:case 11:case 14:case 15:if(!Zo&&null!==(a=n.updateQueue)&&null!==(a=a.lastEffect)){l=a=a.next;do{var r=l,i=r.destroy;r=r.tag,void 0!==i&&(0!=(2&r)||0!=(4&r))&&eu(n,t,i),l=l.next}while(l!==a)}fu(e,t,n);break;case 1:if(!Zo&&(Jo(n,t),"function"==typeof(a=n.stateNode).componentWillUnmount))try{a.props=n.memoizedProps,a.state=n.memoizedState,a.componentWillUnmount()}catch(e){Cc(n,t,e)}fu(e,t,n);break;case 21:fu(e,t,n);break;case 22:1&n.mode?(Zo=(a=Zo)||null!==n.memoizedState,fu(e,t,n),Zo=a):fu(e,t,n);break;default:fu(e,t,n)}}function pu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ko),t.forEach((function(t){var a=Tc.bind(null,e,t);n.has(t)||(n.add(t),t.then(a,a))}))}}function vu(e,t){var n=t.deletions;if(null!==n)for(var a=0;a<n.length;a++){var l=n[a];try{var i=e,o=t,u=o;e:for(;null!==u;){switch(u.tag){case 5:su=u.stateNode,du=!1;break e;case 3:case 4:su=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===su)throw Error(r(160));mu(i,o,l),su=null,du=!1;var c=l.alternate;null!==c&&(c.return=null),l.return=null}catch(e){Cc(l,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)hu(t,e),t=t.sibling}function hu(e,t){var n=e.alternate,a=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vu(t,e),bu(e),4&a){try{nu(3,e,e.return),au(3,e)}catch(t){Cc(e,e.return,t)}try{nu(5,e,e.return)}catch(t){Cc(e,e.return,t)}}break;case 1:vu(t,e),bu(e),512&a&&null!==n&&Jo(n,n.return);break;case 5:if(vu(t,e),bu(e),512&a&&null!==n&&Jo(n,n.return),32&e.flags){var l=e.stateNode;try{fe(l,"")}catch(t){Cc(e,e.return,t)}}if(4&a&&null!=(l=e.stateNode)){var i=e.memoizedProps,o=null!==n?n.memoizedProps:i,u=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===u&&"radio"===i.type&&null!=i.name&&K(l,i),Ee(u,o);var s=Ee(u,i);for(o=0;o<c.length;o+=2){var d=c[o],f=c[o+1];"style"===d?he(l,f):"dangerouslySetInnerHTML"===d?de(l,f):"children"===d?fe(l,f):E(l,d,f,s)}switch(u){case"input":Q(l,i);break;case"textarea":re(l,i);break;case"select":var m=l._wrapperState.wasMultiple;l._wrapperState.wasMultiple=!!i.multiple;var p=i.value;null!=p?ne(l,!!i.multiple,p,!1):m!==!!i.multiple&&(null!=i.defaultValue?ne(l,!!i.multiple,i.defaultValue,!0):ne(l,!!i.multiple,i.multiple?[]:"",!1))}l[ml]=i}catch(t){Cc(e,e.return,t)}}break;case 6:if(vu(t,e),bu(e),4&a){if(null===e.stateNode)throw Error(r(162));l=e.stateNode,i=e.memoizedProps;try{l.nodeValue=i}catch(t){Cc(e,e.return,t)}}break;case 3:if(vu(t,e),bu(e),4&a&&null!==n&&n.memoizedState.isDehydrated)try{Ut(t.containerInfo)}catch(t){Cc(e,e.return,t)}break;case 4:default:vu(t,e),bu(e);break;case 13:vu(t,e),bu(e),8192&(l=e.child).flags&&(i=null!==l.memoizedState,l.stateNode.isHidden=i,!i||null!==l.alternate&&null!==l.alternate.memoizedState||(Hu=Ke())),4&a&&pu(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Zo=(s=Zo)||d,vu(t,e),Zo=s):vu(t,e),bu(e),8192&a){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!d&&0!=(1&e.mode))for(Qo=e,d=e.child;null!==d;){for(f=Qo=d;null!==Qo;){switch(p=(m=Qo).child,m.tag){case 0:case 11:case 14:case 15:nu(4,m,m.return);break;case 1:Jo(m,m.return);var v=m.stateNode;if("function"==typeof v.componentWillUnmount){a=m,n=m.return;try{t=a,v.props=t.memoizedProps,v.state=t.memoizedState,v.componentWillUnmount()}catch(e){Cc(a,n,e)}}break;case 5:Jo(m,m.return);break;case 22:if(null!==m.memoizedState){_u(f);continue}}null!==p?(p.return=m,Qo=p):_u(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{l=f.stateNode,s?"function"==typeof(i=l.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=f.stateNode,o=null!=(c=f.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,u.style.display=ve("display",o))}catch(t){Cc(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=s?"":f.memoizedProps}catch(t){Cc(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:vu(t,e),bu(e),4&a&&pu(e);case 21:}}function bu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(iu(n)){var a=n;break e}n=n.return}throw Error(r(160))}switch(a.tag){case 5:var l=a.stateNode;32&a.flags&&(fe(l,""),a.flags&=-33),cu(e,ou(e),l);break;case 3:case 4:var i=a.stateNode.containerInfo;uu(e,ou(e),i);break;default:throw Error(r(161))}}catch(t){Cc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gu(e,t,n){Qo=e,Eu(e,t,n)}function Eu(e,t,n){for(var a=0!=(1&e.mode);null!==Qo;){var l=Qo,r=l.child;if(22===l.tag&&a){var i=null!==l.memoizedState||Yo;if(!i){var o=l.alternate,u=null!==o&&null!==o.memoizedState||Zo;o=Yo;var c=Zo;if(Yo=i,(Zo=u)&&!c)for(Qo=l;null!==Qo;)u=(i=Qo).child,22===i.tag&&null!==i.memoizedState?Au(l):null!==u?(u.return=i,Qo=u):Au(l);for(;null!==r;)Qo=r,Eu(r,t,n),r=r.sibling;Qo=l,Yo=o,Zo=c}yu(e)}else 0!=(8772&l.subtreeFlags)&&null!==r?(r.return=l,Qo=r):yu(e)}}function yu(e){for(;null!==Qo;){var t=Qo;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Zo||au(5,t);break;case 1:var a=t.stateNode;if(4&t.flags&&!Zo)if(null===n)a.componentDidMount();else{var l=t.elementType===t.type?n.memoizedProps:hr(t.type,n.memoizedProps);a.componentDidUpdate(l,n.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&jr(t,i,a);break;case 3:var o=t.updateQueue;if(null!==o){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}jr(t,o,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var s=t.alternate;if(null!==s){var d=s.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Ut(f)}}}break;default:throw Error(r(163))}Zo||512&t.flags&&lu(t)}catch(e){Cc(t,t.return,e)}}if(t===e){Qo=null;break}if(null!==(n=t.sibling)){n.return=t.return,Qo=n;break}Qo=t.return}}function _u(e){for(;null!==Qo;){var t=Qo;if(t===e){Qo=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Qo=n;break}Qo=t.return}}function Au(e){for(;null!==Qo;){var t=Qo;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{au(4,t)}catch(e){Cc(t,n,e)}break;case 1:var a=t.stateNode;if("function"==typeof a.componentDidMount){var l=t.return;try{a.componentDidMount()}catch(e){Cc(t,l,e)}}var r=t.return;try{lu(t)}catch(e){Cc(t,r,e)}break;case 5:var i=t.return;try{lu(t)}catch(e){Cc(t,i,e)}}}catch(e){Cc(t,t.return,e)}if(t===e){Qo=null;break}var o=t.sibling;if(null!==o){o.return=t.return,Qo=o;break}Qo=t.return}}var Su,Cu=Math.ceil,xu=y.ReactCurrentDispatcher,wu=y.ReactCurrentOwner,Ou=y.ReactCurrentBatchConfig,Tu=0,Lu=null,Pu=null,Iu=0,Nu=0,Du=Cl(0),ku=0,Ru=null,Mu=0,Bu=0,ju=0,zu=null,Fu=null,Hu=0,Uu=1/0,Wu=null,$u=!1,Vu=null,Gu=null,qu=!1,Xu=null,Yu=0,Zu=0,Ku=null,Qu=-1,Ju=0;function ec(){return 0!=(6&Tu)?Ke():-1!==Qu?Qu:Qu=Ke()}function tc(e){return 0==(1&e.mode)?1:0!=(2&Tu)&&0!==Iu?Iu&-Iu:null!==vr.transition?(0===Ju&&(Ju=vt()),Ju):0!==(e=Et)?e:e=void 0===(e=window.event)?16:Zt(e.type)}function nc(e,t,n,a){if(50<Zu)throw Zu=0,Ku=null,Error(r(185));bt(e,n,a),0!=(2&Tu)&&e===Lu||(e===Lu&&(0==(2&Tu)&&(Bu|=n),4===ku&&oc(e,Iu)),ac(e,a),1===n&&0===Tu&&0==(1&t.mode)&&(Uu=Ke()+500,zl&&Ul()))}function ac(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,a=e.pingedLanes,l=e.expirationTimes,r=e.pendingLanes;0<r;){var i=31-it(r),o=1<<i,u=l[i];-1===u?0!=(o&n)&&0==(o&a)||(l[i]=mt(o,t)):u<=t&&(e.expiredLanes|=o),r&=~o}}(e,t);var a=ft(e,e===Lu?Iu:0);if(0===a)null!==n&&Xe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=a&-a,e.callbackPriority!==t){if(null!=n&&Xe(n),1===t)0===e.tag?function(e){zl=!0,Hl(e)}(uc.bind(null,e)):Hl(uc.bind(null,e)),il((function(){0==(6&Tu)&&Ul()})),n=null;else{switch(yt(a)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=at}n=Lc(n,lc.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function lc(e,t){if(Qu=-1,Ju=0,0!=(6&Tu))throw Error(r(327));var n=e.callbackNode;if(Ac()&&e.callbackNode!==n)return null;var a=ft(e,e===Lu?Iu:0);if(0===a)return null;if(0!=(30&a)||0!=(a&e.expiredLanes)||t)t=hc(e,a);else{t=a;var l=Tu;Tu|=2;var i=pc();for(Lu===e&&Iu===t||(Wu=null,Uu=Ke()+500,fc(e,t));;)try{gc();break}catch(t){mc(e,t)}_r(),xu.current=i,Tu=l,null!==Pu?t=0:(Lu=null,Iu=0,t=ku)}if(0!==t){if(2===t&&0!==(l=pt(e))&&(a=l,t=rc(e,l)),1===t)throw n=Ru,fc(e,0),oc(e,a),ac(e,Ke()),n;if(6===t)oc(e,a);else{if(l=e.current.alternate,0==(30&a)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var a=0;a<n.length;a++){var l=n[a],r=l.getSnapshot;l=l.value;try{if(!oa(r(),l))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(l)&&(2===(t=hc(e,a))&&0!==(i=pt(e))&&(a=i,t=rc(e,i)),1===t))throw n=Ru,fc(e,0),oc(e,a),ac(e,Ke()),n;switch(e.finishedWork=l,e.finishedLanes=a,t){case 0:case 1:throw Error(r(345));case 2:case 5:_c(e,Fu,Wu);break;case 3:if(oc(e,a),(130023424&a)===a&&10<(t=Hu+500-Ke())){if(0!==ft(e,0))break;if(((l=e.suspendedLanes)&a)!==a){ec(),e.pingedLanes|=e.suspendedLanes&l;break}e.timeoutHandle=al(_c.bind(null,e,Fu,Wu),t);break}_c(e,Fu,Wu);break;case 4:if(oc(e,a),(4194240&a)===a)break;for(t=e.eventTimes,l=-1;0<a;){var o=31-it(a);i=1<<o,(o=t[o])>l&&(l=o),a&=~i}if(a=l,10<(a=(120>(a=Ke()-a)?120:480>a?480:1080>a?1080:1920>a?1920:3e3>a?3e3:4320>a?4320:1960*Cu(a/1960))-a)){e.timeoutHandle=al(_c.bind(null,e,Fu,Wu),a);break}_c(e,Fu,Wu);break;default:throw Error(r(329))}}}return ac(e,Ke()),e.callbackNode===n?lc.bind(null,e):null}function rc(e,t){var n=zu;return e.current.memoizedState.isDehydrated&&(fc(e,t).flags|=256),2!==(e=hc(e,t))&&(t=Fu,Fu=n,null!==t&&ic(t)),e}function ic(e){null===Fu?Fu=e:Fu.push.apply(Fu,e)}function oc(e,t){for(t&=~ju,t&=~Bu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),a=1<<n;e[n]=-1,t&=~a}}function uc(e){if(0!=(6&Tu))throw Error(r(327));Ac();var t=ft(e,0);if(0==(1&t))return ac(e,Ke()),null;var n=hc(e,t);if(0!==e.tag&&2===n){var a=pt(e);0!==a&&(t=a,n=rc(e,a))}if(1===n)throw n=Ru,fc(e,0),oc(e,t),ac(e,Ke()),n;if(6===n)throw Error(r(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,_c(e,Fu,Wu),ac(e,Ke()),null}function cc(e,t){var n=Tu;Tu|=1;try{return e(t)}finally{0===(Tu=n)&&(Uu=Ke()+500,zl&&Ul())}}function sc(e){null!==Xu&&0===Xu.tag&&0==(6&Tu)&&Ac();var t=Tu;Tu|=1;var n=Ou.transition,a=Et;try{if(Ou.transition=null,Et=1,e)return e()}finally{Et=a,Ou.transition=n,0==(6&(Tu=t))&&Ul()}}function dc(){Nu=Du.current,xl(Du)}function fc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ll(n)),null!==Pu)for(n=Pu.return;null!==n;){var a=n;switch(tr(a),a.tag){case 1:null!=(a=a.type.childContextTypes)&&Dl();break;case 3:li(),xl(Ll),xl(Tl),si();break;case 5:ii(a);break;case 4:li();break;case 13:case 19:xl(oi);break;case 10:Ar(a.type._context);break;case 22:case 23:dc()}n=n.return}if(Lu=e,Pu=e=Dc(e.current,null),Iu=Nu=t,ku=0,Ru=null,ju=Bu=Mu=0,Fu=zu=null,null!==wr){for(t=0;t<wr.length;t++)if(null!==(a=(n=wr[t]).interleaved)){n.interleaved=null;var l=a.next,r=n.pending;if(null!==r){var i=r.next;r.next=l,a.next=i}n.pending=a}wr=null}return e}function mc(e,t){for(;;){var n=Pu;try{if(_r(),di.current=ro,bi){for(var a=pi.memoizedState;null!==a;){var l=a.queue;null!==l&&(l.pending=null),a=a.next}bi=!1}if(mi=0,hi=vi=pi=null,gi=!1,Ei=0,wu.current=null,null===n||null===n.return){ku=1,Ru=t,Pu=null;break}e:{var i=e,o=n.return,u=n,c=t;if(t=Iu,u.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var s=c,d=u,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var m=d.alternate;m?(d.updateQueue=m.updateQueue,d.memoizedState=m.memoizedState,d.lanes=m.lanes):(d.updateQueue=null,d.memoizedState=null)}var p=bo(o);if(null!==p){p.flags&=-257,go(p,o,u,0,t),1&p.mode&&ho(i,s,t),c=s;var v=(t=p).updateQueue;if(null===v){var h=new Set;h.add(c),t.updateQueue=h}else v.add(c);break e}if(0==(1&t)){ho(i,s,t),vc();break e}c=Error(r(426))}else if(lr&&1&u.mode){var b=bo(o);if(null!==b){0==(65536&b.flags)&&(b.flags|=256),go(b,o,u,0,t),pr(co(c,u));break e}}i=c=co(c,u),4!==ku&&(ku=2),null===zu?zu=[i]:zu.push(i),i=o;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Mr(i,po(0,c,t));break e;case 1:u=c;var g=i.type,E=i.stateNode;if(0==(128&i.flags)&&("function"==typeof g.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Gu||!Gu.has(E)))){i.flags|=65536,t&=-t,i.lanes|=t,Mr(i,vo(i,u,t));break e}}i=i.return}while(null!==i)}yc(n)}catch(e){t=e,Pu===n&&null!==n&&(Pu=n=n.return);continue}break}}function pc(){var e=xu.current;return xu.current=ro,null===e?ro:e}function vc(){0!==ku&&3!==ku&&2!==ku||(ku=4),null===Lu||0==(268435455&Mu)&&0==(268435455&Bu)||oc(Lu,Iu)}function hc(e,t){var n=Tu;Tu|=2;var a=pc();for(Lu===e&&Iu===t||(Wu=null,fc(e,t));;)try{bc();break}catch(t){mc(e,t)}if(_r(),Tu=n,xu.current=a,null!==Pu)throw Error(r(261));return Lu=null,Iu=0,ku}function bc(){for(;null!==Pu;)Ec(Pu)}function gc(){for(;null!==Pu&&!Ye();)Ec(Pu)}function Ec(e){var t=Su(e.alternate,e,Nu);e.memoizedProps=e.pendingProps,null===t?yc(e):Pu=t,wu.current=null}function yc(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=qo(n,t,Nu)))return void(Pu=n)}else{if(null!==(n=Xo(n,t)))return n.flags&=32767,void(Pu=n);if(null===e)return ku=6,void(Pu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Pu=t);Pu=t=e}while(null!==t);0===ku&&(ku=5)}function _c(e,t,n){var a=Et,l=Ou.transition;try{Ou.transition=null,Et=1,function(e,t,n,a){do{Ac()}while(null!==Xu);if(0!=(6&Tu))throw Error(r(327));n=e.finishedWork;var l=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(r(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var a=e.eventTimes;for(e=e.expirationTimes;0<n;){var l=31-it(n),r=1<<l;t[l]=0,a[l]=-1,e[l]=-1,n&=~r}}(e,i),e===Lu&&(Pu=Lu=null,Iu=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||qu||(qu=!0,Lc(tt,(function(){return Ac(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Ou.transition,Ou.transition=null;var o=Et;Et=1;var u=Tu;Tu|=4,wu.current=null,function(e,t){if(el=$t,ma(e=fa())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var a=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(a&&0!==a.rangeCount){n=a.anchorNode;var l=a.anchorOffset,i=a.focusNode;a=a.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var o=0,u=-1,c=-1,s=0,d=0,f=e,m=null;t:for(;;){for(var p;f!==n||0!==l&&3!==f.nodeType||(u=o+l),f!==i||0!==a&&3!==f.nodeType||(c=o+a),3===f.nodeType&&(o+=f.nodeValue.length),null!==(p=f.firstChild);)m=f,f=p;for(;;){if(f===e)break t;if(m===n&&++s===l&&(u=o),m===i&&++d===a&&(c=o),null!==(p=f.nextSibling))break;m=(f=m).parentNode}f=p}n=-1===u||-1===c?null:{start:u,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(tl={focusedElem:e,selectionRange:n},$t=!1,Qo=t;null!==Qo;)if(e=(t=Qo).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Qo=e;else for(;null!==Qo;){t=Qo;try{var v=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==v){var h=v.memoizedProps,b=v.memoizedState,g=t.stateNode,E=g.getSnapshotBeforeUpdate(t.elementType===t.type?h:hr(t.type,h),b);g.__reactInternalSnapshotBeforeUpdate=E}break;case 3:var y=t.stateNode.containerInfo;1===y.nodeType?y.textContent="":9===y.nodeType&&y.documentElement&&y.removeChild(y.documentElement);break;default:throw Error(r(163))}}catch(e){Cc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Qo=e;break}Qo=t.return}v=tu,tu=!1}(e,n),hu(n,e),pa(tl),$t=!!el,tl=el=null,e.current=n,gu(n,e,l),Ze(),Tu=u,Et=o,Ou.transition=i}else e.current=n;if(qu&&(qu=!1,Xu=e,Yu=l),0===(i=e.pendingLanes)&&(Gu=null),function(e){if(rt&&"function"==typeof rt.onCommitFiberRoot)try{rt.onCommitFiberRoot(lt,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ac(e,Ke()),null!==t)for(a=e.onRecoverableError,n=0;n<t.length;n++)a((l=t[n]).value,{componentStack:l.stack,digest:l.digest});if($u)throw $u=!1,e=Vu,Vu=null,e;0!=(1&Yu)&&0!==e.tag&&Ac(),0!=(1&(i=e.pendingLanes))?e===Ku?Zu++:(Zu=0,Ku=e):Zu=0,Ul()}(e,t,n,a)}finally{Ou.transition=l,Et=a}return null}function Ac(){if(null!==Xu){var e=yt(Yu),t=Ou.transition,n=Et;try{if(Ou.transition=null,Et=16>e?16:e,null===Xu)var a=!1;else{if(e=Xu,Xu=null,Yu=0,0!=(6&Tu))throw Error(r(331));var l=Tu;for(Tu|=4,Qo=e.current;null!==Qo;){var i=Qo,o=i.child;if(0!=(16&Qo.flags)){var u=i.deletions;if(null!==u){for(var c=0;c<u.length;c++){var s=u[c];for(Qo=s;null!==Qo;){var d=Qo;switch(d.tag){case 0:case 11:case 15:nu(8,d,i)}var f=d.child;if(null!==f)f.return=d,Qo=f;else for(;null!==Qo;){var m=(d=Qo).sibling,p=d.return;if(ru(d),d===s){Qo=null;break}if(null!==m){m.return=p,Qo=m;break}Qo=p}}}var v=i.alternate;if(null!==v){var h=v.child;if(null!==h){v.child=null;do{var b=h.sibling;h.sibling=null,h=b}while(null!==h)}}Qo=i}}if(0!=(2064&i.subtreeFlags)&&null!==o)o.return=i,Qo=o;else e:for(;null!==Qo;){if(0!=(2048&(i=Qo).flags))switch(i.tag){case 0:case 11:case 15:nu(9,i,i.return)}var g=i.sibling;if(null!==g){g.return=i.return,Qo=g;break e}Qo=i.return}}var E=e.current;for(Qo=E;null!==Qo;){var y=(o=Qo).child;if(0!=(2064&o.subtreeFlags)&&null!==y)y.return=o,Qo=y;else e:for(o=E;null!==Qo;){if(0!=(2048&(u=Qo).flags))try{switch(u.tag){case 0:case 11:case 15:au(9,u)}}catch(e){Cc(u,u.return,e)}if(u===o){Qo=null;break e}var _=u.sibling;if(null!==_){_.return=u.return,Qo=_;break e}Qo=u.return}}if(Tu=l,Ul(),rt&&"function"==typeof rt.onPostCommitFiberRoot)try{rt.onPostCommitFiberRoot(lt,e)}catch(e){}a=!0}return a}finally{Et=n,Ou.transition=t}}return!1}function Sc(e,t,n){e=kr(e,t=po(0,t=co(n,t),1),1),t=ec(),null!==e&&(bt(e,1,t),ac(e,t))}function Cc(e,t,n){if(3===e.tag)Sc(e,e,n);else for(;null!==t;){if(3===t.tag){Sc(t,e,n);break}if(1===t.tag){var a=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof a.componentDidCatch&&(null===Gu||!Gu.has(a))){t=kr(t,e=vo(t,e=co(n,e),1),1),e=ec(),null!==t&&(bt(t,1,e),ac(t,e));break}}t=t.return}}function xc(e,t,n){var a=e.pingCache;null!==a&&a.delete(t),t=ec(),e.pingedLanes|=e.suspendedLanes&n,Lu===e&&(Iu&n)===n&&(4===ku||3===ku&&(130023424&Iu)===Iu&&500>Ke()-Hu?fc(e,0):ju|=n),ac(e,t)}function wc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=st,0==(130023424&(st<<=1))&&(st=4194304)));var n=ec();null!==(e=Lr(e,t))&&(bt(e,t,n),ac(e,n))}function Oc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),wc(e,n)}function Tc(e,t){var n=0;switch(e.tag){case 13:var a=e.stateNode,l=e.memoizedState;null!==l&&(n=l.retryLane);break;case 19:a=e.stateNode;break;default:throw Error(r(314))}null!==a&&a.delete(t),wc(e,n)}function Lc(e,t){return qe(e,t)}function Pc(e,t,n,a){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=a,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ic(e,t,n,a){return new Pc(e,t,n,a)}function Nc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Dc(e,t){var n=e.alternate;return null===n?((n=Ic(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function kc(e,t,n,a,l,i){var o=2;if(a=e,"function"==typeof e)Nc(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case S:return Rc(n.children,l,i,t);case C:o=8,l|=8;break;case x:return(e=Ic(12,n,t,2|l)).elementType=x,e.lanes=i,e;case L:return(e=Ic(13,n,t,l)).elementType=L,e.lanes=i,e;case P:return(e=Ic(19,n,t,l)).elementType=P,e.lanes=i,e;case D:return Mc(n,l,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case w:o=10;break e;case O:o=9;break e;case T:o=11;break e;case I:o=14;break e;case N:o=16,a=null;break e}throw Error(r(130,null==e?e:typeof e,""))}return(t=Ic(o,n,t,l)).elementType=e,t.type=a,t.lanes=i,t}function Rc(e,t,n,a){return(e=Ic(7,e,a,t)).lanes=n,e}function Mc(e,t,n,a){return(e=Ic(22,e,a,t)).elementType=D,e.lanes=n,e.stateNode={isHidden:!1},e}function Bc(e,t,n){return(e=Ic(6,e,null,t)).lanes=n,e}function jc(e,t,n){return(t=Ic(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function zc(e,t,n,a,l){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=ht(0),this.expirationTimes=ht(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ht(0),this.identifierPrefix=a,this.onRecoverableError=l,this.mutableSourceEagerHydrationData=null}function Fc(e,t,n,a,l,r,i,o,u){return e=new zc(e,t,n,o,u),1===t?(t=1,!0===r&&(t|=8)):t=0,r=Ic(3,null,null,t),e.current=r,r.stateNode=e,r.memoizedState={element:a,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ir(r),e}function Hc(e,t,n){var a=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:A,key:null==a?null:""+a,children:e,containerInfo:t,implementation:n}}function Uc(e){if(!e)return Ol;e:{if(Ue(e=e._reactInternals)!==e||1!==e.tag)throw Error(r(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Nl(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(r(171))}if(1===e.tag){var n=e.type;if(Nl(n))return Rl(e,n,t)}return t}function Wc(e,t,n,a,l,r,i,o,u){return(e=Fc(n,a,!0,e,0,r,0,o,u)).context=Uc(null),n=e.current,(r=Dr(a=ec(),l=tc(n))).callback=null!=t?t:null,kr(n,r,l),e.current.lanes=l,bt(e,l,a),ac(e,a),e}function $c(e,t,n,a){var l=t.current,r=ec(),i=tc(l);return n=Uc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Dr(r,i)).payload={element:e},null!==(a=void 0===a?null:a)&&(t.callback=a),null!==(e=kr(l,t,i))&&(nc(e,l,i,r),Rr(e,l,i)),i}function Vc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Gc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function qc(e,t){Gc(e,t),(e=e.alternate)&&Gc(e,t)}Su=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ll.current)yo=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return yo=!1,function(e,t,n){switch(t.tag){case 3:Po(t),mr();break;case 5:ri(t);break;case 1:Nl(t.type)&&Ml(t);break;case 4:ai(t,t.stateNode.containerInfo);break;case 10:var a=t.type._context,l=t.memoizedProps.value;wl(br,a._currentValue),a._currentValue=l;break;case 13:if(null!==(a=t.memoizedState))return null!==a.dehydrated?(wl(oi,1&oi.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Bo(e,t,n):(wl(oi,1&oi.current),null!==(e=$o(e,t,n))?e.sibling:null);wl(oi,1&oi.current);break;case 19:if(a=0!=(n&t.childLanes),0!=(128&e.flags)){if(a)return Uo(e,t,n);t.flags|=128}if(null!==(l=t.memoizedState)&&(l.rendering=null,l.tail=null,l.lastEffect=null),wl(oi,oi.current),a)break;return null;case 22:case 23:return t.lanes=0,xo(e,t,n)}return $o(e,t,n)}(e,t,n);yo=0!=(131072&e.flags)}else yo=!1,lr&&0!=(1048576&t.flags)&&Jl(t,Gl,t.index);switch(t.lanes=0,t.tag){case 2:var a=t.type;Wo(e,t),e=t.pendingProps;var l=Il(t,Tl.current);Cr(t,n),l=Si(null,t,a,e,l,n);var i=Ci();return t.flags|=1,"object"==typeof l&&null!==l&&"function"==typeof l.render&&void 0===l.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Nl(a)?(i=!0,Ml(t)):i=!1,t.memoizedState=null!==l.state&&void 0!==l.state?l.state:null,Ir(t),l.updater=Hr,t.stateNode=l,l._reactInternals=t,Vr(t,a,e,n),t=Lo(null,t,a,!0,i,n)):(t.tag=0,lr&&i&&er(t),_o(null,t,l,n),t=t.child),t;case 16:a=t.elementType;e:{switch(Wo(e,t),e=t.pendingProps,a=(l=a._init)(a._payload),t.type=a,l=t.tag=function(e){if("function"==typeof e)return Nc(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===I)return 14}return 2}(a),e=hr(a,e),l){case 0:t=Oo(null,t,a,e,n);break e;case 1:t=To(null,t,a,e,n);break e;case 11:t=Ao(null,t,a,e,n);break e;case 14:t=So(null,t,a,hr(a.type,e),n);break e}throw Error(r(306,a,""))}return t;case 0:return a=t.type,l=t.pendingProps,Oo(e,t,a,l=t.elementType===a?l:hr(a,l),n);case 1:return a=t.type,l=t.pendingProps,To(e,t,a,l=t.elementType===a?l:hr(a,l),n);case 3:e:{if(Po(t),null===e)throw Error(r(387));a=t.pendingProps,l=(i=t.memoizedState).element,Nr(e,t),Br(t,a,null,n);var o=t.memoizedState;if(a=o.element,i.isDehydrated){if(i={element:a,isDehydrated:!1,cache:o.cache,pendingSuspenseBoundaries:o.pendingSuspenseBoundaries,transitions:o.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Io(e,t,a,n,l=co(Error(r(423)),t));break e}if(a!==l){t=Io(e,t,a,n,l=co(Error(r(424)),t));break e}for(ar=cl(t.stateNode.containerInfo.firstChild),nr=t,lr=!0,rr=null,n=Kr(t,null,a,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(mr(),a===l){t=$o(e,t,n);break e}_o(e,t,a,n)}t=t.child}return t;case 5:return ri(t),null===e&&cr(t),a=t.type,l=t.pendingProps,i=null!==e?e.memoizedProps:null,o=l.children,nl(a,l)?o=null:null!==i&&nl(a,i)&&(t.flags|=32),wo(e,t),_o(e,t,o,n),t.child;case 6:return null===e&&cr(t),null;case 13:return Bo(e,t,n);case 4:return ai(t,t.stateNode.containerInfo),a=t.pendingProps,null===e?t.child=Zr(t,null,a,n):_o(e,t,a,n),t.child;case 11:return a=t.type,l=t.pendingProps,Ao(e,t,a,l=t.elementType===a?l:hr(a,l),n);case 7:return _o(e,t,t.pendingProps,n),t.child;case 8:case 12:return _o(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(a=t.type._context,l=t.pendingProps,i=t.memoizedProps,o=l.value,wl(br,a._currentValue),a._currentValue=o,null!==i)if(oa(i.value,o)){if(i.children===l.children&&!Ll.current){t=$o(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){o=i.child;for(var c=u.firstContext;null!==c;){if(c.context===a){if(1===i.tag){(c=Dr(-1,n&-n)).tag=2;var s=i.updateQueue;if(null!==s){var d=(s=s.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),s.pending=c}}i.lanes|=n,null!==(c=i.alternate)&&(c.lanes|=n),Sr(i.return,n,t),u.lanes|=n;break}c=c.next}}else if(10===i.tag)o=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(o=i.return))throw Error(r(341));o.lanes|=n,null!==(u=o.alternate)&&(u.lanes|=n),Sr(o,n,t),o=i.sibling}else o=i.child;if(null!==o)o.return=i;else for(o=i;null!==o;){if(o===t){o=null;break}if(null!==(i=o.sibling)){i.return=o.return,o=i;break}o=o.return}i=o}_o(e,t,l.children,n),t=t.child}return t;case 9:return l=t.type,a=t.pendingProps.children,Cr(t,n),a=a(l=xr(l)),t.flags|=1,_o(e,t,a,n),t.child;case 14:return l=hr(a=t.type,t.pendingProps),So(e,t,a,l=hr(a.type,l),n);case 15:return Co(e,t,t.type,t.pendingProps,n);case 17:return a=t.type,l=t.pendingProps,l=t.elementType===a?l:hr(a,l),Wo(e,t),t.tag=1,Nl(a)?(e=!0,Ml(t)):e=!1,Cr(t,n),Wr(t,a,l),Vr(t,a,l,n),Lo(null,t,a,!0,e,n);case 19:return Uo(e,t,n);case 22:return xo(e,t,n)}throw Error(r(156,t.tag))};var Xc="function"==typeof reportError?reportError:function(e){console.error(e)};function Yc(e){this._internalRoot=e}function Zc(e){this._internalRoot=e}function Kc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Qc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Jc(){}function es(e,t,n,a,l){var r=n._reactRootContainer;if(r){var i=r;if("function"==typeof l){var o=l;l=function(){var e=Vc(i);o.call(e)}}$c(t,i,e,l)}else i=function(e,t,n,a,l){if(l){if("function"==typeof a){var r=a;a=function(){var e=Vc(i);r.call(e)}}var i=Wc(t,a,e,0,null,!1,0,"",Jc);return e._reactRootContainer=i,e[pl]=i.current,Ua(8===e.nodeType?e.parentNode:e),sc(),i}for(;l=e.lastChild;)e.removeChild(l);if("function"==typeof a){var o=a;a=function(){var e=Vc(u);o.call(e)}}var u=Fc(e,0,!1,null,0,!1,0,"",Jc);return e._reactRootContainer=u,e[pl]=u.current,Ua(8===e.nodeType?e.parentNode:e),sc((function(){$c(t,u,n,a)})),u}(n,t,e,l,a);return Vc(i)}Zc.prototype.render=Yc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(r(409));$c(e,t,null,null)},Zc.prototype.unmount=Yc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;sc((function(){$c(null,e,null,null)})),t[pl]=null}},Zc.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ct();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Dt.length&&0!==t&&t<Dt[n].priority;n++);Dt.splice(n,0,e),0===n&&Bt(e)}},_t=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(gt(t,1|n),ac(t,Ke()),0==(6&Tu)&&(Uu=Ke()+500,Ul()))}break;case 13:sc((function(){var t=Lr(e,1);if(null!==t){var n=ec();nc(t,e,1,n)}})),qc(e,1)}},At=function(e){if(13===e.tag){var t=Lr(e,134217728);null!==t&&nc(t,e,134217728,ec()),qc(e,134217728)}},St=function(e){if(13===e.tag){var t=tc(e),n=Lr(e,t);null!==n&&nc(n,e,t,ec()),qc(e,t)}},Ct=function(){return Et},xt=function(e,t){var n=Et;try{return Et=e,t()}finally{Et=n}},Ae=function(e,t,n){switch(t){case"input":if(Q(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var a=n[t];if(a!==e&&a.form===e.form){var l=_l(a);if(!l)throw Error(r(90));q(a),Q(a,l)}}}break;case"textarea":re(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Te=cc,Le=sc;var ts={usingClientEntryPoint:!1,Events:[El,yl,_l,we,Oe,cc]},ns={findFiberByHostInstance:gl,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},as={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ls=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ls.isDisabled&&ls.supportsFiber)try{lt=ls.inject(as),rt=ls}catch(se){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Kc(t))throw Error(r(200));return Hc(e,t,null,n)},t.createRoot=function(e,t){if(!Kc(e))throw Error(r(299));var n=!1,a="",l=Xc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(a=t.identifierPrefix),void 0!==t.onRecoverableError&&(l=t.onRecoverableError)),t=Fc(e,1,!1,null,0,n,0,a,l),e[pl]=t.current,Ua(8===e.nodeType?e.parentNode:e),new Yc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(r(188));throw e=Object.keys(e).join(","),Error(r(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return sc(e)},t.hydrate=function(e,t,n){if(!Qc(t))throw Error(r(200));return es(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Kc(e))throw Error(r(405));var a=null!=n&&n.hydratedSources||null,l=!1,i="",o=Xc;if(null!=n&&(!0===n.unstable_strictMode&&(l=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(o=n.onRecoverableError)),t=Wc(t,null,e,1,null!=n?n:null,l,0,i,o),e[pl]=t.current,Ua(e),a)for(e=0;e<a.length;e++)l=(l=(n=a[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,l]:t.mutableSourceEagerHydrationData.push(n,l);return new Zc(t)},t.render=function(e,t,n){if(!Qc(t))throw Error(r(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Qc(e))throw Error(r(40));return!!e._reactRootContainer&&(sc((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[pl]=null}))})),!0)},t.unstable_batchedUpdates=cc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,a){if(!Qc(n))throw Error(r(200));if(null==e||void 0===e._reactInternals)throw Error(r(38));return es(e,t,n,!1,a)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{var a=n(3935);t.createRoot=a.createRoot,t.hydrateRoot=a.hydrateRoot},3935:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{var n="function"==typeof Symbol&&Symbol.for,a=n?Symbol.for("react.element"):60103,l=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,o=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,m=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.suspense_list"):60120,v=n?Symbol.for("react.memo"):60115,h=n?Symbol.for("react.lazy"):60116,b=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,E=n?Symbol.for("react.responder"):60118,y=n?Symbol.for("react.scope"):60119;function _(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case a:switch(e=e.type){case s:case d:case r:case o:case i:case m:return e;default:switch(e=e&&e.$$typeof){case c:case f:case h:case v:case u:return e;default:return t}}case l:return t}}}function A(e){return _(e)===d}t.AsyncMode=s,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=u,t.Element=a,t.ForwardRef=f,t.Fragment=r,t.Lazy=h,t.Memo=v,t.Portal=l,t.Profiler=o,t.StrictMode=i,t.Suspense=m,t.isAsyncMode=function(e){return A(e)||_(e)===s},t.isConcurrentMode=A,t.isContextConsumer=function(e){return _(e)===c},t.isContextProvider=function(e){return _(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===a},t.isForwardRef=function(e){return _(e)===f},t.isFragment=function(e){return _(e)===r},t.isLazy=function(e){return _(e)===h},t.isMemo=function(e){return _(e)===v},t.isPortal=function(e){return _(e)===l},t.isProfiler=function(e){return _(e)===o},t.isStrictMode=function(e){return _(e)===i},t.isSuspense=function(e){return _(e)===m},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===r||e===d||e===o||e===i||e===m||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===h||e.$$typeof===v||e.$$typeof===u||e.$$typeof===c||e.$$typeof===f||e.$$typeof===g||e.$$typeof===E||e.$$typeof===y||e.$$typeof===b)},t.typeOf=_},9864:(e,t,n)=>{e.exports=n(9921)},6113:(e,t,n)=>{n.r(t),n.d(t,{Provider:()=>z,ReactReduxContext:()=>c,batch:()=>r.unstable_batchedUpdates,connect:()=>j,createDispatchHook:()=>U,createSelectorHook:()=>p,createStoreHook:()=>F,shallowEqual:()=>N,useDispatch:()=>W,useSelector:()=>v,useStore:()=>H});var a=n(1688),l=n(2798),r=n(3935);let i=function(e){e()};const o=()=>i;var u=n(7294);const c=(0,u.createContext)(null);function s(){return(0,u.useContext)(c)}const d=()=>{throw new Error("uSES not initialized!")};let f=d;const m=(e,t)=>e===t;function p(e=c){const t=e===c?s:()=>(0,u.useContext)(e);return function(e,n=m){const{store:a,subscription:l,getServerState:r}=t(),i=f(l.addNestedSub,a.getState,r||a.getState,e,n);return(0,u.useDebugValue)(i),i}}const v=p();function h(){return h=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},h.apply(this,arguments)}function b(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}var g=n(8679),E=n.n(g),y=n(2973);const _=["initMapStateToProps","initMapDispatchToProps","initMergeProps"];function A(e,t,n,a,{areStatesEqual:l,areOwnPropsEqual:r,areStatePropsEqual:i}){let o,u,c,s,d,f=!1;return function(m,p){return f?function(f,m){const p=!r(m,u),v=!l(f,o,m,u);return o=f,u=m,p&&v?(c=e(o,u),t.dependsOnOwnProps&&(s=t(a,u)),d=n(c,s,u),d):p?(e.dependsOnOwnProps&&(c=e(o,u)),t.dependsOnOwnProps&&(s=t(a,u)),d=n(c,s,u),d):v?function(){const t=e(o,u),a=!i(t,c);return c=t,a&&(d=n(c,s,u)),d}():d}(m,p):(o=m,u=p,c=e(o,u),s=t(a,u),d=n(c,s,u),f=!0,d)}}function S(e){return function(t){const n=e(t);function a(){return n}return a.dependsOnOwnProps=!1,a}}function C(e){return e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function x(e,t){return function(t,{displayName:n}){const a=function(e,t){return a.dependsOnOwnProps?a.mapToProps(e,t):a.mapToProps(e,void 0)};return a.dependsOnOwnProps=!0,a.mapToProps=function(t,n){a.mapToProps=e,a.dependsOnOwnProps=C(e);let l=a(t,n);return"function"==typeof l&&(a.mapToProps=l,a.dependsOnOwnProps=C(l),l=a(t,n)),l},a}}function w(e,t){return(n,a)=>{throw new Error(`Invalid value of type ${typeof e} for ${t} argument when connecting component ${a.wrappedComponentName}.`)}}function O(e,t,n){return h({},n,e,t)}const T={notify(){},get:()=>[]};function L(e,t){let n,a=T;function l(){i.onStateChange&&i.onStateChange()}function r(){n||(n=t?t.addNestedSub(l):e.subscribe(l),a=function(){const e=o();let t=null,n=null;return{clear(){t=null,n=null},notify(){e((()=>{let e=t;for(;e;)e.callback(),e=e.next}))},get(){let e=[],n=t;for(;n;)e.push(n),n=n.next;return e},subscribe(e){let a=!0,l=n={callback:e,next:null,prev:n};return l.prev?l.prev.next=l:t=l,function(){a&&null!==t&&(a=!1,l.next?l.next.prev=l.prev:n=l.prev,l.prev?l.prev.next=l.next:t=l.next)}}}}())}const i={addNestedSub:function(e){return r(),a.subscribe(e)},notifyNestedSubs:function(){a.notify()},handleChangeWrapper:l,isSubscribed:function(){return Boolean(n)},trySubscribe:r,tryUnsubscribe:function(){n&&(n(),n=void 0,a.clear(),a=T)},getListeners:()=>a};return i}const P="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?u.useLayoutEffect:u.useEffect;function I(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function N(e,t){if(I(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;const n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(let a=0;a<n.length;a++)if(!Object.prototype.hasOwnProperty.call(t,n[a])||!I(e[n[a]],t[n[a]]))return!1;return!0}const D=["reactReduxForwardedRef"];let k=d;const R=[null,null];function M(e,t,n,a,l,r){e.current=a,n.current=!1,l.current&&(l.current=null,r())}function B(e,t){return e===t}const j=function(e,t,n,{pure:a,areStatesEqual:l=B,areOwnPropsEqual:r=N,areStatePropsEqual:i=N,areMergedPropsEqual:o=N,forwardRef:s=!1,context:d=c}={}){const f=d,m=function(e){return e?"function"==typeof e?x(e):w(e,"mapStateToProps"):S((()=>({})))}(e),p=function(e){return e&&"object"==typeof e?S((t=>function(e,t){const n={};for(const a in e){const l=e[a];"function"==typeof l&&(n[a]=(...e)=>t(l(...e)))}return n}(e,t))):e?"function"==typeof e?x(e):w(e,"mapDispatchToProps"):S((e=>({dispatch:e})))}(t),v=function(e){return e?"function"==typeof e?function(e){return function(t,{displayName:n,areMergedPropsEqual:a}){let l,r=!1;return function(t,n,i){const o=e(t,n,i);return r?a(o,l)||(l=o):(r=!0,l=o),l}}}(e):w(e,"mergeProps"):()=>O}(n),g=Boolean(e);return e=>{const t=e.displayName||e.name||"Component",n=`Connect(${t})`,a={shouldHandleStateChanges:g,displayName:n,wrappedComponentName:t,WrappedComponent:e,initMapStateToProps:m,initMapDispatchToProps:p,initMergeProps:v,areStatesEqual:l,areStatePropsEqual:i,areOwnPropsEqual:r,areMergedPropsEqual:o};function c(t){const[n,l,r]=(0,u.useMemo)((()=>{const{reactReduxForwardedRef:e}=t,n=b(t,D);return[t.context,e,n]}),[t]),i=(0,u.useMemo)((()=>n&&n.Consumer&&(0,y.isContextConsumer)(u.createElement(n.Consumer,null))?n:f),[n,f]),o=(0,u.useContext)(i),c=Boolean(t.store)&&Boolean(t.store.getState)&&Boolean(t.store.dispatch),s=Boolean(o)&&Boolean(o.store),d=c?t.store:o.store,m=s?o.getServerState:d.getState,p=(0,u.useMemo)((()=>function(e,t){let{initMapStateToProps:n,initMapDispatchToProps:a,initMergeProps:l}=t,r=b(t,_);return A(n(e,r),a(e,r),l(e,r),e,r)}(d.dispatch,a)),[d]),[v,E]=(0,u.useMemo)((()=>{if(!g)return R;const e=L(d,c?void 0:o.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[d,c,o]),S=(0,u.useMemo)((()=>c?o:h({},o,{subscription:v})),[c,o,v]),C=(0,u.useRef)(),x=(0,u.useRef)(r),w=(0,u.useRef)(),O=(0,u.useRef)(!1),T=((0,u.useRef)(!1),(0,u.useRef)(!1)),I=(0,u.useRef)();P((()=>(T.current=!0,()=>{T.current=!1})),[]);const N=(0,u.useMemo)((()=>()=>w.current&&r===x.current?w.current:p(d.getState(),r)),[d,r]),B=(0,u.useMemo)((()=>e=>v?function(e,t,n,a,l,r,i,o,u,c,s){if(!e)return()=>{};let d=!1,f=null;const m=()=>{if(d||!o.current)return;const e=t.getState();let n,m;try{n=a(e,l.current)}catch(e){m=e,f=e}m||(f=null),n===r.current?i.current||c():(r.current=n,u.current=n,i.current=!0,s())};return n.onStateChange=m,n.trySubscribe(),m(),()=>{if(d=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}(g,d,v,p,x,C,O,T,w,E,e):()=>{}),[v]);var j,z;let F;j=M,z=[x,C,O,r,w,E],P((()=>j(...z)),undefined);try{F=k(B,N,m?()=>p(m(),r):N)}catch(e){throw I.current&&(e.message+=`\nThe error may be correlated with this previous error:\n${I.current.stack}\n\n`),e}P((()=>{I.current=void 0,w.current=void 0,C.current=F}));const H=(0,u.useMemo)((()=>u.createElement(e,h({},F,{ref:l}))),[l,e,F]);return(0,u.useMemo)((()=>g?u.createElement(i.Provider,{value:S},H):H),[i,H,S])}const d=u.memo(c);if(d.WrappedComponent=e,d.displayName=c.displayName=n,s){const t=u.forwardRef((function(e,t){return u.createElement(d,h({},e,{reactReduxForwardedRef:t}))}));return t.displayName=n,t.WrappedComponent=e,E()(t,e)}return E()(d,e)}},z=function({store:e,context:t,children:n,serverState:a}){const l=(0,u.useMemo)((()=>{const t=L(e);return{store:e,subscription:t,getServerState:a?()=>a:void 0}}),[e,a]),r=(0,u.useMemo)((()=>e.getState()),[e]);P((()=>{const{subscription:t}=l;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),r!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[l,r]);const i=t||c;return u.createElement(i.Provider,{value:l},n)};function F(e=c){const t=e===c?s:()=>(0,u.useContext)(e);return function(){const{store:e}=t();return e}}const H=F();function U(e=c){const t=e===c?H:F(e);return function(){return t().dispatch}}const W=U();var $,V;$=l.useSyncExternalStoreWithSelector,f=$,(e=>{k=e})(a.useSyncExternalStore),V=r.unstable_batchedUpdates,i=V},8359:(e,t)=>{var n=Symbol.for("react.element"),a=Symbol.for("react.portal"),l=Symbol.for("react.fragment"),r=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.server_context"),s=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),f=Symbol.for("react.suspense_list"),m=Symbol.for("react.memo"),p=Symbol.for("react.lazy");Symbol.for("react.offscreen");Symbol.for("react.module.reference"),t.isContextConsumer=function(e){return function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case l:case i:case r:case d:case f:return e;default:switch(e=e&&e.$$typeof){case c:case u:case s:case p:case m:case o:return e;default:return t}}case a:return t}}}(e)===u}},2973:(e,t,n)=>{e.exports=n(8359)},9818:(e,t,n)=>{n.r(t),n.d(t,{AbortedDeferredError:()=>H,Await:()=>St,BrowserRouter:()=>$t,Form:()=>Yt,HashRouter:()=>Vt,Link:()=>qt,MemoryRouter:()=>bt,NavLink:()=>Xt,Navigate:()=>gt,NavigationType:()=>a,Outlet:()=>Et,Route:()=>yt,Router:()=>_t,RouterProvider:()=>ht,Routes:()=>At,ScrollRestoration:()=>Kt,UNSAFE_DataRouterContext:()=>ke,UNSAFE_DataRouterStateContext:()=>Re,UNSAFE_DataStaticRouterContext:()=>De,UNSAFE_LocationContext:()=>je,UNSAFE_NavigationContext:()=>Be,UNSAFE_RouteContext:()=>ze,UNSAFE_enhanceManualRouteObjects:()=>Lt,createBrowserRouter:()=>Ft,createHashRouter:()=>Ht,createMemoryRouter:()=>Pt,createPath:()=>v,createRoutesFromChildren:()=>Ot,createRoutesFromElements:()=>Ot,createSearchParams:()=>Mt,defer:()=>$,generatePath:()=>O,isRouteErrorResponse:()=>q,json:()=>F,matchPath:()=>T,matchRoutes:()=>_,parsePath:()=>h,redirect:()=>V,renderMatches:()=>Tt,resolvePath:()=>N,unstable_HistoryRouter:()=>Gt,useActionData:()=>ft,useAsyncError:()=>vt,useAsyncValue:()=>pt,useFetcher:()=>cn,useFetchers:()=>sn,useFormAction:()=>on,useHref:()=>He,useInRouterContext:()=>Ue,useLinkClickHandler:()=>nn,useLoaderData:()=>st,useLocation:()=>We,useMatch:()=>Ve,useMatches:()=>ct,useNavigate:()=>Ge,useNavigation:()=>ot,useNavigationType:()=>$e,useOutlet:()=>Ye,useOutletContext:()=>Xe,useParams:()=>Ze,useResolvedPath:()=>Ke,useRevalidator:()=>ut,useRouteError:()=>mt,useRouteLoaderData:()=>dt,useRoutes:()=>Qe,useSearchParams:()=>an,useSubmit:()=>ln});var a,l=n(7294),r=n.t(l,2);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(a||(a={}));const o="popstate";function u(e){void 0===e&&(e={});let t,{initialEntries:n=["/"],initialIndex:l,v5Compat:r=!1}=e;t=n.map(((e,t)=>d(e,"string"==typeof e?null:e.state,0===t?"default":void 0)));let i=c(null==l?t.length-1:l),o=a.Pop,u=null;function c(e){return Math.min(Math.max(e,0),t.length-1)}function s(){return t[i]}function d(e,n,a){void 0===n&&(n=null);let l=p(t?s().pathname:"/",e,n,a);return f("/"===l.pathname.charAt(0),"relative pathnames are not supported in memory history: "+JSON.stringify(e)),l}return{get index(){return i},get action(){return o},get location(){return s()},createHref:e=>"string"==typeof e?e:v(e),encodeLocation(e){let t="string"==typeof e?h(e):e;return{pathname:t.pathname||"",search:t.search||"",hash:t.hash||""}},push(e,n){o=a.Push;let l=d(e,n);i+=1,t.splice(i,t.length,l),r&&u&&u({action:o,location:l})},replace(e,n){o=a.Replace;let l=d(e,n);t[i]=l,r&&u&&u({action:o,location:l})},go(e){o=a.Pop,i=c(i+e),u&&u({action:o,location:s()})},listen:e=>(u=e,()=>{u=null})}}function c(e){return void 0===e&&(e={}),g((function(e,t){let{pathname:n,search:a,hash:l}=e.location;return p("",{pathname:n,search:a,hash:l},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:v(t)}),null,e)}function s(e){return void 0===e&&(e={}),g((function(e,t){let{pathname:n="/",search:a="",hash:l=""}=h(e.location.hash.substr(1));return p("",{pathname:n,search:a,hash:l},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),a="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");a=-1===n?t:t.slice(0,n)}return a+"#"+("string"==typeof t?t:v(t))}),(function(e,t){f("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),e)}function d(e,t){if(!1===e||null==e)throw new Error(t)}function f(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function m(e){return{usr:e.state,key:e.key}}function p(e,t,n,a){return void 0===n&&(n=null),i({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?h(t):t,{state:n,key:t&&t.key||a||Math.random().toString(36).substr(2,8)})}function v(e){let{pathname:t="/",search:n="",hash:a=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),a&&"#"!==a&&(t+="#"===a.charAt(0)?a:"#"+a),t}function h(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let a=e.indexOf("?");a>=0&&(t.search=e.substr(a),e=e.substr(0,a)),e&&(t.pathname=e)}return t}function b(e){let t="undefined"!=typeof window&&void 0!==window.location&&"null"!==window.location.origin?window.location.origin:window.location.href,n="string"==typeof e?e:v(e);return d(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}function g(e,t,n,l){void 0===l&&(l={});let{window:r=document.defaultView,v5Compat:i=!1}=l,u=r.history,c=a.Pop,s=null;function d(){c=a.Pop,s&&s({action:c,location:f.location})}let f={get action(){return c},get location(){return e(r,u)},listen(e){if(s)throw new Error("A history only accepts one active listener");return r.addEventListener(o,d),s=e,()=>{r.removeEventListener(o,d),s=null}},createHref:e=>t(r,e),encodeLocation(e){let t=b("string"==typeof e?e:v(e));return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){c=a.Push;let l=p(f.location,e,t);n&&n(l,e);let o=m(l),d=f.createHref(l);try{u.pushState(o,"",d)}catch(e){r.location.assign(d)}i&&s&&s({action:c,location:f.location})},replace:function(e,t){c=a.Replace;let l=p(f.location,e,t);n&&n(l,e);let r=m(l),o=f.createHref(l);u.replaceState(r,"",o),i&&s&&s({action:c,location:f.location})},go:e=>u.go(e)};return f}var E;function y(e,t,n){return void 0===t&&(t=[]),void 0===n&&(n=new Set),e.map(((e,a)=>{let l=[...t,a],r="string"==typeof e.id?e.id:l.join("-");return d(!0!==e.index||!e.children,"Cannot specify children on an index route"),d(!n.has(r),'Found a route id collision on id "'+r+"\".  Route id's must be globally unique within Data Router usages"),n.add(r),function(e){return!0===e.index}(e)?i({},e,{id:r}):i({},e,{id:r,children:e.children?y(e.children,l,n):void 0})}))}function _(e,t,n){void 0===n&&(n="/");let a=P(("string"==typeof t?h(t):t).pathname||"/",n);if(null==a)return null;let l=A(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(l);let r=null;for(let e=0;null==r&&e<l.length;++e)r=w(l[e],L(a));return r}function A(e,t,n,a){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===a&&(a=""),e.forEach(((e,l)=>{let r={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:l,route:e};r.relativePath.startsWith("/")&&(d(r.relativePath.startsWith(a),'Absolute route path "'+r.relativePath+'" nested under path "'+a+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),r.relativePath=r.relativePath.slice(a.length));let i=M([a,r.relativePath]),o=n.concat(r);e.children&&e.children.length>0&&(d(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+i+'".'),A(e.children,t,o,i)),(null!=e.path||e.index)&&t.push({path:i,score:x(i,e.index),routesMeta:o})})),t}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(E||(E={}));const S=/^:\w+$/,C=e=>"*"===e;function x(e,t){let n=e.split("/"),a=n.length;return n.some(C)&&(a+=-2),t&&(a+=2),n.filter((e=>!C(e))).reduce(((e,t)=>e+(S.test(t)?3:""===t?1:10)),a)}function w(e,t){let{routesMeta:n}=e,a={},l="/",r=[];for(let e=0;e<n.length;++e){let i=n[e],o=e===n.length-1,u="/"===l?t:t.slice(l.length)||"/",c=T({path:i.relativePath,caseSensitive:i.caseSensitive,end:o},u);if(!c)return null;Object.assign(a,c.params);let s=i.route;r.push({params:a,pathname:M([l,c.pathname]),pathnameBase:B(M([l,c.pathnameBase])),route:s}),"/"!==c.pathnameBase&&(l=M([l,c.pathnameBase]))}return r}function O(e,t){return void 0===t&&(t={}),e.replace(/:(\w+)/g,((e,n)=>(d(null!=t[n],'Missing ":'+n+'" param'),t[n]))).replace(/(\/?)\*/,((e,n,a,l)=>null==t["*"]?"/*"===l?"/":"":""+n+t["*"]))}function T(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,a]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),I("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let a=[],l="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(a.push(t),"([^\\/]+)")));return e.endsWith("*")?(a.push("*"),l+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?l+="\\/*$":""!==e&&"/"!==e&&(l+="(?:(?=\\/|$))"),[new RegExp(l,t?void 0:"i"),a]}(e.path,e.caseSensitive,e.end),l=t.match(n);if(!l)return null;let r=l[0],i=r.replace(/(.)\/+$/,"$1"),o=l.slice(1);return{params:a.reduce(((e,t,n)=>{if("*"===t){let e=o[n]||"";i=r.slice(0,r.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return I(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(o[n]||"",t),e}),{}),pathname:r,pathnameBase:i,pattern:e}}function L(e){try{return decodeURI(e)}catch(t){return I(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function P(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,a=e.charAt(n);return a&&"/"!==a?null:e.slice(n)||"/"}function I(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function N(e,t){void 0===t&&(t="/");let{pathname:n,search:a="",hash:l=""}="string"==typeof e?h(e):e,r=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:r,search:j(a),hash:z(l)}}function D(e,t,n,a){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(a)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function k(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function R(e,t,n,a){let l;void 0===a&&(a=!1),"string"==typeof e?l=h(e):(l=i({},e),d(!l.pathname||!l.pathname.includes("?"),D("?","pathname","search",l)),d(!l.pathname||!l.pathname.includes("#"),D("#","pathname","hash",l)),d(!l.search||!l.search.includes("#"),D("#","search","hash",l)));let r,o=""===e||""===l.pathname,u=o?"/":l.pathname;if(a||null==u)r=n;else{let e=t.length-1;if(u.startsWith("..")){let t=u.split("/");for(;".."===t[0];)t.shift(),e-=1;l.pathname=t.join("/")}r=e>=0?t[e]:"/"}let c=N(l,r),s=u&&"/"!==u&&u.endsWith("/"),f=(o||"."===u)&&n.endsWith("/");return c.pathname.endsWith("/")||!s&&!f||(c.pathname+="/"),c}const M=e=>e.join("/").replace(/\/\/+/g,"/"),B=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),j=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",z=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"",F=function(e,t){void 0===t&&(t={});let n="number"==typeof t?{status:t}:t,a=new Headers(n.headers);return a.has("Content-Type")||a.set("Content-Type","application/json; charset=utf-8"),new Response(JSON.stringify(e),i({},n,{headers:a}))};class H extends Error{}class U{constructor(e){let t;this.pendingKeys=new Set,this.subscriber=void 0,d(e&&"object"==typeof e&&!Array.isArray(e),"defer() only accepts plain objects"),this.abortPromise=new Promise(((e,n)=>t=n)),this.controller=new AbortController;let n=()=>t(new H("Deferred data aborted"));this.unlistenAbortSignal=()=>this.controller.signal.removeEventListener("abort",n),this.controller.signal.addEventListener("abort",n),this.data=Object.entries(e).reduce(((e,t)=>{let[n,a]=t;return Object.assign(e,{[n]:this.trackPromise(n,a)})}),{})}trackPromise(e,t){if(!(t instanceof Promise))return t;this.pendingKeys.add(e);let n=Promise.race([t,this.abortPromise]).then((t=>this.onSettle(n,e,null,t)),(t=>this.onSettle(n,e,t)));return n.catch((()=>{})),Object.defineProperty(n,"_tracked",{get:()=>!0}),n}onSettle(e,t,n,a){if(this.controller.signal.aborted&&n instanceof H)return this.unlistenAbortSignal(),Object.defineProperty(e,"_error",{get:()=>n}),Promise.reject(n);this.pendingKeys.delete(t),this.done&&this.unlistenAbortSignal();const l=this.subscriber;return n?(Object.defineProperty(e,"_error",{get:()=>n}),l&&l(!1),Promise.reject(n)):(Object.defineProperty(e,"_data",{get:()=>a}),l&&l(!1),a)}subscribe(e){this.subscriber=e}cancel(){this.controller.abort(),this.pendingKeys.forEach(((e,t)=>this.pendingKeys.delete(t)));let e=this.subscriber;e&&e(!0)}async resolveData(e){let t=!1;if(!this.done){let n=()=>this.cancel();e.addEventListener("abort",n),t=await new Promise((t=>{this.subscribe((a=>{e.removeEventListener("abort",n),(a||this.done)&&t(a)}))}))}return t}get done(){return 0===this.pendingKeys.size}get unwrappedData(){return d(null!==this.data&&this.done,"Can only unwrap data on initialized and settled deferreds"),Object.entries(this.data).reduce(((e,t)=>{let[n,a]=t;return Object.assign(e,{[n]:W(a)})}),{})}}function W(e){if(!function(e){return e instanceof Promise&&!0===e._tracked}(e))return e;if(e._error)throw e._error;return e._data}function $(e){return new U(e)}const V=function(e,t){void 0===t&&(t=302);let n=t;"number"==typeof n?n={status:n}:void 0===n.status&&(n.status=302);let a=new Headers(n.headers);return a.set("Location",e),new Response(null,i({},n,{headers:a}))};class G{constructor(e,t,n,a){void 0===a&&(a=!1),this.status=e,this.statusText=t||"",this.internal=a,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}}function q(e){return e instanceof G}const X=["post","put","patch","delete"],Y=new Set(X),Z=["get",...X],K=new Set(Z),Q=new Set([301,302,303,307,308]),J=new Set([307,308]),ee={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},te={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},ne=!("undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement);function ae(e){d(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let t=y(e.routes),n=null,l=new Set,r=null,o=null,u=null,c=!1,s=_(t,e.history.location,e.basename),f=null;if(null==s){let n=ve(404,{pathname:e.history.location.pathname}),{matches:a,route:l}=pe(t);s=a,f={[l.id]:n}}let m,v,h=!s.some((e=>e.route.loader))||null!=e.hydrationData,g={historyAction:e.history.action,location:e.history.location,matches:s,initialized:h,navigation:ee,restoreScrollPosition:null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||f,fetchers:new Map},A=a.Pop,S=!1,C=!1,x=!1,w=[],O=[],T=new Map,L=0,P=-1,I=new Map,N=new Set,D=new Map,k=new Map;function R(e){g=i({},g,e),l.forEach((e=>e(g)))}function M(t,n){var l;R(i({},null!=g.actionData&&null!=g.navigation.formMethod&&"loading"===g.navigation.state&&(null==(l=g.navigation.formAction)?void 0:l.split("?")[0])===t.pathname?{}:{actionData:null},n,n.loaderData?{loaderData:fe(g.loaderData,n.loaderData,n.matches||[])}:{},{historyAction:A,location:t,initialized:!0,navigation:ee,revalidation:"idle",restoreScrollPosition:!g.navigation.formData&&X(t,n.matches||g.matches),preventScrollReset:S})),C||A===a.Pop||(A===a.Push?e.history.push(t,t.state):A===a.Replace&&e.history.replace(t,t.state)),A=a.Pop,S=!1,C=!1,x=!1,w=[],O=[]}async function B(n,l,c){v&&v.abort(),v=null,A=n,C=!0===(c&&c.startUninterruptedRevalidation),function(e,t){if(r&&o&&u){let n=t.map((e=>xe(e,g.loaderData))),a=o(e,n)||e.key;r[a]=u()}}(g.location,g.matches),S=!0===(c&&c.preventScrollReset);let s=c&&c.overrideNavigation,f=_(t,l,e.basename);if(!f){let e=ve(404,{pathname:l.pathname}),{matches:n,route:a}=pe(t);return q(),void M(l,{matches:n,loaderData:{},errors:{[a.id]:e}})}if(h=l,(p=g.location).pathname===h.pathname&&p.search===h.search&&p.hash!==h.hash)return void M(l,{matches:f});var p,h;v=new AbortController;let b,y,I=ce(l,v.signal,c&&c.submission);if(c&&c.pendingError)y={[me(f).route.id]:c.pendingError};else if(c&&c.submission){let e=await async function(e,t,n,l,r){let o;H(),R({navigation:i({state:"submitting",location:t},n)});let u=we(l,t);if(u.route.action){if(o=await ue("action",e,u,l,m.basename),e.signal.aborted)return{shortCircuited:!0}}else o={type:E.error,error:ve(405,{method:e.method,pathname:t.pathname,routeId:u.route.id})};if(ye(o))return await z(g,o,r&&!0===r.replace),{shortCircuited:!0};if(Ee(o)){let e=me(l,u.route.id);return!0!==(r&&r.replace)&&(A=a.Push),{pendingActionError:{[e.route.id]:o.error}}}if(ge(o))throw new Error("defer() is not supported in actions");return{pendingActionData:{[u.route.id]:o.data}}}(I,l,c.submission,f,{replace:c.replace});if(e.shortCircuited)return;b=e.pendingActionData,y=e.pendingActionError,s=i({state:"loading",location:l},c.submission),I=new Request(I.url,{signal:I.signal})}let{shortCircuited:B,loaderData:j,errors:U}=await async function(e,t,n,a,l,r,o,u){let c=a;c||(c={state:"loading",location:t,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0});let[s,f]=re(g,n,l,t,x,w,O,o,u,D);if(q((e=>!(n&&n.some((t=>t.route.id===e)))||s&&s.some((t=>t.route.id===e)))),0===s.length&&0===f.length)return M(t,{matches:n,loaderData:fe(g.loaderData,{},n),errors:u||null,actionData:o||null}),{shortCircuited:!0};C||(f.forEach((e=>{let[t]=e,n=g.fetchers.get(t),a={state:"loading",data:n&&n.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};g.fetchers.set(t,a)})),R(i({navigation:c,actionData:o||g.actionData||null},f.length>0?{fetchers:new Map(g.fetchers)}:{}))),P=++L,f.forEach((e=>{let[t]=e;return T.set(t,v)}));let{results:m,loaderResults:p,fetcherResults:h}=await F(g.matches,n,s,f,e);if(e.signal.aborted)return{shortCircuited:!0};f.forEach((e=>{let[t]=e;return T.delete(t)}));let b=he(m);if(b)return await z(g,b,r),{shortCircuited:!0};let{loaderData:E,errors:y}=de(g,n,s,p,u,f,h,k);return k.forEach(((e,t)=>{e.subscribe((n=>{(n||e.done)&&k.delete(t)}))})),function(){let e=[];for(let t of N){let n=g.fetchers.get(t);d(n,"Expected fetcher: "+t),"loading"===n.state&&(N.delete(t),e.push(t))}V(e)}(),i({loaderData:E,errors:y},G(P)||f.length>0?{fetchers:new Map(g.fetchers)}:{})}(I,l,f,s,c&&c.submission,c&&c.replace,b,y);B||(v=null,M(l,{matches:f,loaderData:j,errors:U}))}function j(e){return g.fetchers.get(e)||te}async function z(e,t,n){var l;t.revalidate&&(x=!0);let r=p(e.location,t.location);if(d(r,"Expected a location on the redirect navigation"),void 0!==(null==(l=window)?void 0:l.location)){let e=b(t.location).origin;if(window.location.origin!==e)return void(n?window.location.replace(t.location):window.location.assign(t.location))}v=null;let i=!0===n?a.Replace:a.Push,{formMethod:o,formAction:u,formEncType:c,formData:s}=e.navigation;J.has(t.status)&&o&&_e(o)&&c&&s?await B(i,r,{submission:{formMethod:o,formAction:t.location,formEncType:c,formData:s}}):await B(i,r,{overrideNavigation:{state:"loading",location:r,formMethod:o||void 0,formAction:u||void 0,formEncType:c||void 0,formData:s||void 0}})}async function F(e,t,n,a,l){let r=await Promise.all([...n.map((e=>ue("loader",l,e,t,m.basename))),...a.map((e=>{let[,t,n,a]=e;return ue("loader",ce(t,l.signal),n,a,m.basename)}))]),i=r.slice(0,n.length),o=r.slice(n.length);return await Promise.all([Ae(e,n,i,l.signal,!1,g.loaderData),Ae(e,a.map((e=>{let[,,t]=e;return t})),o,l.signal,!0)]),{results:r,loaderResults:i,fetcherResults:o}}function H(){x=!0,w.push(...q()),D.forEach(((e,t)=>{T.has(t)&&(O.push(t),$(t))}))}function U(e,t,n){let a=me(g.matches,t);W(e),R({errors:{[a.route.id]:n},fetchers:new Map(g.fetchers)})}function W(e){T.has(e)&&$(e),D.delete(e),I.delete(e),N.delete(e),g.fetchers.delete(e)}function $(e){let t=T.get(e);d(t,"Expected fetch controller: "+e),t.abort(),T.delete(e)}function V(e){for(let t of e){let e={state:"idle",data:j(t).data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};g.fetchers.set(t,e)}}function G(e){let t=[];for(let[n,a]of I)if(a<e){let e=g.fetchers.get(n);d(e,"Expected fetcher: "+n),"loading"===e.state&&($(n),I.delete(n),t.push(n))}return V(t),t.length>0}function q(e){let t=[];return k.forEach(((n,a)=>{e&&!e(a)||(n.cancel(),t.push(a),k.delete(a))})),t}function X(e,t){if(r&&o&&u){let n=t.map((e=>xe(e,g.loaderData))),a=o(e,n)||e.key,l=r[a];if("number"==typeof l)return l}return null}return m={get basename(){return e.basename},get state(){return g},get routes(){return t},initialize:function(){return n=e.history.listen((e=>{let{action:t,location:n}=e;return B(t,n)})),g.initialized||B(a.Pop,g.location),m},subscribe:function(e){return l.add(e),()=>l.delete(e)},enableScrollRestoration:function(e,t,n){if(r=e,u=t,o=n||(e=>e.key),!c&&g.navigation===ee){c=!0;let e=X(g.location,g.matches);null!=e&&R({restoreScrollPosition:e})}return()=>{r=null,u=null,o=null}},navigate:async function(t,n){if("number"==typeof t)return void e.history.go(t);let{path:l,submission:r,error:o}=le(t,n),u=p(g.location,l,n&&n.state);u=i({},u,e.history.encodeLocation(u));let c=!0===(n&&n.replace)||null!=r?a.Replace:a.Push,s=n&&"preventScrollReset"in n?!0===n.preventScrollReset:void 0;return await B(c,u,{submission:r,pendingError:o,preventScrollReset:s,replace:n&&n.replace})},fetch:function(n,a,l,r){if(ne)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");T.has(n)&&$(n);let o=_(t,l,e.basename);if(!o)return void U(n,a,ve(404,{pathname:l}));let{path:u,submission:c}=le(l,r,!0),s=we(o,u);c?async function(n,a,l,r,o,u){if(H(),D.delete(n),!r.route.action){let e=ve(405,{method:u.formMethod,pathname:l,routeId:a});return void U(n,a,e)}let c=g.fetchers.get(n),s=i({state:"submitting"},u,{data:c&&c.data});g.fetchers.set(n,s),R({fetchers:new Map(g.fetchers)});let f=new AbortController,p=ce(l,f.signal,u);T.set(n,f);let h=await ue("action",p,r,o,m.basename);if(p.signal.aborted)return void(T.get(n)===f&&T.delete(n));if(ye(h)){T.delete(n),N.add(n);let e=i({state:"loading"},u,{data:void 0});return g.fetchers.set(n,e),R({fetchers:new Map(g.fetchers)}),z(g,h)}if(Ee(h))return void U(n,a,h.error);ge(h)&&d(!1,"defer() is not supported in actions");let b=g.navigation.location||g.location,E=ce(b,f.signal),y="idle"!==g.navigation.state?_(t,g.navigation.location,e.basename):g.matches;d(y,"Didn't find any matches after fetcher action");let S=++L;I.set(n,S);let C=i({state:"loading",data:h.data},u);g.fetchers.set(n,C);let[B,j]=re(g,y,u,b,x,w,O,{[r.route.id]:h.data},void 0,D);j.filter((e=>{let[t]=e;return t!==n})).forEach((e=>{let[t]=e,n=g.fetchers.get(t),a={state:"loading",data:n&&n.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};g.fetchers.set(t,a),T.set(t,f)})),R({fetchers:new Map(g.fetchers)});let{results:W,loaderResults:$,fetcherResults:V}=await F(g.matches,y,B,j,E);if(f.signal.aborted)return;I.delete(n),T.delete(n),j.forEach((e=>{let[t]=e;return T.delete(t)}));let q=he(W);if(q)return z(g,q);let{loaderData:X,errors:Y}=de(g,g.matches,B,$,void 0,j,V,k),Z={state:"idle",data:h.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};g.fetchers.set(n,Z);let K=G(S);"loading"===g.navigation.state&&S>P?(d(A,"Expected pending action"),v&&v.abort(),M(g.navigation.location,{matches:y,loaderData:X,errors:Y,fetchers:new Map(g.fetchers)})):(R(i({errors:Y,loaderData:fe(g.loaderData,X,y)},K?{fetchers:new Map(g.fetchers)}:{})),x=!1)}(n,a,u,s,o,c):(D.set(n,[u,s,o]),async function(e,t,n,a,l){let r=g.fetchers.get(e),i={state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,data:r&&r.data};g.fetchers.set(e,i),R({fetchers:new Map(g.fetchers)});let o=new AbortController,u=ce(n,o.signal);T.set(e,o);let c=await ue("loader",u,a,l,m.basename);if(ge(c)&&(c=await Se(c,u.signal,!0)||c),T.get(e)===o&&T.delete(e),u.signal.aborted)return;if(ye(c))return void await z(g,c);if(Ee(c)){let n=me(g.matches,t);return g.fetchers.delete(e),void R({fetchers:new Map(g.fetchers),errors:{[n.route.id]:c.error}})}d(!ge(c),"Unhandled fetcher deferred data");let s={state:"idle",data:c.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};g.fetchers.set(e,s),R({fetchers:new Map(g.fetchers)})}(n,a,u,s,o))},revalidate:function(){H(),R({revalidation:"loading"}),"submitting"!==g.navigation.state&&("idle"!==g.navigation.state?B(A||g.historyAction,g.navigation.location,{overrideNavigation:g.navigation}):B(g.historyAction,g.location,{startUninterruptedRevalidation:!0}))},createHref:t=>e.history.createHref(t),encodeLocation:t=>e.history.encodeLocation(t),getFetcher:j,deleteFetcher:W,dispose:function(){n&&n(),l.clear(),v&&v.abort(),g.fetchers.forEach(((e,t)=>W(t)))},_internalFetchControllers:T,_internalActiveDeferreds:k},m}function le(e,t,n){void 0===n&&(n=!1);let a="string"==typeof e?e:v(e);if(!t||!function(e){return null!=e&&"formData"in e}(t))return{path:a};if(t.formMethod&&(l=t.formMethod,!K.has(l)))return{path:a,error:ve(405,{method:t.formMethod})};var l;if(t.formMethod&&_e(t.formMethod))return{path:a,submission:{formMethod:t.formMethod,formAction:be(a),formEncType:t&&t.formEncType||"application/x-www-form-urlencoded",formData:t.formData}};let r=h(a);try{let e=se(t.formData);n&&r.search&&Ce(r.search)&&e.append("index",""),r.search="?"+e}catch(e){return{path:a,error:ve(400)}}return{path:v(r)}}function re(e,t,n,a,l,r,i,o,u,c){let s=u?Object.values(u)[0]:o?Object.values(o)[0]:null,d=function(e,t){let n=e;if(t){let a=e.findIndex((e=>e.route.id===t));a>=0&&(n=e.slice(0,a))}return n}(t,u?Object.keys(u)[0]:void 0).filter(((t,i)=>null!=t.route.loader&&(function(e,t,n){let a=!t||n.route.id!==t.route.id,l=void 0===e[n.route.id];return a||l}(e.loaderData,e.matches[i],t)||r.some((e=>e===t.route.id))||oe(e.location,e.matches[i],n,a,t,l,s)))),f=[];return c&&c.forEach(((e,t)=>{let[a,r,o]=e;(i.includes(t)||l&&oe(a,r,n,a,r,l,s))&&f.push([t,a,r,o])})),[d,f]}function ie(e,t){let n=e.route.path;return e.pathname!==t.pathname||n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function oe(e,t,n,a,l,r,o){let u=b(e),c=t.params,s=b(a),d=l.params,f=ie(t,l)||u.toString()===s.toString()||u.search!==s.search||r;if(l.route.shouldRevalidate){let e=l.route.shouldRevalidate(i({currentUrl:u,currentParams:c,nextUrl:s,nextParams:d},n,{actionResult:o,defaultShouldRevalidate:f}));if("boolean"==typeof e)return e}return f}async function ue(e,t,n,a,l,r,i,o){let u,c,s;void 0===l&&(l="/"),void 0===r&&(r=!1),void 0===i&&(i=!1);let f=new Promise(((e,t)=>s=t)),m=()=>s();t.signal.addEventListener("abort",m);try{let a=n.route[e];d(a,"Could not find the "+e+' to run on the "'+n.route.id+'" route'),c=await Promise.race([a({request:t,params:n.params,context:o}),f]),d(void 0!==c,"You defined "+("action"===e?"an action":"a loader")+' for route "'+n.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){u=E.error,c=e}finally{t.signal.removeEventListener("abort",m)}if(null!=(p=c)&&"number"==typeof p.status&&"string"==typeof p.statusText&&"object"==typeof p.headers&&void 0!==p.body){let e,o=c.status;if(Q.has(o)){let e=c.headers.get("Location");if(d(e,"Redirects returned/thrown from loaders/actions must have a Location header"),!/^[a-z+]+:\/\//i.test(e)&&!e.startsWith("//")){let r=R(e,k(a.slice(0,a.indexOf(n)+1)).map((e=>e.pathnameBase)),new URL(t.url).pathname);if(d(v(r),"Unable to resolve redirect location: "+e),l){let e=r.pathname;r.pathname="/"===e?l:M([l,e])}e=v(r)}if(r)throw c.headers.set("Location",e),c;return{type:E.redirect,status:o,location:e,revalidate:null!==c.headers.get("X-Remix-Revalidate")}}if(i)throw{type:u||E.data,response:c};let s=c.headers.get("Content-Type");return e=s&&s.startsWith("application/json")?await c.json():await c.text(),u===E.error?{type:u,error:new G(o,c.statusText,e),headers:c.headers}:{type:E.data,data:e,statusCode:c.status,headers:c.headers}}var p;return u===E.error?{type:u,error:c}:c instanceof U?{type:E.deferred,deferredData:c}:{type:E.data,data:c}}function ce(e,t,n){let a=b(be(e)).toString(),l={signal:t};if(n){let{formMethod:e,formEncType:t,formData:a}=n;l.method=e.toUpperCase(),l.body="application/x-www-form-urlencoded"===t?se(a):a}return new Request(a,l)}function se(e){let t=new URLSearchParams;for(let[n,a]of e.entries())d("string"==typeof a,'File inputs are not supported with encType "application/x-www-form-urlencoded", please use "multipart/form-data" instead.'),t.append(n,a);return t}function de(e,t,n,a,l,r,o,u){let{loaderData:c,errors:s}=function(e,t,n,a,l){let r,i={},o=null,u=!1,c={};return n.forEach(((n,s)=>{let f=t[s].route.id;if(d(!ye(n),"Cannot handle redirect results in processLoaderData"),Ee(n)){let t=me(e,f),l=n.error;a&&(l=Object.values(a)[0],a=void 0),o=Object.assign(o||{},{[t.route.id]:l}),u||(u=!0,r=q(n.error)?n.error.status:500),n.headers&&(c[f]=n.headers)}else ge(n)?(l&&l.set(f,n.deferredData),i[f]=n.deferredData.data):(i[f]=n.data,null==n.statusCode||200===n.statusCode||u||(r=n.statusCode),n.headers&&(c[f]=n.headers))})),a&&(o=a),{loaderData:i,errors:o,statusCode:r||200,loaderHeaders:c}}(t,n,a,l,u);for(let t=0;t<r.length;t++){let[n,,a]=r[t];d(void 0!==o&&void 0!==o[t],"Did not find corresponding fetcher result");let l=o[t];if(Ee(l)){let t=me(e.matches,a.route.id);s&&s[t.route.id]||(s=i({},s,{[t.route.id]:l.error})),e.fetchers.delete(n)}else{if(ye(l))throw new Error("Unhandled fetcher revalidation redirect");if(ge(l))throw new Error("Unhandled fetcher deferred data");{let t={state:"idle",data:l.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};e.fetchers.set(n,t)}}}return{loaderData:c,errors:s}}function fe(e,t,n){let a=i({},t);return n.forEach((n=>{let l=n.route.id;void 0===t[l]&&void 0!==e[l]&&(a[l]=e[l])})),a}function me(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function pe(e){let t=e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function ve(e,t){let{pathname:n,routeId:a,method:l}=void 0===t?{}:t,r="Unknown Server Error",i="Unknown @remix-run/router error";return 400===e?(r="Bad Request",i=l&&n&&a?"You made a "+l+' request to "'+n+'" but did not provide a `loader` for route "'+a+'", so there is no way to handle the request.':"Cannot submit binary form data using GET"):403===e?(r="Forbidden",i='Route "'+a+'" does not match URL "'+n+'"'):404===e?(r="Not Found",i='No route matches URL "'+n+'"'):405===e&&(r="Method Not Allowed",l&&n&&a?i="You made a "+l.toUpperCase()+' request to "'+n+'" but did not provide an `action` for route "'+a+'", so there is no way to handle the request.':l&&(i='Invalid request method "'+l.toUpperCase()+'"')),new G(e||500,r,new Error(i),!0)}function he(e){for(let t=e.length-1;t>=0;t--){let n=e[t];if(ye(n))return n}}function be(e){return v(i({},"string"==typeof e?h(e):e,{hash:""}))}function ge(e){return e.type===E.deferred}function Ee(e){return e.type===E.error}function ye(e){return(e&&e.type)===E.redirect}function _e(e){return Y.has(e)}async function Ae(e,t,n,a,l,r){for(let i=0;i<n.length;i++){let o=n[i],u=t[i],c=e.find((e=>e.route.id===u.route.id)),s=null!=c&&!ie(c,u)&&void 0!==(r&&r[u.route.id]);ge(o)&&(l||s)&&await Se(o,a,l).then((e=>{e&&(n[i]=e||n[i])}))}}async function Se(e,t,n){if(void 0===n&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:E.data,data:e.deferredData.unwrappedData}}catch(e){return{type:E.error,error:e}}return{type:E.data,data:e.deferredData.data}}}function Ce(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function xe(e,t){let{route:n,pathname:a,params:l}=e;return{id:n.id,pathname:a,params:l,data:t[n.id],handle:n.handle}}function we(e,t){let n="string"==typeof t?h(t).search:t.search;if(e[e.length-1].route.index&&Ce(n||""))return e[e.length-1];let a=k(e);return a[a.length-1]}function Oe(){return Oe=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},Oe.apply(this,arguments)}"function"==typeof Object.is&&Object.is;const{useState:Te,useEffect:Le,useLayoutEffect:Pe,useDebugValue:Ie}=r;"undefined"==typeof window||void 0===window.document||window.document.createElement;const Ne=r.useSyncExternalStore,De=l.createContext(null),ke=l.createContext(null),Re=l.createContext(null),Me=l.createContext(null),Be=l.createContext(null),je=l.createContext(null),ze=l.createContext({outlet:null,matches:[]}),Fe=l.createContext(null);function He(e,t){let{relative:n}=void 0===t?{}:t;Ue()||d(!1);let{basename:a,navigator:r}=l.useContext(Be),{hash:i,pathname:o,search:u}=Ke(e,{relative:n}),c=o;return"/"!==a&&(c="/"===o?a:M([a,o])),r.createHref({pathname:c,search:u,hash:i})}function Ue(){return null!=l.useContext(je)}function We(){return Ue()||d(!1),l.useContext(je).location}function $e(){return l.useContext(je).navigationType}function Ve(e){Ue()||d(!1);let{pathname:t}=We();return l.useMemo((()=>T(e,t)),[t,e])}function Ge(){Ue()||d(!1);let{basename:e,navigator:t}=l.useContext(Be),{matches:n}=l.useContext(ze),{pathname:a}=We(),r=JSON.stringify(k(n).map((e=>e.pathnameBase))),i=l.useRef(!1);return l.useEffect((()=>{i.current=!0})),l.useCallback((function(n,l){if(void 0===l&&(l={}),!i.current)return;if("number"==typeof n)return void t.go(n);let o=R(n,JSON.parse(r),a,"path"===l.relative);"/"!==e&&(o.pathname="/"===o.pathname?e:M([e,o.pathname])),(l.replace?t.replace:t.push)(o,l.state,l)}),[e,t,r,a])}const qe=l.createContext(null);function Xe(){return l.useContext(qe)}function Ye(e){let t=l.useContext(ze).outlet;return t?l.createElement(qe.Provider,{value:e},t):t}function Ze(){let{matches:e}=l.useContext(ze),t=e[e.length-1];return t?t.params:{}}function Ke(e,t){let{relative:n}=void 0===t?{}:t,{matches:a}=l.useContext(ze),{pathname:r}=We(),i=JSON.stringify(k(a).map((e=>e.pathnameBase)));return l.useMemo((()=>R(e,JSON.parse(i),r,"path"===n)),[e,i,r,n])}function Qe(e,t){Ue()||d(!1);let{navigator:n}=l.useContext(Be),r=l.useContext(Re),{matches:i}=l.useContext(ze),o=i[i.length-1],u=o?o.params:{},c=(o&&o.pathname,o?o.pathnameBase:"/");o&&o.route;let s,f=We();if(t){var m;let e="string"==typeof t?h(t):t;"/"===c||(null==(m=e.pathname)?void 0:m.startsWith(c))||d(!1),s=e}else s=f;let p=s.pathname||"/",v=_(e,{pathname:"/"===c?p:p.slice(c.length)||"/"}),b=nt(v&&v.map((e=>Object.assign({},e,{params:Object.assign({},u,e.params),pathname:M([c,n.encodeLocation?n.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:M([c,n.encodeLocation?n.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),i,r||void 0);return t&&b?l.createElement(je.Provider,{value:{location:Oe({pathname:"/",search:"",hash:"",state:null,key:"default"},s),navigationType:a.Pop}},b):b}function Je(){let e=mt(),t=q(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,a="rgba(200,200,200, 0.5)",r={padding:"0.5rem",backgroundColor:a},i={padding:"2px 4px",backgroundColor:a};return l.createElement(l.Fragment,null,l.createElement("h2",null,"Unhandled Thrown Error!"),l.createElement("h3",{style:{fontStyle:"italic"}},t),n?l.createElement("pre",{style:r},n):null,l.createElement("p",null,"💿 Hey developer 👋"),l.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",l.createElement("code",{style:i},"errorElement")," props on ",l.createElement("code",{style:i},"<Route>")))}class et extends l.Component{constructor(e){super(e),this.state={location:e.location,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error,location:e.location}:{error:e.error||t.error,location:t.location}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?l.createElement(Fe.Provider,{value:this.state.error,children:this.props.component}):this.props.children}}function tt(e){let{routeContext:t,match:n,children:a}=e,r=l.useContext(De);return r&&n.route.errorElement&&(r._deepestRenderedBoundaryId=n.route.id),l.createElement(ze.Provider,{value:t},a)}function nt(e,t,n){if(void 0===t&&(t=[]),null==e){if(null==n||!n.errors)return null;e=n.matches}let a=e,r=null==n?void 0:n.errors;if(null!=r){let e=a.findIndex((e=>e.route.id&&(null==r?void 0:r[e.route.id])));e>=0||d(!1),a=a.slice(0,Math.min(a.length,e+1))}return a.reduceRight(((e,i,o)=>{let u=i.route.id?null==r?void 0:r[i.route.id]:null,c=n?i.route.errorElement||l.createElement(Je,null):null,s=()=>l.createElement(tt,{match:i,routeContext:{outlet:e,matches:t.concat(a.slice(0,o+1))}},u?c:void 0!==i.route.element?i.route.element:e);return n&&(i.route.errorElement||0===o)?l.createElement(et,{location:n.location,component:c,error:u,children:s()}):s()}),null)}var at,lt,rt;function it(e){let t=l.useContext(Re);return t||d(!1),t}function ot(){return it(lt.UseNavigation).navigation}function ut(){let e=function(e){let t=l.useContext(ke);return t||d(!1),t}(at.UseRevalidator),t=it(lt.UseRevalidator);return{revalidate:e.router.revalidate,state:t.revalidation}}function ct(){let{matches:e,loaderData:t}=it(lt.UseMatches);return l.useMemo((()=>e.map((e=>{let{pathname:n,params:a}=e;return{id:e.route.id,pathname:n,params:a,data:t[e.route.id],handle:e.route.handle}}))),[e,t])}function st(){let e=it(lt.UseLoaderData),t=l.useContext(ze);t||d(!1);let n=t.matches[t.matches.length-1];return n.route.id||d(!1),e.loaderData[n.route.id]}function dt(e){return it(lt.UseRouteLoaderData).loaderData[e]}function ft(){let e=it(lt.UseActionData);return l.useContext(ze)||d(!1),Object.values((null==e?void 0:e.actionData)||{})[0]}function mt(){var e;let t=l.useContext(Fe),n=it(lt.UseRouteError),a=l.useContext(ze),r=a.matches[a.matches.length-1];return t||(a||d(!1),r.route.id||d(!1),null==(e=n.errors)?void 0:e[r.route.id])}function pt(){let e=l.useContext(Me);return null==e?void 0:e._data}function vt(){let e=l.useContext(Me);return null==e?void 0:e._error}function ht(e){let{fallbackElement:t,router:n}=e,a=Ne(n.subscribe,(()=>n.state),(()=>n.state)),r=l.useMemo((()=>({createHref:n.createHref,encodeLocation:n.encodeLocation,go:e=>n.navigate(e),push:(e,t,a)=>n.navigate(e,{state:t,preventScrollReset:null==a?void 0:a.preventScrollReset}),replace:(e,t,a)=>n.navigate(e,{replace:!0,state:t,preventScrollReset:null==a?void 0:a.preventScrollReset})})),[n]),i=n.basename||"/";return l.createElement(ke.Provider,{value:{router:n,navigator:r,static:!1,basename:i}},l.createElement(Re.Provider,{value:a},l.createElement(_t,{basename:n.basename,location:n.state.location,navigationType:n.state.historyAction,navigator:r},n.state.initialized?l.createElement(At,null):t)))}function bt(e){let{basename:t,children:n,initialEntries:a,initialIndex:r}=e,i=l.useRef();null==i.current&&(i.current=u({initialEntries:a,initialIndex:r,v5Compat:!0}));let o=i.current,[c,s]=l.useState({action:o.action,location:o.location});return l.useLayoutEffect((()=>o.listen(s)),[o]),l.createElement(_t,{basename:t,children:n,location:c.location,navigationType:c.action,navigator:o})}function gt(e){let{to:t,replace:n,state:a,relative:r}=e;Ue()||d(!1);let i=l.useContext(Re),o=Ge();return l.useEffect((()=>{i&&"idle"!==i.navigation.state||o(t,{replace:n,state:a,relative:r})})),null}function Et(e){return Ye(e.context)}function yt(e){d(!1)}function _t(e){let{basename:t="/",children:n=null,location:r,navigationType:i=a.Pop,navigator:o,static:u=!1}=e;Ue()&&d(!1);let c=t.replace(/^\/*/,"/"),s=l.useMemo((()=>({basename:c,navigator:o,static:u})),[c,o,u]);"string"==typeof r&&(r=h(r));let{pathname:f="/",search:m="",hash:p="",state:v=null,key:b="default"}=r,g=l.useMemo((()=>{let e=P(f,c);return null==e?null:{pathname:e,search:m,hash:p,state:v,key:b}}),[c,f,m,p,v,b]);return null==g?null:l.createElement(Be.Provider,{value:s},l.createElement(je.Provider,{children:n,value:{location:g,navigationType:i}}))}function At(e){let{children:t,location:n}=e,a=l.useContext(ke);return Qe(a&&!t?a.router.routes:Ot(t),n)}function St(e){let{children:t,errorElement:n,resolve:a}=e;return l.createElement(xt,{resolve:a,errorElement:n},l.createElement(wt,null,t))}!function(e){e.UseRevalidator="useRevalidator"}(at||(at={})),function(e){e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator"}(lt||(lt={})),function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(rt||(rt={}));const Ct=new Promise((()=>{}));class xt extends l.Component{constructor(e){super(e),this.state={error:null}}static getDerivedStateFromError(e){return{error:e}}componentDidCatch(e,t){console.error("<Await> caught the following error during render",e,t)}render(){let{children:e,errorElement:t,resolve:n}=this.props,a=null,r=rt.pending;if(n instanceof Promise)if(this.state.error){r=rt.error;let e=this.state.error;a=Promise.reject().catch((()=>{})),Object.defineProperty(a,"_tracked",{get:()=>!0}),Object.defineProperty(a,"_error",{get:()=>e})}else n._tracked?(a=n,r=void 0!==a._error?rt.error:void 0!==a._data?rt.success:rt.pending):(r=rt.pending,Object.defineProperty(n,"_tracked",{get:()=>!0}),a=n.then((e=>Object.defineProperty(n,"_data",{get:()=>e})),(e=>Object.defineProperty(n,"_error",{get:()=>e}))));else r=rt.success,a=Promise.resolve(),Object.defineProperty(a,"_tracked",{get:()=>!0}),Object.defineProperty(a,"_data",{get:()=>n});if(r===rt.error&&a._error instanceof H)throw Ct;if(r===rt.error&&!t)throw a._error;if(r===rt.error)return l.createElement(Me.Provider,{value:a,children:t});if(r===rt.success)return l.createElement(Me.Provider,{value:a,children:e});throw a}}function wt(e){let{children:t}=e,n=pt();return"function"==typeof t?t(n):l.createElement(l.Fragment,null,t)}function Ot(e,t){void 0===t&&(t=[]);let n=[];return l.Children.forEach(e,((e,a)=>{if(!l.isValidElement(e))return;if(e.type===l.Fragment)return void n.push.apply(n,Ot(e.props.children,t));e.type!==yt&&d(!1),e.props.index&&e.props.children&&d(!1);let r=[...t,a],i={id:e.props.id||r.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,hasErrorBoundary:null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle};e.props.children&&(i.children=Ot(e.props.children,r)),n.push(i)})),n}function Tt(e){return nt(e)}function Lt(e){return e.map((e=>{let t=Oe({},e);return null==t.hasErrorBoundary&&(t.hasErrorBoundary=null!=t.errorElement),t.children&&(t.children=Lt(t.children)),t}))}function Pt(e,t){return ae({basename:null==t?void 0:t.basename,history:u({initialEntries:null==t?void 0:t.initialEntries,initialIndex:null==t?void 0:t.initialIndex}),hydrationData:null==t?void 0:t.hydrationData,routes:Lt(e)}).initialize()}function It(){return It=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},It.apply(this,arguments)}function Nt(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}const Dt="get",kt="application/x-www-form-urlencoded";function Rt(e){return null!=e&&"string"==typeof e.tagName}function Mt(e){return void 0===e&&(e=""),new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((t,n)=>{let a=e[n];return t.concat(Array.isArray(a)?a.map((e=>[n,e])):[[n,a]])}),[]))}const Bt=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"],jt=["aria-current","caseSensitive","className","end","style","to","children"],zt=["reloadDocument","replace","method","action","onSubmit","fetcherKey","routeId","relative"];function Ft(e,t){return ae({basename:null==t?void 0:t.basename,history:c({window:null==t?void 0:t.window}),hydrationData:(null==t?void 0:t.hydrationData)||Ut(),routes:Lt(e)}).initialize()}function Ht(e,t){return ae({basename:null==t?void 0:t.basename,history:s({window:null==t?void 0:t.window}),hydrationData:(null==t?void 0:t.hydrationData)||Ut(),routes:Lt(e)}).initialize()}function Ut(){var e;let t=null==(e=window)?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=It({},t,{errors:Wt(t.errors)})),t}function Wt(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,a]of t)a&&"RouteErrorResponse"===a.__type?n[e]=new G(a.status,a.statusText,a.data,!0===a.internal):n[e]=a;return n}function $t(e){let{basename:t,children:n,window:a}=e,r=l.useRef();null==r.current&&(r.current=c({window:a,v5Compat:!0}));let i=r.current,[o,u]=l.useState({action:i.action,location:i.location});return l.useLayoutEffect((()=>i.listen(u)),[i]),l.createElement(_t,{basename:t,children:n,location:o.location,navigationType:o.action,navigator:i})}function Vt(e){let{basename:t,children:n,window:a}=e,r=l.useRef();null==r.current&&(r.current=s({window:a,v5Compat:!0}));let i=r.current,[o,u]=l.useState({action:i.action,location:i.location});return l.useLayoutEffect((()=>i.listen(u)),[i]),l.createElement(_t,{basename:t,children:n,location:o.location,navigationType:o.action,navigator:i})}function Gt(e){let{basename:t,children:n,history:a}=e;const[r,i]=l.useState({action:a.action,location:a.location});return l.useLayoutEffect((()=>a.listen(i)),[a]),l.createElement(_t,{basename:t,children:n,location:r.location,navigationType:r.action,navigator:a})}const qt=l.forwardRef((function(e,t){let{onClick:n,relative:a,reloadDocument:r,replace:i,state:o,target:u,to:c,preventScrollReset:s}=e,d=Nt(e,Bt),f=He(c,{relative:a}),m=nn(c,{replace:i,state:o,target:u,preventScrollReset:s,relative:a});return l.createElement("a",It({},d,{href:f,onClick:r?n:function(e){n&&n(e),e.defaultPrevented||m(e)},ref:t,target:u}))})),Xt=l.forwardRef((function(e,t){let{"aria-current":n="page",caseSensitive:a=!1,className:r="",end:i=!1,style:o,to:u,children:c}=e,s=Nt(e,jt),d=Ke(u,{relative:s.relative}),f=We(),m=l.useContext(Re),{navigator:p}=l.useContext(Be),v=p.encodeLocation?p.encodeLocation(d).pathname:d.pathname,h=f.pathname,b=m&&m.navigation&&m.navigation.location?m.navigation.location.pathname:null;a||(h=h.toLowerCase(),b=b?b.toLowerCase():null,v=v.toLowerCase());let g,E=h===v||!i&&h.startsWith(v)&&"/"===h.charAt(v.length),y=null!=b&&(b===v||!i&&b.startsWith(v)&&"/"===b.charAt(v.length)),_=E?n:void 0;g="function"==typeof r?r({isActive:E,isPending:y}):[r,E?"active":null,y?"pending":null].filter(Boolean).join(" ");let A="function"==typeof o?o({isActive:E,isPending:y}):o;return l.createElement(qt,It({},s,{"aria-current":_,className:g,ref:t,style:A,to:u}),"function"==typeof c?c({isActive:E,isPending:y}):c)})),Yt=l.forwardRef(((e,t)=>l.createElement(Zt,It({},e,{ref:t})))),Zt=l.forwardRef(((e,t)=>{let{reloadDocument:n,replace:a,method:r=Dt,action:i,onSubmit:o,fetcherKey:u,routeId:c,relative:s}=e,d=Nt(e,zt),f=rn(u,c),m="get"===r.toLowerCase()?"get":"post",p=on(i,{relative:s});return l.createElement("form",It({ref:t,method:m,action:p,onSubmit:n?o:e=>{if(o&&o(e),e.defaultPrevented)return;e.preventDefault();let t=e.nativeEvent.submitter;f(t||e.currentTarget,{method:r,replace:a,relative:s})}},d))}));function Kt(e){let{getKey:t,storageKey:n}=e;return function(e){let{getKey:t,storageKey:n}=void 0===e?{}:e,{router:a}=en(Qt.UseScrollRestoration),{restoreScrollPosition:r,preventScrollReset:i}=tn(Jt.UseScrollRestoration),o=We(),u=ct(),c=ot();var s;l.useEffect((()=>(window.history.scrollRestoration="manual",()=>{window.history.scrollRestoration="auto"})),[]),s=l.useCallback((()=>{if("idle"===c.state){let e=(t?t(o,u):null)||o.key;fn[e]=window.scrollY}sessionStorage.setItem(n||dn,JSON.stringify(fn)),window.history.scrollRestoration="auto"}),[n,t,c.state,o,u]),l.useEffect((()=>(window.addEventListener("beforeunload",s),()=>{window.removeEventListener("beforeunload",s)})),[s]),l.useLayoutEffect((()=>{try{let e=sessionStorage.getItem(n||dn);e&&(fn=JSON.parse(e))}catch(e){}}),[n]),l.useLayoutEffect((()=>{let e=null==a?void 0:a.enableScrollRestoration(fn,(()=>window.scrollY),t);return()=>e&&e()}),[a,t]),l.useLayoutEffect((()=>{if(!1!==r)if("number"!=typeof r){if(o.hash){let e=document.getElementById(o.hash.slice(1));if(e)return void e.scrollIntoView()}!0!==i&&window.scrollTo(0,0)}else window.scrollTo(0,r)}),[o,r,i])}({getKey:t,storageKey:n}),null}var Qt,Jt;function en(e){let t=l.useContext(ke);return t||d(!1),t}function tn(e){let t=l.useContext(Re);return t||d(!1),t}function nn(e,t){let{target:n,replace:a,state:r,preventScrollReset:i,relative:o}=void 0===t?{}:t,u=Ge(),c=We(),s=Ke(e,{relative:o});return l.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,n)){t.preventDefault();let n=void 0!==a?a:v(c)===v(s);u(e,{replace:n,state:r,preventScrollReset:i,relative:o})}}),[c,u,s,a,r,n,e,i,o])}function an(e){let t=l.useRef(Mt(e)),n=We(),a=l.useMemo((()=>function(e,t){let n=Mt(e);for(let e of t.keys())n.has(e)||t.getAll(e).forEach((t=>{n.append(e,t)}));return n}(n.search,t.current)),[n.search]),r=Ge(),i=l.useCallback(((e,t)=>{const n=Mt("function"==typeof e?e(a):e);r("?"+n,t)}),[r,a]);return[a,i]}function ln(){return rn()}function rn(e,t){let{router:n}=en(Qt.UseSubmitImpl),a=on();return l.useCallback((function(l,r){if(void 0===r&&(r={}),"undefined"==typeof document)throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");let{method:i,encType:o,formData:u,url:c}=function(e,t,n){let a,l,r,i;if(Rt(o=e)&&"form"===o.tagName.toLowerCase()){let o=n.submissionTrigger;a=n.method||e.getAttribute("method")||Dt,l=n.action||e.getAttribute("action")||t,r=n.encType||e.getAttribute("enctype")||kt,i=new FormData(e),o&&o.name&&i.append(o.name,o.value)}else if(function(e){return Rt(e)&&"button"===e.tagName.toLowerCase()}(e)||function(e){return Rt(e)&&"input"===e.tagName.toLowerCase()}(e)&&("submit"===e.type||"image"===e.type)){let o=e.form;if(null==o)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');a=n.method||e.getAttribute("formmethod")||o.getAttribute("method")||Dt,l=n.action||e.getAttribute("formaction")||o.getAttribute("action")||t,r=n.encType||e.getAttribute("formenctype")||o.getAttribute("enctype")||kt,i=new FormData(o),e.name&&i.append(e.name,e.value)}else{if(Rt(e))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');if(a=n.method||Dt,l=n.action||t,r=n.encType||kt,e instanceof FormData)i=e;else if(i=new FormData,e instanceof URLSearchParams)for(let[t,n]of e)i.append(t,n);else if(null!=e)for(let t of Object.keys(e))i.append(t,e[t])}var o;let{protocol:u,host:c}=window.location;return{url:new URL(l,u+"//"+c),method:a,encType:r,formData:i}}(l,a,r),s=c.pathname+c.search,f={replace:r.replace,formData:u,formMethod:i,formEncType:o};e?(null==t&&d(!1),n.fetch(e,t,s,f)):n.navigate(s,f)}),[a,n,e,t])}function on(e,t){let{relative:n}=void 0===t?{}:t,{basename:a}=l.useContext(Be),r=l.useContext(ze);r||d(!1);let[i]=r.matches.slice(-1),o=It({},Ke(null!=e?e:".",{relative:n})),u=We();if(null==e&&(o.search=u.search,o.hash=u.hash,i.route.index)){let e=new URLSearchParams(o.search);e.delete("index"),o.search=e.toString()?"?"+e.toString():""}return e&&"."!==e||!i.route.index||(o.search=o.search?o.search.replace(/^\?/,"?index&"):"?index"),"/"!==a&&(o.pathname="/"===o.pathname?a:M([a,o.pathname])),v(o)}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"})(Qt||(Qt={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Jt||(Jt={}));let un=0;function cn(){var e;let{router:t}=en(Qt.UseFetcher),n=l.useContext(ze);n||d(!1);let a=null==(e=n.matches[n.matches.length-1])?void 0:e.route.id;null==a&&d(!1);let[r]=l.useState((()=>String(++un))),[i]=l.useState((()=>(a||d(!1),function(e,t){return l.forwardRef(((n,a)=>l.createElement(Zt,It({},n,{ref:a,fetcherKey:e,routeId:t}))))}(r,a)))),[o]=l.useState((()=>e=>{t||d(!1),a||d(!1),t.fetch(r,a,e)})),u=rn(r,a),c=t.getFetcher(r),s=l.useMemo((()=>It({Form:i,submit:u,load:o},c)),[c,i,u,o]);return l.useEffect((()=>()=>{t?t.deleteFetcher(r):console.warn("No fetcher available to clean up from useFetcher()")}),[t,r]),s}function sn(){return[...tn(Jt.UseFetchers).fetchers.values()]}const dn="react-router-scroll-positions";let fn={}},2408:(e,t)=>{var n=Symbol.for("react.element"),a=Symbol.for("react.portal"),l=Symbol.for("react.fragment"),r=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),m=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v=Object.assign,h={};function b(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||p}function g(){}function E(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||p}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=b.prototype;var y=E.prototype=new g;y.constructor=E,v(y,b.prototype),y.isPureReactComponent=!0;var _=Array.isArray,A=Object.prototype.hasOwnProperty,S={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,a){var l,r={},i=null,o=null;if(null!=t)for(l in void 0!==t.ref&&(o=t.ref),void 0!==t.key&&(i=""+t.key),t)A.call(t,l)&&!C.hasOwnProperty(l)&&(r[l]=t[l]);var u=arguments.length-2;if(1===u)r.children=a;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];r.children=c}if(e&&e.defaultProps)for(l in u=e.defaultProps)void 0===r[l]&&(r[l]=u[l]);return{$$typeof:n,type:e,key:i,ref:o,props:r,_owner:S.current}}function w(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var O=/\/+/g;function T(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function L(e,t,l,r,i){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var u=!1;if(null===e)u=!0;else switch(o){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case a:u=!0}}if(u)return i=i(u=e),e=""===r?"."+T(u,0):r,_(i)?(l="",null!=e&&(l=e.replace(O,"$&/")+"/"),L(i,t,l,"",(function(e){return e}))):null!=i&&(w(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,l+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(O,"$&/")+"/")+e)),t.push(i)),1;if(u=0,r=""===r?".":r+":",_(e))for(var c=0;c<e.length;c++){var s=r+T(o=e[c],c);u+=L(o,t,l,s,i)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=m&&e[m]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),c=0;!(o=e.next()).done;)u+=L(o=o.value,t,l,s=r+T(o,c++),i);else if("object"===o)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function P(e,t,n){if(null==e)return e;var a=[],l=0;return L(e,a,"","",(function(e){return t.call(n,e,l++)})),a}function I(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N={current:null},D={transition:null},k={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:D,ReactCurrentOwner:S};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!w(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=b,t.Fragment=l,t.Profiler=i,t.PureComponent=E,t.StrictMode=r,t.Suspense=s,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=k,t.cloneElement=function(e,t,a){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var l=v({},e.props),r=e.key,i=e.ref,o=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,o=S.current),void 0!==t.key&&(r=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)A.call(t,c)&&!C.hasOwnProperty(c)&&(l[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)l.children=a;else if(1<c){u=Array(c);for(var s=0;s<c;s++)u[s]=arguments[s+2];l.children=u}return{$$typeof:n,type:e.type,key:r,ref:i,props:l,_owner:o}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=w,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:I}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=D.transition;D.transition={};try{e()}finally{D.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return N.current.useCallback(e,t)},t.useContext=function(e){return N.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return N.current.useDeferredValue(e)},t.useEffect=function(e,t){return N.current.useEffect(e,t)},t.useId=function(){return N.current.useId()},t.useImperativeHandle=function(e,t,n){return N.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return N.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return N.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return N.current.useMemo(e,t)},t.useReducer=function(e,t,n){return N.current.useReducer(e,t,n)},t.useRef=function(e){return N.current.useRef(e)},t.useState=function(e){return N.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return N.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return N.current.useTransition()},t.version="18.2.0"},7294:(e,t,n)=>{e.exports=n(2408)},53:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var a=n-1>>>1,l=e[a];if(!(0<r(l,t)))break e;e[a]=t,e[n]=l,n=a}}function a(e){return 0===e.length?null:e[0]}function l(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var a=0,l=e.length,i=l>>>1;a<i;){var o=2*(a+1)-1,u=e[o],c=o+1,s=e[c];if(0>r(u,n))c<l&&0>r(s,u)?(e[a]=s,e[c]=n,a=c):(e[a]=u,e[o]=n,a=o);else{if(!(c<l&&0>r(s,n)))break e;e[a]=s,e[c]=n,a=c}}}return t}function r(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var o=Date,u=o.now();t.unstable_now=function(){return o.now()-u}}var c=[],s=[],d=1,f=null,m=3,p=!1,v=!1,h=!1,b="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,E="undefined"!=typeof setImmediate?setImmediate:null;function y(e){for(var t=a(s);null!==t;){if(null===t.callback)l(s);else{if(!(t.startTime<=e))break;l(s),t.sortIndex=t.expirationTime,n(c,t)}t=a(s)}}function _(e){if(h=!1,y(e),!v)if(null!==a(c))v=!0,D(A);else{var t=a(s);null!==t&&k(_,t.startTime-e)}}function A(e,n){v=!1,h&&(h=!1,g(w),w=-1),p=!0;var r=m;try{for(y(n),f=a(c);null!==f&&(!(f.expirationTime>n)||e&&!L());){var i=f.callback;if("function"==typeof i){f.callback=null,m=f.priorityLevel;var o=i(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof o?f.callback=o:f===a(c)&&l(c),y(n)}else l(c);f=a(c)}if(null!==f)var u=!0;else{var d=a(s);null!==d&&k(_,d.startTime-n),u=!1}return u}finally{f=null,m=r,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var S,C=!1,x=null,w=-1,O=5,T=-1;function L(){return!(t.unstable_now()-T<O)}function P(){if(null!==x){var e=t.unstable_now();T=e;var n=!0;try{n=x(!0,e)}finally{n?S():(C=!1,x=null)}}else C=!1}if("function"==typeof E)S=function(){E(P)};else if("undefined"!=typeof MessageChannel){var I=new MessageChannel,N=I.port2;I.port1.onmessage=P,S=function(){N.postMessage(null)}}else S=function(){b(P,0)};function D(e){x=e,C||(C=!0,S())}function k(e,n){w=b((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){v||p||(v=!0,D(A))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):O=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return m},t.unstable_getFirstCallbackNode=function(){return a(c)},t.unstable_next=function(e){switch(m){case 1:case 2:case 3:var t=3;break;default:t=m}var n=m;m=t;try{return e()}finally{m=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=m;m=e;try{return t()}finally{m=n}},t.unstable_scheduleCallback=function(e,l,r){var i=t.unstable_now();switch(r="object"==typeof r&&null!==r&&"number"==typeof(r=r.delay)&&0<r?i+r:i,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return e={id:d++,callback:l,priorityLevel:e,startTime:r,expirationTime:o=r+o,sortIndex:-1},r>i?(e.sortIndex=r,n(s,e),null===a(c)&&e===a(s)&&(h?(g(w),w=-1):h=!0,k(_,r-i))):(e.sortIndex=o,n(c,e),v||p||(v=!0,D(A))),e},t.unstable_shouldYield=L,t.unstable_wrapCallback=function(e){var t=m;return function(){var n=m;m=t;try{return e.apply(this,arguments)}finally{m=n}}}},3840:(e,t,n)=>{e.exports=n(53)},1379:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),l=n.n(a),r=n(7795),i=n.n(r),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(1171),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),l()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},7623:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),l=n.n(a),r=n(7795),i=n.n(r),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(8743),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),l()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},177:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),l=n.n(a),r=n(7795),i=n.n(r),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(5339),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),l()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},4902:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),l=n.n(a),r=n(7795),i=n.n(r),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(2785),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),l()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},6040:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),l=n.n(a),r=n(7795),i=n.n(r),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(1976),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),l()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},6821:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),l=n.n(a),r=n(7795),i=n.n(r),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(1306),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),l()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},3788:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),l=n.n(a),r=n(7795),i=n.n(r),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(1322),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),l()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},3281:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),l=n.n(a),r=n(7795),i=n.n(r),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(4605),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),l()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},7844:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),l=n.n(a),r=n(7795),i=n.n(r),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(348),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),l()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},792:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(3379),l=n.n(a),r=n(7795),i=n.n(r),o=n(569),u=n.n(o),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),m=n(4589),p=n.n(m),v=n(1047),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=u().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=f(),l()(v.Z,h);const b=v.Z&&v.Z.locals?v.Z.locals:void 0},3379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var r={},i=[],o=0;o<e.length;o++){var u=e[o],c=a.base?u[0]+a.base:u[0],s=r[c]||0,d="".concat(c," ").concat(s);r[c]=s+1;var f=n(d),m={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==f)t[f].references++,t[f].updater(m);else{var p=l(m,a);a.byIndex=o,t.splice(o,0,{identifier:d,updater:p,references:1})}i.push(d)}return i}function l(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,l){var r=a(e=e||[],l=l||{});return function(e){e=e||[];for(var i=0;i<r.length;i++){var o=n(r[i]);t[o].references--}for(var u=a(e,l),c=0;c<r.length;c++){var s=n(r[c]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}r=u}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},9216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var l=void 0!==n.layer;l&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,l&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},4529:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AppHeader=void 0;const l=a(n(7294)),r=n(6113),i=n(2531),o=n(1074),u=n(7893),c=n(8932),s=a(n(8989));t.AppHeader=()=>{const e=(0,r.useDispatch)(),t=(0,r.useSelector)(s.default.theme);return l.default.createElement(u.ShellBar,{logo:"/images/sap-logo.png",logoAlt:"Fundamental React",title:"Fundamental React",actions:[l.default.createElement(o.FormSelect,{alignRight:!0,label:"Choose Theme",horizontal:!0,compact:!0,placeholder:t.name,items:i.Themes.map((e=>({id:e.id,text:e.name,name:e.name,family:e.family,selected:e===t}))),onChange:t=>{(0,c.changeTheme)(e,t)}})]})}},4110:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AppMainContent=void 0;const l=a(n(7294));t.AppMainContent=({children:e})=>l.default.createElement("div",{style:{width:"100%",height:"100%",overflow:"auto",boxSizing:"border-box"}},e)},5487:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AppSidePanel=void 0;const l=a(n(7294)),r=n(9818),i=n(4419),o=n(6042);t.AppSidePanel=()=>{const e=(0,r.useNavigate)();return l.default.createElement(i.VerticalNavigation,{label:"Navigation",itemsLabel:"Core Navigation",items:[{id:"components",text:"Components",icon:"folder-blank",expanded:!0,items:o.COMPONENTS.map((e=>Object.assign(Object.assign({},e),{icon:"document-text"})))}],onItemSelect:t=>{"components"!==t&&e(`/components/${t}`)}})}},4595:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CodePanel=void 0;const i=r(n(7294));n(1379),t.CodePanel=({title:e,result:t,code:n})=>{const[a,l]=(0,i.useState)(!1);return i.default.createElement("div",{className:"code-panel"},i.default.createElement("div",{className:"header"},e),i.default.createElement("div",{className:"rendering"},i.default.createElement("div",null,t),i.default.createElement("button",{className:"button-show",onClick:()=>{l(!a)}},a?"Hide Code":"Show Code")),a?i.default.createElement("div",{className:"code"},n,i.default.createElement("button",{className:"button-copy"},"Copy")):null)}},7027:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.demoCallback=t.DemoPage=void 0;const l=a(n(7294)),r=n(2531),i=n(4595);n(7623),t.DemoPage=({title:e,labels:t,description:n,types:a,examples:o})=>{const u=e=>e?"string"==typeof e?l.default.createElement("p",null,e):e:null;return l.default.createElement(r.Page,{className:"demo-page"},l.default.createElement(r.PageHeader,{avatar:{ariaLabel:"",icon:"document-text",accentColor:r.AccentColors.COLOR_9},breadcrumb:l.default.createElement(r.Breadcrumb,{ariaLabel:"breadcrumb",items:[{text:"Components"},{text:e}]}),title:e,attributes:t.map((e=>({label:e.label||"",accentColor:e.accentColor,text:e.text,type:r.PageHeaderAttributeTypes.INFO_LABEL})))}),l.default.createElement(r.PageBody,null,l.default.createElement(r.Panel,{title:"Properties",expanded:!0},l.default.createElement("div",null,u(n)),l.default.createElement("div",null,a.map(((e,t)=>l.default.createElement("div",{key:`type-${t}`},l.default.createElement(r.Title,{className:"demo-page-item-title",level:r.TitleLevels.H3,style:{margin:"1rem 0"},text:e.id}),l.default.createElement(r.Table,{columns:[{key:"id",name:"Property",formatter:e=>l.default.createElement("strong",null,e.id)},{key:"type",name:"Type"},{key:"description",name:"Description"}],compact:!0,rows:e.props.map((e=>({data:e})))})))))),l.default.createElement(r.Panel,{title:"Examples",expanded:!0},o.map(((e,t)=>l.default.createElement("div",{key:`example-${t}`},l.default.createElement(r.Title,{className:"demo-page-item-title",level:r.TitleLevels.H3,levelVisual:r.TitleLevels.H5,text:e.title}),u(e.description),l.default.createElement(i.CodePanel,{title:"",result:e.result,code:e.code})))))))},t.demoCallback=e=>{console.log(e)}},6884:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AvatarDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Avatar",labels:[{label:"Since",text:"Version 0.0.3",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"Reviewed 0.0.11",accentColor:r.AccentColors.COLOR_6},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"The avatar component displays an image, icon or user initials, and is used for user profiles, placeholder images, icons or business-related images i.e. product photos.",types:[{id:"Avatar",props:[{id:"ariaLabel",type:"string",description:"Accessibility label for the avatar"},{id:"ariaLabelZoom",type:"string",description:"(Optional)"},{id:"ariaControls",type:"string",description:"(Optional)"},{id:"ariaExpanded",type:"boolean",description:"(Optional)"},{id:"ariaHaspopup",type:"boolean",description:"(Optional)"},{id:"accentColor",type:"AccentColor",description:'(Optional) Sets the color accent of the avatar (exclusive with "design" property)'},{id:"bordered",type:"boolean",description:"(Optional) Displays light borders around the avatar"},{id:"circle",type:"boolean",description:"(Optional) Displays the avatar as a circle (default display is a square)"},{id:"design",type:"AvatarDesign",description:'(Optional) Sets the design of the avatar (exclusive with "accentColor" property)'},{id:"icon",type:"string",description:'(Optional) Sets the content of the avatar to an icon (exclusive with "initials" property)'},{id:"iconZoom",type:"string",description:"(Optional) Sets an additionnal icon for clickable avatars (requires onClick)"},{id:"initials",type:"string",description:'(Optional) Sets the content of the avatar to some initials (xclusive with "icon" property)'},{id:"size",type:"Size",description:"(Optional) Sets the size of the avatar"},{id:"onClick",type:"() => void",description:"(Optional) Event fired when the avatar is clicked"}]}],examples:[{title:"Icon",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"The icon avatar can be used to display non-interactive icons. If you want the icon to be interactive, use the Button component with an icon inside instead."),l.default.createElement("p",null,'When using the icon avatar for illustrative purposes only, include role="presentation" in the element.')),result:l.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",icon:"washing-machine",size:r.Sizes.X_SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",icon:"washing-machine",size:r.Sizes.SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",icon:"washing-machine"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",icon:"washing-machine",size:r.Sizes.LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",icon:"washing-machine",size:r.Sizes.X_LARGE})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' icon='washing-machine' size={Sizes.X_SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' icon='washing-machine' size={Sizes.SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' icon='washing-machine' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' icon='washing-machine' size={Sizes.LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' icon='washing-machine' size={Sizes.X_LARGE} />"),l.default.createElement("div",null,"</div>"))},{title:"Initials",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"The initials avatar can display up to three alphabetical characters representing the first and last name(s) of a person, for example: MvV for Marjolein van Veen. The order in which the first and last name(s) are displayed depends on the language-specific settings."),l.default.createElement("p",null,"When there is no equivalent text for the avatar, include aria-label in the element. This isn’t necessary if the avatar is used for illustrative purposes only. See Icon above.")),result:l.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",initials:"WW",size:r.Sizes.X_SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",initials:"WW",size:r.Sizes.SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",initials:"WW"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",initials:"WW",size:r.Sizes.LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",initials:"WW",size:r.Sizes.X_LARGE})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' initials='WW' size={Sizes.X_SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' initials='WW' size={Sizes.SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' initials='WW' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' initials='WW' size={Sizes.LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' initials='WW' size={Sizes.X_LARGE} />"),l.default.createElement("div",null,"</div>"))},{title:"Circle",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"A circle style can be displayed by adding the fd-avatar--circle modifier class to the fd-avatar base class.")),result:l.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,icon:"money-bills",size:r.Sizes.X_SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,icon:"money-bills",size:r.Sizes.SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,icon:"money-bills",size:r.Sizes.LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,icon:"money-bills",size:r.Sizes.X_LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,initials:"WW",size:r.Sizes.X_SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,initials:"WW",size:r.Sizes.SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,initials:"WW"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,initials:"WW",size:r.Sizes.LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,initials:"WW",size:r.Sizes.X_LARGE})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle icon='money-bills' size={Sizes.X_SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle icon='money-bills' size={Sizes.SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle icon='money-bills' size={Sizes.LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle icon='money-bills' size={Sizes.X_LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle initials='WW' size={Sizes.X_SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle initials='WW' size={Sizes.SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle initials='WW' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle initials='WW' size={Sizes.LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle initials='WW' size={Sizes.X_LARGE} />"),l.default.createElement("div",null,"</div>"))},{title:"Transparent",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"A transparent style can be displayed by adding the fd-avatar--transparent modifier class to the fd-avatar base class. This can be useful for displaying descriptive illustrations and decorative pictures, for example.")),result:l.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TRANSPARENT,icon:"money-bills",size:r.Sizes.X_SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TRANSPARENT,icon:"money-bills",size:r.Sizes.SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TRANSPARENT,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TRANSPARENT,icon:"money-bills",size:r.Sizes.LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TRANSPARENT,icon:"money-bills",size:r.Sizes.X_LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TRANSPARENT,initials:"WW",size:r.Sizes.X_SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TRANSPARENT,initials:"WW",size:r.Sizes.SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TRANSPARENT,initials:"WW"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TRANSPARENT,initials:"WW",size:r.Sizes.LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TRANSPARENT,initials:"WW",size:r.Sizes.X_LARGE})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.X_SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.X_LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.X_SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} initials='WW' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.X_LARGE} />"),l.default.createElement("div",null,"</div>"))},{title:"Placeholder",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"An avatar with a placeholder background can be displayed by adding the fd-avatar--placeholder modifier class.")),result:l.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.PLACEHOLDER,icon:"money-bills",size:r.Sizes.X_SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.PLACEHOLDER,icon:"money-bills",size:r.Sizes.SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.PLACEHOLDER,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.PLACEHOLDER,icon:"money-bills",size:r.Sizes.LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.PLACEHOLDER,icon:"money-bills",size:r.Sizes.X_LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.PLACEHOLDER,initials:"WW",size:r.Sizes.X_SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.PLACEHOLDER,initials:"WW",size:r.Sizes.SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.PLACEHOLDER,initials:"WW"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.PLACEHOLDER,initials:"WW",size:r.Sizes.LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.PLACEHOLDER,initials:"WW",size:r.Sizes.X_LARGE})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} icon='money-bills' size={Sizes.X_SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} icon='money-bills' size={Sizes.SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} icon='money-bills' size={Sizes.LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} icon='money-bills' size={Sizes.X_LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} initials='WW' size={Sizes.X_SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} initials='WW' size={Sizes.SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} initials='WW' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} initials='WW' size={Sizes.LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.PLACEHOLDER} initials='WW' size={Sizes.X_LARGE} />"),l.default.createElement("div",null,"</div>"))},{title:"Tile Icon Background",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"An avatar with a tile icon background can be displayed by adding the fd-avatar--tile modifier class.")),result:l.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TILE,icon:"money-bills",size:r.Sizes.X_SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TILE,icon:"money-bills",size:r.Sizes.SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TILE,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TILE,icon:"money-bills",size:r.Sizes.LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TILE,icon:"money-bills",size:r.Sizes.X_LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TILE,initials:"WW",size:r.Sizes.X_SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TILE,initials:"WW",size:r.Sizes.SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TILE,initials:"WW"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TILE,initials:"WW",size:r.Sizes.LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",circle:!0,design:r.AvatarDesigns.TILE,initials:"WW",size:r.Sizes.X_LARGE})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} icon='money-bills' size={Sizes.X_SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} icon='money-bills' size={Sizes.SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} icon='money-bills' size={Sizes.LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} icon='money-bills' size={Sizes.X_LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} initials='WW' size={Sizes.X_SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} initials='WW' size={Sizes.SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} initials='WW' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} initials='WW' size={Sizes.LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' circle design={AvatarDesigns.TILE} initials='WW' size={Sizes.X_LARGE} />"),l.default.createElement("div",null,"</div>"))},{title:"Accent Colors",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"To change the accent background color, add the fd-avatar--accent-color-* class with the number indicating the desired color. The color options include numbers ranging from 1 to 10, for example: fd-avatar--accent-color-10.")),result:l.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_1,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_2,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_3,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_4,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_5,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_6,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_7,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_8,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_9,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_10,icon:"money-bills"})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_1} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_2} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_3} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_4} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_5} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_6} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_7} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_8} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_9} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_10} icon='money-bills' />"),l.default.createElement("div",null,"</div>"))},{title:"Accent Colors Shell Header Context",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"When used in Shell header context, an additional modifier class fd-avatar--shell should be added to the fd-avatar base class and the modifier class specifying the accent color fd-avatar--accent-color-*.")),result:l.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_1,design:r.AvatarDesigns.SHELL,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_2,design:r.AvatarDesigns.SHELL,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_3,design:r.AvatarDesigns.SHELL,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_4,design:r.AvatarDesigns.SHELL,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_5,design:r.AvatarDesigns.SHELL,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_6,design:r.AvatarDesigns.SHELL,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_7,design:r.AvatarDesigns.SHELL,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_8,design:r.AvatarDesigns.SHELL,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_9,design:r.AvatarDesigns.SHELL,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",accentColor:r.AccentColors.COLOR_10,design:r.AvatarDesigns.SHELL,icon:"money-bills"})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_1} design={AvatarDesigns.SHELL} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_2} design={AvatarDesigns.SHELL} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_3} design={AvatarDesigns.SHELL} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_4} design={AvatarDesigns.SHELL} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_5} design={AvatarDesigns.SHELL} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_6} design={AvatarDesigns.SHELL} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_7} design={AvatarDesigns.SHELL} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_8} design={AvatarDesigns.SHELL} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_9} design={AvatarDesigns.SHELL} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' accentColor={AccentColors.COLOR_10} design={AvatarDesigns.SHELL} icon='money-bills' />"),l.default.createElement("div",null,"</div>"))},{title:"Zoom Icon",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"If an avatar is clickable, you can show an optional badge and icon. The badge indicates that the avatar is interactive and the icon indicates the action triggered by clicking the avatar. This feature gives users visual affordance of the available action, and is particularly useful for images.")),result:l.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:r.AccentColors.COLOR_1,circle:!0,iconZoom:"edit",icon:"money-bills",size:r.Sizes.X_SMALL,onClick:()=>alert("Avatar clicked 1")}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:r.AccentColors.COLOR_2,circle:!0,iconZoom:"edit",icon:"money-bills",size:r.Sizes.SMALL,onClick:()=>alert("Avatar clicked 2")}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:r.AccentColors.COLOR_3,circle:!0,iconZoom:"edit",icon:"money-bills",onClick:()=>alert("Avatar clicked 3")}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:r.AccentColors.COLOR_4,circle:!0,iconZoom:"edit",icon:"money-bills",size:r.Sizes.LARGE,onClick:()=>alert("Avatar clicked 4")}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:r.AccentColors.COLOR_5,circle:!0,iconZoom:"edit",icon:"money-bills",size:r.Sizes.X_LARGE,onClick:()=>alert("Avatar clicked 5")}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:r.AccentColors.COLOR_6,iconZoom:"edit",initials:"WW",size:r.Sizes.X_SMALL,onClick:()=>alert("Avatar clicked 6")}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:r.AccentColors.COLOR_7,iconZoom:"edit",initials:"WW",size:r.Sizes.SMALL,onClick:()=>alert("Avatar clicked 7")}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:r.AccentColors.COLOR_8,iconZoom:"edit",initials:"WW",onClick:()=>alert("Avatar clicked 8")}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:r.AccentColors.COLOR_9,iconZoom:"edit",initials:"WW",size:r.Sizes.LARGE,onClick:()=>alert("Avatar clicked 9")}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",ariaLabelZoom:"Edit information",bordered:!0,accentColor:r.AccentColors.COLOR_10,iconZoom:"edit",initials:"WW",size:r.Sizes.X_LARGE,onClick:()=>alert("Avatar clicked 10")})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.X_SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.X_LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.X_SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.X_LARGE} />"),l.default.createElement("div",null,"</div>"))},{title:"Borders",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"You can add a very subtle border to the avatar with the fd-avatar--border modifier class.")),result:l.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap",alignItems:"center"}},l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",bordered:!0,design:r.AvatarDesigns.TRANSPARENT,icon:"money-bills",size:r.Sizes.X_SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",bordered:!0,design:r.AvatarDesigns.TRANSPARENT,icon:"money-bills",size:r.Sizes.SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",bordered:!0,design:r.AvatarDesigns.TRANSPARENT,icon:"money-bills"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",bordered:!0,design:r.AvatarDesigns.TRANSPARENT,icon:"money-bills",size:r.Sizes.LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",bordered:!0,design:r.AvatarDesigns.TRANSPARENT,icon:"money-bills",size:r.Sizes.X_LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",bordered:!0,circle:!0,design:r.AvatarDesigns.TRANSPARENT,initials:"WW",size:r.Sizes.X_SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",bordered:!0,circle:!0,design:r.AvatarDesigns.TRANSPARENT,initials:"WW",size:r.Sizes.SMALL}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",bordered:!0,circle:!0,design:r.AvatarDesigns.TRANSPARENT,initials:"WW"}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",bordered:!0,circle:!0,design:r.AvatarDesigns.TRANSPARENT,initials:"WW",size:r.Sizes.LARGE}),l.default.createElement(r.Avatar,{ariaLabel:"My Avatar",bordered:!0,circle:!0,design:r.AvatarDesigns.TRANSPARENT,initials:"WW",size:r.Sizes.X_LARGE})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.X_SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered design={AvatarDesigns.TRANSPARENT} icon='money-bills' size={Sizes.X_LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.X_SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.SMALL} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.LARGE} />"),l.default.createElement("div",null,"  <Avatar ariaLabel='My Avatar' bordered circle design={AvatarDesigns.TRANSPARENT} initials='WW' size={Sizes.X_LARGE} />"),l.default.createElement("div",null,"</div>"))}]};t.AvatarDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},7532:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BarDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Bar",labels:[{label:"Since",text:"Version 0.0.6",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"In Progress",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"The bar component is a container that holds titles, buttons and input controls. Its contents are distributed into three areas: left, middle and right. This component’s primary function is to display page headers and footers. It is mainly used to construct a Page, and acts as a building block for other components like Dialog, Popover etc.",types:[{id:"Bar",props:[{id:"cozy",type:"boolean",description:"..."},{id:"left",type:"ReactElement[]",description:"The elements to display on the left"},{id:"middle",type:"ReactElement[]",description:"The elements to display on the middle"},{id:"responsivePaddings",type:"boolean",description:"..."},{id:"right",type:"ReactElement[]",description:"The elements to display on the right"},{id:"type",type:"BarType",description:"..."}]}],examples:[{title:"Default",description:"The default bar contains a back button, page title, segmented button and product switch button. It can be displayed by using the fd-bar class, and is responsive to desktop screen sizes. The default bar is in compact mode.",result:l.default.createElement(r.Bar,{left:[l.default.createElement(r.Title,{text:"TEXT",level:r.TitleLevels.H5})],middle:[l.default.createElement(r.SegmentedButton,null,l.default.createElement(r.Button,{compact:!0,icon:"email"}),l.default.createElement(r.Button,{compact:!0,icon:"iphone",selected:!0}),l.default.createElement(r.Button,{compact:!0,icon:"notification-2"}))],right:[l.default.createElement(r.Avatar,{ariaLabel:"Avatar",circle:!0,initials:"JS",size:r.Sizes.X_SMALL}),l.default.createElement(r.Button,{compact:!0,design:r.ButtonDesigns.TRANSPARENT,icon:"grid"})]}),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Bar"),l.default.createElement("div",null,"  left={["),l.default.createElement("div",null,"    <Title text='TEXT' level={TitleLevels.H5} />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  middle={["),l.default.createElement("div",null,"    <SegmentedButton>"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        compact"),l.default.createElement("div",null,"        icon='email'"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        compact"),l.default.createElement("div",null,"        icon='iphone'"),l.default.createElement("div",null,"        selected"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        compact"),l.default.createElement("div",null,"        icon='notification-2'"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"    </SegmentedButton>"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  right={["),l.default.createElement("div",null,"    <Avatar"),l.default.createElement("div",null,"      ariaLabel='Avatar'"),l.default.createElement("div",null,"      circle"),l.default.createElement("div",null,"      initials='JS'"),l.default.createElement("div",null,"      size={Sizes.X_SMALL}"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      compact"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='grid'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))},{title:"Cozy",description:"The cozy bar contains a back button, icon buttons, segmented button and product switch button. It is responsive to tablet and mobile screen sizes. To apply cozy mode, add the --cozy modifier class to the container element.",result:l.default.createElement(r.Bar,{cozy:!0,left:[l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,icon:"navigation-left-arrow"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,icon:"home"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,icon:"account"})],middle:[l.default.createElement(r.SegmentedButton,null,l.default.createElement(r.Button,{icon:"email"}),l.default.createElement(r.Button,{icon:"iphone",selected:!0}),l.default.createElement(r.Button,{icon:"notification-2"}))],right:[l.default.createElement(r.Avatar,{ariaLabel:"Avatar",circle:!0,initials:"JS",size:r.Sizes.X_SMALL}),l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,icon:"grid"})]}),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Bar"),l.default.createElement("div",null,"  left={["),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='navigation-left-arrow'"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='home'"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='account'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  middle={["),l.default.createElement("div",null,"    <SegmentedButton>"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        icon='email'"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        icon='iphone'"),l.default.createElement("div",null,"        selected"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        icon='notification-2'"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"    </SegmentedButton>"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  right={["),l.default.createElement("div",null,"    <Avatar"),l.default.createElement("div",null,"      ariaLabel='Avatar'"),l.default.createElement("div",null,"      circle"),l.default.createElement("div",null,"      initials='JS'"),l.default.createElement("div",null,"      size={Sizes.X_SMALL}"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='grid'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))},{title:"Responsive",description:"The bar can be made responsive with the --responsive-paddings modifier class. The paddings will automatically change with the screen size.",result:l.default.createElement(r.Bar,{responsivePaddings:!0,left:[l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,icon:"navigation-left-arrow"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,icon:"home"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,icon:"account"})],middle:[l.default.createElement(r.SegmentedButton,null,l.default.createElement(r.Button,{icon:"email"}),l.default.createElement(r.Button,{icon:"iphone",selected:!0}),l.default.createElement(r.Button,{icon:"notification-2"}))],right:[l.default.createElement(r.Avatar,{ariaLabel:"Avatar",circle:!0,initials:"JS",size:r.Sizes.X_SMALL}),l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,icon:"grid"})]}),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Bar"),l.default.createElement("div",null,"  left={["),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='navigation-left-arrow'"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='home'"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='account'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  middle={["),l.default.createElement("div",null,"    <SegmentedButton>"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        icon='email'"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        icon='iphone'"),l.default.createElement("div",null,"        selected"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        icon='notification-2'"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"    </SegmentedButton>"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  right={["),l.default.createElement("div",null,"    <Avatar"),l.default.createElement("div",null,"      ariaLabel='Avatar'"),l.default.createElement("div",null,"      circle"),l.default.createElement("div",null,"      initials='JS'"),l.default.createElement("div",null,"      size={Sizes.X_SMALL}"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='grid'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))},{title:"Header",description:"The header bar contains actions that impact the entire page. It can be displayed by adding the --header modifier class to the container element.",result:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,l.default.createElement("b",null,"Default (desktop)")),l.default.createElement(r.Bar,{type:r.BarTypes.HEADER,left:[l.default.createElement(r.Button,{compact:!0,design:r.ButtonDesigns.TRANSPARENT,icon:"navigation-left-arrow"}),l.default.createElement(r.Button,{compact:!0,design:r.ButtonDesigns.TRANSPARENT,icon:"home"}),l.default.createElement(r.Button,{compact:!0,design:r.ButtonDesigns.TRANSPARENT,icon:"account"})],middle:[l.default.createElement(r.SegmentedButton,null,l.default.createElement(r.Button,{compact:!0,icon:"email"}),l.default.createElement(r.Button,{compact:!0,icon:"iphone",selected:!0}),l.default.createElement(r.Button,{compact:!0,icon:"notification-2"}))],right:[l.default.createElement(r.Avatar,{ariaLabel:"Avatar",circle:!0,initials:"JS",size:r.Sizes.X_SMALL}),l.default.createElement(r.Button,{compact:!0,design:r.ButtonDesigns.TRANSPARENT,icon:"grid"})]}),l.default.createElement("p",null,l.default.createElement("b",null,"Cozy (tablet and mobile)")),l.default.createElement(r.Bar,{cozy:!0,type:r.BarTypes.HEADER,left:[l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,icon:"navigation-left-arrow"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,icon:"home"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,icon:"account"})],middle:[l.default.createElement(r.SegmentedButton,null,l.default.createElement(r.Button,{icon:"email"}),l.default.createElement(r.Button,{icon:"iphone",selected:!0}),l.default.createElement(r.Button,{icon:"notification-2"}))],right:[l.default.createElement(r.Avatar,{ariaLabel:"Avatar",circle:!0,initials:"JS",size:r.Sizes.X_SMALL}),l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,icon:"grid"})]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<p><b>Default (desktop)</b></p>"),l.default.createElement("div",null,"<Bar"),l.default.createElement("div",null,"  type={BarTypes.HEADER}"),l.default.createElement("div",null,"  left={["),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      compact"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='navigation-left-arrow'"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      compact"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='home'"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      compact"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='account'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  middle={["),l.default.createElement("div",null,"    <SegmentedButton>"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        compact"),l.default.createElement("div",null,"        icon='email'"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        compact"),l.default.createElement("div",null,"        icon='iphone'"),l.default.createElement("div",null,"        selected"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        compact"),l.default.createElement("div",null,"        icon='notification-2'"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"    </SegmentedButton>"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  right={["),l.default.createElement("div",null,"    <Avatar"),l.default.createElement("div",null,"      ariaLabel='Avatar'"),l.default.createElement("div",null,"      circle"),l.default.createElement("div",null,"      initials='JS'"),l.default.createElement("div",null,"      size={Sizes.X_SMALL}"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      compact"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='grid'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"),l.default.createElement("div",null,"<p><b>Cozy (tablet and mobile)</b></p>"),l.default.createElement("div",null,"<Bar"),l.default.createElement("div",null,"  cozy"),l.default.createElement("div",null,"  type={BarTypes.HEADER}"),l.default.createElement("div",null,"  left={["),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='navigation-left-arrow'"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='home'"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='account'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  middle={["),l.default.createElement("div",null,"    <SegmentedButton>"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        icon='email'"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        icon='iphone'"),l.default.createElement("div",null,"        selected"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        icon='notification-2'"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"    </SegmentedButton>"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  right={["),l.default.createElement("div",null,"    <Avatar"),l.default.createElement("div",null,"      ariaLabel='Avatar'"),l.default.createElement("div",null,"      circle"),l.default.createElement("div",null,"      initials='JS'"),l.default.createElement("div",null,"      size={Sizes.X_SMALL}"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='grid'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))},{title:"Header With Subheader",description:"To add a subheader under a header bar, the container element should have the --header-with-subheader modifier class, which will remove the element’s box shadow.",result:l.default.createElement(l.default.Fragment,null,l.default.createElement(r.Bar,{type:r.BarTypes.HEADER_WITH_SUBHEADER,left:[l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,icon:"navigation-left-arrow"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,icon:"home"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,icon:"account"})],middle:[l.default.createElement(r.SegmentedButton,null,l.default.createElement(r.Button,{icon:"email"}),l.default.createElement(r.Button,{icon:"iphone",selected:!0}),l.default.createElement(r.Button,{icon:"notification-2"}))],right:[l.default.createElement(r.Avatar,{ariaLabel:"Avatar",circle:!0,initials:"JS",size:r.Sizes.X_SMALL}),l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,icon:"grid"})]}),l.default.createElement(r.Bar,{type:r.BarTypes.SUBHEADER,middle:[l.default.createElement(r.Title,{level:r.TitleLevels.H5,text:"Title"})]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Bar"),l.default.createElement("div",null,"  type={BarTypes.HEADER_WITH_SUBHEADER}"),l.default.createElement("div",null,"  left={["),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='navigation-left-arrow'"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='home'"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='account'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  middle={["),l.default.createElement("div",null,"    <SegmentedButton>"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        icon='email'"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        icon='iphone'"),l.default.createElement("div",null,"        selected"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        icon='notification-2'"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"    </SegmentedButton>"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  right={["),l.default.createElement("div",null,"    <Avatar"),l.default.createElement("div",null,"      ariaLabel='Avatar'"),l.default.createElement("div",null,"      circle"),l.default.createElement("div",null,"      initials='JS'"),l.default.createElement("div",null,"      size={Sizes.X_SMALL}"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      icon='grid'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"),l.default.createElement("div",null,"<Bar"),l.default.createElement("div",null,"  type={BarTypes.SUBHEADER}"),l.default.createElement("div",null,"  middle={["),l.default.createElement("div",null,"    <Title"),l.default.createElement("div",null,"      level={TitleLevels.H5}"),l.default.createElement("div",null,"      text='Title'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))},{title:"Footer",description:"The footer bar should display only closing and finalizing action buttons that impact the entire page such as Save or Cancel. It can be displayed by adding the --footer modifier class to the container element.",result:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,l.default.createElement("b",null,"Default (desktop)")),l.default.createElement(r.Bar,{type:r.BarTypes.FOOTER,right:[l.default.createElement(r.Button,{compact:!0,design:r.ButtonDesigns.EMPHASIZED,text:"Save"}),l.default.createElement(r.Button,{compact:!0,design:r.ButtonDesigns.TRANSPARENT,text:"Cancel"})]}),l.default.createElement("p",null,l.default.createElement("b",null,"Cozy (tablet and mobile)")),l.default.createElement(r.Bar,{cozy:!0,type:r.BarTypes.FOOTER,right:[l.default.createElement(r.Button,{design:r.ButtonDesigns.EMPHASIZED,text:"Save"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,text:"Cancel"})]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<p><b>Default (desktop)</b></p>"),l.default.createElement("div",null,"<Bar"),l.default.createElement("div",null,"  type={BarTypes.FOOTER}"),l.default.createElement("div",null,"  right={["),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      compact"),l.default.createElement("div",null,"      design={ButtonDesigns.EMPHASIZED}"),l.default.createElement("div",null,"      text='Save'"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      compact"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      text='Cancel'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"),l.default.createElement("div",null,"<p><b>Cozy (tablet and mobile)</b></p>"),l.default.createElement("div",null,"<Bar"),l.default.createElement("div",null,"  cozy"),l.default.createElement("div",null,"  type={BarTypes.FOOTER}"),l.default.createElement("div",null,"  right={["),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.EMPHASIZED}"),l.default.createElement("div",null,"      text='Save'"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      text='Cancel'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))},{title:"Floating Footer",description:"The floating footer bar should also display only finalizing action buttons that impact the entire page. This type floats above the page at the bottom of the screen and is always visible when scrolling. It can be displayed by adding the --floating-footer modifier class to the container element.",result:l.default.createElement(l.default.Fragment,null,l.default.createElement("div",null,l.default.createElement("p",null,l.default.createElement("b",null,"Default (desktop)"))),l.default.createElement("div",{style:{position:"relative",height:"3rem"}},l.default.createElement(r.Bar,{type:r.BarTypes.FOOTER_FLOATING,right:[l.default.createElement(r.Button,{compact:!0,design:r.ButtonDesigns.EMPHASIZED,text:"Save"}),l.default.createElement(r.Button,{compact:!0,design:r.ButtonDesigns.TRANSPARENT,text:"Cancel"})]})),l.default.createElement("div",null,l.default.createElement("p",null,l.default.createElement("b",null,"Cozy (tablet and mobile)"))),l.default.createElement("div",{style:{position:"relative",height:"3rem"}},l.default.createElement(r.Bar,{cozy:!0,type:r.BarTypes.FOOTER_FLOATING,right:[l.default.createElement(r.Button,{design:r.ButtonDesigns.EMPHASIZED,text:"Save"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,text:"Cancel"})]}))),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<p><b>Default (desktop)</b></p>"),l.default.createElement("div",null,"<Bar"),l.default.createElement("div",null,"  type={BarTypes.FOOTER_FLOATING}"),l.default.createElement("div",null,"  right={["),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      compact"),l.default.createElement("div",null,"      design={ButtonDesigns.EMPHASIZED}"),l.default.createElement("div",null,"      text='Save'"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      compact"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      text='Cancel'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"),l.default.createElement("div",null,"<p><b>Cozy (tablet and mobile)</b></p>"),l.default.createElement("div",null,"<Bar"),l.default.createElement("div",null,"  cozy"),l.default.createElement("div",null,"  type={BarTypes.FOOTER_FLOATING}"),l.default.createElement("div",null,"  right={["),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.EMPHASIZED}"),l.default.createElement("div",null,"      text='Save'"),l.default.createElement("div",null,"    />,"),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"      text='Cancel'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))}]};t.BarDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},6533:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BreadcrumbDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Breadcrumb",labels:[{label:"Version",text:"Version 0.0.6",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"On Going",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"The breadcrumb component is a type of navigation that indicates the position of a page within the application’s page hierarchy. Users can navigate backward by selecting the previous pages in the navigation path.",types:[{id:"Breadcrumb",props:[{id:"ariaLabel",type:"string",description:"Event called when a tab is selected"},{id:"items",type:"BreadcrumbItem[]",description:"Event called when a tab is selected"},{id:"onItemSelected",type:"(string) => void",description:"Event called when a tab is selected"}]},{id:"BreadcrumbItem",props:[{id:"text",type:"string",description:"Event called when a tab is selected"},{id:"current",type:"boolean",description:"Event called when a tab is selected"},{id:"onItemSelected",type:"() => void",description:"Event called when a tab is selected"}]}],examples:[{title:"Standard",description:"The standard breadcrumb component displays several pages in text format separated by dividers, indicating a navigation path. Each page can be specifically selected to navigate to its corresponding page. It can be displayed by using the fd-breadcrumb class.",result:l.default.createElement(r.Breadcrumb,{ariaLabel:"Product Breadcrumb",items:[{text:"Product"},{text:"Suppliers"},{text:"Titanium"},{text:"Ultra Portable"},{text:"12 inch"},{text:"Super portable deluxe"},{text:"Laptop"}]}),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Breadcrumb"),l.default.createElement("div",null,"  ariaLabel='Product Breadcrumb'"),l.default.createElement("div",null,"  items={["),l.default.createElement("div",null,"    { text: 'Product' },"),l.default.createElement("div",null,"    { text: 'Suppliers' },"),l.default.createElement("div",null,"    { text: 'Titanium' },"),l.default.createElement("div",null,"    { text: 'Ultra Portable' },"),l.default.createElement("div",null,"    { text: '12 inch' },"),l.default.createElement("div",null,"    { text: 'Super portable deluxe' },"),l.default.createElement("div",null,"    { text: 'Laptop' },"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  onItemSelected={() => {}}"),l.default.createElement("div",null,"/>"))}]};t.BreadcrumbDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},5030:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BusyIndicatorDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Busy Indicator",labels:[{label:"Since",text:"Version 0.0.6",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"In Progress",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"The busy indicator component informs the user about an ongoing operation. Only one busy indicator should be shown at a time."),l.default.createElement("p",null,l.default.createElement("strong",null,"Use the busy indicator if:")),l.default.createElement("p",null,"The ongoing operation only covers part of a screen that has multiple controls, and:"),l.default.createElement("ul",null,l.default.createElement("li",null,"You need to display additional information, or"),l.default.createElement("li",null,"The user needs to be able to cancel the operation.")),l.default.createElement("p",null,l.default.createElement("strong",null,"Do not use the busy indicator if:")),l.default.createElement("ul",null,l.default.createElement("li",null,"The operation takes less than one second."),l.default.createElement("li",null,"You need to block the screen because the user is not supposed to start another operation. In this case, use the Busy Dialog component."))),types:[{id:"BusyIndicator",props:[{id:"ariaLabel",type:"string",description:'(Optional) The aria label provided for this busy indicator (defaults to "Loading")'},{id:"size",type:"BusyIndicatorSize",description:"(Optional) The size of the busy indicator (defaults to SMALL)"},{id:"contrast",type:"boolean",description:"(Optional) Sets the busy indicator to contrst mode for display on darker backgrounds"},{id:"label",type:"string",description:"(Optional) Disaplys an additional text information below the indicator"}]}],examples:[{title:"Standard",description:"The standard busy indicator animates a sequence of cascading dots expanding and shrinking in a loop. The component comes in three sizes detailed above. To display the busy indicator, use the fd-busy-indicator class. If you want to display a certain size, add the modifier class of the desired size i.e. --m to the element.",result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"2rem"}},l.default.createElement(r.BusyIndicator,{size:r.BusyIndicatorSizes.LARGE}),l.default.createElement(r.BusyIndicator,{size:r.BusyIndicatorSizes.MEDIUM}),l.default.createElement(r.BusyIndicator,null)),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<div style={{ display: 'flex', flexDirection: 'column', gap: '2rem' }}>"),l.default.createElement("br",null),l.default.createElement("div",null,"  <BusyIndicator"),l.default.createElement("div",null,"    size={BusyIndicatorSizes.LARGE}"),l.default.createElement("div",null,"  />"),l.default.createElement("br",null),l.default.createElement("div",null,"  <BusyIndicator"),l.default.createElement("div",null,"    size={BusyIndicatorSizes.MEDIUM}"),l.default.createElement("div",null,"  />"),l.default.createElement("br",null),l.default.createElement("div",null,"  <BusyIndicator />"),l.default.createElement("br",null),l.default.createElement("div",null,"</div>>"))},{title:"Contrast Mode",description:"The busy indicator also comes in contrast mode and displays white dots against a dark background. To apply contrast mode, add contrast into the element i.e. fd-busy-indicator--m contrast.",result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"2rem",background:"cadetblue",padding:"2rem"}},l.default.createElement(r.BusyIndicator,{contrast:!0,size:r.BusyIndicatorSizes.LARGE}),l.default.createElement(r.BusyIndicator,{contrast:!0,size:r.BusyIndicatorSizes.MEDIUM}),l.default.createElement(r.BusyIndicator,{contrast:!0})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<div style={{ display: 'flex', flexDirection: 'column', gap: '2rem', background: 'cadetblue', padding: '2rem' }}>"),l.default.createElement("br",null),l.default.createElement("div",null,"  <BusyIndicator"),l.default.createElement("div",null,"    contrast"),l.default.createElement("div",null,"    size={BusyIndicatorSizes.LARGE}"),l.default.createElement("div",null,"  />"),l.default.createElement("br",null),l.default.createElement("div",null,"  <BusyIndicator"),l.default.createElement("div",null,"    contrast"),l.default.createElement("div",null,"    size={BusyIndicatorSizes.MEDIUM}"),l.default.createElement("div",null,"  />"),l.default.createElement("br",null),l.default.createElement("div",null,"  <BusyIndicator"),l.default.createElement("div",null,"    contrast"),l.default.createElement("div",null,"  />"),l.default.createElement("br",null),l.default.createElement("div",null,"</div>>"))},{title:"Extended Busy Indicator",description:"If more information needs to be displayed with the loading animation, it is replaced by the Extended Busy Indicator fd-busy-indicator-extended. The additional information is wrapped in an element with fd-busy-indicator-extended__label class.",result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"2rem"}},l.default.createElement(r.BusyIndicator,{label:"Loading data...",size:r.BusyIndicatorSizes.LARGE})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<div style={{ display: 'flex', flexDirection: 'column', gap: '2rem' }}>"),l.default.createElement("br",null),l.default.createElement("div",null,"  <BusyIndicator"),l.default.createElement("div",null,"    label='Loading data...'"),l.default.createElement("div",null,"    size={BusyIndicatorSizes.LARGE}"),l.default.createElement("div",null,"  />"),l.default.createElement("br",null),l.default.createElement("br",null),l.default.createElement("div",null,"</div>>"))},{title:"Extended Busy Indicator Inside Message Toast",description:"At the Page level the Busy Indicator should always be placed in a container. The simplest form of container will be centred on the page and inherit the color values from Message Toast.",result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",alignItems:"center"}},l.default.createElement(r.BusyIndicator,{toast:!0,label:"Loading data...",size:r.BusyIndicatorSizes.LARGE})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<div style={{ display: 'flex', flexDirection: 'column', gap: '2rem', alignItems: 'center' }}>"),l.default.createElement("br",null),l.default.createElement("div",null,"  <BusyIndicator"),l.default.createElement("div",null,"    toast"),l.default.createElement("div",null,"    label='Loading data...'"),l.default.createElement("div",null,"    size={BusyIndicatorSizes.LARGE}"),l.default.createElement("div",null,"  />"),l.default.createElement("br",null),l.default.createElement("div",null,"</div>>"))}]};t.BusyIndicatorDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},1055:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Button",labels:[{label:"Since",text:"Version 0.0.3",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"In Progress",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"The button component is used to trigger an action. All buttons are characterized by the fd-button class and an additional modifier class to specify each button type."),l.default.createElement("p",null,l.default.createElement("strong",null,"Use the button types as follows:")),l.default.createElement("ul",null,l.default.createElement("li",null,"Use simple buttons for specific actions, such as:"),l.default.createElement("ul",null,l.default.createElement("li",null,"Create, Edit, Save"),l.default.createElement("li",null,"Approve, Reject"),l.default.createElement("li",null,"Accept, Decline"),l.default.createElement("li",null,"OK, Cancel")),l.default.createElement("li",null,"If you want the user to select one option from a small group, use a segmented button. For example: Small, Medium, Large"),l.default.createElement("li",null,"Use the menu button if you need a menu that provides more than one option.")),l.default.createElement("p",null,l.default.createElement("strong",null,"Do not use buttons if:")),l.default.createElement("ul",null,l.default.createElement("li",null,"You want to link to a different page or object. Instead, use the Link component."))),types:[{id:"Button",props:[{id:"badge",type:"boolean",description:""},{id:"compact",type:"boolean",description:""},{id:"design",type:"ButtonDesign",description:""},{id:"disabled",type:"boolean",description:""},{id:"icon",type:"string | IconInfo",description:""},{id:"iconAfter",type:"boolean",description:""},{id:"menu",type:"boolean",description:""},{id:"selected",type:"boolean",description:""},{id:"tabIndex",type:"number",description:""},{id:"text",type:"string | number",description:""},{id:"toggled",type:"boolean",description:""},{id:"type",type:"ButtonType",description:""}]}],examples:[{title:"Primary",result:l.default.createElement("div",{style:{display:"flex",gap:"0.5rem"}},l.default.createElement(r.Button,{text:"Create"}),l.default.createElement(r.Button,{ariaLabel:"Add to cart",icon:"cart"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.EMPHASIZED,text:"Save"})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Button"),l.default.createElement("div",null,"  text='Create'"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Button"),l.default.createElement("div",null,"  ariaLabel='Add to cart'"),l.default.createElement("div",null,"  icon='cart'"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Button"),l.default.createElement("div",null,"  design={ButtonDesigns.EMPHASIZED}"),l.default.createElement("div",null,"  text='Save'"),l.default.createElement("div",null,"/>"))},{title:"Button styles",description:l.default.createElement("ul",null,l.default.createElement("li",null,l.default.createElement("strong",null,"Default button")," is used for neutral or informative (secondary) actions."),l.default.createElement("li",null,l.default.createElement("strong",null,"Emphasized button")," is used to indicate the primary action on the screen."),l.default.createElement("li",null,l.default.createElement("strong",null,"Ghost button")," is used to trigger secondary actions. If a page already has a primary action, but you also need to highlight the most important action in a content toolbar, use the ghost style."),l.default.createElement("li",null,l.default.createElement("strong",null,"Positive button")," is used to trigger positive semantic actions, such as Accept and should always be accompanied by text."),l.default.createElement("li",null,l.default.createElement("strong",null,"Negative button")," is used to trigger negative semantic actions, such as Reject and should always be accompanied by text."),l.default.createElement("li",null,l.default.createElement("strong",null,"Attention button")," is used to trigger a semantic action that needs attention and should always be accompanied by text."),l.default.createElement("li",null,l.default.createElement("strong",null,"Transparent button")," is used to trigger a negative path action within a header or footer bar, and secondary actions in toolbars.")),result:l.default.createElement("div",{style:{display:"flex",gap:"0.5rem",flexWrap:"wrap"}},l.default.createElement(r.Button,{text:"Default Button"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.EMPHASIZED,text:"Emphasized Button"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.GHOST,text:"Ghost Button"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.POSITIVE,text:"Positive Button"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.NEGATIVE,text:"Negative Button"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.ATTENTION,text:"Attention Button"}),l.default.createElement(r.Button,{design:r.ButtonDesigns.TRANSPARENT,text:"Transparent Button"})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Button"),l.default.createElement("div",null,"  text='Default Button'"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Button"),l.default.createElement("div",null,"  design={ButtonDesigns.EMPHASIZED}"),l.default.createElement("div",null,"  text='Emphasized Button'"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Button"),l.default.createElement("div",null,"  design={ButtonDesigns.GHOST}"),l.default.createElement("div",null,"  text='Ghost Button'"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Button"),l.default.createElement("div",null,"  design={ButtonDesigns.POSITIVE}"),l.default.createElement("div",null,"  text='Positive Button'"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Button"),l.default.createElement("div",null,"  design={ButtonDesigns.NEGATIVE}"),l.default.createElement("div",null,"  text='Negative Button'"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Button"),l.default.createElement("div",null,"  design={ButtonDesigns.ATTENTION}"),l.default.createElement("div",null,"  text='Attention Button'"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Button"),l.default.createElement("div",null,"  design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"  text='Transparent Button'"),l.default.createElement("div",null,"/>"))},{title:"Toggle button",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"A toggle button switches between two actions. One of the actions is always active, one is inactive. Use the toggle button for secondary actions. Apply the ",l.default.createElement("strong",null,"toggled")," property to set the action to active.")),result:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,l.default.createElement("strong",null,"Inactive state of toggle button")),l.default.createElement("div",{style:{display:"flex",alignItems:"center",gap:"0.5rem",flexWrap:"wrap"}},l.default.createElement(r.Button,{text:"Default Toggle"}),l.default.createElement(r.Button,{text:"Emphasized Toggle",design:r.ButtonDesigns.EMPHASIZED}),l.default.createElement(r.Button,{text:"Ghost Toggle",design:r.ButtonDesigns.GHOST}),l.default.createElement(r.Button,{text:"Positive Toggle",design:r.ButtonDesigns.POSITIVE}),l.default.createElement(r.Button,{text:"Negative Toggle",design:r.ButtonDesigns.NEGATIVE}),l.default.createElement(r.Button,{text:"Attention Toggle",design:r.ButtonDesigns.ATTENTION}),l.default.createElement(r.Button,{text:"Transparent Toggle",design:r.ButtonDesigns.TRANSPARENT}),l.default.createElement(r.Button,{text:"Action Toggle",menu:!0}),l.default.createElement(r.Button,{icon:"cart",menu:!0}),l.default.createElement(r.Button,{icon:"accept",design:r.ButtonDesigns.POSITIVE})),l.default.createElement("p",null,l.default.createElement("strong",null,"Active (toggled) state of toggle button")),l.default.createElement("div",{style:{display:"flex",alignItems:"center",gap:"0.5rem",flexWrap:"wrap"}},l.default.createElement(r.Button,{toggled:!0,text:"Default Toggle"}),l.default.createElement(r.Button,{toggled:!0,text:"Emphasized Toggle",design:r.ButtonDesigns.EMPHASIZED}),l.default.createElement(r.Button,{toggled:!0,text:"Ghost Toggle",design:r.ButtonDesigns.GHOST}),l.default.createElement(r.Button,{toggled:!0,text:"Positive Toggle",design:r.ButtonDesigns.POSITIVE}),l.default.createElement(r.Button,{toggled:!0,text:"Negative Toggle",design:r.ButtonDesigns.NEGATIVE}),l.default.createElement(r.Button,{toggled:!0,text:"Attention Toggle",design:r.ButtonDesigns.ATTENTION}),l.default.createElement(r.Button,{toggled:!0,text:"Transparent Toggle",design:r.ButtonDesigns.TRANSPARENT}),l.default.createElement(r.Button,{toggled:!0,text:"Action Toggle",menu:!0}),l.default.createElement(r.Button,{toggled:!0,icon:"cart",menu:!0}),l.default.createElement(r.Button,{toggled:!0,icon:"accept",design:r.ButtonDesigns.POSITIVE})),l.default.createElement("p",null,l.default.createElement("strong",null,"Disabled Toggle button in active state")),l.default.createElement("div",{style:{display:"flex",alignItems:"center",gap:"0.5rem",flexWrap:"wrap"}},l.default.createElement(r.Button,{toggled:!0,disabled:!0,text:"Default Toggle"}),l.default.createElement(r.Button,{toggled:!0,disabled:!0,text:"Emphasized Toggle",design:r.ButtonDesigns.EMPHASIZED}),l.default.createElement(r.Button,{toggled:!0,disabled:!0,text:"Ghost Toggle",design:r.ButtonDesigns.GHOST}),l.default.createElement(r.Button,{toggled:!0,disabled:!0,text:"Positive Toggle",design:r.ButtonDesigns.POSITIVE}),l.default.createElement(r.Button,{toggled:!0,disabled:!0,text:"Negative Toggle",design:r.ButtonDesigns.NEGATIVE}),l.default.createElement(r.Button,{toggled:!0,disabled:!0,text:"Attention Toggle",design:r.ButtonDesigns.ATTENTION}),l.default.createElement(r.Button,{toggled:!0,disabled:!0,text:"Transparent Toggle",design:r.ButtonDesigns.TRANSPARENT}),l.default.createElement(r.Button,{toggled:!0,disabled:!0,text:"Action Toggle",menu:!0}),l.default.createElement(r.Button,{toggled:!0,disabled:!0,icon:"cart",menu:!0}),l.default.createElement(r.Button,{toggled:!0,disabled:!0,icon:"accept",design:r.ButtonDesigns.POSITIVE}))),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Button text='Default Toggle' />"),l.default.createElement("div",null,"<Button text='Emphasized Toggle' design={ButtonDesigns.EMPHASIZED} />"),l.default.createElement("div",null,"<Button text='Ghost Toggle' design={ButtonDesigns.GHOST} />"),l.default.createElement("div",null,"<Button text='Positive Toggle' design={ButtonDesigns.POSITIVE} />"),l.default.createElement("div",null,"<Button text='Negative Toggle' design={ButtonDesigns.NEGATIVE} />"),l.default.createElement("div",null,"<Button text='Attention Toggle' design={ButtonDesigns.ATTENTION} />"),l.default.createElement("div",null,"<Button text='Transparent Toggle' design={ButtonDesigns.TRANSPARENT} />"),l.default.createElement("div",null,"<Button text='Action Toggle' menu />"),l.default.createElement("div",null,"<Button icon='cart' menu />"),l.default.createElement("div",null,"<Button icon='accept' design={ButtonDesigns.POSITIVE} />"),l.default.createElement("br",null),l.default.createElement("div",null,"<Button toggled text='Default Toggle' />"),l.default.createElement("div",null,"<Button toggled text='Emphasized Toggle' design={ButtonDesigns.EMPHASIZED} />"),l.default.createElement("div",null,"<Button toggled text='Ghost Toggle' design={ButtonDesigns.GHOST} />"),l.default.createElement("div",null,"<Button toggled text='Positive Toggle' design={ButtonDesigns.POSITIVE} />"),l.default.createElement("div",null,"<Button toggled text='Negative Toggle' design={ButtonDesigns.NEGATIVE} />"),l.default.createElement("div",null,"<Button toggled text='Attention Toggle' design={ButtonDesigns.ATTENTION} />"),l.default.createElement("div",null,"<Button toggled text='Transparent Toggle' design={ButtonDesigns.TRANSPARENT} />"),l.default.createElement("div",null,"<Button toggled text='Action Toggle' menu />"),l.default.createElement("div",null,"<Button toggled icon='cart' menu />"),l.default.createElement("div",null,"<Button toggled icon='accept' design={ButtonDesigns.POSITIVE} />"),l.default.createElement("br",null),l.default.createElement("div",null,"<Button toggled disabled text='Default Toggle' />"),l.default.createElement("div",null,"<Button toggled disabled text='Emphasized Toggle' design={ButtonDesigns.EMPHASIZED} />"),l.default.createElement("div",null,"<Button toggled disabled text='Ghost Toggle' design={ButtonDesigns.GHOST} />"),l.default.createElement("div",null,"<Button toggled disabled text='Positive Toggle' design={ButtonDesigns.POSITIVE} />"),l.default.createElement("div",null,"<Button toggled disabled text='Negative Toggle' design={ButtonDesigns.NEGATIVE} />"),l.default.createElement("div",null,"<Button toggled disabled text='Attention Toggle' design={ButtonDesigns.ATTENTION} />"),l.default.createElement("div",null,"<Button toggled disabled text='Transparent Toggle' design={ButtonDesigns.TRANSPARENT} />"),l.default.createElement("div",null,"<Button toggled disabled text='Action Toggle' menu />"),l.default.createElement("div",null,"<Button toggled disabled icon='cart' menu />"),l.default.createElement("div",null,"<Button toggled disabled icon='accept' design={ButtonDesigns.POSITIVE} />"))},{title:"Segmented button",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,'The segmented button displays a group of options. Only one option can be active at a time by selecting it, while the others remain or become inactive when the initial option is selected. This button type was previously known as "button group" and is comparable to a radio button group.'),l.default.createElement("p",null,'It can be displayed by using the fd-segmented-button class with role="group" and the aria-label="Group label" attribute.')),result:l.default.createElement("div",{style:{display:"flex",alignItems:"center",gap:"0.5rem",flexWrap:"wrap"}},l.default.createElement(r.SegmentedButton,{ariaLabel:"Group label"},l.default.createElement(r.Button,{icon:"survey"}),l.default.createElement(r.Button,{icon:"pie-chart",selected:!0}),l.default.createElement(r.Button,{icon:"pool"})),l.default.createElement(r.SegmentedButton,{ariaLabel:"Group label"},l.default.createElement(r.Button,{text:"Left",compact:!0}),l.default.createElement(r.Button,{text:"Middle 1",compact:!0}),l.default.createElement(r.Button,{text:"Middle 2",compact:!0,selected:!0}),l.default.createElement(r.Button,{text:"Right",compact:!0}))),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<SegmentedButton ariaLabel='Group label'>"),l.default.createElement("div",null,"  <Button icon='survey' />"),l.default.createElement("div",null,"  <Button icon='pie-chart' selected />"),l.default.createElement("div",null,"  <Button icon='pool' />"),l.default.createElement("div",null,"</SegmentedButton>"),l.default.createElement("br",null),l.default.createElement("div",null,"<SegmentedButton ariaLabel='Group label'>"),l.default.createElement("div",null,"  <Button text='Left' compact />"),l.default.createElement("div",null,"  <Button text='Middle 1' compact />"),l.default.createElement("div",null,"  <Button text='Middle 2' compact selected />"),l.default.createElement("div",null,"  <Button text='Right' compact />"),l.default.createElement("div",null,"</SegmentedButton>"))},{title:"Button With Badge",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"Button gets a badge in cases of collecting a number of items from various pages in order to trigger an action."),l.default.createElement("p",null,"Currently the Emphasized, Standard, Ghost and Transparent design of buttons are recommended to be used with Badge."),l.default.createElement("p",null,l.default.createElement("strong",null,"Badges cannot contain more characters than 4."))),result:l.default.createElement("div",{style:{display:"flex",alignItems:"center",gap:"0.5rem",flexWrap:"wrap"}},l.default.createElement(r.Button,{text:"Cozy Badge Button",badge:"3984"}),l.default.createElement(r.Button,{icon:"cart",badge:"3"}),l.default.createElement(r.Button,{text:"Compact Badge Button",compact:!0,badge:"654"}),l.default.createElement(r.Button,{icon:"cart",compact:!0,badge:"12"})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Button text='Cozy Badge Button' badge='3984' />"),l.default.createElement("div",null,"<Button icon='cart' badge='3' />"),l.default.createElement("div",null,"<Button text='Compact Badge Button' compact badge='654' />"),l.default.createElement("div",null,"<Button icon='cart' compact badge='12' />"))}]};t.ButtonDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},7340:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Calendar",labels:[{label:"Since",text:"Version 0.0.10",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"In Progress",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"",types:[{id:"Calendar",props:[{id:"",type:"",description:""}]}],examples:[{title:"",result:l.default.createElement("div",null),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.CalendarDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},1974:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CardDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Card",labels:[{label:"Since",text:"Version 0.0.10",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"In Progress",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"",types:[{id:"Card",props:[{id:"",type:"",description:""}]}],examples:[{title:"",result:l.default.createElement("div",null),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.CardDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},3242:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DialogDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Dialog",labels:[{label:"Since",text:"Version 0.0.10",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"In Progress",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"",types:[{id:"Dialog",props:[{id:"",type:"",description:""}]}],examples:[{title:"",result:l.default.createElement("div",null),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.DialogDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},7663:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormCheckBoxDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Form Check Box",labels:[{label:"Since",text:"Version 0.0.3",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"On Going",accentColor:r.AccentColors.COLOR_6},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"A checkbox lets the user set a binary value such as “true/false”. When the user selects the checkbox, it toggles between:"),l.default.createElement("ul",null,l.default.createElement("li",null,l.default.createElement("strong",null,"Checked"),": the state described by the checkbox text applies, or that the item has been chosen."),l.default.createElement("li",null,l.default.createElement("strong",null,"Un-checked"),": the state described by the checkbox is not applied."),l.default.createElement("li",null,l.default.createElement("strong",null,"Tri-state"),": a state that indicates it is neither checked nor unchecked. JavaScript must be used to set the input's 'indeterminate' property to true. The main purpose of the tri-state is to represent a mixed selection of states of dependent input fields. If some (but not all) of the dependent fields are selected, the checkbox shows a partially selected state. This is only a visual state and can’t be achieved by a direct user interaction. In this example the indeterminate state is set on page load.")),l.default.createElement("p",null,"Note: With checkboxes, all options are visible, and the user can make one or more selections.")),types:[{id:"FormCheckBox",props:[{id:"",type:"",description:""}]}],examples:[{title:"Desktop",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"A checkbox can be displayed in two different sizes desktop (compact) and mobile (default). On desktop screens, the checkbox appears smaller and uses the fd-checkbox__label--compact modifier class.")),result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},l.default.createElement(r.FormCheckBox,{compact:!0,text:"Apple",onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{checked:!0,compact:!0,text:"Banana",onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{compact:!0,disabled:!0,text:"Kiwi",onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{checked:!0,compact:!0,disabled:!0,text:"Lemon",onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{compact:!0,indeterminate:!0,text:"All Fruits",onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{compact:!0,disabled:!0,indeterminate:!0,text:"All Vegetables",onChange:e=>{alert(`Checkbox: ${e}`)}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Required",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"To show that a checkbox input is required, use the fd-checkbox__label--required class.")),result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},l.default.createElement(r.FormCheckBox,{compact:!0,text:"Required Checkbox",required:!0,onChange:e=>{alert(`Checkbox: ${e}`)}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"State",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"Checkboxes can display several interaction states to communicate semantic meaning to the users. To display different states, add the classes below to the fd-form-item:")),result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column"}},l.default.createElement(r.FormCheckBox,{text:"Error Checkbox",state:r.InputStates.ERROR,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{text:"Error Checkbox Selected",state:r.InputStates.ERROR,checked:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{text:"Error Checkbox Indeterminate",state:r.InputStates.ERROR,indeterminate:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement("br",null),l.default.createElement(r.FormCheckBox,{text:"Success Checkbox",state:r.InputStates.SUCCESS,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{text:"Success Checkbox Selected",state:r.InputStates.SUCCESS,checked:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{text:"Success Checkbox Indeterminate",state:r.InputStates.SUCCESS,indeterminate:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement("br",null),l.default.createElement(r.FormCheckBox,{text:"Warning Checkbox",state:r.InputStates.WARNING,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{text:"Warning Checkbox Selected",state:r.InputStates.WARNING,checked:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{text:"Warning Checkbox Indeterminate",state:r.InputStates.WARNING,indeterminate:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement("br",null),l.default.createElement(r.FormCheckBox,{text:"Information Checkbox",state:r.InputStates.INFORMATION,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{text:"Information Checkbox Selected",state:r.InputStates.INFORMATION,checked:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{text:"Information Checkbox Indeterminate",state:r.InputStates.INFORMATION,indeterminate:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement("br",null),l.default.createElement(r.FormCheckBox,{text:"Disabled Checkbox",disabled:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{text:"Disabled Checkbox Selected",disabled:!0,checked:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{text:"Disabled Checkbox Indeterminate",disabled:!0,indeterminate:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement("br",null),l.default.createElement(r.FormCheckBox,{text:"Read-Only Checkbox",readOnly:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{text:"Read-Only Checkbox Selected",readOnly:!0,checked:!0,onChange:e=>{alert(`Checkbox: ${e}`)}}),l.default.createElement(r.FormCheckBox,{text:"Read-Only Checkbox Indeterminate",readOnly:!0,indeterminate:!0,onChange:e=>{alert(`Checkbox: ${e}`)}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.FormCheckBoxDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},6661:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Form",labels:[{label:"Since",text:"Version 0.0.10",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"In Progress",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"",types:[{id:"Form",props:[{id:"",type:"",description:""}]}],examples:[{title:"",result:l.default.createElement("div",null),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.FormDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},9033:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormInputDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Form Input",labels:[{label:"Since",text:"Version 0.0.3",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"On Going",accentColor:r.AccentColors.COLOR_6},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"Inputs are used to collect data from the user and should always be paired with a label. When a field is required, the label should include an asterisk (*)."),l.default.createElement("p",null,"A text input field allows users to enter and edit text or numeric values in one line. To help users enter a valid value, it provides additional features like “auto-complete”, “suggestions”, and “value help”.")),types:[{id:"FormInput",props:[{id:"",type:"",description:""}]}],examples:[{title:"Default",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"The standard input component can be displayed by using fd-input class. It can also be displayed in compact mode by adding the fd-input--compact class.")),result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},l.default.createElement(r.FormInput,{label:"Default Input:",placeholder:"Field placeholder text",value:"",onChange:e=>{alert(`Input: ${e}`)}}),l.default.createElement(r.FormInput,{compact:!0,label:"Compact Input:",placeholder:"Field placeholder text",value:"",onChange:e=>{alert(`Input: ${e}`)}}),l.default.createElement(r.FormInput,{label:"Required Input:",placeholder:"Field placeholder text",required:!0,value:"",onChange:e=>{alert(`Input: ${e}`)}}),l.default.createElement(r.FormInput,{label:"Password Input:",type:r.InputTypes.PASSWORD,value:"",onChange:e=>{alert(`Input: ${e}`)}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Horizontal",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"Forms can be displayed in a horizontal direction instad of the default vertical one.")),result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},l.default.createElement(r.FormInput,{label:"Default Input:",horizontal:!0,placeholder:"Field placeholder text",value:"",onChange:e=>{alert(`Input: ${e}`)}}),l.default.createElement(r.FormInput,{compact:!0,horizontal:!0,label:"Compact Input:",placeholder:"Field placeholder text",value:"",onChange:e=>{alert(`Input: ${e}`)}}),l.default.createElement(r.FormInput,{horizontal:!0,label:"Required Input:",placeholder:"Field placeholder text",required:!0,value:"",onChange:e=>{alert(`Input: ${e}`)}}),l.default.createElement(r.FormInput,{horizontal:!0,label:"Password Input:",type:r.InputTypes.PASSWORD,value:"",onChange:e=>{alert(`Input: ${e}`)}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"States",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"The state of the input field can reflect validity of the data entered, whether the input data is editable or disabled."),l.default.createElement("ul",null,l.default.createElement("li",null,"Default: The field is editable but no validation has occurred"),l.default.createElement("li",null,"Success: The data format entered has been validated and it's correct, such as an email address."),l.default.createElement("li",null,"Error: The data entered is not valid and must be corrected."),l.default.createElement("li",null,"Warning: The data entered is formatted correctly but there are other issues are problematic but will not stop the user from moving forward."),l.default.createElement("li",null,"Disabled: This indicates the field is not editable. A common use case is that this field is dependent on a previous entry or selection within the form."),l.default.createElement("li",null,"Read Only: Used to display static information in the context of a form.")),l.default.createElement("p",null,"Along with Error and Warning, error messages should be displayed below the field so the user can correct the error and move forward.")),result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},l.default.createElement(r.FormInput,{label:"Default Input:",placeholder:"Field placeholder text",value:"",onChange:e=>{alert(`Input: ${e}`)}}),l.default.createElement(r.FormInput,{label:"Error Input:",placeholder:"Field placeholder text",state:r.InputStates.ERROR,value:"",onChange:e=>{alert(`Input: ${e}`)}}),l.default.createElement(r.FormInput,{label:"Success Input:",placeholder:"Field placeholder text",state:r.InputStates.SUCCESS,value:"",onChange:e=>{alert(`Input: ${e}`)}}),l.default.createElement(r.FormInput,{label:"Warning Input:",placeholder:"Field placeholder text",state:r.InputStates.WARNING,value:"",onChange:e=>{alert(`Input: ${e}`)}}),l.default.createElement(r.FormInput,{label:"Information Input:",placeholder:"Field placeholder text",state:r.InputStates.INFORMATION,value:"",onChange:e=>{alert(`Input: ${e}`)}}),l.default.createElement(r.FormInput,{disabled:!0,label:"Disabled Input:",placeholder:"Field placeholder text",value:"",onChange:e=>{alert(`Input: ${e}`)}}),l.default.createElement(r.FormInput,{label:"Read-Only Input:",placeholder:"Field placeholder text",readOnly:!0,value:"",onChange:e=>{alert(`Input: ${e}`)}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"State Messages",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"Along with Error and Warning, error messages should be displayed below the field so the user can correct the error and move forward.")),result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},l.default.createElement(r.FormInput,{label:"Error Input:",placeholder:"Field placeholder text",state:r.InputStates.ERROR,stateMessage:"Error message",value:"",onChange:e=>{alert(`Input: ${e}`)}}),l.default.createElement(r.FormInput,{label:"Success Input:",placeholder:"Field placeholder text",state:r.InputStates.SUCCESS,stateMessage:"Success message",value:"",onChange:e=>{alert(`Input: ${e}`)}}),l.default.createElement(r.FormInput,{label:"Warning Input:",placeholder:"Field placeholder text",state:r.InputStates.WARNING,stateMessage:"Warning message",value:"",onChange:e=>{alert(`Input: ${e}`)}}),l.default.createElement(r.FormInput,{label:"Information Input:",placeholder:"Field placeholder text",state:r.InputStates.INFORMATION,stateMessage:"Information message",value:"",onChange:e=>{alert(`Input: ${e}`)}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.FormInputDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},8438:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormStepInputDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Form Step Input",labels:[{label:"Since",text:"Version 0.0.3",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"On Going",accentColor:r.AccentColors.COLOR_6},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"The step input control allows the user to change the input values in predefined increments (steps).",types:[{id:"FormStepInput",props:[{id:"",type:"",description:""}]}],examples:[{title:"Default",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"The default step input displays an input field with a plus and minus icon on opposing sides to either increase or decrease the value. It is displayed in cozy mode, which is ideal for mobile and tablet screens.")),result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},l.default.createElement(r.FormStepInput,{label:"Default Step Input:",value:0,onChange:e=>{alert(`Step Input: ${e}`)}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Compact",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"The step input can be displayed in compact mode, which is ideal for desktop screens. To display a compact step input, add the --compact modifier class to the main element, as well as the button and input elements.")),result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},l.default.createElement(r.FormStepInput,{compact:!0,label:"Compact Step Input:",value:0,onChange:e=>{alert(`Step Input: ${e}`)}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"States",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"Step input can be displayed in various states such as Success, Information, Error and Warning.")),result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},l.default.createElement(r.FormStepInput,{label:"Error Step Input:",state:r.InputStates.ERROR,value:0,onChange:e=>{alert(`Step Input: ${e}`)}}),l.default.createElement(r.FormStepInput,{label:"Succes Step Input:",state:r.InputStates.SUCCESS,value:0,onChange:e=>{alert(`Step Input: ${e}`)}}),l.default.createElement(r.FormStepInput,{label:"Warning Step Input:",state:r.InputStates.WARNING,value:0,onChange:e=>{alert(`Step Input: ${e}`)}}),l.default.createElement(r.FormStepInput,{label:"Information Step Input:",state:r.InputStates.INFORMATION,value:0,onChange:e=>{alert(`Step Input: ${e}`)}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Disabled",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"Step input can be disabled by adding the is-disabled class to the main element.")),result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},l.default.createElement(r.FormStepInput,{label:"Disabled Step Input:",disabled:!0,value:0,onChange:e=>{alert(`Step Input: ${e}`)}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Read Only",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"Step input can be disabled by adding the is-disabled class to the main element.")),result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},l.default.createElement(r.FormStepInput,{label:"Read-Only Step Input:",readOnly:!0,value:0,onChange:e=>{alert(`Step Input: ${e}`)}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.FormStepInputDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},1134:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormTextAreaDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Form Text Area",labels:[{label:"Since",text:"Version 0.0.13",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"On Going",accentColor:r.AccentColors.COLOR_6},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"The text area is an input component that allows the user to enter several lines of text. Use the text area if you want users to enter multiple lines of unformatted text."),l.default.createElement("p",null,"Do not use the text area if"),l.default.createElement("ul",null,l.default.createElement("li",null,"You only want them to enter a single line of text, use the input component instead."),l.default.createElement("li",null,"Users need to enter formatted text. Use the rich text editor instead."))),types:[{id:"FormTextArea",props:[{id:"compact",type:"boolean",description:""},{id:"counter",type:"number",description:""},{id:"disabled",type:"boolean",description:""},{id:"horizontal",type:"boolean",description:""},{id:"label",type:"boolean",description:""},{id:"placeholder",type:"boolean",description:""},{id:"readOnly",type:"boolean",description:""},{id:"required",type:"boolean",description:""},{id:"state",type:"InputState",description:""},{id:"stateMessage",type:"boolean",description:""},{id:"value",type:"boolean",description:""},{id:"onChange",type:"(string) => void",description:""}]}],examples:[{title:"Content Density - cozy and compact",description:l.default.createElement(l.default.Fragment,null),result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},l.default.createElement(r.FormTextArea,{label:"Text area (cozy):",placeholder:"Write something here",value:"",onChange:e=>{(0,i.demoCallback)(`Text Area: ${e}`)}}),l.default.createElement(r.FormTextArea,{compact:!0,label:"Text area (compact):",placeholder:"Write something here",value:"",onChange:e=>{(0,i.demoCallback)(`Text Area: ${e}`)}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<FormTextArea"),l.default.createElement("div",null,"  label='Text area (cozy):'"),l.default.createElement("div",null,"  placeholder='Write something here'"),l.default.createElement("div",null,"  value=''"),l.default.createElement("div",null,"  onChange={(value) => { demoCallback(`Text Area: ${value}`) }}"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<FormTextArea"),l.default.createElement("div",null,"  compact"),l.default.createElement("div",null,"  label='Text area (compact):'"),l.default.createElement("div",null,"  placeholder='Write something here'"),l.default.createElement("div",null,"  value=''"),l.default.createElement("div",null,"  onChange={(value) => { demoCallback(`Text Area: ${value}`) }}"),l.default.createElement("div",null,"/>"))},{title:"Counter",description:l.default.createElement("p",null,"A checkbox can appear in two different sizes. In cozy mode, it is bigger than it is in compact mode. This makes the checkbox easier to select on touch devices."),result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},l.default.createElement(r.FormTextArea,{label:"Text area (cozy):",value:"Pellentesque metus lacus commodo eget justo ut rutrum varius nunc.",counter:150,onChange:e=>{(0,i.demoCallback)(`Text Area: ${e}`)}}),l.default.createElement(r.FormTextArea,{compact:!0,label:"Text area (compact):",value:"Pellentesque metus lacus commodo eget justo ut rutrum varius nunc.",counter:180,onChange:e=>{(0,i.demoCallback)(`Text Area: ${e}`)}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<FormTextArea"),l.default.createElement("div",null,"  label='Text area (cozy):'"),l.default.createElement("div",null,"  value='Pellentesque metus lacus commodo eget justo ut rutrum varius nunc.'"),l.default.createElement("div",null,"  counter={150}"),l.default.createElement("div",null,"  onChange={(value) => { demoCallback(`Text Area: ${value}`) }}"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<FormTextArea"),l.default.createElement("div",null,"  compact"),l.default.createElement("div",null,"  label='Text area (compact):'"),l.default.createElement("div",null,"  value='Pellentesque metus lacus commodo eget justo ut rutrum varius nunc.'"),l.default.createElement("div",null,"  counter={180}"),l.default.createElement("div",null,"  onChange={(value) => { demoCallback(`Text Area: ${value}`) }}"),l.default.createElement("div",null,"/>"))},{title:"Disabled And Read Only",description:l.default.createElement("p",null,"A checkbox can appear in two different sizes. In cozy mode, it is bigger than it is in compact mode. This makes the checkbox easier to select on touch devices."),result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},l.default.createElement(r.FormTextArea,{label:"Text area (disabled):",value:"Pellentesque metus lacus commodo eget justo ut rutrum varius nunc.",disabled:!0,onChange:e=>{(0,i.demoCallback)(`Text Area: ${e}`)}}),l.default.createElement(r.FormTextArea,{label:"Text area (read only):",value:"Pellentesque metus lacus commodo eget justo ut rutrum varius nunc.",readOnly:!0,onChange:e=>{(0,i.demoCallback)(`Text Area: ${e}`)}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<FormTextArea"),l.default.createElement("div",null,"  label='Text area (disabled):'"),l.default.createElement("div",null,"  value='Pellentesque metus lacus commodo eget justo ut rutrum varius nunc.'"),l.default.createElement("div",null,"  disabled"),l.default.createElement("div",null,"  onChange={(value) => { demoCallback(`Text Area: ${value}`) }}"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<FormTextArea"),l.default.createElement("div",null,"  label='Text area (read only):'"),l.default.createElement("div",null,"  value='Pellentesque metus lacus commodo eget justo ut rutrum varius nunc.'"),l.default.createElement("div",null,"  readOnly"),l.default.createElement("div",null,"  onChange={(value) => { demoCallback(`Text Area: ${value}`) }}"),l.default.createElement("div",null,"/>"))},{title:"State",description:l.default.createElement("p",null,"As with any other input component, you can validate the fields and show the result as a value state of the component. Possible value states are error, warning, success, information, or neutral (none)."),result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem"}},l.default.createElement(r.FormTextArea,{label:"Text area (success):",placeholder:"Write something here",value:"Pellentesque metus lacus commodo eget justo ut rutrum varius nunc.",state:r.InputStates.SUCCESS,stateMessage:"Success Message",onChange:e=>{(0,i.demoCallback)(`Text Area: ${e}`)}}),l.default.createElement(r.FormTextArea,{label:"Text area (error):",placeholder:"Write something here",value:"Pellentesque metus lacus commodo eget justo ut rutrum varius nunc.",state:r.InputStates.ERROR,stateMessage:"Error Message",onChange:e=>{(0,i.demoCallback)(`Text Area: ${e}`)}}),l.default.createElement(r.FormTextArea,{label:"Text area (error):",placeholder:"Write something here",value:"Pellentesque metus lacus commodo eget justo ut rutrum varius nunc.",state:r.InputStates.WARNING,stateMessage:"Warning Message",onChange:e=>{(0,i.demoCallback)(`Text Area: ${e}`)}}),l.default.createElement(r.FormTextArea,{label:"Text area (error):",placeholder:"Write something here",value:"Pellentesque metus lacus commodo eget justo ut rutrum varius nunc.",state:r.InputStates.INFORMATION,stateMessage:"Information Message",onChange:e=>{(0,i.demoCallback)(`Text Area: ${e}`)}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<FormTextArea"),l.default.createElement("div",null,"  label='Text area (success):'"),l.default.createElement("div",null,"  placeholder='Write something here'"),l.default.createElement("div",null,"  value='Pellentesque metus lacus commodo eget justo ut rutrum varius nunc.'"),l.default.createElement("div",null,"  state={InputStates.SUCCESS}"),l.default.createElement("div",null,"  stateMessage='Success Message'"),l.default.createElement("div",null,"  onChange={(value) => { demoCallback(`Text Area: ${value}`) }}"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<FormTextArea"),l.default.createElement("div",null,"  label='Text area (error):'"),l.default.createElement("div",null,"  placeholder='Write something here'"),l.default.createElement("div",null,"  value='Pellentesque metus lacus commodo eget justo ut rutrum varius nunc.'"),l.default.createElement("div",null,"  state={InputStates.ERROR}"),l.default.createElement("div",null,"  stateMessage='Error Message'"),l.default.createElement("div",null,"  onChange={(value) => { demoCallback(`Text Area: ${value}`) }}"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<FormTextArea"),l.default.createElement("div",null,"  label='Text area (error):'"),l.default.createElement("div",null,"  placeholder='Write something here'"),l.default.createElement("div",null,"  value='Pellentesque metus lacus commodo eget justo ut rutrum varius nunc.'"),l.default.createElement("div",null,"  state={InputStates.WARNING}"),l.default.createElement("div",null,"  stateMessage='Warning Message'"),l.default.createElement("div",null,"  onChange={(value) => { demoCallback(`Text Area: ${value}`) }}"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<FormTextArea"),l.default.createElement("div",null,"  label='Text area (error):'"),l.default.createElement("div",null,"  placeholder='Write something here'"),l.default.createElement("div",null,"  value='Pellentesque metus lacus commodo eget justo ut rutrum varius nunc.'"),l.default.createElement("div",null,"  state={InputStates.INFORMATION}"),l.default.createElement("div",null,"  stateMessage='Information Message'"),l.default.createElement("div",null,"  onChange={(value) => { demoCallback(`Text Area: ${value}`) }}"),l.default.createElement("div",null,"/>"))}]};t.FormTextAreaDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},4757:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IconDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Icon",labels:[{label:"Since",text:"Version 0.0.10",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"Reviewed 0.0.12",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"Icons are used to provide visual clarity, save screen space, and help guide users as they navigate an application. They are often used as visual elements within other components, although they can be used independently, given that they can be read by screen readers or have a tooltip for accessibility purposes. See Project Confirguration for instructions on how to use the SAP icon font on your page."),l.default.createElement("p",null,l.default.createElement("strong",null,"Use the icon if:")),l.default.createElement("ul",null,l.default.createElement("li",null,"You want to display an icon for illustrative purposes only, without interaction states, acting as a non-interactive icon/pictogram."),l.default.createElement("li",null,"You intend to pair the icon with another method of communication i.e. with text or a tooltip.")),l.default.createElement("p",null,"Note: If an icon needs to be selected or have any interaction states, it is recommended to use the transparent button style. See Button for more details on how to implement it.")),types:[{id:"Icon",props:[{id:"color",type:"IconDesigns",description:"The color to use for the"},{id:"icon",type:"string",description:"The name of the icon to display"}]}],examples:[{title:"Sizes",description:"Icons don’t have predefined sizes because they align with the font size value. They are vector graphics, meaning they can be easily resized without compromising their appearance. And because icons are essentially a font, there are unlimited sizes.",result:l.default.createElement("div",null,l.default.createElement(r.Icon,{icon:"cart"}),l.default.createElement("br",null),l.default.createElement(r.Icon,{icon:"cart",style:{fontSize:"5rem"}}),l.default.createElement("br",null),l.default.createElement(r.Icon,{icon:"cart",style:{fontSize:"10rem"}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Icon"),l.default.createElement("div",null,"  icon='cart'"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Icon"),l.default.createElement("div",null,"  icon='cart'"),l.default.createElement("div",null,"  style={{ fontSize: '5rem' }}"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Icon"),l.default.createElement("div",null,"  icon='cart'"),l.default.createElement("div",null,"  style={{ fontSize: '10rem' }}"),l.default.createElement("div",null,"/>"))},{title:"Colors",description:"There are different semantic statuses that can be applied to the icon by adding a modifier class.",result:l.default.createElement("div",null,l.default.createElement(r.Icon,{icon:"cart",style:{fontSize:"5rem"}}),l.default.createElement(r.Icon,{color:r.IconDesigns.CONTRAST,icon:"cart",style:{fontSize:"5rem"}}),l.default.createElement(r.Icon,{color:r.IconDesigns.NON_INTERACTIVE,icon:"cart",style:{fontSize:"5rem"}}),l.default.createElement(r.Icon,{color:r.IconDesigns.TILE,icon:"cart",style:{fontSize:"5rem"}}),l.default.createElement(r.Icon,{color:r.IconDesigns.MARKER,icon:"cart",style:{fontSize:"5rem"}}),l.default.createElement(r.Icon,{color:r.IconDesigns.CRITICAL,icon:"cart",style:{fontSize:"5rem"}}),l.default.createElement(r.Icon,{color:r.IconDesigns.NEGATIVE,icon:"cart",style:{fontSize:"5rem"}}),l.default.createElement(r.Icon,{color:r.IconDesigns.NEUTRAL,icon:"cart",style:{fontSize:"5rem"}}),l.default.createElement(r.Icon,{color:r.IconDesigns.POSITIVE,icon:"cart",style:{fontSize:"5rem"}}),l.default.createElement(r.Icon,{color:r.IconDesigns.INFORMATION,icon:"cart",style:{fontSize:"5rem"}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Icon"),l.default.createElement("div",null,"  icon='cart'"),l.default.createElement("div",null,"  style={{ fontSize: '5rem' }}"),l.default.createElement("div",null,"/>"),l.default.createElement("div",null,"<Icon"),l.default.createElement("div",null,"  color={IconDesigns.CONTRAST}"),l.default.createElement("div",null,"  icon='cart'"),l.default.createElement("div",null,"  style={{ fontSize: '5rem' }}"),l.default.createElement("div",null,"/>"),l.default.createElement("div",null,"<Icon"),l.default.createElement("div",null,"  color={IconDesigns.NON_INTERACTIVE}"),l.default.createElement("div",null,"  icon='cart'"),l.default.createElement("div",null,"  style={{ fontSize: '5rem' }}"),l.default.createElement("div",null,"/>"),l.default.createElement("div",null,"<Icon"),l.default.createElement("div",null,"  color={IconDesigns.TILE}"),l.default.createElement("div",null,"  icon='cart'"),l.default.createElement("div",null,"  style={{ fontSize: '5rem' }}"),l.default.createElement("div",null,"/>"),l.default.createElement("div",null,"<Icon"),l.default.createElement("div",null,"  color={IconDesigns.MARKER}"),l.default.createElement("div",null,"  icon='cart'"),l.default.createElement("div",null,"  style={{ fontSize: '5rem' }}"),l.default.createElement("div",null,"/>"),l.default.createElement("div",null,"<Icon"),l.default.createElement("div",null,"  color={IconDesigns.CRITICAL}"),l.default.createElement("div",null,"  icon='cart'"),l.default.createElement("div",null,"  style={{ fontSize: '5rem' }}"),l.default.createElement("div",null,"/>"),l.default.createElement("div",null,"<Icon"),l.default.createElement("div",null,"  color={IconDesigns.NEGATIVE}"),l.default.createElement("div",null,"  icon='cart'"),l.default.createElement("div",null,"  style={{ fontSize: '5rem' }}"),l.default.createElement("div",null,"/>"),l.default.createElement("div",null,"<Icon"),l.default.createElement("div",null,"  color={IconDesigns.NEUTRAL}"),l.default.createElement("div",null,"  icon='cart'"),l.default.createElement("div",null,"  style={{ fontSize: '5rem' }}"),l.default.createElement("div",null,"/>"),l.default.createElement("div",null,"<Icon"),l.default.createElement("div",null,"  color={IconDesigns.POSITIVE}"),l.default.createElement("div",null,"  icon='cart'"),l.default.createElement("div",null,"  style={{ fontSize: '5rem' }}"),l.default.createElement("div",null,"/>"),l.default.createElement("div",null,"<Icon"),l.default.createElement("div",null,"  color={IconDesigns.INFORMATION}"),l.default.createElement("div",null,"  icon='cart'"),l.default.createElement("div",null,"  style={{ fontSize: '5rem' }}"),l.default.createElement("div",null,"/>"))}]};t.IconDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},6170:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IconTabBarDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Icon Tab Bar",labels:[{label:"Version",text:"Version 0.0.7",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"On Going",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"Info Label is a small non-interactive numeric or text-based label. Its primary use is to add user-defined characteristic to an object.",types:[{id:"InfoTabBar",props:[{id:"selectedTab",type:"boolean",description:"The identifier of the currently selected tab"},{id:"tabs",type:"IconTabBarItemProperties[]",description:"List of tabs to display"},{id:"onTabSelect",type:"Callback (string) => void",description:"Event called when a tab is selected"}]}],examples:[{title:"Text Only (Inline mode)",description:"The text-only variant is one of the most common types. It allows longer labels, and can also display counters next to the text to indicate the number of items on the tab page. The labels of the tabs do not get truncated. The full text is always shown. As a result, you need to ensure that your labels do not become too long. They should still be easy to read on smaller screens. The control has the same look and feel in Cozy and Compact mode.",result:l.default.createElement(r.IconTabBar,{selectedTab:"tab1",tabs:[{id:"tab1",title:"Info"},{id:"tab2",title:"Attachements (16)"},{id:"tab3",title:"Approvals (42)"}]}),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<IconTabBar"),l.default.createElement("div",null,"  selectedTab='tab1'"),l.default.createElement("div",null,"  tabs={["),l.default.createElement("div",null,"    { id: 'tab1', title: 'Info' },"),l.default.createElement("div",null,"    { id: 'tab2', title: 'Attachements (16)' },"),l.default.createElement("div",null,"    { id: 'tab3', title: 'Approvals (42)' },"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))},{title:"Text Only (Inline mode) Semantic Colors",result:l.default.createElement(r.IconTabBar,{tabs:[{id:"tab1",title:"Section Positive",semantic:r.Semantics.POSITIVE,selected:!0},{id:"tab2",title:"Section Negative",semantic:r.Semantics.NEGATIVE,selected:!0},{id:"tab3",title:"Section Critical",semantic:r.Semantics.CRITICAL,selected:!0},{id:"tab4",title:"Section Informative",semantic:r.Semantics.INFORMATIVE,selected:!0}]}),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<IconTabBar"),l.default.createElement("div",null,"  tabs={["),l.default.createElement("div",null,"    { id: 'tab1', title: 'Section Positive', semantic: Semantics.POSITIVE, selected: true },"),l.default.createElement("div",null,"    { id: 'tab2', title: 'Section Negative', semantic: Semantics.NEGATIVE, selected: true },"),l.default.createElement("div",null,"    { id: 'tab3', title: 'Section Critical', semantic: Semantics.CRITICAL, selected: true },"),l.default.createElement("div",null,"    { id: 'tab4', title: 'Section Informative', semantic: Semantics.INFORMATIVE, selected: true },"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))},{title:"Counters and Text",description:"Counters can be shown on top of labels. In this case you need to apply the fd-icon-tab-bar--counters modifier class. The control has the same look and feel in Cozy and Compact mode.",result:l.default.createElement(r.IconTabBar,{design:r.IconTabBarDesigns.COUNTERS,tabs:[{id:"tab1",title:"Info"},{id:"tab2",title:"Attachements",counter:"16",selected:!0},{id:"tab3",title:"Approvals",counter:"42"}]}),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Icon Only in Compact Mode",description:"In compact mode you need to apply an additional modifier class fd-icon-tab-bar--compact.",result:l.default.createElement(r.IconTabBar,{compact:!0,design:r.IconTabBarDesigns.ICON_ONLY,tabs:[{id:"tab1",icon:"cart",counter:"2"},{id:"tab2",icon:"pending",counter:"23",selected:!0},{id:"tab3",icon:"picture",counter:"10"}]}),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Icon Only Semantic Colors",result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"2rem"}},l.default.createElement(r.IconTabBar,{design:r.IconTabBarDesigns.ICON_ONLY,tabs:[{id:"tab1",counter:"2",icon:"history",semantic:r.Semantics.POSITIVE},{id:"tab2",counter:"23",icon:"card",selected:!0,semantic:r.Semantics.NEGATIVE},{id:"tab3",counter:"10",icon:"cart",semantic:r.Semantics.CRITICAL},{id:"tab4",counter:"10",icon:"cart",semantic:r.Semantics.INFORMATIVE}]}),l.default.createElement(r.IconTabBar,{compact:!0,design:r.IconTabBarDesigns.ICON_ONLY,tabs:[{id:"tab1",counter:"2",icon:"history",semantic:r.Semantics.POSITIVE},{id:"tab2",counter:"23",icon:"card",selected:!0,semantic:r.Semantics.NEGATIVE},{id:"tab3",counter:"10",icon:"cart",semantic:r.Semantics.CRITICAL},{id:"tab4",counter:"10",icon:"cart",semantic:r.Semantics.INFORMATIVE}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Icon",description:"To display Icon Tabs with labels and counters you need to apply the fd-icon-tab-bar--icon modifier class. The counters are optional and can be ommited. The label is always positioned at the bottom. If you decide to use labels, use them for all tabs. The badge is rendered at the top right hand corner of the icon container. Consider using shorter labels or text tabs (without icons), since text tabs cannot get truncated.",result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"2rem"}},l.default.createElement(r.IconTabBar,{design:r.IconTabBarDesigns.ICON,tabs:[{id:"tab1",icon:"filter",selected:!0,title:"Description"},{id:"tab2",counter:"99",icon:"customer",title:"Description"},{id:"tab3",counter:"56 of 123",icon:"chain-link",title:"Description"}]}),l.default.createElement(r.IconTabBar,{compact:!0,design:r.IconTabBarDesigns.ICON,tabs:[{id:"tab1",counter:"25 of 789 items",icon:"iphone",title:"Claim Overweights"},{id:"tab2",icon:"record",selected:!0,title:"Confirm"},{id:"tab3",counter:"12",icon:"world",title:"Checks"}]}),l.default.createElement(r.IconTabBar,{design:r.IconTabBarDesigns.ICON,tabs:[{id:"tab1",counter:"2",icon:"play",selected:!0,semantic:r.Semantics.POSITIVE,title:"Description"},{id:"tab2",counter:"2",icon:"unfavorite",semantic:r.Semantics.NEGATIVE,title:"Description"},{id:"tab3",counter:"2",icon:"shipping-status",semantic:r.Semantics.CRITICAL,title:"Description"}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Process",description:"You can also use the tab bar to depict a process. In this case, each tab stands for one step. You need to add the fd-icon-tab-bar--process modifier class and a sibling html element with fd-icon-tab-bar__separator class to the tab.",result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"2rem"}},l.default.createElement(r.IconTabBar,{design:r.IconTabBarDesigns.ICON,process:!0,tabs:[{id:"tab1",badge:!0,icon:"filter",selected:!0,title:"Description"},{id:"tab2",counter:"99",icon:"customer",title:"Description"},{id:"tab3",counter:"56 of 123",icon:"chain-link",title:"Description"}]}),l.default.createElement(r.IconTabBar,{compact:!0,design:r.IconTabBarDesigns.ICON,process:!0,tabs:[{id:"tab1",icon:"iphone",counter:"25 of 789 items",title:"Claim Overweights"},{id:"tab2",icon:"record",title:"Confirm",selected:!0},{id:"tab3",icon:"world",counter:"12",title:"Checks"}]}),l.default.createElement(r.IconTabBar,{design:r.IconTabBarDesigns.ICON,process:!0,tabs:[{id:"tab1",counter:"2",icon:"play",title:"Description",semantic:r.Semantics.POSITIVE,selected:!0},{id:"tab2",counter:"2",icon:"unfavorite",semantic:r.Semantics.NEGATIVE,title:"Description"},{id:"tab3",counter:"2",icon:"shipping-status",semantic:r.Semantics.CRITICAL,title:"Description"}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Universal Icon Tab Bar Multi Click Area",description:"In case of two click areas for tabs with sub-tabs, the behaviour for regular tabs (without sub-items) remains unchanged, like described above the tabs get selected immediately. Tabs with two click areas behave differently: when the main part of the tab is clicked, it is highlighted and then selected immediately. Clicking the second area opens a menu (Popover) containing the sub-items. Once a sub-item is clicked, the main tab is highlighted as selected.",result:l.default.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"2rem"}},l.default.createElement(r.IconTabBar,{design:r.IconTabBarDesigns.ICON,tabs:[{id:"tab1",action:"decline",badge:!0,icon:"filter",selected:!0,title:"Description"},{id:"tab2",action:"decline",counter:"99",icon:"customer",title:"Description"},{id:"tab3",action:"decline",counter:"56 of 123",icon:"chain-link",title:"Description"}]}),l.default.createElement(r.IconTabBar,{compact:!0,tabs:[{id:"tab1",badge:!0,action:"decline",title:"Claim Overweights"},{id:"tab2",action:"decline",title:"Confirm",selected:!0},{id:"tab3",action:"decline",title:"Checks"}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.IconTabBarDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},6446:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.InfoLabelDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Info Label",labels:[{label:"Version",text:"Version 0.0.3",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"On Going",accentColor:r.AccentColors.COLOR_6},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"Info Label is a small non-interactive numeric or text-based label. Its primary use is to add user-defined characteristic to an object. Use the Info Label base class with following modifiers:",types:[{id:"InfoLabel",props:[{id:"icon",type:"string",description:"(Optional) If provided, an icon will be displayed as the first element of the Info Label"},{id:"text",type:"string",description:"(Optional) If provided, a text will be displayed in the Info Label"},{id:"display",type:"boolean",description:"(Optional) Apply the default styling to the Info Label"},{id:"numeric",type:"boolean",description:"(Optional) Subbtle style modification to enhance display in case of numeric information"},{id:"accentColor",type:"AccentColor",description:"(Optional) Apply semantic color to Info Label"}]}],examples:[{title:"Color Flavors",description:"Use the fd-info-label--accent-color-* modifier class to apply semantic color to Info Label. Options include numbers from 1 to 10.",result:l.default.createElement("div",{style:{display:"flex",gap:"0.25rem",flexWrap:"wrap"}},l.default.createElement(r.InfoLabel,{text:"color 1",accentColor:r.AccentColors.COLOR_1}),l.default.createElement(r.InfoLabel,{text:"color 2",accentColor:r.AccentColors.COLOR_2}),l.default.createElement(r.InfoLabel,{text:"color 3",accentColor:r.AccentColors.COLOR_3}),l.default.createElement(r.InfoLabel,{text:"color 4",accentColor:r.AccentColors.COLOR_4}),l.default.createElement(r.InfoLabel,{text:"color 5",accentColor:r.AccentColors.COLOR_5}),l.default.createElement(r.InfoLabel,{text:"color 6",accentColor:r.AccentColors.COLOR_6}),l.default.createElement(r.InfoLabel,{text:"color 7",accentColor:r.AccentColors.COLOR_7}),l.default.createElement(r.InfoLabel,{text:"color 8",accentColor:r.AccentColors.COLOR_8}),l.default.createElement(r.InfoLabel,{text:"color 9",accentColor:r.AccentColors.COLOR_9}),l.default.createElement(r.InfoLabel,{text:"color 10",accentColor:r.AccentColors.COLOR_10})),code:l.default.createElement("div",null,l.default.createElement("div",null,"<InfoLabel text='color 1' accentColor={AccentColors.COLOR_1} />"),l.default.createElement("div",null,"<InfoLabel text='color 2' accentColor={AccentColors.COLOR_2} />"),l.default.createElement("div",null,"<InfoLabel text='color 3' accentColor={AccentColors.COLOR_3} />"),l.default.createElement("div",null,"<InfoLabel text='color 4' accentColor={AccentColors.COLOR_4} />"),l.default.createElement("div",null,"<InfoLabel text='color 5' accentColor={AccentColors.COLOR_5} />"),l.default.createElement("div",null,"<InfoLabel text='color 6' accentColor={AccentColors.COLOR_6} />"),l.default.createElement("div",null,"<InfoLabel text='color 7' accentColor={AccentColors.COLOR_7} />"),l.default.createElement("div",null,"<InfoLabel text='color 8' accentColor={AccentColors.COLOR_8} />"),l.default.createElement("div",null,"<InfoLabel text='color 9' accentColor={AccentColors.COLOR_9} />"),l.default.createElement("div",null,"<InfoLabel text='color 10' accentColor={AccentColors.COLOR_10} />"))},{title:"Info Label with Icon",description:"Use the fd-info-label--icon modifier class and icon type to create Info Label with Icon.",result:l.default.createElement("div",{style:{display:"flex",gap:"0.25rem",flexWrap:"wrap"}},l.default.createElement(r.InfoLabel,{text:"Info Label",icon:"past",accentColor:r.AccentColors.COLOR_1}),l.default.createElement(r.InfoLabel,{icon:"action",accentColor:r.AccentColors.COLOR_2})),code:l.default.createElement("div",null,l.default.createElement("div",null,"<InfoLabel text='Info Label' icon='past' accentColor={AccentColors.COLOR_1} />"),l.default.createElement("div",null,"<InfoLabel icon='action' accentColor={AccentColors.COLOR_2} />"))},{title:"Numeric Info Label",description:"For Numeric Info Label use the fd-info-label--numeric modifier class.",result:l.default.createElement("div",{style:{display:"flex",gap:"0.25rem",flexWrap:"wrap"}},l.default.createElement(r.InfoLabel,{text:"6",numeric:!0,accentColor:r.AccentColors.COLOR_1}),l.default.createElement(r.InfoLabel,{text:"6.2",numeric:!0,accentColor:r.AccentColors.COLOR_2}),l.default.createElement(r.InfoLabel,{text:"42K",numeric:!0,accentColor:r.AccentColors.COLOR_3})),code:l.default.createElement("div",null,l.default.createElement("div",null,"<InfoLabel text='6' numeric accentColor={AccentColors.COLOR_1} />"),l.default.createElement("div",null,"<InfoLabel text='6.2' numeric accentColor={AccentColors.COLOR_2} />"),l.default.createElement("div",null,"<InfoLabel text='42K' numeric accentColor={AccentColors.COLOR_3} />"))},{title:"Display Only Info Label",description:"For Display Only Info Label use the fd-info-label--display modifier class",result:l.default.createElement("div",{style:{display:"flex",gap:"0.25rem",flexWrap:"wrap"}},l.default.createElement(r.InfoLabel,{text:"system status",display:!0}),l.default.createElement(r.InfoLabel,{text:"42",display:!0,numeric:!0}),l.default.createElement(r.InfoLabel,{icon:"action",display:!0}),l.default.createElement(r.InfoLabel,{text:"Info Label",icon:"past",display:!0})),code:l.default.createElement("div",null,l.default.createElement("div",null,"<InfoLabel text='system status' display />"),l.default.createElement("div",null,"<InfoLabel text='42' display numeric />"),l.default.createElement("div",null,"<InfoLabel icon='action' display />"),l.default.createElement("div",null,"<InfoLabel text='Info Label' icon='past' display />"))}]};t.InfoLabelDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},8398:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.LinkDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Link",labels:[{label:"Since",text:"Version 0.0.10",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"In Progress",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"",types:[{id:"Link",props:[{id:"",type:"",description:""}]}],examples:[{title:"",result:l.default.createElement("div",null),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.LinkDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},74:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ListDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o=n(2531),u={title:"List",labels:[{label:"Version",text:"Version 0.0.7",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"On Going",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"In SAP Fiori, we distinguish between tables and lists. Both usually contain homogeneous data, but lists generally have rather basic data, while the data in tables tend to be more complex. Lists are mostly used in the master list for a master-detail scenario using the flexible column layout, as well as in Popovers or Dialogs.",types:[{id:"List",props:[{id:"selectedTab",type:"boolean",description:"The identifier of the currently selected tab"},{id:"tabs",type:"IconTabBarItemProperties[]",description:"List of tabs to display"},{id:"onTabSelect",type:"Callback (string) => void",description:"Event called when a tab is selected"}]},{id:"ListItem",props:[{id:"selectedTab",type:"boolean",description:"The identifier of the currently selected tab"},{id:"tabs",type:"IconTabBarItemProperties[]",description:"List of tabs to display"},{id:"onTabSelect",type:"Callback (string) => void",description:"Event called when a tab is selected"}]}],examples:[{title:"Default",description:"The default standard list dislays list items in the standard size, which is ideal for mobile.",result:l.default.createElement(l.default.Fragment,null,l.default.createElement(r.List,{items:[{text:"List Item 1"},{text:"List Item 2"},{text:"List Item 3"},{text:"List Item 4"}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Compact",description:"To display the standard list in compact mode (for desktop), add the fd-list--compact modifier class to the main element.",result:l.default.createElement(l.default.Fragment,null,l.default.createElement(r.List,{compact:!0,items:[{text:"List Item 1"},{text:"List Item 2"},{text:"List Item 3"},{text:"List Item 4"}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<List"),l.default.createElement("div",null,"  compact"),l.default.createElement("div",null,"  items={["),l.default.createElement("div",null,"    { text: 'List Item 1' },"),l.default.createElement("div",null,"    { text: 'List Item 2' },"),l.default.createElement("div",null,"    { text: 'List Item 3' },"),l.default.createElement("div",null,"    { text: 'List Item 4' },"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))},{title:"Unread",description:"The fd-list__item--unread modifier will change the font weight to bold for easier legibility.",result:l.default.createElement(l.default.Fragment,null,l.default.createElement(r.List,{items:[{text:"List Item 1 Unread",unread:!0},{text:"List Item 2 Unread",unread:!0},{text:"List Item 3"},{text:"List Item 4"}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<List"),l.default.createElement("div",null,"  items={["),l.default.createElement("div",null,"    { text: 'List Item 1 Unread', unread: true },"),l.default.createElement("div",null,"    { text: 'List Item 2 Unread', unread: true },"),l.default.createElement("div",null,"    { text: 'List Item 3' },"),l.default.createElement("div",null,"    { text: 'List Item 4' },"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))},{title:"Interactive",description:"The fd-list__item--interractive will force list item to handle hover and active states. Usage of this modifier is not needed on Selection, Navigation and Action modes.",result:l.default.createElement(l.default.Fragment,null,l.default.createElement(r.List,{items:[{text:"List Item 1",interactive:!0},{text:"List Item 2",interactive:!0},{text:"List Item 3",interactive:!0},{text:"List Item 4",interactive:!0},{text:"List Item 5 Selected",interactive:!0,selected:!0}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<List"),l.default.createElement("div",null,"  items={["),l.default.createElement("div",null,"    { text: 'List Item 1', interactive: true },"),l.default.createElement("div",null,"    { text: 'List Item 2', interactive: true },"),l.default.createElement("div",null,"    { text: 'List Item 3', interactive: true },"),l.default.createElement("div",null,"    { text: 'List Item 4', interactive: true },"),l.default.createElement("div",null,"    { text: 'List Item 5 Selected', interactive: true, selected: true },"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))},{title:"Navigation",description:"Standard list items can contain navigation links. To add navigation, add the fd-list—navigation modifier class to the list and the fd-list__item--link modifier class to the list elements that contain links. All items should be navigable.",result:l.default.createElement(l.default.Fragment,null,l.default.createElement(r.List,{type:o.ListTypes.NAVIGATION,items:[{text:"List Item 1"},{text:"List Item 2"},{text:"List Item 3"}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<List"),l.default.createElement("div",null,"  navigation"),l.default.createElement("div",null,"  items={["),l.default.createElement("div",null,"    { text: 'List Item 1' },"),l.default.createElement("div",null,"    { text: 'List Item 2' },"),l.default.createElement("div",null,"    { text: 'List Item 3' },"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))},{title:"Icon",description:"To display an icon inside standard list items, add the fd-list__icon class along with the icon within the list elements. For example, fd-list__icon sap-icon—lightbulb.",result:l.default.createElement(l.default.Fragment,null,l.default.createElement(r.List,{items:[{text:"List Item 1",iconLeft:"cart"},{text:"List Item 2",iconLeft:"wrench"},{text:"List Item 3",iconRight:"lightbulb"},{text:"List Item 3",iconRight:"history"}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<List"),l.default.createElement("div",null,"  items={["),l.default.createElement("div",null,"    { text: 'List Item 1', iconLeft: 'cart' },"),l.default.createElement("div",null,"    { text: 'List Item 2', iconLeft: 'wrench' },"),l.default.createElement("div",null,"    { text: 'List Item 3', iconRight: 'lightbulb' },"),l.default.createElement("div",null,"    { text: 'List Item 3', iconRight: 'history' },"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))}]};t.ListDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},u))},6226:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MenuDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Menu",labels:[{label:"Version",text:"Version 0.0.5",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"On Going",accentColor:r.AccentColors.COLOR_6},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"The menu component is the listing structure with optional headers to create menus."),l.default.createElement("p",null,'Commonly used as the contents when composing "dropdowns", "contextual menus", etc, when paired with the popover component.')),types:[{id:"Menu",props:[{id:"compact",type:"boolean",description:"(Optional) If provided, the Menu is displayed in compact mode."},{id:"noShadow",type:"boolean",description:"(Optional) If provided, the Menu is displayed in compact mode."},{id:"items",type:"MenuItem[]",description:"The items to be displayed in the Menu."},{id:"onItemSelected",type:"(string) => void",description:"(Optional) Called when an item is selected in the menu"}]},{id:"MenuItem",props:[{id:"id",type:"string",description:"The unique identifier of the MenuItem in the Menu"},{id:"text",type:"string",description:"The label of the MenuItem in the Menu"},{id:"shortcut",type:"string",description:"(Optionnal) ..."},{id:"active",type:"boolean",description:"(Optionnal) ..."},{id:"hover",type:"boolean",description:"(Optionnal) ..."},{id:"selected",type:"boolean",description:"(Optionnal) ..."},{id:"disabled",type:"boolean",description:"(Optionnal) ..."},{id:"iconBefore",type:"string",description:"(Optionnal) ..."},{id:"iconAfter",type:"string",description:"(Optionnal) ..."}]}],examples:[{title:"Desktop and Tablet Modes",description:"The basic stucture of a menu. Place the menu item title in a <span> tag using class fd-menu__title and wrap it in the fd-menu__link and fd-menu__item classes as shown. Default mode is the cozy tablet mode, no class has to be added for this. Use class modifierfd-menu--compact on menu container level for desktop mode.",result:l.default.createElement("div",null,l.default.createElement("label",{className:"fd-form-label"},"Basic Menu"),l.default.createElement("br",null),l.default.createElement("br",null),l.default.createElement(r.Menu,{items:[{id:"item1",text:"Item 1"},{id:"item2",text:"Item 2"},{id:"item3",text:"Item 3"},{id:"item4",text:"Item 4"}]}),l.default.createElement("br",null),l.default.createElement("br",null),l.default.createElement("label",{className:"fd-form-label"},"Compact Menu"),l.default.createElement("br",null),l.default.createElement("br",null),l.default.createElement(r.Menu,{compact:!0,items:[{id:"item1",text:"Item 1"},{id:"item2",text:"Item 2"},{id:"item3",text:"Item 3"},{id:"item4",text:"Item 4"}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,'<label className="fd-form-label">'),l.default.createElement("div",null,"  Basic Menu"),l.default.createElement("div",null,"</label>"),l.default.createElement("div",null,"<br />"),l.default.createElement("div",null,"<br />"),l.default.createElement("div",null,"<Menu"),l.default.createElement("div",null,"  items={["),l.default.createElement("div",null,"    { id: 'item1', text: 'Item 1' },"),l.default.createElement("div",null,"    { id: 'item2', text: 'Item 2' },"),l.default.createElement("div",null,"    { id: 'item3', text: 'Item 3' },"),l.default.createElement("div",null,"    { id: 'item4', text: 'Item 4' },"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"),l.default.createElement("div",null,"<br />"),l.default.createElement("div",null,"<br />"),l.default.createElement("div",null,'<label className="fd-form-label">'),l.default.createElement("div",null,"  Compact Menu"),l.default.createElement("div",null,"</label>"),l.default.createElement("div",null,"<br />"),l.default.createElement("div",null,"<br />"),l.default.createElement("div",null,"<Menu"),l.default.createElement("div",null,"  compact"),l.default.createElement("div",null,"  items={["),l.default.createElement("div",null,"    { id: 'item1', text: 'Item 1' },"),l.default.createElement("div",null,"    { id: 'item2', text: 'Item 2' },"),l.default.createElement("div",null,"    { id: 'item3', text: 'Item 3' },"),l.default.createElement("div",null,"    { id: 'item4', text: 'Item 4' },"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))},{title:"List different states",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"Simulate different states to show state behaviour between the items."),l.default.createElement("ul",null,l.default.createElement("li",null,"For simulating hover state, use class is-hover on the menu item."),l.default.createElement("li",null,"For simulating active state, use class is-active on the menu item."),l.default.createElement("li",null,"For simulating selected state, use class is-selected on the menu item."),l.default.createElement("li",null,"For simulating selected-hover state, use classes is-selected is-hover on the menu item."),l.default.createElement("li",null,"For simulating disabled state, use class is-disabled on the menu item.")),l.default.createElement("p",null,"To remove default box shadow from menu containers use fd-menu__list--no-shadow or fd-menu__sublist--no-shadow.")),result:l.default.createElement("div",null,l.default.createElement(r.Menu,{items:[{id:"item1",text:"Option 1 - Regular"},{id:"item2",text:"Option 2 - Hover",hover:!0},{id:"item3",text:"Option 3 - Active",active:!0},{id:"item4",text:"Option 4 - Selected",selected:!0},{id:"item5",text:"Option 5 - Selected-Hover",hover:!0,selected:!0},{id:"item6",text:"Option 6 - Disabled",disabled:!0}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Menu"),l.default.createElement("div",null,"  items={["),l.default.createElement("div",null,"    { id: 'item1', text: 'Item 1', iconBefore: 'grid', iconAfter: 'wrench' },"),l.default.createElement("div",null,"    { id: 'item2', text: 'Item 2', iconBefore: 'accept', iconAfter: 'history' },"),l.default.createElement("div",null,"    { id: 'item3', text: 'Item 3', iconBefore: 'wrench', iconAfter: 'lightbulb' },"),l.default.createElement("div",null,"    { id: 'item4', text: 'Item 4', iconBefore: 'cart', iconAfter: 'history', shortcut: 'Ctrl+A' },"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))},{title:"Menu with decoration content",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"To create an addon before or after fd-menu__title element, use elements with folowing classes inside fd-menu__link:"),l.default.createElement("ul",null,l.default.createElement("li",null,"fd-menu__addon-before: styles addon befotre fd-menu__title"),l.default.createElement("li",null,"fd-menu__addon-after: styles addon after fd-menu__title"),l.default.createElement("li",null,"fd-menu__shortcut: styles shortcut placed after fd-menu__title According to Fiori3 design shortcuts should be on desktop devices."))),result:l.default.createElement("div",null,l.default.createElement(r.Menu,{items:[{id:"item1",text:"Item 1",iconBefore:"grid",iconAfter:"wrench"},{id:"item2",text:"Item 2",iconBefore:"accept",iconAfter:"history"},{id:"item3",text:"Item 3",iconBefore:"wrench",iconAfter:"lightbulb"},{id:"item4",text:"Item 4",iconBefore:"cart",iconAfter:"history",shortcut:"Ctrl+A"}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Menu"),l.default.createElement("div",null,"  items={["),l.default.createElement("div",null,"    { id: 'item1', text: 'Item 1', iconBefore: 'grid', iconAfter: 'wrench' },"),l.default.createElement("div",null,"    { id: 'item2', text: 'Item 2', iconBefore: 'accept', iconAfter: 'history' },"),l.default.createElement("div",null,"    { id: 'item3', text: 'Item 3', iconBefore: 'wrench', iconAfter: 'lightbulb' },"),l.default.createElement("div",null,"    { id: 'item4', text: 'Item 4', iconBefore: 'cart', iconAfter: 'history', shortcut: 'Ctrl+A' },"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))}]};t.MenuDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},6358:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Object",labels:[{label:"Since",text:"Version 0.0.10",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"In Progress",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"",types:[{id:"Object",props:[{id:"",type:"",description:""}]}],examples:[{title:"",result:l.default.createElement("div",null),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.ObjectDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},3675:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PageDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Page",labels:[{label:"Version",text:"Version 0.0.7",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"On Going",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"Page...",types:[{id:"Page",props:[{id:"selectedTab",type:"boolean",description:""}]},{id:"PageHeader",props:[{id:"selectedTab",type:"boolean",description:""}]},{id:"PageBody",props:[{id:"selectedTab",type:"boolean",description:""}]},{id:"PageFooter",props:[{id:"selectedTab",type:"boolean",description:""}]}],examples:[{title:"Page Floorplan",description:"...",result:l.default.createElement(r.Page,{style:{height:"400px"}},l.default.createElement(r.PageHeader,{breadcrumb:l.default.createElement(r.Breadcrumb,{ariaLabel:"breadcrumb",items:[{text:"Level 1"},{text:"Level 2"},{text:"Level 3"}]}),title:"My Page",subtitle:"Its a great page",actions:[l.default.createElement(r.Button,{compact:!0,icon:"cart"}),l.default.createElement(r.Button,{compact:!0,icon:"action",design:r.ButtonDesigns.TRANSPARENT})],avatar:{ariaLabel:"",initials:"AV",accentColor:r.AccentColors.COLOR_9},attributes:[{label:"Marker 1",semantic:r.Semantics.POSITIVE,text:"Positive Marker",type:"status"},{label:"Marker 2",semantic:r.Semantics.NEGATIVE,text:"-2345.78€",type:"status"},{label:"My property",text:"Text Property are used for longer text such as description that can span a lot and require several lines to display.",type:"text"}]}),l.default.createElement(r.PageBody,null,l.default.createElement("div",null,"MY PAGE CONTENT"))),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Expanded Controlled",description:"...",result:l.default.createElement(r.Page,{style:{height:"400px"}},l.default.createElement(r.PageHeader,{expanded:!1,breadcrumb:l.default.createElement(r.Breadcrumb,{ariaLabel:"breadcrumb",items:[{text:"Level 1"},{text:"Level 2"},{text:"Level 3"}]}),onExpand:e=>{(0,i.demoCallback)(`Page Header: ${e}`)},title:"My Page",subtitle:"Its a great page",actions:[l.default.createElement(r.Button,{compact:!0,icon:"cart"}),l.default.createElement(r.Button,{compact:!0,icon:"action",design:r.ButtonDesigns.TRANSPARENT})],avatar:{ariaLabel:"",initials:"AV",accentColor:r.AccentColors.COLOR_9},attributes:[{label:"Marker 1",semantic:r.Semantics.POSITIVE,text:"Positive Marker",type:"status"},{label:"Marker 2",semantic:r.Semantics.NEGATIVE,text:"-2345.78€",type:"status"},{label:"My property",text:"Text Property are used for longer text such as description that can span a lot and require several lines to display.",type:"text"}]}),l.default.createElement(r.PageBody,null,l.default.createElement("div",null,"MY PAGE CONTENT"))),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.PageDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},5135:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PanelDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Panel",labels:[{label:"Since",text:"Version 0.0.10",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"In Progress",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"",types:[{id:"Panel",props:[{id:"",type:"",description:""}]}],examples:[{title:"",result:l.default.createElement("div",null),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.PanelDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},7688:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PopoverDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Popover",labels:[{label:"Since",text:"Version 0.0.3",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"On Going",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"The popover displays additional information for an object in a compact way without leaving the page. The component contains two essential elements: the control (trigger) and body (content). It can also be paired with a Menu, whereas the menu button would trigger a dropdown (body).",types:[{id:"Popover",props:[{id:"icon",type:"string",description:"(Optional) If provided, an icon will be displayed as the first element of the Info Label"}]}],examples:[{title:"Control variants",description:"Controls can be displayed as buttons, images, icons, and more. In the example below, the Avatar and Icon act as controls.",result:l.default.createElement("div",{style:{display:"flex",gap:"2rem",flexWrap:"wrap"}},l.default.createElement("div",{style:{flexBasis:0,flexGrow:1,flexShrink:0}},l.default.createElement(r.Popover,{control:l.default.createElement(r.Avatar,{ariaLabel:"Popover avatar",icon:"settings",size:r.Sizes.SMALL,circle:!0})},l.default.createElement(r.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"},{id:"item3",text:"Option 3"},{id:"item4",text:"Option 4"}]}))),l.default.createElement("div",{style:{flexBasis:0,flexGrow:1,flexShrink:0}},l.default.createElement(r.Popover,{control:l.default.createElement(r.Button,{icon:"cart"})},l.default.createElement(r.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"},{id:"item3",text:"Option 3"},{id:"item4",text:"Option 4"}]})))),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Popover"),l.default.createElement("div",null,"  control={("),l.default.createElement("div",null,"    <Avatar"),l.default.createElement("div",null,"      ariaLabel='Popover avatar'"),l.default.createElement("div",null,"      icon='settings'"),l.default.createElement("div",null,"      size={Sizes.SMALL}"),l.default.createElement("div",null,"      circle"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  )}"),l.default.createElement("div",null,">"),l.default.createElement("div",null,"  <Menu"),l.default.createElement("div",null,"    noShadow"),l.default.createElement("div",null,"    items={["),l.default.createElement("div",null,"      { id: 'item1', text: 'Option 1' },"),l.default.createElement("div",null,"      { id: 'item2', text: 'Option 2' },"),l.default.createElement("div",null,"      { id: 'item3', text: 'Option 3' },"),l.default.createElement("div",null,"      { id: 'item4', text: 'Option 4' },"),l.default.createElement("div",null,"    ]}"),l.default.createElement("div",null,"  />"),l.default.createElement("div",null,"</Popover>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Popover"),l.default.createElement("div",null,"  control={("),l.default.createElement("div",null,"    <Button"),l.default.createElement("div",null,"      icon='cart'"),l.default.createElement("div",null,"    />"),l.default.createElement("div",null,"  )}"),l.default.createElement("div",null,">"),l.default.createElement("div",null,"  <Menu"),l.default.createElement("div",null,"    noShadow"),l.default.createElement("div",null,"    items={["),l.default.createElement("div",null,"      { id: 'item1', text: 'Option 1' },"),l.default.createElement("div",null,"      { id: 'item2', text: 'Option 2' },"),l.default.createElement("div",null,"      { id: 'item3', text: 'Option 3' },"),l.default.createElement("div",null,"      { id: 'item4', text: 'Option 4' },"),l.default.createElement("div",null,"    ]}"),l.default.createElement("div",null,"  />"),l.default.createElement("div",null,"</Popover>"))},{title:"Placement",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"It's possible to show popover on different sides of the trigger. To do that apply the following modifier classes to the popover body element."),l.default.createElement("p",null,"To align the popover arrow with the trigger apply the following modifier classes to the popover body element.")),result:l.default.createElement("div",null,l.default.createElement("div",{style:{display:"flex",gap:"2rem",alignItems:"center",justifyContent:"center"}},l.default.createElement(r.Popover,{placement:r.PopoverPlacements.BOTTOM_START,control:l.default.createElement("button",{className:"fd-button",role:"button"},l.default.createElement("i",{className:"sap-icon--navigation-down-arrow"}))},l.default.createElement(r.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"}]})),l.default.createElement(r.Popover,{placement:r.PopoverPlacements.BOTTOM_CENTER,control:l.default.createElement("button",{className:"fd-button",role:"button"},l.default.createElement("i",{className:"sap-icon--navigation-down-arrow"}))},l.default.createElement(r.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"}]})),l.default.createElement(r.Popover,{placement:r.PopoverPlacements.BOTTOM_END,control:l.default.createElement("button",{className:"fd-button",role:"button"},l.default.createElement("i",{className:"sap-icon--navigation-down-arrow"}))},l.default.createElement(r.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"}]}))),l.default.createElement("div",{style:{padding:"1rem 4rem",display:"flex",gap:"2rem",alignItems:"center",justifyContent:"space-between"}},l.default.createElement(r.Popover,{placement:r.PopoverPlacements.AFTER_START,control:l.default.createElement("button",{className:"fd-button",role:"button"},l.default.createElement("i",{className:"sap-icon--navigation-right-arrow"}))},l.default.createElement(r.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"}]})),l.default.createElement(r.Popover,{placement:r.PopoverPlacements.BEFORE_START,control:l.default.createElement("button",{className:"fd-button",role:"button"},l.default.createElement("i",{className:"sap-icon--navigation-left-arrow"}))},l.default.createElement(r.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"}]}))),l.default.createElement("div",{style:{padding:"1rem 4rem",display:"flex",gap:"2rem",alignItems:"center",justifyContent:"space-between"}},l.default.createElement(r.Popover,{placement:r.PopoverPlacements.AFTER_CENTER,control:l.default.createElement("button",{className:"fd-button",role:"button"},l.default.createElement("i",{className:"sap-icon--navigation-right-arrow"}))},l.default.createElement(r.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"}]})),l.default.createElement(r.Popover,{placement:r.PopoverPlacements.BEFORE_CENTER,control:l.default.createElement("button",{className:"fd-button",role:"button"},l.default.createElement("i",{className:"sap-icon--navigation-left-arrow"}))},l.default.createElement(r.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"}]}))),l.default.createElement("div",{style:{padding:"1rem 4rem",display:"flex",gap:"2rem",alignItems:"center",justifyContent:"space-between"}},l.default.createElement(r.Popover,{placement:r.PopoverPlacements.AFTER_END,control:l.default.createElement("button",{className:"fd-button",role:"button"},l.default.createElement("i",{className:"sap-icon--navigation-right-arrow"}))},l.default.createElement(r.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"}]})),l.default.createElement(r.Popover,{placement:r.PopoverPlacements.BEFORE_END,control:l.default.createElement("button",{className:"fd-button",role:"button"},l.default.createElement("i",{className:"sap-icon--navigation-left-arrow"}))},l.default.createElement(r.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"}]}))),l.default.createElement("div",{style:{display:"flex",gap:"2rem",alignItems:"center",justifyContent:"center"}},l.default.createElement(r.Popover,{placement:r.PopoverPlacements.ABOVE_START,control:l.default.createElement("button",{className:"fd-button",role:"button"},l.default.createElement("i",{className:"sap-icon--navigation-up-arrow"}))},l.default.createElement(r.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"}]})),l.default.createElement(r.Popover,{placement:r.PopoverPlacements.ABOVE_CENTER,control:l.default.createElement("button",{className:"fd-button",role:"button"},l.default.createElement("i",{className:"sap-icon--navigation-up-arrow"}))},l.default.createElement(r.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"}]})),l.default.createElement(r.Popover,{placement:r.PopoverPlacements.ABOVE_END,control:l.default.createElement("button",{className:"fd-button",role:"button"},l.default.createElement("i",{className:"sap-icon--navigation-up-arrow"}))},l.default.createElement(r.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"}]})))),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"</div>"))},{title:"No Arrow",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"It's possible to hide popover's arrow. To achieve this apply the fd-popover__body--no-arrow modifier class to the popover body element and remove all the arrow modifier classes.")),result:l.default.createElement("div",{style:{height:"150px"}},l.default.createElement(r.Popover,{noArrow:!0,control:l.default.createElement("button",{className:"fd-button",role:"button"},l.default.createElement("i",{className:"sap-icon--navigation-down-arrow"}))},l.default.createElement(r.Menu,{noShadow:!0,items:[{id:"item1",text:"Option 1"},{id:"item2",text:"Option 2"}]}))),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Popover"),l.default.createElement("div",null,"  noArrow"),l.default.createElement("div",null,"  control={("),l.default.createElement("div",null,"    <button className='fd-button' role='button'>"),l.default.createElement("div",null,"      <i className='sap-icon--navigation-down-arrow'></i>"),l.default.createElement("div",null,"    </button>"),l.default.createElement("div",null,"  )}"),l.default.createElement("div",null,">"),l.default.createElement("div",null,"  <Menu"),l.default.createElement("div",null,"    noShadow"),l.default.createElement("div",null,"    items={["),l.default.createElement("div",null,"      { id: 'item1', text: 'Option 1' },"),l.default.createElement("div",null,"      { id: 'item2', text: 'Option 2' },"),l.default.createElement("div",null,"    ]}"),l.default.createElement("div",null,"  />"),l.default.createElement("div",null,"</Popover>"))}]};t.PopoverDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},8165:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Select",labels:[{label:"Since",text:"Version 0.0.3",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"On Going",accentColor:r.AccentColors.COLOR_6},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"The select component is commonly used to enable users to select an item from a predefined list. It should be used when there are less than 12 items to choose from.",types:[{id:"Select",props:[{id:"",type:"",description:""}]}],examples:[{title:"Cozy",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"Select displays a predefined option and a button that triggers a dropdown menu to view more options (list items). By default, it is displayed in cozy mode.")),result:l.default.createElement("div",{style:{height:"220px"}},l.default.createElement(r.Select,{placeholder:"Select",items:[{text:"List Item 1"},{text:"List Item 2"},{text:"List Item 3"},{text:"List Item 4"}],onChange:e=>(0,i.demoCallback)(e.text)})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Select"),l.default.createElement("div",null,"  placeholder='Select'"),l.default.createElement("div",null,"  items={["),l.default.createElement("div",null,"    { text: 'List Item 1' },"),l.default.createElement("div",null,"    { text: 'List Item 2' },"),l.default.createElement("div",null,"    { text: 'List Item 3' },"),l.default.createElement("div",null,"    { text: 'List Item 4' }"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  onChange={(item) => alert(item.text)}"),l.default.createElement("div",null,"/>"))},{title:"Compact",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"When in compact mode, select displays a dropdown menu that can contain long list items with text that wraps to the next line. The maximum width should be 37.5rem (600px) to avoid readability issues, unless the list contains more than 2 columns. If the list has 3 or more columns, the dropdown menu should not be limited to a max width. To display select in compact mode, add fd-select--compact to the main element.")),result:l.default.createElement("div",{style:{height:"220px"}},l.default.createElement(r.Select,{compact:!0,placeholder:"Select",items:[{text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."},{text:"List Item 2"},{text:"List Item 3"},{text:"List Item 4"}],onChange:e=>(0,i.demoCallback)(e.text)})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Select"),l.default.createElement("div",null,"  compact"),l.default.createElement("div",null,"  placeholder='Select'"),l.default.createElement("div",null,"  items={["),l.default.createElement("div",null,"    { text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.' },"),l.default.createElement("div",null,"    { text: 'List Item 2' },"),l.default.createElement("div",null,"    { text: 'List Item 3' },"),l.default.createElement("div",null,"    { text: 'List Item 4' }"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  onChange={(item) => alert(item.text)}"),l.default.createElement("div",null,"/>"))},{title:"States",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"Select can be displayed in semantic states to communicate Success, Error, Warning or Information to the users. They can be displayed as either messages within the dropdown list, or by itself as a static message. To display select in various semantic states, add the class (shown below) to the fd-select__control element.")),result:l.default.createElement("div",{style:{display:"flex",gap:"1rem",height:"220px",width:"100%"}},l.default.createElement("div",{style:{flexGrow:1,flexBasis:0}},l.default.createElement(r.Select,{placeholder:"Success",state:r.InputStates.SUCCESS,stateMessage:"Success message",style:{width:"200px"},items:[{text:"List Item 1"},{text:"List Item 2"},{text:"List Item 3"},{text:"List Item 4"}],onChange:e=>(0,i.demoCallback)(e.text)})),l.default.createElement("div",{style:{flexGrow:1,flexBasis:0}},l.default.createElement(r.Select,{placeholder:"Error",state:r.InputStates.ERROR,stateMessage:"Error message",style:{width:"200px"},items:[{text:"Error"}],onChange:e=>(0,i.demoCallback)(e.text)})),l.default.createElement("div",{style:{flexGrow:1,flexBasis:0}},l.default.createElement(r.Select,{placeholder:"Warning",state:r.InputStates.WARNING,stateMessage:"Warning message",style:{width:"200px"},items:[{text:"List Item 1"},{text:"List Item 2"},{text:"List Item 3"},{text:"List Item 4"}],onChange:e=>(0,i.demoCallback)(e.text)})),l.default.createElement("div",{style:{flexGrow:1,flexBasis:0}},l.default.createElement(r.Select,{placeholder:"Information",state:r.InputStates.INFORMATION,stateMessage:"Information message",style:{width:"200px"},items:[{text:"List Item 1"}],onChange:e=>(0,i.demoCallback)(e.text)}))),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Select"),l.default.createElement("div",null,"  placeholder='Success'"),l.default.createElement("div",null,"  state={InputStates.SUCCESS}"),l.default.createElement("div",null,"  stateMessage='Success message'"),l.default.createElement("div",null,"  style={{ width: '200px' }}"),l.default.createElement("div",null,"  items={["),l.default.createElement("div",null,"    { text: 'List Item 1' },"),l.default.createElement("div",null,"    { text: 'List Item 2' },"),l.default.createElement("div",null,"    { text: 'List Item 3' },"),l.default.createElement("div",null,"    { text: 'List Item 4' }"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  onChange={(item) => alert(item.text)}"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Select"),l.default.createElement("div",null,"  placeholder='Error'"),l.default.createElement("div",null,"  state={InputStates.ERROR}"),l.default.createElement("div",null,"  stateMessage='Error message'"),l.default.createElement("div",null,"  style={{ width: '200px' }}"),l.default.createElement("div",null,"  items={["),l.default.createElement("div",null,"    { text: 'Error' },"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  onChange={(item) => alert(item.text)}"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Select"),l.default.createElement("div",null,"  placeholder='Warning'"),l.default.createElement("div",null,"  state={InputStates.WARNING}"),l.default.createElement("div",null,"  stateMessage='Warning message'"),l.default.createElement("div",null,"  style={{ width: '200px' }}"),l.default.createElement("div",null,"  items={["),l.default.createElement("div",null,"    { text: 'List Item 1' },"),l.default.createElement("div",null,"    { text: 'List Item 2' },"),l.default.createElement("div",null,"    { text: 'List Item 3' },"),l.default.createElement("div",null,"    { text: 'List Item 4' }"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  onChange={(item) => alert(item.text)}"),l.default.createElement("div",null,"/>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Select"),l.default.createElement("div",null,"  placeholder='Information'"),l.default.createElement("div",null,"  state={InputStates.INFORMATION}"),l.default.createElement("div",null,"  stateMessage='Information message'"),l.default.createElement("div",null,"  style={{ width: '200px' }}"),l.default.createElement("div",null,"  items={["),l.default.createElement("div",null,"    { text: 'List Item 1' },"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"  onChange={(item) => alert(item.text)}"),l.default.createElement("div",null,"/>"))}]};t.SelectDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},6615:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ShellBarDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Shell Bar",labels:[{label:"Since",text:"Version 0.0.3",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"On Going",accentColor:r.AccentColors.COLOR_6},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"The shellbar offers consistent, responsive navigation across all products and applications. It also includes support for branding, product navigation, search, notifications, and user settings. This is a composite component comprised of mandatory and optional elements. Shellbar should always be placed inside the shell layout container. As mentioned earlier, it is completely responsive by default with margins and padding already built in."),l.default.createElement("p",null,l.default.createElement("strong",null,"Shellbar has two primary container groups:")),l.default.createElement("ul",null,l.default.createElement("li",null,"Product: for branding and product elements."),l.default.createElement("li",null,"Actions: for search, product links, and user settings.")),l.default.createElement("p",null,l.default.createElement("strong",null,"Note"),": There is a third container group for SAP CoPilot, which is a chatbot feature leveraged internally at SAP. The SAP CoPilot icon is displayed in the product switch example, and can act as a placeholder for third-party chatbot applications.")),types:[{id:"ShellBar",props:[{id:"",type:"",description:""}]}],examples:[{title:"Primary",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"The primary shellbar displays a logo, title, and an avatar where the user settings are found. If the avatar does not contain a thumbnail, then the initials of the user will be displayed.")),result:l.default.createElement("div",null,l.default.createElement(r.ShellBar,{logo:"/images/sap-logo.png",logoAlt:"SAP",title:"Corporate Portal",profile:{name:"User Name",initials:"WW",menu:[{id:"settings",text:"Settings",iconBefore:"action-settings",onItemSelected:()=>{alert("Settings")}},{id:"logout",text:"Signout",iconBefore:"log",onItemSelected:()=>{alert("Signout")}}]}})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.ShellBarDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},7055:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TableDemo=void 0;const l=a(n(7294)),r=n(6039),i=n(2531),o=n(7027),u={title:"Table",labels:[{labe:"Since",text:"Version 0.0.3",accentColor:i.AccentColors.COLOR_8},{labe:"Status",text:"On Going",accentColor:i.AccentColors.COLOR_5},{labe:"Specification",text:"Fiori 3",accentColor:i.AccentColors.COLOR_3}],description:"A table contains a set of line items and usually comprises rows (with each row showing one line item) and columns. Line items can contain data of any kind, but also interactive elements, for example, for editing the data, navigating, or triggering actions relating to the line item.",types:[],examples:[{title:"Primary",description:"The primary table contains columns with headers, and rows with links. In the first column, links are displayed. To display links within a table, add the fd-link class within the table data.",result:l.default.createElement("div",null,l.default.createElement(i.Table,{borderedHorizontal:!0,borderedVertical:!0,onRowClick:e=>(0,o.demoCallback)(`row clicked ${e}`),columns:[{key:"avatar",name:"User",render:e=>l.default.createElement(i.Avatar,{ariaLabel:`${e.name} ${e.lastName}`,initials:`${r.StringUtils.capitalizeFirst(e.name)}${r.StringUtils.capitalizeFirst(e.lastName)}`,size:i.Sizes.X_SMALL})},{key:"email",name:"Email",render:e=>l.default.createElement("a",{href:"#"},e.email)},{key:"text",name:"Text"},{key:"date",name:"Date",formatter:e=>e.date.toLocaleString()},{key:"actions",name:"",render:()=>l.default.createElement(i.Button,{icon:"overflow",design:i.ButtonDesigns.TRANSPARENT,compact:!0,onClick:()=>(0,o.demoCallback)("actions clicked")})}],rows:[{data:{id:"user1",text:"I am User One",email:"user1@email.com",name:"User",lastName:"One",date:new Date(2010,1,5)}},{data:{id:"user2",text:"I am User Two",email:"user2@email.com",name:"User",lastName:"Two",date:new Date(2011,1,5)}},{data:{id:"user3",text:"I am User Three",email:"user3@email.com",name:"User",lastName:"Three",date:new Date(2012,1,5)}}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Table"),l.default.createElement("div",null,"  borderedHorizontal={true}"),l.default.createElement("div",null,"  borderedVertical={true}"),l.default.createElement("div",null,"  onRowClick={(id) => demoCallback(`row clicked ${id}`)}"),l.default.createElement("div",null,"  columns={[{"),l.default.createElement("div",null,"    key: 'avatar',"),l.default.createElement("div",null,"    name: 'User',"),l.default.createElement("div",null,"    render: (row) => ("),l.default.createElement("div",null,"      <Avatar"),l.default.createElement("div",null,"        ariaLabel={`${row.name} ${row.lastName}`}"),l.default.createElement("div",null,"        initials={`${StringUtils.capitalizeFirst(row.name)}${StringUtils.capitalizeFirst(row.lastName)}`}"),l.default.createElement("div",null,"        size={Sizes.X_SMALL}"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"    )"),l.default.createElement("div",null,"  }, {"),l.default.createElement("div",null,"    key: 'email',"),l.default.createElement("div",null,"    name: 'Email',"),l.default.createElement("div",null,"    render: user => <a href='#'>{user.email}</a>"),l.default.createElement("div",null,"  }, {"),l.default.createElement("div",null,"    key: 'text',"),l.default.createElement("div",null,"    name: 'Text'"),l.default.createElement("div",null,"  }, {"),l.default.createElement("div",null,"    key: 'date',"),l.default.createElement("div",null,"    name: 'Date',"),l.default.createElement("div",null,"    formatter: user => user.date.toLocaleString()"),l.default.createElement("div",null,"  }, {"),l.default.createElement("div",null,"    key: 'actions',"),l.default.createElement("div",null,"    name: '',"),l.default.createElement("div",null,"    render: () => ("),l.default.createElement("div",null,"      <Button"),l.default.createElement("div",null,"        icon='overflow'"),l.default.createElement("div",null,"        design={ButtonDesigns.TRANSPARENT}"),l.default.createElement("div",null,"        compact"),l.default.createElement("div",null,"        onClick={() => demoCallback('actions clicked')}"),l.default.createElement("div",null,"      />"),l.default.createElement("div",null,"    )"),l.default.createElement("div",null,"  }]}"),l.default.createElement("div",null,"  rows={[{"),l.default.createElement("div",null,"    data: {"),l.default.createElement("div",null,"      id: 'user1',"),l.default.createElement("div",null,"      text: 'I am User One',"),l.default.createElement("div",null,"      email: 'user1@email.com',"),l.default.createElement("div",null,"      name: 'User',"),l.default.createElement("div",null,"      lastName: 'One',"),l.default.createElement("div",null,"      date: new Date(2010, 1, 5)"),l.default.createElement("div",null,"    }"),l.default.createElement("div",null,"  }, {"),l.default.createElement("div",null,"    data: {"),l.default.createElement("div",null,"      id: 'user2',"),l.default.createElement("div",null,"      text: 'I am User Two',"),l.default.createElement("div",null,"      email: 'user2@email.com',"),l.default.createElement("div",null,"      name: 'User',"),l.default.createElement("div",null,"      lastName: 'Two',"),l.default.createElement("div",null,"      date: new Date(2011, 1, 5)"),l.default.createElement("div",null,"    }"),l.default.createElement("div",null,"  }, {"),l.default.createElement("div",null,"    data: {"),l.default.createElement("div",null,"      id: 'user3',"),l.default.createElement("div",null,"      text: 'I am User Three',"),l.default.createElement("div",null,"      email: 'user3@email.com',"),l.default.createElement("div",null,"      name: 'User',"),l.default.createElement("div",null,"      lastName: 'Three',"),l.default.createElement("div",null,"      date: new Date(2012, 1, 5)"),l.default.createElement("div",null,"    }"),l.default.createElement("div",null,"  }]}"),l.default.createElement("div",null,"/>"))},{title:"Without header",description:'Table header can be ommited by adding the "showHeader={false} property.',result:l.default.createElement("div",null,l.default.createElement(i.Table,{borderedHorizontal:!0,borderedVertical:!0,showHeaders:!1,onRowClick:e=>(0,o.demoCallback)(`row clicked ${e}`),columns:[{key:"avatar",name:"User",render:e=>l.default.createElement(i.Avatar,{ariaLabel:`${e.name} ${e.lastName}`,initials:`${r.StringUtils.capitalizeFirst(e.name)}${r.StringUtils.capitalizeFirst(e.lastName)}`,size:i.Sizes.X_SMALL})},{key:"email",name:"Email",render:e=>l.default.createElement("a",{href:"#"},e.email)},{key:"text",name:"Text"},{key:"date",name:"Date",formatter:e=>e.date.toLocaleString()},{key:"actions",name:"",render:()=>l.default.createElement(i.Button,{icon:"overflow",design:i.ButtonDesigns.TRANSPARENT,compact:!0,onClick:()=>(0,o.demoCallback)("actions clicked")})}],rows:[{data:{id:"user1",text:"I am User One",email:"user1@email.com",name:"User",lastName:"One",date:new Date(2010,1,5)}},{data:{id:"user2",text:"I am User Two",email:"user2@email.com",name:"User",lastName:"Two",date:new Date(2011,1,5)}},{data:{id:"user3",text:"I am User Three",email:"user3@email.com",name:"User",lastName:"Three",date:new Date(2012,1,5)}}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Borderless",description:"Table can be displayed without borders that separate the columns, column headers, and rows. To display a borderless table, add the fd-table--no-horizontal-borders and fd-table--no-vertical-borders modifier classes to the main element.",result:l.default.createElement("div",null,l.default.createElement(i.Table,{columns:[{key:"avatar",name:"User",render:e=>l.default.createElement(i.Avatar,{ariaLabel:`${e.name} ${e.lastName}`,initials:`${r.StringUtils.capitalizeFirst(e.name)}${r.StringUtils.capitalizeFirst(e.lastName)}`,size:i.Sizes.X_SMALL})},{key:"email",name:"Email",render:e=>l.default.createElement("a",{href:"#"},e.email)},{key:"text",name:"Text"},{key:"date",name:"Date",formatter:e=>e.date.toLocaleString()},{key:"actions",name:"",render:()=>l.default.createElement(i.Button,{icon:"overflow",design:i.ButtonDesigns.TRANSPARENT,compact:!0})}],rows:[{data:{id:"user1",text:"I am User One",email:"user1@email.com",name:"User",lastName:"One",date:new Date(2010,1,5)}},{data:{id:"user2",text:"I am User Two",email:"user2@email.com",name:"User",lastName:"Two",date:new Date(2011,1,5)}},{data:{id:"user3",text:"I am User Three",email:"user3@email.com",name:"User",lastName:"Three",date:new Date(2012,1,5)}}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Interactive",description:"The table component can be interactive with hoverable and activable cells and rows.",result:l.default.createElement("div",null,l.default.createElement(i.Table,{borderedHorizontal:!0,borderedVertical:!0,columns:[{key:"avatar",name:"User",render:e=>l.default.createElement(i.Avatar,{ariaLabel:`${e.name} ${e.lastName}`,initials:`${r.StringUtils.capitalizeFirst(e.name)}${r.StringUtils.capitalizeFirst(e.lastName)}`,size:i.Sizes.X_SMALL})},{key:"email",name:"Email",render:e=>l.default.createElement("a",{href:"#"},e.email)},{key:"text",name:"Text"},{key:"date",name:"Date",formatter:e=>e.date.toLocaleString()},{key:"actions",name:"",render:()=>l.default.createElement(i.Button,{icon:"overflow",design:i.ButtonDesigns.TRANSPARENT,compact:!0})}],rows:[{hoverable:!0,data:{id:"user1",text:"I am User One",email:"user1@email.com",name:"User",lastName:"One",date:new Date(2010,1,5)}},{activable:!0,hoverable:!0,data:{id:"user2",text:"I am User Two",email:"user2@email.com",name:"User",lastName:"Two",date:new Date(2011,1,5)}},{activable:!0,data:{id:"user3",text:"I am User Three",email:"user3@email.com",name:"User",lastName:"Three",date:new Date(2012,1,5)}}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"/>"))},{title:"Click Events",description:"",result:l.default.createElement("div",null,l.default.createElement(i.Table,{borderedHorizontal:!0,borderedVertical:!0,onRowClick:e=>window.alert(`[Table] Row clicked ${e}`),columns:[{key:"avatar",name:"User",render:e=>l.default.createElement(i.Avatar,{ariaLabel:`${e.name} ${e.lastName}`,initials:`${r.StringUtils.capitalizeFirst(e.name)}${r.StringUtils.capitalizeFirst(e.lastName)}`,size:i.Sizes.X_SMALL})},{key:"email",name:"Email",render:e=>l.default.createElement("a",{href:"#"},e.email)},{key:"text",name:"Text"},{key:"date",name:"Date",formatter:e=>e.date.toLocaleString()},{key:"actions",name:"",render:()=>l.default.createElement(i.Button,{icon:"overflow",design:i.ButtonDesigns.TRANSPARENT,compact:!0})}],rows:[{activable:!0,hoverable:!0,data:{id:"user1",text:"I am User One",email:"user1@email.com",name:"User",lastName:"One",date:new Date(2010,1,5)}},{activable:!0,hoverable:!0,data:{id:"user2",text:"I am User Two",email:"user2@email.com",name:"User",lastName:"Two",date:new Date(2011,1,5)}},{activable:!0,hoverable:!0,data:{id:"user3",text:"I am User Three",email:"user3@email.com",name:"User",lastName:"Three",date:new Date(2012,1,5)}}]})),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Table"),l.default.createElement("div",null,"  borderedHorizontal={true}"),l.default.createElement("div",null,"  borderedVertical={true}"),l.default.createElement("div",null,"  onRowClick={(id) => window.alert(`[Table] Row clicked ${id}`)}"),l.default.createElement("div",null,"  columns={[...]}"),l.default.createElement("div",null,"  rows={[...]}"),l.default.createElement("div",null,"/>"))}]};t.TableDemo=()=>l.default.createElement(o.DemoPage,Object.assign({},u))},2612:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TileDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Tile",labels:[{label:"Since",text:"Version 0.0.10",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"On Going",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"",types:[{id:"Tile",props:[{id:"",type:"",description:""}]}],examples:[{title:"Sizes",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"Generic tiles can be displayed in two tile dimensions: the default 1x1, and 2x1 (with the addition of a fd-tile--double modifier class)."),l.default.createElement("p",null,l.default.createElement("strong",null,"The typical generic tile sizes are:")),l.default.createElement("ul",null,l.default.createElement("li",null,"Large tile (1 x 1) - 11 x 11rem"),l.default.createElement("li",null,"Large tile (2 x 1) - 22.5 x 11rem"),l.default.createElement("li",null,"Small tile (1 x 1) - 9.25 x 9.25rem"),l.default.createElement("li",null,"Small tile (2 x 1) - 19 x 9.25rem"))),result:l.default.createElement("div",null,l.default.createElement("div",{style:{display:"flex",alignItems:"center",justifyContent:"space-around",marginBottom:"1rem"}},l.default.createElement(r.Tile,null,l.default.createElement("span",null,"11 x 11rem")),l.default.createElement(r.Tile,{double:!0},l.default.createElement("span",null,"22.5 x 11rem"))),l.default.createElement("div",{style:{display:"flex",alignItems:"center",justifyContent:"space-around"}},l.default.createElement(r.Tile,{size:r.Sizes.SMALL},l.default.createElement("span",null,"9.25 x 9.25rem")),l.default.createElement(r.Tile,{size:r.Sizes.SMALL,double:!0},l.default.createElement("span",null,"19 x 9.25rem")))),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Tile>"),l.default.createElement("div",null,"  <span>11 x 11rem</span>"),l.default.createElement("div",null,"</Tile>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Tile double>"),l.default.createElement("div",null,"  <span>22.5 x 11rem</span>"),l.default.createElement("div",null,"</Tile>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Tile size={Sizes.SMALL}>"),l.default.createElement("div",null,"  <span>9.25 x 9.25rem</span>"),l.default.createElement("div",null,"</Tile>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Tile size={Sizes.SMALL} double>"),l.default.createElement("div",null,"  <span>19 x 9.25rem</span>"),l.default.createElement("div",null,"</Tile>"))},{title:"Layout",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"The layout of the generic tile is fixed with designated areas for the header, content area and footer."),l.default.createElement("p",null,"Note: In the example below, the background color illustrate the placement of elements within tiles.")),result:l.default.createElement("div",{className:"layout-sample"},l.default.createElement("style",null,".layout-sample .fd-tile__header { background: lightblue; }",".layout-sample .fd-tile__content { background: lightblue; }",".layout-sample .fd-tile__footer { background: lightblue; }"),l.default.createElement("div",{style:{display:"flex",alignItems:"center",justifyContent:"space-around",marginBottom:"1rem"}},l.default.createElement(r.Tile,{title:"Title",subTitle:"Subtitle",footer:"Footer"},l.default.createElement("span",null,"Content")),l.default.createElement(r.Tile,{double:!0,title:"Title",subTitle:"Subtitle",footer:"Footer"},l.default.createElement("span",null,"Content"))),l.default.createElement("div",{style:{display:"flex",alignItems:"center",justifyContent:"space-around"}},l.default.createElement(r.Tile,{size:r.Sizes.SMALL,title:"Title",subTitle:"Subtitle",footer:"Footer"},l.default.createElement("span",null,"Content")),l.default.createElement(r.Tile,{size:r.Sizes.SMALL,double:!0,title:"Title",subTitle:"Subtitle",footer:"Footer"},l.default.createElement("span",null,"Content")))),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Tile"),l.default.createElement("div",null,"  title='Title'"),l.default.createElement("div",null,"  subTitle='Subtitle'"),l.default.createElement("div",null,"  footer='Footer'"),l.default.createElement("div",null,">"),l.default.createElement("div",null,"  <span>Content</span>"),l.default.createElement("div",null,"</Tile>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Tile"),l.default.createElement("div",null,"  double"),l.default.createElement("div",null,"  title='Title'"),l.default.createElement("div",null,"  subTitle='Subtitle'"),l.default.createElement("div",null,"  footer='Footer'"),l.default.createElement("div",null,">"),l.default.createElement("div",null,"  <span>Content</span>"),l.default.createElement("div",null,"</Tile>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Tile"),l.default.createElement("div",null,"  size={Sizes.SMALL}"),l.default.createElement("div",null,"  title='Title'"),l.default.createElement("div",null,"  subTitle='Subtitle'"),l.default.createElement("div",null,"  footer='Footer'"),l.default.createElement("div",null,">"),l.default.createElement("div",null,"  <span>Content</span>"),l.default.createElement("div",null,"</Tile>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Tile"),l.default.createElement("div",null,"  size={Sizes.SMALL}"),l.default.createElement("div",null,"  double"),l.default.createElement("div",null,"  title='Title'"),l.default.createElement("div",null,"  subTitle='Subtitle'"),l.default.createElement("div",null,"  footer='Footer'"),l.default.createElement("div",null,">"),l.default.createElement("div",null,"  <span>Content</span>"),l.default.createElement("div",null,"</Tile>"))},{title:"Badge tile",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"The badge tile displays very short and important information at the top right corner of the tile. It's recommended to add a badge to a tile when it has been newly added. Badges are not displayed when in action/edit mode.")),result:l.default.createElement("div",null,l.default.createElement("div",{style:{display:"flex",alignItems:"center",justifyContent:"space-around",marginBottom:"2rem"}},l.default.createElement(r.Tile,{badge:"Badge",title:"Launch tile title",subTitle:"Subtitle",footer:"Footer"},l.default.createElement(r.Avatar,{ariaLabel:"avatar",circle:!0,icon:"settings",size:r.Sizes.SMALL})),l.default.createElement(r.Tile,{double:!0,badge:"New",title:"Feed tile title: Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua",subTitle:"Subtitle",footer:"Footer"},l.default.createElement("span",null,"Content"))),l.default.createElement("div",{style:{display:"flex",alignItems:"center",justifyContent:"space-around"}},l.default.createElement(r.Tile,{size:r.Sizes.SMALL,badge:"Badge with very long description",title:"Launch tile title",subTitle:"Subtitle",footer:"Unit, Notification"},l.default.createElement(r.Avatar,{ariaLabel:"avatar",circle:!0,icon:"settings",size:r.Sizes.X_SMALL})),l.default.createElement(r.Tile,{size:r.Sizes.SMALL,double:!0,badge:"Badge with very very very very very very very very very long text",title:"Feed tile title: Sed do eiusmod",subTitle:"Subtitle",footer:"Footer"},l.default.createElement("span",null,"Content")))),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<Tile"),l.default.createElement("div",null,"  title='Title'"),l.default.createElement("div",null,"  subTitle='Subtitle'"),l.default.createElement("div",null,"  footer='Footer'"),l.default.createElement("div",null,">"),l.default.createElement("div",null,"  <span>Content</span>"),l.default.createElement("div",null,"</Tile>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Tile"),l.default.createElement("div",null,"  double"),l.default.createElement("div",null,"  title='Title'"),l.default.createElement("div",null,"  subTitle='Subtitle'"),l.default.createElement("div",null,"  footer='Footer'"),l.default.createElement("div",null,">"),l.default.createElement("div",null,"  <span>Content</span>"),l.default.createElement("div",null,"</Tile>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Tile"),l.default.createElement("div",null,"  size={Sizes.SMALL}"),l.default.createElement("div",null,"  title='Title'"),l.default.createElement("div",null,"  subTitle='Subtitle'"),l.default.createElement("div",null,"  footer='Footer'"),l.default.createElement("div",null,">"),l.default.createElement("div",null,"  <span>Content</span>"),l.default.createElement("div",null,"</Tile>"),l.default.createElement("br",null),l.default.createElement("div",null,"<Tile"),l.default.createElement("div",null,"  size={Sizes.SMALL}"),l.default.createElement("div",null,"  double"),l.default.createElement("div",null,"  title='Title'"),l.default.createElement("div",null,"  subTitle='Subtitle'"),l.default.createElement("div",null,"  footer='Footer'"),l.default.createElement("div",null,">"),l.default.createElement("div",null,"  <span>Content</span>"),l.default.createElement("div",null,"</Tile>"))}]};t.TileDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},8566:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TitleDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Title",labels:[{label:"Since",text:"Version 0.0.3",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"Reviewed 0.0.7",accentColor:r.AccentColors.COLOR_6},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"A title component whose semantic level and visual appearance can be set separately, providing flexibility in design while adhering to accessibility best practices.",types:[{id:"Title",props:[{id:"level",type:"TitleLevel",description:"(Optionnal) The semantic level of the tile (defaults to h1)"},{id:"levelVisual",type:"TitleLevel",description:"(Optionnal) The visual level of the title (defaults to the semantic level)"},{id:"text",type:"string",description:"The text to display"},{id:"wrap",type:"boolean",description:"(Optionnal) If true forces the title to wrap instead of truncate"}]}],examples:[{title:"Semantic Level",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"There are 6 semantic levels of a heading element. There should only be one H1 on a page, and headings should only appear in ascending order without skipping a level; i.e. even if there are only 3 levels on a page, the order must be H1-H2-H3, and no other levels used.")),result:l.default.createElement(l.default.Fragment,null,l.default.createElement(r.Title,{level:r.TitleLevels.H1,text:"Title Level 1"}),l.default.createElement(r.Title,{level:r.TitleLevels.H2,text:"Title Level 2"}),l.default.createElement(r.Title,{level:r.TitleLevels.H3,text:"Title Level 3"}),l.default.createElement(r.Title,{level:r.TitleLevels.H4,text:"Title Level 4"}),l.default.createElement(r.Title,{level:r.TitleLevels.H5,text:"Title Level 5"}),l.default.createElement(r.Title,{level:r.TitleLevels.H6,text:"Title Level 6"})),code:l.default.createElement("div",null,l.default.createElement("div",null,"<Title level={TitleLevels.H1} text='Title Level 1' />"),l.default.createElement("div",null,"<Title level={TitleLevels.H2} text='Title Level 2' />"),l.default.createElement("div",null,"<Title level={TitleLevels.H3} text='Title Level 3' />"),l.default.createElement("div",null,"<Title level={TitleLevels.H4} text='Title Level 4' />"),l.default.createElement("div",null,"<Title level={TitleLevels.H5} text='Title Level 5' />"),l.default.createElement("div",null,"<Title level={TitleLevels.H6} text='Title Level 6' />"))},{title:"Visual Level",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"If a design requires it, the visual level can be set to something different than the semantic level. This allows the sequential order to be maintained while providing flexibility in appearance.")),result:l.default.createElement(l.default.Fragment,null,l.default.createElement(r.Title,{level:r.TitleLevels.H1,levelVisual:r.TitleLevels.H6,text:"Title Level 1"}),l.default.createElement(r.Title,{level:r.TitleLevels.H2,levelVisual:r.TitleLevels.H5,text:"Title Level 2"}),l.default.createElement(r.Title,{level:r.TitleLevels.H3,levelVisual:r.TitleLevels.H4,text:"Title Level 3"}),l.default.createElement(r.Title,{level:r.TitleLevels.H4,levelVisual:r.TitleLevels.H3,text:"Title Level 4"}),l.default.createElement(r.Title,{level:r.TitleLevels.H5,levelVisual:r.TitleLevels.H2,text:"Title Level 5"}),l.default.createElement(r.Title,{level:r.TitleLevels.H6,levelVisual:r.TitleLevels.H1,text:"Title Level 6"})),code:l.default.createElement("div",null,l.default.createElement("div",null,"<Title level={TitleLevels.H1} levelVisual={TitleLevels.H6} text='Title Level 1' />"),l.default.createElement("div",null,"<Title level={TitleLevels.H2} levelVisual={TitleLevels.H5} text='Title Level 2' />"),l.default.createElement("div",null,"<Title level={TitleLevels.H3} levelVisual={TitleLevels.H4} text='Title Level 3' />"),l.default.createElement("div",null,"<Title level={TitleLevels.H4} levelVisual={TitleLevels.H3} text='Title Level 4' />"),l.default.createElement("div",null,"<Title level={TitleLevels.H5} levelVisual={TitleLevels.H2} text='Title Level 5' />"),l.default.createElement("div",null,"<Title level={TitleLevels.H6} levelVisual={TitleLevels.H1} text='Title Level 6' />"))},{title:"Text Elision",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"By default the Title text overflow will be elided when longer than its container.")),result:l.default.createElement("div",{style:{width:"300px"}},l.default.createElement(r.Title,{level:r.TitleLevels.H1,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),l.default.createElement(r.Title,{level:r.TitleLevels.H2,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),l.default.createElement(r.Title,{level:r.TitleLevels.H3,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),l.default.createElement(r.Title,{level:r.TitleLevels.H4,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),l.default.createElement(r.Title,{level:r.TitleLevels.H5,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),l.default.createElement(r.Title,{level:r.TitleLevels.H6,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"})),code:l.default.createElement("div",null,l.default.createElement("div",null,"<div style={{ width: '300px' }}>"),l.default.createElement("div",null,"  <Title level={TitleLevels.H1} text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),l.default.createElement("div",null,"  <Title level={TitleLevels.H2} text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),l.default.createElement("div",null,"  <Title level={TitleLevels.H3} text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),l.default.createElement("div",null,"  <Title level={TitleLevels.H4} text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),l.default.createElement("div",null,"  <Title level={TitleLevels.H5} text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),l.default.createElement("div",null,"  <Title level={TitleLevels.H6} text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),l.default.createElement("div",null,"</div>"))},{title:"Text Wrapping",description:l.default.createElement(l.default.Fragment,null,l.default.createElement("p",null,"Add the --wrap modifier to cause the overflow text to wrap instead.")),result:l.default.createElement("div",{style:{width:"300px"}},l.default.createElement(r.Title,{level:r.TitleLevels.H1,wrap:!0,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),l.default.createElement(r.Title,{level:r.TitleLevels.H2,wrap:!0,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),l.default.createElement(r.Title,{level:r.TitleLevels.H3,wrap:!0,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),l.default.createElement(r.Title,{level:r.TitleLevels.H4,wrap:!0,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),l.default.createElement(r.Title,{level:r.TitleLevels.H5,wrap:!0,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"}),l.default.createElement(r.Title,{level:r.TitleLevels.H6,wrap:!0,text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit"})),code:l.default.createElement("div",null,l.default.createElement("div",null,"<div style={{ width: '300px' }}>"),l.default.createElement("div",null,"  <Title level={TitleLevels.H1} wrap text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),l.default.createElement("div",null,"  <Title level={TitleLevels.H2} wrap text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),l.default.createElement("div",null,"  <Title level={TitleLevels.H3} wrap text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),l.default.createElement("div",null,"  <Title level={TitleLevels.H4} wrap text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),l.default.createElement("div",null,"  <Title level={TitleLevels.H5} wrap text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),l.default.createElement("div",null,"  <Title level={TitleLevels.H6} wrap text='Lorem ipsum dolor sit amet, consectetur adipiscing elit' />"),l.default.createElement("div",null,"</div>"))}]};t.TitleDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},7026:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ToolbarDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Toolbar",labels:[{label:"Since",text:"Version 0.0.10",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"In Progress",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"",types:[{id:"Toolbar",props:[{id:"",type:"",description:""}]}],examples:[{title:"",result:l.default.createElement("div",null),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})}]};t.ToolbarDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},4392:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.VerticalNavigationDemo=void 0;const l=a(n(7294)),r=n(2531),i=n(7027),o={title:"Vertical Navigation",labels:[{label:"Since",text:"Version 0.0.6",accentColor:r.AccentColors.COLOR_8},{label:"Status",text:"On Going",accentColor:r.AccentColors.COLOR_5},{label:"Specification",text:"Fiori 3",accentColor:r.AccentColors.COLOR_3}],description:"",types:[{id:"VerticalNavigation",props:[{id:"",type:"",description:""}]}],examples:[{title:"Test",description:"TMP",result:l.default.createElement(r.VerticalNavigation,{className:"app-side-navigation",condensed:!0,label:"Menu",itemsLabel:"Menu"},l.default.createElement(r.VerticalNavigationItem,{key:"overview",id:"overview",condensed:!0,icon:"menu2",text:"Overview"}),l.default.createElement(r.Popover,{control:l.default.createElement(r.VerticalNavigationItem,{key:"create",id:"create",condensed:!0,icon:"add",text:"Create"})},l.default.createElement("div",null,"POPO"))),code:l.default.createElement("div",{style:{whiteSpace:"pre"}})},{title:"Default",description:"The default vertical navigation is comprised of several navigation list items.",result:l.default.createElement(r.VerticalNavigation,{label:"Main Menu",itemsLabel:"Main Menu List",items:[{id:"overview",text:"Overview",icon:"home"},{id:"calendar",text:"Calendar Calendar Calendar Calendar Calendar Calendar ",icon:"calendar",expanded:!0,items:[{id:"calendar-item-1",text:"Second level item 1 "},{id:"calendar-item-2",text:"Second level item 2 "}]},{id:"customers",text:"Customers",icon:"customer",expanded:!0,items:[{id:"customers-item-1",text:"Second level item 1 "},{id:"customers-item-2",text:"Second level item 2 "}]},{id:"deliveries",text:"Deliveries",icon:"shipping-status"}]}),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<VerticalNavigation"),l.default.createElement("div",null,"  label='Main Menu'"),l.default.createElement("div",null,"  itemsLabel='Main Menu List'"),l.default.createElement("div",null,"  items={[{"),l.default.createElement("div",null,"    id: 'overview',"),l.default.createElement("div",null,"    text: 'Overview',"),l.default.createElement("div",null,"    icon: 'home',"),l.default.createElement("div",null,"  }, {"),l.default.createElement("div",null,"    id: 'calendar',"),l.default.createElement("div",null,"    text: 'Calendar Calendar Calendar Calendar Calendar Calendar ',"),l.default.createElement("div",null,"    icon: 'calendar',"),l.default.createElement("div",null,"    expanded: true,"),l.default.createElement("div",null,"    items: [{"),l.default.createElement("div",null,"      id: 'calendar-item-1',"),l.default.createElement("div",null,"      text: 'Second level item 1 ',"),l.default.createElement("div",null,"    }, {"),l.default.createElement("div",null,"      id: 'calendar-item-2',"),l.default.createElement("div",null,"      text: 'Second level item 2 ',"),l.default.createElement("div",null,"    }]"),l.default.createElement("div",null,"  }, {"),l.default.createElement("div",null,"    id: 'customers',"),l.default.createElement("div",null,"    text: 'Customers',"),l.default.createElement("div",null,"    icon: 'customer',"),l.default.createElement("div",null,"    expanded: true,"),l.default.createElement("div",null,"    items: [{"),l.default.createElement("div",null,"      id: 'customers-item-1',"),l.default.createElement("div",null,"      text: 'Second level item 1 ',"),l.default.createElement("div",null,"    }, {"),l.default.createElement("div",null,"      id: 'customers-item-2',"),l.default.createElement("div",null,"      text: 'Second level item 2 ',"),l.default.createElement("div",null,"    }]"),l.default.createElement("div",null,"  }, {"),l.default.createElement("div",null,"    id: 'deliveries',"),l.default.createElement("div",null,"    text: 'Deliveries',"),l.default.createElement("div",null,"    icon: 'shipping-status',"),l.default.createElement("div",null,"  }]}"),l.default.createElement("div",null,"/>"))},{title:"Condensed",description:"In condensed mode, only icons are shown unless some navigation items have second levels and the second level is expanded.",result:l.default.createElement(r.VerticalNavigation,{label:"Main Menu",itemsLabel:"Main Menu List",condensed:!0,items:[{id:"overview",text:"Overview",icon:"home"},{id:"calendar",text:"Calendar Calendar Calendar Calendar Calendar Calendar ",icon:"calendar",expanded:!1},{id:"customers",text:"Customers",icon:"customer",expanded:!1},{id:"deliveries",text:"Deliveries",icon:"shipping-status"}]}),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<VerticalNavigation"),l.default.createElement("div",null,"  label='Main Menu'"),l.default.createElement("div",null,"  itemsLabel='Main Menu List'"),l.default.createElement("div",null,"  condensed={true}"),l.default.createElement("div",null,"  items={[{"),l.default.createElement("div",null,"    id: 'overview',"),l.default.createElement("div",null,"    text: 'Overview',"),l.default.createElement("div",null,"    icon: 'home',"),l.default.createElement("div",null,"  }, {"),l.default.createElement("div",null,"    id: 'calendar',"),l.default.createElement("div",null,"    text: 'Calendar Calendar Calendar Calendar Calendar Calendar ',"),l.default.createElement("div",null,"    icon: 'calendar',"),l.default.createElement("div",null,"    expanded: false,"),l.default.createElement("div",null,"  }, {"),l.default.createElement("div",null,"    id: 'customers',"),l.default.createElement("div",null,"    text: 'Customers',"),l.default.createElement("div",null,"    icon: 'customer',"),l.default.createElement("div",null,"    expanded: false,"),l.default.createElement("div",null,"  }, {"),l.default.createElement("div",null,"    id: 'deliveries',"),l.default.createElement("div",null,"    text: 'Deliveries',"),l.default.createElement("div",null,"    icon: 'shipping-status',"),l.default.createElement("div",null,"  }]}"),l.default.createElement("div",null,"/>"))}]};t.VerticalNavigationDemo=()=>l.default.createElement(i.DemoPage,Object.assign({},o))},6212:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const l=a(n(7294)),r=n(9818),i=n(6113),o=n(745),u=a(n(2509)),c=a(n(1079)),s=document.getElementById("reactroot");(0,o.createRoot)(s).render(l.default.createElement(i.Provider,{store:c.default},l.default.createElement(r.HashRouter,null,l.default.createElement(u.default,null))))},8277:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Avatar=void 0;const l=a(n(7294)),r=n(3723),i=n(7876);t.Avatar=({className:e,style:t,ariaLabel:n,ariaLabelZoom:a,ariaControls:o,ariaExpanded:u,ariaHaspopup:c,accentColor:s,bordered:d,circle:f,design:m,icon:p,iconZoom:v,initials:h,size:b=r.Sizes.MEDIUM,onClick:g})=>{const E=["fd-avatar"];return e&&E.push(e),b&&E.push(`fd-avatar--${b}`),s&&E.push(`fd-avatar--${s}`),d&&E.push("fd-avatar--border"),m&&E.push(`fd-avatar--${m}`),f&&E.push("fd-avatar--circle"),l.default.createElement("span",{className:E.join(" "),"aria-label":n,"aria-controls":o,"aria-expanded":u,"aria-haspopup":c,style:t,role:g?"button":void 0,tabIndex:g?0:void 0,onClick:g},p?l.default.createElement(i.Icon,{className:"fd-avatar__icon",icon:p}):h,g&&v?l.default.createElement(i.Icon,{className:"fd-avatar__zoom-icon",icon:v,ariaLabel:a||"Edit"}):null)}},9128:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Bar=void 0;const l=a(n(7294)),r=n(4413),i=n(3494),o=n(2574),u=n(2300);t.Bar=({className:e,style:t,cozy:n,left:a,middle:c,responsivePaddings:s,right:d,type:f})=>{const m=e=>Array.isArray(e)?e.map(((e,t)=>p(e,`element-${t}`))):p(e),p=(e,t)=>l.default.createElement(r.BarElement,{key:t},e),v=["fd-bar"];return e&&v.push(e),n&&v.push("fd-bar--cozy"),s&&v.push("fd-bar--responsive-paddings"),f&&v.push(`fd-bar--${f}`),l.default.createElement("div",{className:v.join(" "),style:t},a?l.default.createElement(i.BarLeft,null,m(a)):null,c?l.default.createElement(o.BarMiddle,null,m(c)):null,d?l.default.createElement(u.BarRight,null,m(d)):null)}},4413:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BarElement=void 0;const l=a(n(7294));t.BarElement=({className:e,style:t,children:n})=>{const a=["fd-bar__element"];return e&&a.push(e),l.default.createElement("div",{className:a.join(" "),style:t},n)}},3494:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BarLeft=void 0;const l=a(n(7294));t.BarLeft=({className:e,style:t,children:n})=>{const a=["fd-bar__left"];return e&&a.push(e),l.default.createElement("div",{className:a.join(" "),style:t},n)}},2574:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BarMiddle=void 0;const l=a(n(7294));t.BarMiddle=({className:e,style:t,children:n})=>{const a=["fd-bar__middle"];return e&&a.push(e),l.default.createElement("div",{className:a.join(" "),style:t},n)}},2300:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BarRight=void 0;const l=a(n(7294));t.BarRight=({className:e,style:t,children:n})=>{const a=["fd-bar__right"];return e&&a.push(e),l.default.createElement("div",{className:a.join(" "),style:t},n)}},8677:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Breadcrumb=void 0;const l=a(n(7294)),r=n(6859);t.Breadcrumb=({className:e,style:t,ariaLabel:n,items:a,onItemSelected:i})=>{const o=[];return e&&o.push(e),l.default.createElement("nav",{className:o.join(" "),style:t,"aria-label":n},l.default.createElement("ul",{className:"fd-breadcrumb"},a.map(((e,t)=>l.default.createElement(r.BreadcrumbItem,{key:t,text:e.text,current:t===a.length-1,onItemSelected:()=>(e=>(e.onItemSelected?e.onItemSelected():i&&i(e.text),!1))(e)})))))}},6859:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BreadcrumbItem=void 0;const l=a(n(7294));t.BreadcrumbItem=({className:e,style:t,text:n,current:a,onItemSelected:r})=>{const i=["fd-breadcrumb__item"];return e&&i.push(e),a?l.default.createElement("li",{className:i.join(" "),style:t,"aria-current":"page"},n):l.default.createElement("li",{className:i.join(" "),style:t},l.default.createElement("a",{className:"fd-link",tabIndex:0,href:"#",onClick:()=>(r(),!1)},l.default.createElement("span",{className:"fd-link__content"},n)))}},7289:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BusyIndicator=void 0;const l=a(n(7294));t.BusyIndicator=({className:e,style:t,ariaLabel:n,contrast:a,label:r,size:i,toast:o})=>{const u=r||o,c=["fd-busy-indicator"];i&&c.push(`fd-busy-indicator--${i}`),e&&c.push(e),a&&c.push("fd-busy-indicator--contrast");const s=l.default.createElement("div",{className:c.join(" "),style:t,"aria-hidden":"false","aria-label":n||"Loading"},l.default.createElement("div",{className:"fd-busy-indicator__circle"}),l.default.createElement("div",{className:"fd-busy-indicator__circle"}),l.default.createElement("div",{className:"fd-busy-indicator__circle"}));if(u){const e=["fd-busy-indicator-extended"];return o&&(e.push("fd-message-toast"),r&&e.push("fd-busy-indicator-extended--message-toast")),l.default.createElement("div",{className:e.join(" ")},s,r?l.default.createElement("div",{className:"fd-busy-indicator-extended__label"},r):null)}return s}},4326:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Button=void 0;const l=a(n(7294)),r=n(8660),i=n(1903),o=n(7876);t.Button=({className:e,style:t,ariaLabel:n,ariaControls:a,ariaExpanded:u,ariaHaspopup:c,badge:s,compact:d,design:f,disabled:m,icon:p,iconAfter:v,menu:h,selected:b,tabIndex:g,text:E,toggled:y,type:_=i.ButtonTypes.BUTTON,onClick:A})=>{const S=["fd-button"];return e&&S.push(e),f&&S.push(`fd-button--${f}`),b&&S.push("is-selected"),d&&S.push("fd-button--compact"),h&&S.push("fd-button--menu"),y&&S.push("fd-button--toggled"),l.default.createElement("button",{className:S.join(" "),style:t,"aria-controls":a,"aria-disabled":!!m,"aria-expanded":u,"aria-haspopup":c,"aria-label":n,disabled:m,tabIndex:g||0,title:E?"":n,type:_,onClick:e=>{e.stopPropagation(),A&&A()}},p&&!v?(0,r.renderIcon)(p):null,E?l.default.createElement("span",{className:"fd-button__text"},E):null,p&&v?(0,r.renderIcon)(p):null,h?l.default.createElement(o.Icon,{icon:"slim-arrow-down"}):null,s?l.default.createElement("span",{className:"fd-button__badge"},s):null)}},6232:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SegmentedButton=void 0;const l=a(n(7294));t.SegmentedButton=({className:e,style:t,ariaLabel:n,children:a})=>{const r=["fd-segmented-button"];return e&&r.push(e),l.default.createElement("div",{className:r.join(" "),style:t,"aria-label":n||"Group label",role:"group"},a)}},8681:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Calendar=t.DISPLAY_MODE=void 0;const i=r(n(7294)),o=n(7280),u=n(8551),c=n(1663);t.DISPLAY_MODE={DAYS:"DAYS",MONTHS:"MONTHS",YEARS:"YEARS"},t.Calendar=({className:e,style:n,date:a=new Date,selectedDate:l,compact:r,onSelectedDateChange:s})=>{let d=t.DISPLAY_MODE.DAYS;const[f,m]=(0,i.useState)(a),[p,v]=(0,i.useState)(t.DISPLAY_MODE.DAYS);(0,i.useEffect)((()=>{p!==t.DISPLAY_MODE.YEARS&&(d=p)}),[p]);const h=e=>{m(e)},b=e=>{v(e)},g=e=>{v(e)},E=e=>{v(d||e)};switch(p){case t.DISPLAY_MODE.MONTHS:return i.default.createElement(u.CalendarMonths,{className:e,style:n,date:f,onDisplayDateChange:h,onDisplayModeChange:g});case t.DISPLAY_MODE.YEARS:return i.default.createElement(c.CalendarYears,{className:e,style:n,date:f,onDisplayDateChange:h,onDisplayModeChange:E});default:return i.default.createElement(o.CalendarDays,{className:e,style:n,date:f,selectedDate:l,compact:r,onDisplayDateChange:h,onDisplayModeChange:b,onSelectedDateChange:s})}}},7280:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarDays=void 0;const i=r(n(7294)),o=n(6039),u=n(5958),c=n(4326),s=n(8681);t.CalendarDays=({className:e,style:t,date:n,selectedDate:a,compact:l,onDisplayDateChange:r,onDisplayModeChange:p,onSelectedDateChange:v})=>{const h="en",b=new Intl.Locale(h),{firstDay:g,minimalDays:E,weekend:y}=b.weekInfo,[_,A]=(0,i.useState)([]),[S,C]=(0,i.useState)([]);(0,i.useEffect)((()=>{const e=[],t=new Date;for(;t.getDay()!==g%7;)t.setDate(t.getDate()-1);for(let n=0;n<7;n++){const n=t.toLocaleString(h,{weekday:"short"});e.push(n.substring(0,1).toUpperCase()),t.setDate(t.getDate()+1)}C(e)}),[]),(0,i.useEffect)((()=>{const e=new Date,t=[],l=new Date(n.getFullYear(),n.getMonth(),1);for(;l.getDay()!==g%7;)l.setDate(l.getDate()-1);for(let r=0;r<5;r++){const r=[];for(let t=1;t<8;t++){const i=e.getFullYear()===l.getFullYear(),o=e.getMonth()===l.getMonth(),u=e.getDate()===l.getDate(),c=!!a&&a.getFullYear()===l.getFullYear(),s=!!a&&a.getMonth()===l.getMonth(),d=!!a&&a.getDate()===l.getDate();r.push({date:new Date(l.getTime()),text:l.getDate(),otherMonth:l.getMonth()!==n.getMonth(),current:i&&o&&u,active:c&&s&&d,weekend:y.includes(t)}),l.setDate(l.getDate()+1)}t.push(r)}A(t)}),[n,a]);const x=["fd-calendar"];return e&&x.push(e),l&&x.push("fd-calendar--compact"),i.default.createElement("section",{className:x.join(" "),style:t},i.default.createElement("header",{className:"fd-calendar__header"},i.default.createElement("div",{className:"fd-calendar__navigation"},i.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-left"},i.default.createElement(c.Button,{design:u.ButtonDesigns.TRANSPARENT,icon:"slim-arrow-left",onClick:()=>{const e=new Date(n.getFullYear(),n.getMonth(),0);r(e)}})),i.default.createElement("div",{className:"fd-calendar__action"},i.default.createElement(c.Button,{design:u.ButtonDesigns.TRANSPARENT,text:o.StringUtils.capitalize(n.toLocaleString(h,{month:"long"})),onClick:()=>{p(s.DISPLAY_MODE.MONTHS)}})),i.default.createElement("div",{className:"fd-calendar__action"},i.default.createElement(c.Button,{design:u.ButtonDesigns.TRANSPARENT,text:n.getFullYear(),onClick:()=>{p(s.DISPLAY_MODE.YEARS)}})),i.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-right"},i.default.createElement(c.Button,{design:u.ButtonDesigns.TRANSPARENT,icon:"slim-arrow-right",onClick:()=>{const e=new Date(n.getFullYear(),n.getMonth()+1,1);r(e)}})))),i.default.createElement("div",{className:"fd-calendar__content fd-calendar__content--dates"},i.default.createElement("table",{className:"fd-calendar__table",role:"grid"},i.default.createElement("thead",{className:"fd-calendar__group"},i.default.createElement("tr",{className:"fd-calendar__row"},i.default.createElement(d,null),S.map(((e,t)=>i.default.createElement(d,{key:`calendar-week-day-${t}`,text:e}))))),i.default.createElement("tbody",{className:"fd-calendar__group"},_.map(((e,t)=>i.default.createElement("tr",{key:`calendar-week-${t}`,className:"fd-calendar__row"},i.default.createElement(f,{text:t+1}),e.map((e=>i.default.createElement(m,Object.assign({key:`calendar-week-${t}-day-${e.text}`},e,{onCalendarDayClicked:()=>v&&v(e.date)})))))))))),i.default.createElement("div",{"aria-live":"polite",className:"fd-calendar__content fd-calendar__content--screen-reader-only"},"Use arrow keys to navigate dates"))};const d=({text:e})=>i.default.createElement("th",{className:"fd-calendar__item fd-calendar__item--side-helper"},e?i.default.createElement("span",{className:"fd-calendar__text",role:"button"},e):null),f=({text:e})=>i.default.createElement("td",{className:"fd-calendar__item fd-calendar__item--side-helper"},i.default.createElement("span",{className:"fd-calendar__text",role:"button"},e)),m=({text:e,active:t,current:n,otherMonth:a,range:l,specialDay:r,weekend:o,onCalendarDayClicked:u})=>{const c=["fd-calendar__item"];return t&&c.push("is-active"),n&&c.push("fd-calendar__item--current"),a&&c.push("fd-calendar__item--other-month"),l&&c.push("fd-calendar__item--range"),r&&c.push(`fd-calendar__special-day--${r}`),o&&c.push("fd-calendar__item--weekend"),i.default.createElement("td",{className:c.join(" "),role:"gridcell",style:{cursor:"pointer"}},i.default.createElement("span",{className:"fd-calendar__text",role:"button",onClick:u},e))}},8551:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarMonths=void 0;const i=r(n(7294)),o=n(6039),u=n(5958),c=n(8681),s=n(4326);t.CalendarMonths=({className:e,style:t,date:n,onDisplayDateChange:a,onDisplayModeChange:l})=>{const[r,f]=(0,i.useState)([]);(0,i.useEffect)((()=>{const e=new Date,t=[];for(let a=0;a<4;a++){const l=[];for(let t=0;t<3;t++){const r=4*t+a,i=n.getFullYear()===e.getFullYear(),o=e.getMonth()===r;l.push({month:r,current:i&&o})}t.push(l)}f(t)}),[n]);const m=e=>{const t=new Date(2e3,e).toLocaleString("en",{month:"long"});return o.StringUtils.capitalize(t)},p=["fd-calendar"];return e&&p.push(e),i.default.createElement("section",{className:p.join(" "),style:t},i.default.createElement("header",{className:"fd-calendar__header"},i.default.createElement("div",{className:"fd-calendar__navigation"},i.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-left"},i.default.createElement(s.Button,{design:u.ButtonDesigns.TRANSPARENT,icon:"slim-arrow-left",onClick:()=>{const e=new Date(n.getFullYear()-1,n.getMonth(),1);a(e)}})),i.default.createElement("div",{className:"fd-calendar__action"},i.default.createElement(s.Button,{design:u.ButtonDesigns.TRANSPARENT,text:n.getFullYear(),onClick:()=>{l(c.DISPLAY_MODE.YEARS)}})),i.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-right"},i.default.createElement(s.Button,{design:u.ButtonDesigns.TRANSPARENT,icon:"slim-arrow-right",onClick:()=>{const e=new Date(n.getFullYear()+1,n.getMonth(),1);a(e)}})))),i.default.createElement("div",{className:"fd-calendar__content fd-calendar__content--months"},i.default.createElement("table",{className:"fd-calendar__table",role:"grid"},i.default.createElement("tbody",{className:"fd-calendar__group"},r.map(((e,t)=>i.default.createElement("tr",{key:`'calendar-month-row-${t}`,className:"fd-calendar__row"},e.map((e=>i.default.createElement(d,{key:`'calendar-month-${e.month}`,text:m(e.month),current:e.current,onClick:()=>(e=>{const t=new Date(n.getFullYear(),e,1);a(t),l(c.DISPLAY_MODE.DAYS)})(e.month)}))))))))),i.default.createElement("div",{"aria-live":"polite",className:"fd-calendar__content fd-calendar__content--screen-reader-only"},"Use arrow keys to navigate dates"))};const d=({text:e,active:t,current:n,onClick:a})=>{const l=["fd-calendar__item"];n&&l.push("fd-calendar__item--current");const r=["fd-button fd-button--transparent fd-calendar__item-button"];return t&&r.push("is-active"),i.default.createElement("td",{className:l.join(" "),role:"gridcell"},i.default.createElement("button",{className:r.join(" "),type:"button",onClick:a},i.default.createElement("span",{className:"fd-calendar__text"},e)))}},1663:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarYears=void 0;const i=r(n(7294)),o=n(5958),u=n(8681),c=n(4326);t.CalendarYears=({className:e,style:t,date:n,onDisplayDateChange:a,onDisplayModeChange:l})=>{const[r,d]=(0,i.useState)([]);(0,i.useEffect)((()=>{const e=new Date;let t=10*Math.floor(n.getFullYear()/10);const a=[];for(let n=0;n<4;n++){const n=[];for(let a=0;a<5;a++)n.push({current:t===e.getFullYear(),year:t++});a.push(n)}d(a)}),[n]);const f=["fd-calendar"];return e&&f.push(e),i.default.createElement("section",{className:f.join(" "),style:Object.assign(Object.assign({},t),{marginBottom:"1rem"})},i.default.createElement("header",{className:"fd-calendar__header"},i.default.createElement("div",{className:"fd-calendar__navigation"},i.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-left"},i.default.createElement(c.Button,{design:o.ButtonDesigns.TRANSPARENT,icon:"slim-arrow-left",onClick:()=>{const e=new Date(n.getFullYear()-20,n.getMonth(),1);a(e)}})),i.default.createElement("div",{className:"fd-calendar__action"},i.default.createElement(c.Button,{design:o.ButtonDesigns.TRANSPARENT,text:r&&r.length?`${r[0][0].year} - ${r[3][4].year}`:void 0})),i.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-right"},i.default.createElement(c.Button,{design:o.ButtonDesigns.TRANSPARENT,icon:"slim-arrow-right",onClick:()=>{const e=new Date(n.getFullYear()+20,n.getMonth(),1);a(e)}})))),i.default.createElement("div",{className:"fd-calendar__content fd-calendar__content--years ",id:"57YUZ521"},i.default.createElement("table",{className:"fd-calendar__table",role:"grid"},i.default.createElement("tbody",{className:"fd-calendar__group"},r.map(((e,t)=>i.default.createElement("tr",{key:`'calendar-years-row-${t}`,className:"fd-calendar__row"},e.map((e=>i.default.createElement(s,{key:`'calendar-years-${e.year}`,text:e.year,current:e.current,onClick:()=>(e=>{const t=new Date(e,n.getMonth(),1);a(t),l(u.DISPLAY_MODE.MONTHS)})(e.year)}))))))))),i.default.createElement("div",{"aria-live":"polite",className:"fd-calendar__content fd-calendar__content--screen-reader-only"},"Use arrow keys to navigate dates"))};const s=({text:e,active:t,current:n,onClick:a})=>{const l=["fd-calendar__item"];n&&l.push("fd-calendar__item--current");const r=["fd-button fd-button--transparent fd-calendar__item-button"];return t&&r.push("is-active"),i.default.createElement("td",{className:l.join(" "),role:"gridcell"},i.default.createElement("button",{className:r.join(" "),type:"button",onClick:a},i.default.createElement("span",{className:"fd-calendar__text"},e)))}},6369:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Card=void 0;const l=a(n(7294)),r=n(3824),i=n(6864),o=n(4229);t.Card=({className:e,style:t,badge:n,header:a,footer:u,children:c})=>{const s=["fd-card"];return e&&s.push(e),l.default.createElement("div",{className:s.join(" "),style:t},n?l.default.createElement(o.InfoLabel,Object.assign({},n)):null,l.default.createElement(r.CardHeader,Object.assign({},a)),c?l.default.createElement("div",{className:"fd-card__content",role:"group","aria-label":"Card Content"},c):null,l.default.createElement(i.CardFooter,Object.assign({},u)))}},6864:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CardFooter=void 0;const l=a(n(7294));t.CardFooter=({className:e,style:t,children:n})=>{const a=["fd-card__footer"];return e&&a.push(e),l.default.createElement("a",{className:a.join(" "),style:t},n)}},3824:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CardHeader=void 0;const l=a(n(7294)),r=n(8277);t.CardHeader=({className:e,style:t,avatar:n,title:a,titleCounter:i,subTitle:o,onClick:u})=>{const c=["fd-card__header"];return e&&c.push(e),l.default.createElement("a",{className:c.join(" "),tabIndex:0,onClick:()=>{u&&u()},onKeyUp:e=>{switch(e.code){case"Enter":case"Space":e.stopPropagation(),u&&u()}},style:t},n?l.default.createElement(r.Avatar,Object.assign({},n)):null,a||i?l.default.createElement("div",{className:"fd-card__title-area"},l.default.createElement("div",{className:"fd-card__title"},a),l.default.createElement("span",{className:"fd-object-status fd-card__counter"},i)):null,o?l.default.createElement("div",{className:"fd-card__subtitle-area"},l.default.createElement("div",{className:"fd-card__subtitle"},o)):null)}},9456:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Dialog=void 0;const i=r(n(7294)),o=n(8329),u=n(9929);t.Dialog=({className:e,style:t,resizable:n,header:a,footer:l,children:r})=>{const c=(0,i.useRef)(null);(0,i.useEffect)((()=>{const e=null==c?void 0:c.current;if(e){const t=e.querySelector('[tabindex="0"]');t&&t.focus()}}),[]);const s=["fd-dialog","fd-dialog--active"];return e&&s.push(e),i.default.createElement("section",{className:s.join(" "),style:t},i.default.createElement("div",{className:"fd-dialog__content",role:"dialog","aria-modal":"true","aria-labelledby":"dialog-title-1",ref:c},n?i.default.createElement("span",{className:"fd-dialog__resize-handle"}):null,a?i.default.createElement(u.DialogHeader,Object.assign({},a)):null,i.default.createElement("div",{className:"fd-dialog__body"},r),l?i.default.createElement(o.DialogFooter,Object.assign({},l)):null))}},8329:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DialogFooter=void 0;const l=a(n(7294));t.DialogFooter=({className:e,style:t,left:n,right:a,children:r})=>{const i=e=>e?Array.isArray(e)?l.default.createElement(l.default.Fragment,null,e.map(((e,t)=>o(e,`elem-${t}`)))):o(e):null,o=(e,t)=>l.default.createElement("div",{key:t,className:"fd-bar__element"},e),u=["fd-dialog__footer fd-bar fd-bar--footer"];return e&&u.push(e),l.default.createElement("footer",{className:u.join(" "),style:t},l.default.createElement("div",{className:"fd-bar__left"},n?i(n):null),l.default.createElement("div",{className:"fd-bar__right"},i(a||r)))}},9929:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DialogHeader=void 0;const l=a(n(7294));t.DialogHeader=({className:e,style:t,left:n,right:a,subheader:r})=>{const i=e=>{if(e)return Array.isArray(e)?l.default.createElement(l.default.Fragment,null,e.map(((e,t)=>o(e,`elem-${t}`)))):o(e)},o=(e,t)=>l.default.createElement("div",{key:t,className:"fd-bar__element"},e),u=["fd-dialog__header fd-bar"];return e&&u.push(e),r?u.push("fd-bar--header-with-subheader"):u.push("fd-bar--header"),l.default.createElement("header",{className:u.join(" "),style:t},l.default.createElement("div",{className:"fd-bar__left"},n?i(n):null),l.default.createElement("div",{className:"fd-bar__right"},i(a)))}},4171:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CheckBox=void 0;const i=r(n(7294)),o=n(6039);t.CheckBox=({className:e,style:t,compact:n,disabled:a,checked:l,indeterminate:r,readOnly:u,required:c,state:s,text:d,onChange:f})=>{const[m]=(0,i.useState)(`checkbox-${o.UUID.next()}`),p=(0,i.useRef)(null);(0,i.useEffect)((()=>{p.current&&(p.current.indeterminate=!(l||!r))}));const v=["fd-checkbox"],h=["fd-checkbox__label"];return e&&v.push(e),n&&(v.push("fd-checkbox--compact"),h.push("fd-checkbox__label--compact")),c&&h.push("fd-checkbox__label--required"),s&&v.push(`is-${s}`),i.default.createElement(i.default.Fragment,null,i.default.createElement("input",{ref:p,id:m,className:v.join(" "),style:t,checked:l,disabled:a,readOnly:u,type:"checkbox",onChange:e=>{f(e.currentTarget.checked)}}),i.default.createElement("label",{className:h.join(" "),htmlFor:m},i.default.createElement("div",{className:"fd-checkbox__label-container"},i.default.createElement("span",{className:"fd-checkbox__text"},d))))}},3088:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormCheckBox=void 0;const l=a(n(7294)),r=n(8157);t.FormCheckBox=({className:e,style:t,compact:n,checked:a,disabled:i,indeterminate:o,readOnly:u,required:c,state:s,text:d,onChange:f})=>l.default.createElement(r.FormItem,{label:"",className:e,style:t,checkbox:{compact:n,checked:a,disabled:i,indeterminate:o,readOnly:u,required:c,state:s,text:d,onChange:f}})},5291:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormInput=void 0;const l=a(n(7294)),r=n(8157);t.FormInput=({className:e,style:t,ariaLabel:n,compact:a,disabled:i,horizontal:o,label:u,placeholder:c,readOnly:s,required:d,state:f,stateMessage:m,type:p,value:v,onChange:h})=>l.default.createElement(r.FormItem,{className:e,style:t,label:u,horizontal:o,required:d,input:{ariaLabel:n,compact:a,disabled:i,placeholder:c,readOnly:s,state:f,stateMessage:m,type:p,value:v,onChange:h}})},8157:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.FormItem=void 0;const i=r(n(7294)),o=n(6039),u=n(4171),c=n(4977),s=n(48),d=n(7674),f=n(9884),m=n(2866);t.FormItem=({id:e,className:t,style:n,horizontal:a,label:l,required:r,checkbox:p,input:v,select:h,stepinput:b,textarea:g})=>{const[E]=(0,i.useState)(`form-item-${e||o.UUID.next()}`),y=["fd-form-item"];return t&&y.push(t),a&&y.push("fd-form-item--horizontal"),i.default.createElement("div",{className:y.join(" "),style:n},p?null:i.default.createElement(c.FormLabel,{required:r,text:l,htmlFor:E}),p?i.default.createElement(u.CheckBox,Object.assign({},p)):v?i.default.createElement(s.Input,Object.assign({},v,{id:E})):h?i.default.createElement(d.Select,Object.assign({},h,{id:E})):b?i.default.createElement(f.StepInput,Object.assign({},b,{id:E})):g?i.default.createElement(m.TextArea,Object.assign({},g,{id:E})):null)}},4977:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormLabel=void 0;const l=a(n(7294));t.FormLabel=({className:e,style:t,htmlFor:n,required:a,text:r})=>{const i=["fd-form-label"];return e&&i.push(e),a&&i.push("fd-form-label--required"),l.default.createElement("label",{className:i.join(" "),htmlFor:n,style:t},r)}},1074:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormSelect=void 0;const l=a(n(7294)),r=n(8157);n(177),t.FormSelect=({className:e,style:t,alignRight:n,compact:a,horizontal:i,items:o,label:u,placeholder:c,required:s,state:d,stateMessage:f,value:m,onChange:p})=>{const v=["fd-form-select"];return e&&v.push(e),l.default.createElement(r.FormItem,{className:v.join(" "),style:t,horizontal:i,label:u,required:s,select:{alignRight:n,compact:a,items:o,placeholder:c,state:d,stateMessage:f,value:m,onChange:p}})}},2923:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormStepInput=void 0;const l=a(n(7294)),r=n(8157);t.FormStepInput=({className:e,style:t,compact:n,disabled:a,horizontal:i,label:o,max:u,min:c,readOnly:s,required:d,state:f,value:m,onChange:p})=>l.default.createElement(r.FormItem,{className:e,style:t,label:o,horizontal:i,required:d,stepinput:{compact:n,disabled:a,max:u,min:c,readOnly:s,state:f,value:m,onChange:p}})},794:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormTextArea=void 0;const l=a(n(7294)),r=n(8157);t.FormTextArea=({className:e,style:t,ariaLabel:n,compact:a,counter:i,disabled:o,horizontal:u,label:c,placeholder:s,readOnly:d,required:f,state:m,stateMessage:p,value:v,onChange:h})=>l.default.createElement(r.FormItem,{className:e,style:t,label:c,horizontal:u,required:f,textarea:{ariaLabel:n,compact:a,counter:i,disabled:o,placeholder:s,readOnly:d,state:m,stateMessage:p,value:v,onChange:h}})},48:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Input=void 0;const l=a(n(7294)),r=n(6414),i=n(805);t.Input=({id:e,className:t,style:n,ariaLabel:a,compact:o,disabled:u,placeholder:c,readOnly:s,state:d,stateMessage:f,type:m=r.InputTypes.TEXT,value:p,onChange:v})=>{const h=["fd-input"];t&&h.push(t),o&&h.push("fd-input--compact"),d&&h.push(`is-${d}`);const b=["fd-form-message"];return b.push(`fd-form-message--${d}`),l.default.createElement(i.Popover,{className:"fd-popover--input-message-group",control:l.default.createElement("input",{id:e,className:h.join(" "),disabled:u,style:n,"aria-label":a,placeholder:c,readOnly:s,type:m,value:p,onChange:e=>{v(e.currentTarget.value)}}),noArrow:!0,preventOpen:!f},l.default.createElement("div",{className:b.join(" ")},f))}},9884:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.StepInput=void 0;const i=r(n(7294)),o=n(5958),u=n(4326);t.StepInput=({id:e,className:t,style:n,compact:a,disabled:l,min:r,max:c,readOnly:s,state:d,value:f,onChange:m})=>{const[p,v]=(0,i.useState)(f||r||0),[h,b]=(0,i.useState)(!1);(0,i.useEffect)((()=>{f!==p&&g(f)}),[f]);const g=e=>{let t=e;r&&!isNaN(r)&&t<r&&(t=r),c&&!isNaN(c)&&t>c&&(t=c),v(t),m(t)},E=()=>{b(!0)},y=["fd-step-input"],_=["fd-step-input__button"],A=["fd-input fd-input--no-number-spinner fd-step-input__input"];return t&&y.push(t),a&&(y.push("fd-step-input--compact"),_.push("fd-button--compact"),A.push("fd-input--compact")),l&&y.push("is-disabled"),h&&y.push("is-focus"),s&&y.push("is-readonly"),d&&y.push(`is-${d}`),i.default.createElement("div",{className:y.join(" "),style:n},i.default.createElement(u.Button,{className:_.join(" "),ariaLabel:"Step down",design:o.ButtonDesigns.TRANSPARENT,tabIndex:-1,icon:"less",onClick:()=>{g(p-1)}}),i.default.createElement("input",{id:e,className:A.join(" "),style:{width:"100%"},disabled:l,readOnly:s,type:"number",value:p,onChange:e=>{g(Number(e.target.value))},onBlur:E,onFocus:E}),i.default.createElement(u.Button,{className:_.join(" "),ariaLabel:"Step Up",design:o.ButtonDesigns.TRANSPARENT,tabIndex:-1,icon:"add",onClick:()=>{g(p+1)}}))}},2866:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TextArea=void 0;const l=a(n(7294)),r=n(805);t.TextArea=({id:e,className:t,style:n,ariaLabel:a,compact:i,counter:o,disabled:u,placeholder:c,readOnly:s,state:d,stateMessage:f,value:m,onChange:p})=>{const v=["fd-textarea"];t&&v.push(t),i&&v.push("fd-textarea--compact"),d&&v.push(`is-${d}`);const h=["fd-form-message"];return h.push(`fd-form-message--${d}`),l.default.createElement(r.Popover,{className:"fd-popover--input-message-group",control:l.default.createElement("div",null,l.default.createElement("textarea",{id:e,className:v.join(" "),disabled:u,style:n,"aria-label":a,placeholder:c,readOnly:s,value:m,onChange:e=>{p(e.currentTarget.value)}}),o?l.default.createElement("div",{className:"fd-textarea-counter"},o-m.length+" characters left"):null),noArrow:!0,preventOpen:!f},l.default.createElement("div",{className:h.join(" ")},f))}},7876:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Icon=void 0;const l=a(n(7294)),r=n(2438);t.Icon=({className:e,style:t,ariaLabel:n,ariaControls:a,ariaExpanded:i,ariaHaspopup:o,color:u,icon:c,preferSpan:s,onClick:d})=>{const f=[`sap-icon--${c}`];return e&&f.push(e),u&&f.push(`sap-icon--color-${u}`),u===r.IconDesigns.CONTRAST&&f.push(`sap-icon--background-${u}`),s&&f.push("sap-icon"),s?l.default.createElement("span",{className:f.join(" "),style:t,"aria-label":n,"aria-controls":a,"aria-expanded":i,"aria-haspopup":o,role:d?"button":"presentation",onClick:d}):l.default.createElement("i",{className:f.join(" "),style:t,"aria-label":n,"aria-controls":a,"aria-expanded":i,"aria-haspopup":o,role:d?"button":"presentation",onClick:d})}},1058:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IconTabBar=void 0;const l=a(n(7294)),r=n(5426);n(4902),t.IconTabBar=({className:e,style:t,compact:n,design:a,process:i,selectedTab:o,tabs:u,onTabSelect:c,children:s})=>{const d=["fd-icon-tab-bar"];return e&&d.push(e),n&&d.push("fd-icon-tab-bar--compact"),a&&d.push(`fd-icon-tab-bar--${a}`),i&&d.push("fd-icon-tab-bar--process"),l.default.createElement("div",{className:d.join(" "),style:t},l.default.createElement("ul",{className:"fd-icon-tab-bar__header",role:"tablist"},null==u?void 0:u.map(((e,t)=>l.default.createElement(r.IconTabBarItem,Object.assign({key:e.id,selected:o===e.id},e,{process:t<u.length-1&&(i||e.process),design:a||e.design,onTabSelect:c})))),s))}},5426:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IconTabBarItem=void 0;const l=a(n(7294)),r=n(2569);t.IconTabBarItem=({id:e,className:t,style:n,action:a,actionAriaLabel:i,badge:o,counter:u,icon:c,design:s,process:d,selected:f,semantic:m,title:p,onTabSelect:v,onActionSelect:h})=>{const b=["fd-icon-tab-bar__item"];return t&&b.push(t),m&&b.push(`fd-icon-tab-bar__item--${m}`),l.default.createElement("li",{className:b.join(" "),style:n,role:"presentation"},l.default.createElement("a",{id:e,className:"fd-icon-tab-bar__tab","aria-selected":!!f,role:"tab",tabIndex:0,onClick:()=>{v&&e&&v(e)},onKeyUp:t=>{switch(t.code){case"Enter":case"Space":t.stopPropagation(),v&&e&&v(e)}}},(()=>{switch(s){case r.IconTabBarDesigns.ICON:return l.default.createElement(l.default.Fragment,null,l.default.createElement("div",{className:"fd-icon-tab-bar__container"},l.default.createElement("span",{className:"fd-icon-tab-bar__icon"},l.default.createElement("i",{className:`sap-icon--${c}`,role:"presentation"})),o?l.default.createElement("span",{className:"fd-icon-tab-bar__badge"}):null),l.default.createElement("div",{className:"fd-icon-tab-bar__details"},u?l.default.createElement("span",{className:"fd-icon-tab-bar__counter"},u):null,p?l.default.createElement("span",{className:"fd-icon-tab-bar__label"},p):null));case r.IconTabBarDesigns.ICON_ONLY:return l.default.createElement(l.default.Fragment,null,l.default.createElement("span",{className:"fd-icon-tab-bar__icon"},l.default.createElement("i",{className:`sap-icon--${c}`,role:"presentation"})),o?l.default.createElement("span",{className:"fd-icon-tab-bar__badge"}):null,u?l.default.createElement("span",{className:"fd-icon-tab-bar__counter"},u):null);case r.IconTabBarDesigns.COUNTERS:return l.default.createElement(l.default.Fragment,null,u?l.default.createElement("span",{className:"fd-icon-tab-bar__counter"},u):null,p?l.default.createElement("span",{className:"fd-icon-tab-bar__label"},p):null,o?l.default.createElement("span",{className:"fd-icon-tab-bar__badge"}):null);default:return l.default.createElement(l.default.Fragment,null,l.default.createElement("span",{className:"fd-icon-tab-bar__tag"},p),o?l.default.createElement("span",{className:"fd-icon-tab-bar__badge"}):null)}})()),a?l.default.createElement("div",{className:"fd-icon-tab-bar__button-container"},l.default.createElement("button",{className:"fd-button fd-button--transparent fd-button--compact  fd-icon-tab-bar__button","aria-label":i,onClick:e=>{h&&h()}},l.default.createElement("i",{className:`sap-icon--${a}`}))):null,d?l.default.createElement("span",{className:"fd-icon-tab-bar__separator"},l.default.createElement("i",{className:"sap-icon--process",role:"presentation"})):null)}},4229:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.InfoLabel=void 0;const l=a(n(7294));t.InfoLabel=({className:e,style:t,accentColor:n,display:a,icon:r,numeric:i,text:o})=>{const u=["fd-info-label"];return e&&u.push(e),n&&u.push(`fd-info-label--${n}`),i&&u.push("fd-info-label--numeric"),a&&u.push("fd-info-label--display"),l.default.createElement("span",{className:u.join(" "),style:t},r?l.default.createElement("i",{className:`fd-info-label__icon sap-icon--${r}`,role:"presentation"}):null,o?l.default.createElement("span",{className:"fd-info-label__text"},o):null)}},6374:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Link=void 0;const l=a(n(7294));t.Link=({className:e,style:t,ariaLabel:n,design:a,disabled:r,href:i,icon:o,iconAfter:u,tabIndex:c,text:s})=>{const d=["fd-link"];return e&&d.push(e),a&&d.push(`fd-link--${a}`),l.default.createElement("a",{href:i,className:d.join(" "),"aria-label":n,tabIndex:c||0,"aria-disabled":!!r,style:t},l.default.createElement("span",{className:"fd-link__content"},o&&!u?l.default.createElement("span",{className:`sap-icon--${o}`}):null,s,o&&u?l.default.createElement("span",{className:`sap-icon--${o}`}):null))}},3595:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.List=void 0;const i=r(n(7294)),o=n(6039),u=n(2752);t.List=({className:e,style:t,compact:n,items:a,stateMessage:l,state:r,type:c,onItemSelected:s})=>{const[d]=(0,i.useState)(`list-state-${o.UUID.next()}`),f=["fd-list"];e&&f.push(e),n&&f.push("fd-list--compact"),c&&f.push(`fd-list--${c}`),l&&f.push("fd-list--has-message");const m=["fd-list__message"];return r&&m.push(`fd-list__message--${r}`),i.default.createElement(i.default.Fragment,null,l?i.default.createElement("div",{className:m.join(" "),"aria-live":"assertive",role:"alert"},l):null,i.default.createElement("ul",{className:f.join(" "),"aria-activedescendant":d,role:"list",style:t},a.map(((e,t)=>i.default.createElement(u.ListItem,Object.assign({id:0===t?d:void 0,key:`item-${t}`},e,{onItemSelected:()=>(e=>(e.onItemSelected?e.onItemSelected():s&&s(e),!1))(e),type:c}))))))}},2752:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ListItem=void 0;const l=a(n(7294)),r=n(8660),i=n(5571);t.ListItem=({id:e,className:t,style:n,iconLeft:a,iconRight:o,interactive:u,selected:c,text:s,type:d,unread:f,onItemSelected:m})=>{const p=()=>l.default.createElement(l.default.Fragment,null,a?(0,r.renderIcon)(a,"fd-list__icon"):null,l.default.createElement("span",{className:"fd-list__title"},s),o?(0,r.renderIcon)(o,"fd-list__icon"):null),v=["fd-list__item"];return t&&v.push(t),u&&v.push("fd-list__item--interractive"),d===i.ListTypes.NAVIGATION&&v.push("fd-list__item--link"),c&&v.push("is-selected"),f&&v.push("fd-list__item--unread"),l.default.createElement("li",{id:e||void 0,className:v.join(" "),role:d===i.ListTypes.DROPDOWN?"option":"listitem",tabIndex:d===i.ListTypes.NAVIGATION?-1:0,style:n,onClick:()=>(m&&m(),!1)},d===i.ListTypes.NAVIGATION?l.default.createElement("a",{className:"fd-list__link",tabIndex:0},p()):p())}},1665:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Menu=void 0;const l=a(n(7294)),r=n(7541);t.Menu=({className:e,style:t,compact:n,items:a,noShadow:i,onItemSelected:o})=>{const u=["fd-menu"];e&&u.push(e),n&&u.push("fd-menu--compact");const c=["fd-menu__list"];return i&&c.push("fd-menu__list--no-shadow"),l.default.createElement("nav",{className:u.join(" "),"aria-label":"options",role:"navigation",style:t},l.default.createElement("ul",{className:c.join(" "),role:"menu"},a.map(((e,t)=>l.default.createElement(r.MenuItem,Object.assign({},e,{key:`menu-item-${t}`,onItemSelected:()=>e.onItemSelected?e.onItemSelected():(e=>(o&&o(e),!1))(e)}))))))}},7541:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MenuItem=void 0;const l=a(n(7294));t.MenuItem=({className:e,style:t,active:n,disabled:a,hover:r,iconAfter:i,iconBefore:o,selected:u,shortcut:c,text:s,onItemSelected:d})=>{const f=["fd-menu__item"];e&&f.push(e);const m=["fd-menu__link"];return n&&m.push("is-active"),r&&m.push("is-hover"),u&&m.push("is-selected"),a&&m.push("is-disabled"),l.default.createElement("li",{className:f.join(" "),role:"presentation",style:t},l.default.createElement("a",{className:m.join(" "),role:"menuitem",onClick:()=>(d&&d(),!1)},o?l.default.createElement("span",{className:"fd-menu__addon-before"},l.default.createElement("i",{className:`sap-icon--${o}`,role:"presentation"})):null,l.default.createElement("span",{className:"fd-menu__title"},s),c?l.default.createElement("span",{className:"fd-menu__shortcut"},c):null,i?l.default.createElement("span",{className:"fd-menu__addon-after"},l.default.createElement("i",{className:`sap-icon--${i}`,role:"presentation"})):null))}},3417:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectIdentifier=void 0;const l=a(n(7294));t.ObjectIdentifier=({className:e,style:t,bold:n,medium:a,text:r,title:i})=>{const o=["fd-object-identifier"];e&&o.push(e),a&&o.push("fd-object-identifier--medium");const u=["fd-object-identifier__title"];return n&&u.push("fd-object-identifier__title--bold"),l.default.createElement("div",{className:o.join(" "),style:t},l.default.createElement("p",{className:u.join(" ")},i),r?l.default.createElement("p",{className:"fd-object-identifier__text"},r):null)}},225:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectList=void 0;const l=a(n(7294)),r=n(3610);t.ObjectList=({className:e,style:t,ariaLabeledBy:n,items:a,children:i,bordered:o})=>{const u=["fd-list fd-object-list"];return e&&u.push(e),o||u.push("fd-list--no-border"),l.default.createElement("ul",{className:u.join(" "),role:"list","aria-labelledby":n,style:t},null==a?void 0:a.map(((e,t)=>l.default.createElement(r.ObjectListItem,Object.assign({key:`item-${t}`},e)))),i)}},3610:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectListItem=void 0;const l=a(n(7294)),r=n(3723),i=n(8277),o=n(7778),u=n(3417),c=n(6519),s=n(3501),d=n(4279);t.ObjectListItem=({className:e,style:t,intro:n,avatar:a,title:c,info:s,attributes:d,children:m})=>{const p=["fd-list__item","fd-object-list__item"];return e&&p.push(e),l.default.createElement("li",{className:p.join(" "),style:Object.assign(Object.assign({},t),{height:"auto"}),role:"listitem",tabIndex:0},l.default.createElement("div",{className:"fd-object-list__container"},n?l.default.createElement("div",{className:"fd-object-list__intro"},n):null,s&&a&&c?l.default.createElement(f,{avatar:l.default.createElement(i.Avatar,Object.assign({},a,{size:r.Sizes.SMALL})),left:l.default.createElement(u.ObjectIdentifier,{className:"fd-object-list__object-identifier",title:c}),right:l.default.createElement(g,{type:s.type,props:s.props})}):null,l.default.createElement("div",{className:"fd-object-list__content"},null==d?void 0:d.map(((e,t)=>{var n;return l.default.createElement(v,{key:`attribute-${t}`},l.default.createElement(h,null,l.default.createElement(o.ObjectText,{text:e.name})),l.default.createElement(b,null,null===(n=e.items)||void 0===n?void 0:n.map(((e,n)=>l.default.createElement(g,Object.assign({key:`item-${t}-${n}`},e))))))})),m)))};const f=({avatar:e,left:t,right:n,children:a})=>l.default.createElement("div",{className:"fd-object-list__header"},e||a,t?l.default.createElement(m,null,t):null,n?l.default.createElement(p,null,n):null),m=({children:e})=>l.default.createElement("div",{className:"fd-object-list__header-left"},e),p=({children:e})=>l.default.createElement("div",{className:"fd-object-list__header-right"},e),v=({left:e,right:t,children:n})=>l.default.createElement("div",{className:"fd-object-list__row"},e?l.default.createElement(h,null,e):null,t?l.default.createElement(b,null,t):null,e||t?null:n),h=({children:e})=>l.default.createElement("div",{className:"fd-object-list__row-left"},e),b=({children:e})=>l.default.createElement("div",{className:"fd-object-list__row-right"},e),g=({type:e,props:t})=>{switch(e){case"attribute":return l.default.createElement(o.ObjectText,{text:t.text});case"marker":return l.default.createElement(c.ObjectMarker,{icon:t.icon,iconOnly:t.iconOnly,text:t.text});case"number":return l.default.createElement(s.ObjectNumber,{className:"fd-object-list__object-number",value:t.value,unit:t.unit});case"status":return l.default.createElement(d.ObjectStatus,{text:t.text,semantic:t.semantic});case"identifier":return l.default.createElement(u.ObjectIdentifier,{className:"fd-object-list__object-identifier",title:t.title});default:return null}}},6519:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectMarker=void 0;const l=a(n(7294));t.ObjectMarker=({className:e,style:t,icon:n,iconOnly:a,text:r})=>{const i=["fd-object-marker"];return e&&i.push(e),l.default.createElement("div",{className:i.join(" "),style:t},n?l.default.createElement("i",{className:`fd-object-marker__icon sap-icon--${n}`,"aria-label":a?r:void 0,role:a?void 0:"presentation"}):null,!a&&r?l.default.createElement("span",{className:"fd-object-marker__text"},r):null)}},3501:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectNumber=void 0;const l=a(n(7294));t.ObjectNumber=({className:e,style:t,bold:n,large:a,semantic:r,unit:i,value:o})=>{const u=["fd-object-number"];e&&u.push(e),a&&u.push("fd-object-number--large"),r&&u.push(`fd-object-number--${r}`);const c=["fd-object-number__text"];return n&&c.push("fd-object-number__text--bold"),l.default.createElement("span",{className:u.join(" "),style:t},l.default.createElement("span",{className:c.join(" ")},o),l.default.createElement("span",{className:"fd-object-number__unit"},i))}},4279:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectStatus=void 0;const l=a(n(7294));t.ObjectStatus=({className:e,style:t,icon:n,iconOnly:a,inverted:r,large:i,semantic:o,text:u})=>{const c=["fd-object-status"];return e&&c.push(e),o&&c.push(`fd-object-status--${o}`),r&&c.push("fd-object-status--inverted"),i&&c.push("fd-object-status--large"),l.default.createElement("span",{className:c.join(" "),style:t},n?l.default.createElement("i",{className:`fd-object-status__icon sap-icon--${n}`,"aria-label":a?u:void 0,role:a?void 0:"presentation"}):null,a?null:l.default.createElement("span",{className:"fd-object-status__text"},u))}},7778:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectText=void 0;const l=a(n(7294));t.ObjectText=({className:e,style:t,text:n})=>{const a=["fd-object-text"];return e&&a.push(e),l.default.createElement("div",{className:a.join(" "),style:t},n)}},2192:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Page=void 0;const l=a(n(7294));n(6040),t.Page=({className:e,style:t,children:[n,a,r]})=>{const i=["ap-fd-page"];return e&&i.push(e),l.default.createElement("div",{className:i.join(" "),style:t},n,l.default.createElement("div",{className:"ap-fd-page__content"},a,r))}},8087:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PageBody=void 0;const l=a(n(7294));t.PageBody=({className:e,style:t,children:n})=>{const a=["ap-fd-page__body"];return e&&a.push(e),l.default.createElement("div",{className:a.join(" "),style:t},n)}},8327:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PageFooter=void 0;const l=a(n(7294));t.PageFooter=({className:e,style:t,children:n})=>{const a=["ap-fd-page__footer"];return e&&a.push(e),l.default.createElement("div",{className:a.join(" "),style:t},n)}},9283:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.computeExpandable=t.computeExpanded=t.PageHeader=void 0;const i=r(n(7294)),o=n(2780),u=n(3723),c=n(3904),s=n(8277),d=n(9128),f=n(4326),m=n(3845),p=n(5791);n(6821),t.PageHeader=({className:e,style:n,actions:a,attributes:l,avatar:r,breadcrumb:v,expanded:h,hideBoxShadow:b,subtitle:g,title:E,onExpand:y})=>{const[_,A]=(0,i.useState)(!1),[S,C]=(0,i.useState)((0,t.computeExpanded)(h,y,l)),[x,w]=(0,i.useState)(!1);(0,i.useEffect)((()=>{A((0,t.computeExpandable)(l)),C((0,t.computeExpanded)(h,y,l))}),[h,l]);const O=(e,t)=>i.default.createElement(m.PageHeaderAttribute,Object.assign({},e,{key:t})),T=["ap-fd-page-header"];return e&&T.push(e),S&&T.push("ap-fd-page-header--expanded"),i.default.createElement("div",{className:T.join(" "),style:b?Object.assign(Object.assign({},n),{boxShadow:"none"}):n},i.default.createElement("div",{className:"ap-fd-page-header__controls"},i.default.createElement("div",{className:"ap-fd-page-header__controls__breadcrumb"},v),i.default.createElement("div",{className:"ap-fd-page-header__controls__title"},i.default.createElement("div",{style:{paddingTop:"0.3125rem",display:"flex"}},_&&S||!r?null:i.default.createElement(s.Avatar,Object.assign({},r,{className:"ap-fd-page-header__controls__title__avatar",ariaLabel:E,size:u.Sizes.SMALL})),i.default.createElement("div",null,i.default.createElement(p.Title,{className:"ap-fd-page-header__controls__title__title",level:c.TitleLevels.H1,text:E}),g?i.default.createElement(p.Title,{className:"ap-fd-page-header__controls__title__subtitle",level:c.TitleLevels.H6,text:g}):null)),a?i.default.createElement(d.Bar,{className:"ap-fd-page-header__controls__title__actions",right:a,type:o.BarTypes.HEADER_WITH_SUBHEADER}):null)),_&&S?i.default.createElement("div",{className:"ap-fd-page-header__content",style:{display:"flex",flexWrap:"wrap",gap:"1rem"}},r?i.default.createElement(s.Avatar,Object.assign({},r,{className:"ap-fd-page-header__content__avatar",ariaLabel:E})):null,l?(L=l,Array.isArray(L)?L.map(((e,t)=>O(e,`attribute-${t}`))):O(L)):null):null,_?i.default.createElement("div",{className:"ap-fd-page-header__expander"},i.default.createElement(f.Button,{className:"ap-fd-page-header__expander-button",icon:S?"slim-arrow-up":"slim-arrow-down",onClick:()=>{y?y(!S):C(!S)}}),i.default.createElement(f.Button,{className:"ap-fd-page-header__expander-button",icon:x?"pushpin-off":"pushpin-on",onClick:()=>{w(!x)}})):null);var L},t.computeExpanded=(e,n,a)=>void 0!==n?Boolean(e):"boolean"==typeof e?e:(0,t.computeExpandable)(a),t.computeExpandable=e=>Boolean(e&&(!Array.isArray(e)||e.length))},3845:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.PageHeaderAttribute=void 0;const i=r(n(7294)),o=n(6039),u=n(9347),c=n(4229),s=n(4279),d=n(7778);n(3788),t.PageHeaderAttribute=({className:e,style:t,accentColor:n,label:a,semantic:l,text:r,type:f})=>{const[m]=(0,i.useState)(`page-header-attribute-${o.UUID.next()}`),p=["ap-fd-page-header-attribute"];return e&&p.push(e),i.default.createElement("div",{className:p.join(" "),style:t},i.default.createElement("label",{className:"ap-fd-page-header-attribute__label",htmlFor:m},a),(()=>{switch(f){case u.PageHeaderAttributeTypes.INFO_LABEL:return i.default.createElement(c.InfoLabel,{className:"ap-fd-page-header-attribute__control",accentColor:n,text:r,style:{width:"fit-content"}});case u.PageHeaderAttributeTypes.STATUS:return i.default.createElement(s.ObjectStatus,{className:"ap-fd-page-header-attribute__control",semantic:l,text:r});case u.PageHeaderAttributeTypes.TEXT:return i.default.createElement(d.ObjectText,{className:"ap-fd-page-header-attribute__control",text:r});default:return null}})())}},7774:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Panel=void 0;const i=r(n(7294));t.Panel=({className:e,style:t,compact:n,expanded:a,expandable:l,title:r,toolbar:o,children:u})=>{const[c,s]=(0,i.useState)(null);(0,i.useEffect)((()=>{s(a)}),[a]);const d=["fd-panel"];return e&&d.push(e),n&&d.push("fd-panel--compact"),l||d.push("fd-panel--fixed"),i.default.createElement("div",{className:d.join(" "),style:t},i.default.createElement("div",{className:"fd-panel__header"},l?i.default.createElement("div",{className:"fd-panel__expand"},i.default.createElement("button",{className:"fd-button fd-button--compact fd-button--transparent fd-panel__button","aria-expanded":!!c,"aria-haspopup":"true","aria-controls":"panel-content","aria-labelledby":"panel-title",onClick:()=>{s(!c)}},i.default.createElement("i",{className:c?"sap-icon--slim-arrow-down":"sap-icon--slim-arrow-right"}))):null,i.default.createElement("h4",{className:"fd-panel__title",id:"panel-title"},r),o||null),i.default.createElement("div",{id:"panel-content",className:"fd-panel__content",role:"region","aria-hidden":!c},u))}},805:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Popover=void 0;const i=r(n(7294));t.Popover=({className:e,style:t,control:n,dropdown:a,noArrow:l,placement:r,preventOpen:o=!1,children:u})=>{const c=(0,i.useId)(),[s,d]=(0,i.useState)(!1),f=()=>{d(!1),window.removeEventListener("click",f),window.removeEventListener("scroll",f,!0),window.removeEventListener("resize",f,!0),window.removeEventListener("keyup",f,!0)},m=()=>{s?f():o||(d(!0),setTimeout((()=>{window.addEventListener("click",f),window.addEventListener("scroll",f,!0),window.addEventListener("resize",f,!0),window.addEventListener("keyup",f,!0)}),0))},p=["fd-popover"];e&&p.push(e);const v=["fd-popover__body"];return r&&(r.bodyPlacement&&v.push(`fd-popover__body--${r.bodyPlacement}`),r.bodyPosition&&v.push(`fd-popover__body--${r.bodyPosition}`),r.arrowPosition&&v.push(`fd-popover__body--${r.arrowPosition}`),r.arrowPlacement&&v.push(`fd-popover__body--${r.arrowPlacement}`)),l&&v.push("fd-popover__body--no-arrow"),a&&v.push("fd-popover__body--dropdown"),i.default.createElement("div",{className:p.join(" "),style:t},i.default.createElement("div",{className:"fd-popover__control"},(()=>{if(i.default.isValidElement(n)){const e={onClick:m};return"string"==typeof n.type?(e["aria-controls"]=c,e["aria-expanded"]=s,e["aria-haspopup"]=!0,e.role="button"):(e.ariaControls=c,e.ariaExpanded=s,e.ariaHaspopup=!0),i.default.cloneElement(n,e)}return n})()),i.default.createElement("div",{className:v.join(" "),"aria-hidden":!s,id:c},u))}},7674:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Select=void 0;const l=a(n(7294)),r=n(5571),i=n(3284),o=n(3595),u=n(805);t.Select=({className:e,style:t,alignRight:n,compact:a,items:c,placeholder:s,state:d,stateMessage:f,value:m,onChange:p})=>{const v=["fd-select"];e&&v.push(e),a&&v.push("fd-select--compact");const h=["fd-select__control"];return d&&h.push(`is-${d}`),l.default.createElement(u.Popover,{style:t,control:l.default.createElement("div",{className:v.join(" ")},l.default.createElement("button",{className:h.join(" "),tabIndex:0,value:m||s},l.default.createElement("span",{className:"fd-select__text-content"},m||s),l.default.createElement("span",{className:"fd-button fd-select__button fd-button--transparent"},l.default.createElement("i",{className:"sap-icon--slim-arrow-down"})))),placement:n?i.PopoverPlacements.BOTTOM_END:void 0,dropdown:!0,noArrow:!0},l.default.createElement(o.List,{compact:a,items:c,state:d,stateMessage:f,type:r.ListTypes.DROPDOWN,onItemSelected:e=>{p(e)}}))}},7893:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ShellBar=void 0;const l=a(n(7294)),r=n(3284),i=n(3723),o=n(8277),u=n(1665),c=n(805);n(3281),t.ShellBar=({className:e,style:t,logo:n,logoAlt:a,title:s,subTitle:d,actions:f,profile:m})=>{const p=["fd-shellbar"];return e&&p.push(e),l.default.createElement("div",{className:p.join(" "),style:t},l.default.createElement("div",{className:"fd-shellbar__group fd-shellbar__group--product"},l.default.createElement("span",{className:"fd-shellbar__logo"},l.default.createElement("img",{src:n,width:"48",height:"24",alt:a})),l.default.createElement("span",{className:"fd-shellbar__title"},s),d?l.default.createElement("div",{className:"fd-shellbar__subtitle"},d):null),l.default.createElement("div",{className:"fd-shellbar__group fd-shellbar__group--actions"},null==f?void 0:f.map(((e,t)=>l.default.createElement("div",{key:`action-${t}`,className:"fd-shellbar__action fd-shellbar__action--desktop"},e))),m?l.default.createElement("div",{className:"fd-shellbar__action"},l.default.createElement(c.Popover,{placement:r.PopoverPlacements.BOTTOM_END,control:l.default.createElement(o.Avatar,{ariaLabel:m.name,initials:m.initials,size:i.Sizes.X_SMALL,circle:!0})},l.default.createElement(u.Menu,{items:m.menu,noShadow:!0}))):null))}},524:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Table=t.TableCellIndicators=void 0;const l=a(n(7294)),r=n(4111),i=n(5270),o=n(9027);n(7844),t.TableCellIndicators={VALID:"valid",WARNING:"warning",ERROR:"error",INFORMATION:"information"},t.Table=({className:e,style:t,borderedHorizontal:n,borderedVertical:a,compact:u,indicator:c,columns:s,rows:d,showHeaders:f=!0,onRowClick:m,children:p})=>{const v=["fd-table"];return e&&v.push(e),a||v.push("fd-table--no-vertical-borders"),n||v.push("fd-table--no-horizontal-borders"),u&&v.push("fd-table--compact"),l.default.createElement("table",{className:v.join(" "),style:t},f?l.default.createElement("thead",{className:"fd-table__header"},l.default.createElement(o.TableRow,null,l.default.createElement(l.default.Fragment,null,c?l.default.createElement(r.TableCell,{type:"status-indicator"}):null,s.map((e=>l.default.createElement(i.TableHeaderCell,{key:e.key,type:e.type},l.default.createElement("span",null,e.name))))))):null,l.default.createElement("tbody",{className:"fd-table__body"},null==d?void 0:d.map(((e,t)=>l.default.createElement(o.TableRow,{key:e.data.id,activable:e.activable,hoverable:e.hoverable,onClick:()=>{return t=e.data.id,void(m&&m(t));var t}},l.default.createElement(l.default.Fragment,null,c?l.default.createElement(r.TableCell,{type:"status-indicator",indicator:e.indicator}):null,s.map((t=>{const n=t.render||(e=>l.default.createElement("span",{className:"fd-table__cell__label"},t.formatter?t.formatter(e):e[t.key]));return l.default.createElement(r.TableCell,{key:t.key},n(e.data))})))))),p))}},4111:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TableCell=void 0;const l=a(n(7294));t.TableCell=({className:e,style:t,type:n,indicator:a,activable:r,hoverable:i,children:o})=>{const u=["fd-table__cell"];return e&&u.push(e),n&&u.push(`fd-table__cell--${n}`),"status-indicator"===n&&a&&u.push(`fd-table__cell--status-indicator--${a}`),r&&u.push("fd-table__cell--activable"),i&&u.push("fd-table__cell--hoverable"),l.default.createElement("td",{className:u.join(" "),style:t},o)}},5270:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TableHeaderCell=void 0;const l=a(n(7294));t.TableHeaderCell=({className:e,style:t,type:n,children:a})=>{const r=["fd-table__cell"];return e&&r.push(e),n&&r.push(`fd-table__cell--${n}`),l.default.createElement("th",{className:r.join(" "),scope:"col",style:t},a)}},9027:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TableRow=void 0;const l=a(n(7294));t.TableRow=({className:e,style:t,activable:n,hoverable:a,onClick:r,children:i})=>{const o=["fd-table__row"];return e&&o.push(e),n&&o.push("fd-table__row--activable"),a&&o.push("fd-table__row--hoverable"),l.default.createElement("tr",{className:o.join(" "),style:t,onClick:r},i)}},9268:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Tile=void 0;const l=a(n(7294)),r=n(3723);t.Tile=({className:e,style:t,badge:n,double:a,footer:i,size:o=r.Sizes.LARGE,subTitle:u,title:c,onClick:s,children:d})=>{const f=["fd-tile"];return e&&f.push(e),a&&f.push("fd-tile--double"),o&&f.push(`fd-tile--${o}`),l.default.createElement("div",{className:f.join(" "),role:"button",tabIndex:0,onClick:()=>{s&&s()},style:t},n?l.default.createElement("div",{className:"fd-badge"},n):null,l.default.createElement("div",{className:"fd-tile__header"},c?l.default.createElement("div",{className:"fd-tile__title"},c):null,u?l.default.createElement("div",{className:"fd-tile__subtitle"},u):null),l.default.createElement("div",{className:"fd-tile__content"},d),i?l.default.createElement("div",{className:"fd-tile__footer"},l.default.createElement("span",{className:"fd-tile__footer-text"},i)):null)}},6056:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TileContainer=void 0;const l=a(n(7294));t.TileContainer=({className:e,style:t,children:n})=>{const a=["fd-tile fd-tile-container"];return e&&a.push(e),l.default.createElement("div",{className:a.join(" "),style:Object.assign(Object.assign({},t),{minHeight:0,maxHeight:"none",height:"auto",minWidth:0,maxWidth:"none",width:"100%"})},n)}},153:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TileContentNumeric=void 0;const l=a(n(7294)),r=n(3723);t.TileContentNumeric=({className:e,style:t,semantic:n,size:a=r.Sizes.LARGE,value:i})=>{const o=["fd-numeric-content"];e&&o.push(e),a&&o.push(`fd-numeric-content--${a}`);const u=["fd-numeric-content__kpi"];return n&&u.push(`fd-numeric-content__kpi--${n}`),l.default.createElement("div",{className:o.join(" "),style:t},l.default.createElement("div",{className:"fd-numeric-content__kpi-container"},l.default.createElement("div",{className:u.join(" ")},i)))}},5791:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Title=void 0;const l=a(n(7294)),r=n(3904);t.Title=({className:e,style:t,level:n,levelVisual:a,text:i,wrap:o})=>{const u=["fd-title"];switch(u.push(`fd-title--h${a||n||r.TitleLevels.H1}`),e&&u.push(e),o&&u.push("fd-title--wrap"),n){case r.TitleLevels.H6:return l.default.createElement("h6",{className:u.join(" "),style:t},i);case r.TitleLevels.H5:return l.default.createElement("h5",{className:u.join(" "),style:t},i);case r.TitleLevels.H4:return l.default.createElement("h4",{className:u.join(" "),style:t},i);case r.TitleLevels.H3:return l.default.createElement("h3",{className:u.join(" "),style:t},i);case r.TitleLevels.H2:return l.default.createElement("h2",{className:u.join(" "),style:t},i);default:return l.default.createElement("h1",{className:u.join(" "),style:t},i)}}},1054:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Toolbar=void 0;const l=a(n(7294)),r=n(3904),i=n(2744),o=n(5791);n(792),t.Toolbar=({className:e,style:t,active:n,clear:a,title:u,solid:c,titleLevel:s=r.TitleLevels.H4,transparent:d,children:f})=>{const m=["fd-toolbar"];return e&&m.push(e),n&&m.push("fd-toolbar-active"),u&&m.push("fd-toolbar--title"),a&&m.push("fd-toolbar--clear"),d&&m.push("fd-toolbar--transparent"),c&&m.push("fd-toolbar--solid"),l.default.createElement("div",{className:m.join(" "),style:t},u?l.default.createElement(o.Title,{className:"fd-toolbar__title",level:s,text:u}):null,l.default.createElement(i.ToolbarSpacer,null),f)}},5703:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ToolbarSeparator=void 0;const l=a(n(7294));t.ToolbarSeparator=()=>l.default.createElement("span",{className:"fd-toolbar__separator"})},2744:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ToolbarSpacer=void 0;const l=a(n(7294));t.ToolbarSpacer=()=>l.default.createElement("span",{className:"fd-toolbar__spacer"})},4419:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.VerticalNavigation=void 0;const l=a(n(7294)),r=n(8927);t.VerticalNavigation=({className:e,style:t,condensed:n,label:a,items:i,itemsLabel:o,onItemSelect:u,children:c})=>{const s=["fd-vertical-nav"];return e&&s.push(e),n&&s.push("fd-vertical-nav--condensed"),l.default.createElement("div",{className:s.join(" "),style:t},l.default.createElement("nav",{className:"fd-vertical-nav__main-navigation","aria-label":a},l.default.createElement("ul",{className:"fd-list","aria-label":o},null==i?void 0:i.map((e=>l.default.createElement(r.VerticalNavigationItem,{key:e.id,className:e.className,id:e.id,condensed:n||e.condensed,expanded:e.expanded,items:e.items,icon:e.icon,text:e.text,selected:e.selected,onClick:e.onClick||u}))),c)))}},8927:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n);var l=Object.getOwnPropertyDescriptor(t,n);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,a,l)}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return l(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.VerticalNavigationItem=void 0;const i=r(n(7294));t.VerticalNavigationItem=({className:e,style:n,id:a,condensed:l,expanded:r,icon:o,items:u,selected:c,text:s,onClick:d,children:f})=>{const[m,p]=(0,i.useState)(r),v=Boolean(null==u?void 0:u.length)||Boolean(f),h=["fd-list__navigation-item"];e&&h.push(e),l&&h.push("fd-list__navigation-item--condensed"),v&&h.push("fd-list__navigation-item--expandable"),m&&h.push("is-expanded"),c&&h.push("fd-list__navigation-item--indicated");const b=["fd-list__navigation-item-arrow"];return m?(b.push("is-expanded"),b.push("sap-icon--navigation-down-arrow")):b.push("sap-icon--navigation-right-arrow"),i.default.createElement("li",{className:h.join(" "),style:n,tabIndex:0,onClick:e=>{d&&a&&(e.stopPropagation(),d(a))},onKeyUp:e=>{switch(e.code){case"Enter":case"Space":d&&a&&(e.stopPropagation(),d(a))}}},o?i.default.createElement("i",{className:`fd-list__navigation-item-icon sap-icon--${o}`,role:"presentation"}):null,i.default.createElement("span",{className:"fd-list__navigation-item-text"},s),v?i.default.createElement("button",{className:b.join(" "),"aria-label":"Expand second submenu",onClick:()=>p(!m)}):null,v&&m?i.default.createElement("ul",{className:"fd-list"},null==u?void 0:u.map((e=>i.default.createElement(t.VerticalNavigationItem,{key:e.id,className:e.className,style:n||e.style,id:e.id,condensed:l||e.condensed,expanded:e.expanded,icon:e.icon,items:e.items,selected:e.selected,text:e.text,onClick:d}))),f):null)}},7517:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AccentColors=void 0,t.AccentColors={COLOR_1:"accent-color-1",COLOR_2:"accent-color-2",COLOR_3:"accent-color-3",COLOR_4:"accent-color-4",COLOR_5:"accent-color-5",COLOR_6:"accent-color-6",COLOR_7:"accent-color-7",COLOR_8:"accent-color-8",COLOR_9:"accent-color-9",COLOR_10:"accent-color-10"}},2545:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AvatarDesigns=void 0,t.AvatarDesigns={PLACEHOLDER:"placeholder",SHELL:"shell",TILE:"tile",TRANSPARENT:"transparent"}},2780:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BarTypes=void 0,t.BarTypes={HEADER:"header",HEADER_WITH_SUBHEADER:"header-with-subheader",SUBHEADER:"subheader",FOOTER:"footer",FOOTER_FLOATING:"floating-footer"}},9313:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BusyIndicatorSizes=void 0,t.BusyIndicatorSizes={SMALL:"s",MEDIUM:"m",LARGE:"l"}},5958:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonDesigns=void 0,t.ButtonDesigns={EMPHASIZED:"emphasized",GHOST:"ghost",POSITIVE:"positive",NEGATIVE:"negative",ATTENTION:"attention",TRANSPARENT:"transparent"}},1903:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonTypes=void 0,t.ButtonTypes={BUTTON:"button",SUBMIT:"submit",RESET:"reset"}},2438:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.IconDesigns=void 0,t.IconDesigns={CONTRAST:"contrast",NON_INTERACTIVE:"non-interactive",TILE:"tile",MARKER:"marker",CRITICAL:"critical",NEGATIVE:"negative",NEUTRAL:"neutral",POSITIVE:"positive",INFORMATION:"information"}},2569:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.IconTabBarDesigns=void 0,t.IconTabBarDesigns={ICON:"icon",ICON_ONLY:"icon-only",COUNTERS:"counters"}},6273:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InputStates=void 0,t.InputStates={SUCCESS:"success",ERROR:"error",WARNING:"warning",INFORMATION:"information"}},6414:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InputTypes=void 0,t.InputTypes={TEXT:"text",PASSWORD:"password"}},2652:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LinkDesigns=void 0,t.LinkDesigns={EMPHASIZED:"emphasized",SUBTLE:"subtle",INVERTED:"inverted"}},5571:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ListTypes=void 0,t.ListTypes={DROPDOWN:"dropdown",NAVIGATION:"navigation"}},9347:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PageHeaderAttributeTypes=void 0,t.PageHeaderAttributeTypes={INFO_LABEL:"infolabel",TEXT:"text",STATUS:"status"}},3284:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PopoverPlacements=void 0,t.PopoverPlacements={ABOVE_START:{bodyPlacement:"above",bodyPosition:void 0,arrowPlacement:"arrow-bottom",arrowPosition:void 0},ABOVE_CENTER:{bodyPlacement:"above",bodyPosition:"center",arrowPlacement:"arrow-bottom",arrowPosition:"arrow-x-center"},ABOVE_END:{bodyPlacement:"above",bodyPosition:"right",arrowPlacement:"arrow-bottom",arrowPosition:"arrow-x-end"},BEFORE_START:{bodyPlacement:"before",bodyPosition:void 0,arrowPlacement:"arrow-right",arrowPosition:void 0},BEFORE_CENTER:{bodyPlacement:"before",bodyPosition:"middle",arrowPlacement:"arrow-right",arrowPosition:"arrow-y-center"},BEFORE_END:{bodyPlacement:"before",bodyPosition:"bottom",arrowPlacement:"arrow-right",arrowPosition:"arrow-y-end"},BOTTOM_START:{bodyPlacement:void 0,bodyPosition:void 0,arrowPlacement:void 0,arrowPosition:void 0},BOTTOM_CENTER:{bodyPlacement:void 0,bodyPosition:"center",arrowPlacement:void 0,arrowPosition:"arrow-x-center"},BOTTOM_END:{bodyPlacement:void 0,bodyPosition:"right",arrowPlacement:void 0,arrowPosition:"arrow-x-end"},AFTER_START:{bodyPlacement:"after",bodyPosition:void 0,arrowPlacement:"arrow-left",arrowPosition:void 0},AFTER_CENTER:{bodyPlacement:"after",bodyPosition:"middle",arrowPlacement:"arrow-left",arrowPosition:"arrow-y-center"},AFTER_END:{bodyPlacement:"after",bodyPosition:"bottom",arrowPlacement:"arrow-left",arrowPosition:"arrow-y-end"}}},9041:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Semantics=void 0,t.Semantics={POSITIVE:"positive",NEGATIVE:"negative",CRITICAL:"critical",INFORMATIVE:"informative"}},3723:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Sizes=void 0,t.Sizes={X_SMALL:"xs",SMALL:"s",MEDIUM:"m",LARGE:"l",X_LARGE:"xl"}},497:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Themes=t.Theme=void 0,t.Theme={FIORI_3:{id:"sap_fiori_3",name:"Fiori 3",family:"fiori3"},FIORI_3_DARK:{id:"sap_fiori_3_dark",name:"Fiori 3 Dark",family:"fiori3"},FIORI_3_HCB:{id:"sap_fiori_3_hcb",name:"Fiori 3 High Contrast Black",family:"fiori3"},FIORI_3_HCW:{id:"sap_fiori_3_hcw",name:"Fiori 3 High Contrast White",family:"fiori3"},FIORI_3_LIGHT_DARK:{id:"sap_fiori_3_light_dark",name:"Fiori 3 High Light Dark",family:"fiori3"},HORIZON:{id:"sap_horizon",name:"Horizon",family:"horizon"},HORIZON_DARK:{id:"sap_horizon_dark",name:"Horizon Dark",family:"horizon"},HORIZON_HCB:{id:"sap_horizon_hcb",name:"Horizon High Contrast Black",family:"horizon"},HORIZON_HCW:{id:"sap_horizon_hcw",name:"Horizon High Contrast White",family:"horizon"}},t.Themes=Object.values(t.Theme)},3904:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TitleLevels=void 0,t.TitleLevels={H1:1,H2:2,H3:3,H4:4,H5:5,H6:6}},8660:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.renderIcon=void 0;const l=a(n(7294)),r=n(7876);t.renderIcon=(e,t)=>{if("string"==typeof e)return l.default.createElement(r.Icon,{className:t,icon:e});const n=(e.className||"").split(" ");return t&&!n.includes(t)&&n.push(t),l.default.createElement(r.Icon,Object.assign({},e,{className:n.join(" ")}))}},1175:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.injectThemeCss=t.injectCss=void 0,t.injectCss=(e,t)=>new Promise(((n,a)=>{const l=document.getElementById(e);l&&l.setAttribute("id",`${e}-old`);const r=document.createElement("link");r.setAttribute("id",e),r.setAttribute("rel","stylesheet"),r.setAttribute("href",t),r.addEventListener("load",(()=>{l&&l.parentNode&&l.parentNode.removeChild(l),n()})),r.addEventListener("error",(()=>{l&&l.parentNode&&l.parentNode.removeChild(l),a()})),document.head.appendChild(r)})),t.injectThemeCss=e=>{let n="";return-1!==window.location.href.indexOf("ap-fundamentals-react")&&(n="/ap-fundamentals-react"),Promise.allSettled([(0,t.injectCss)("theming-icons",`${n}/fundamentals-icons-${e.family}.css`),(0,t.injectCss)("theming-base-content",`${n}/theme/${e.id}/css_variables.css`),(0,t.injectCss)("theming",`${n}/theme/${e.id}/${e.id}.css`)])}},6042:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.COMPONENTS=t.COMPONENT=void 0;const a=n(6884),l=n(7532),r=n(6533),i=n(5030),o=n(1055),u=n(7340),c=n(1974),s=n(3242),d=n(6661),f=n(7663),m=n(9033),p=n(8438),v=n(1134),h=n(4757),b=n(6170),g=n(6446),E=n(74),y=n(8398),_=n(6226),A=n(6358),S=n(3675),C=n(5135),x=n(7688),w=n(8165),O=n(6615),T=n(7055),L=n(2612),P=n(8566),I=n(7026),N=n(4392);t.COMPONENT={AVATAR:{id:"avatar",text:"Avatar",demo:a.AvatarDemo},BAR:{id:"bar",text:"Bar",demo:l.BarDemo},BREADCRUMB:{id:"breadcrumb",text:"Breadcrumb",demo:r.BreadcrumbDemo},BUSY_INDICATOR:{id:"busyindicator",text:"Busy Indicator",demo:i.BusyIndicatorDemo},BUTTON:{id:"button",text:"Button",demo:o.ButtonDemo},CALENDAR:{id:"calendar",text:"Calendar",demo:u.CalendarDemo},CARD:{id:"card",text:"Card",demo:c.CardDemo},DIALOG:{id:"dialog",text:"Dialog",demo:s.DialogDemo},FORM:{id:"form",text:"Form",demo:d.FormDemo},FORM_CHECK_BOX:{id:"formcheckbox",text:"Form CheckBox",demo:f.FormCheckBoxDemo},FORM_INPUT:{id:"forminput",text:"Form Input",demo:m.FormInputDemo},FORM_STEP_INPUT:{id:"formstepinput",text:"Form Step Input",demo:p.FormStepInputDemo},FORM_TEXT_AREA:{id:"formtextarea",text:"Form Text Area",demo:v.FormTextAreaDemo},ICON:{id:"icon",text:"Icon",demo:h.IconDemo},ICON_TAB_BAR:{id:"icontabbar",text:"IconTabBar",demo:b.IconTabBarDemo},INFO_LABEL:{id:"infolabel",text:"InfoLabel",demo:g.InfoLabelDemo},LIST:{id:"list",text:"List",demo:E.ListDemo},LINK:{id:"link",text:"Link",demo:y.LinkDemo},MENU:{id:"menu",text:"Menu",demo:_.MenuDemo},OBJECT:{id:"object",text:"Object",demo:A.ObjectDemo},PAGE:{id:"page",text:"Page",demo:S.PageDemo},PANEL:{id:"panel",text:"Panel",demo:C.PanelDemo},POPOVER:{id:"popover",text:"Popover",demo:x.PopoverDemo},SELECT:{id:"select",text:"Select",demo:w.SelectDemo},SHELL_BAR:{id:"shellbar",text:"ShellBar",demo:O.ShellBarDemo},TABLE:{id:"table",text:"Table",demo:T.TableDemo},TILE:{id:"tile",text:"Tile",demo:L.TileDemo},TITLE:{id:"title",text:"Title",demo:P.TitleDemo},TOOLBAR:{id:"toolbar",text:"Toolbar",demo:I.ToolbarDemo},VERTICAL_NAVIGATION:{id:"verticalnavigation",text:"VerticalNavigation",demo:N.VerticalNavigationDemo}},t.COMPONENTS=Object.values(t.COMPONENT)},2531:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectIdentifier=t.ObjectText=t.Menu=t.Link=t.List=t.InfoLabel=t.IconTabBarItem=t.IconTabBar=t.Icon=t.FormTextArea=t.FormStepInput=t.FormSelect=t.FormInput=t.FormCheckBox=t.DialogFooter=t.DialogHeader=t.Dialog=t.CardFooter=t.CardHeader=t.Card=t.Calendar=t.SegmentedButton=t.Button=t.BusyIndicator=t.Breadcrumb=t.BarRight=t.BarMiddle=t.BarLeft=t.BarElement=t.Bar=t.Avatar=t.TitleLevels=t.Themes=t.Theme=t.Sizes=t.Semantics=t.PopoverPlacements=t.PageHeaderAttributeTypes=t.LinkTypes=t.ListTypes=t.InputTypes=t.InputStates=t.IconTabBarDesigns=t.IconDesigns=t.ButtonTypes=t.ButtonDesigns=t.BusyIndicatorSizes=t.BarTypes=t.AvatarDesigns=t.AccentColors=void 0,t.VerticalNavigationItem=t.VerticalNavigation=t.ToolbarSpacer=t.ToolbarSeparator=t.Toolbar=t.Title=t.TileContentNumeric=t.TileContainer=t.Tile=t.TableRow=t.TableHeaderCell=t.TableCell=t.Table=t.ShellBar=t.Select=t.Popover=t.Panel=t.PageFooter=t.PageBody=t.PageHeaderAttribute=t.PageHeader=t.Page=t.ObjectStatus=t.ObjectNumber=t.ObjectMarker=t.ObjectListItem=t.ObjectList=void 0;var a=n(7517);Object.defineProperty(t,"AccentColors",{enumerable:!0,get:function(){return a.AccentColors}});var l=n(2545);Object.defineProperty(t,"AvatarDesigns",{enumerable:!0,get:function(){return l.AvatarDesigns}});var r=n(2780);Object.defineProperty(t,"BarTypes",{enumerable:!0,get:function(){return r.BarTypes}});var i=n(9313);Object.defineProperty(t,"BusyIndicatorSizes",{enumerable:!0,get:function(){return i.BusyIndicatorSizes}});var o=n(5958);Object.defineProperty(t,"ButtonDesigns",{enumerable:!0,get:function(){return o.ButtonDesigns}});var u=n(1903);Object.defineProperty(t,"ButtonTypes",{enumerable:!0,get:function(){return u.ButtonTypes}});var c=n(2438);Object.defineProperty(t,"IconDesigns",{enumerable:!0,get:function(){return c.IconDesigns}});var s=n(2569);Object.defineProperty(t,"IconTabBarDesigns",{enumerable:!0,get:function(){return s.IconTabBarDesigns}});var d=n(6273);Object.defineProperty(t,"InputStates",{enumerable:!0,get:function(){return d.InputStates}});var f=n(6414);Object.defineProperty(t,"InputTypes",{enumerable:!0,get:function(){return f.InputTypes}});var m=n(5571);Object.defineProperty(t,"ListTypes",{enumerable:!0,get:function(){return m.ListTypes}});var p=n(2652);Object.defineProperty(t,"LinkTypes",{enumerable:!0,get:function(){return p.LinkDesigns}});var v=n(9347);Object.defineProperty(t,"PageHeaderAttributeTypes",{enumerable:!0,get:function(){return v.PageHeaderAttributeTypes}});var h=n(3284);Object.defineProperty(t,"PopoverPlacements",{enumerable:!0,get:function(){return h.PopoverPlacements}});var b=n(9041);Object.defineProperty(t,"Semantics",{enumerable:!0,get:function(){return b.Semantics}});var g=n(3723);Object.defineProperty(t,"Sizes",{enumerable:!0,get:function(){return g.Sizes}});var E=n(497);Object.defineProperty(t,"Theme",{enumerable:!0,get:function(){return E.Theme}}),Object.defineProperty(t,"Themes",{enumerable:!0,get:function(){return E.Themes}});var y=n(3904);Object.defineProperty(t,"TitleLevels",{enumerable:!0,get:function(){return y.TitleLevels}});var _=n(8277);Object.defineProperty(t,"Avatar",{enumerable:!0,get:function(){return _.Avatar}});var A=n(9128);Object.defineProperty(t,"Bar",{enumerable:!0,get:function(){return A.Bar}});var S=n(4413);Object.defineProperty(t,"BarElement",{enumerable:!0,get:function(){return S.BarElement}});var C=n(3494);Object.defineProperty(t,"BarLeft",{enumerable:!0,get:function(){return C.BarLeft}});var x=n(2574);Object.defineProperty(t,"BarMiddle",{enumerable:!0,get:function(){return x.BarMiddle}});var w=n(2300);Object.defineProperty(t,"BarRight",{enumerable:!0,get:function(){return w.BarRight}});var O=n(8677);Object.defineProperty(t,"Breadcrumb",{enumerable:!0,get:function(){return O.Breadcrumb}});var T=n(7289);Object.defineProperty(t,"BusyIndicator",{enumerable:!0,get:function(){return T.BusyIndicator}});var L=n(4326);Object.defineProperty(t,"Button",{enumerable:!0,get:function(){return L.Button}});var P=n(6232);Object.defineProperty(t,"SegmentedButton",{enumerable:!0,get:function(){return P.SegmentedButton}});var I=n(8681);Object.defineProperty(t,"Calendar",{enumerable:!0,get:function(){return I.Calendar}});var N=n(6369);Object.defineProperty(t,"Card",{enumerable:!0,get:function(){return N.Card}});var D=n(3824);Object.defineProperty(t,"CardHeader",{enumerable:!0,get:function(){return D.CardHeader}});var k=n(6864);Object.defineProperty(t,"CardFooter",{enumerable:!0,get:function(){return k.CardFooter}});var R=n(9456);Object.defineProperty(t,"Dialog",{enumerable:!0,get:function(){return R.Dialog}});var M=n(9929);Object.defineProperty(t,"DialogHeader",{enumerable:!0,get:function(){return M.DialogHeader}});var B=n(8329);Object.defineProperty(t,"DialogFooter",{enumerable:!0,get:function(){return B.DialogFooter}});var j=n(3088);Object.defineProperty(t,"FormCheckBox",{enumerable:!0,get:function(){return j.FormCheckBox}});var z=n(5291);Object.defineProperty(t,"FormInput",{enumerable:!0,get:function(){return z.FormInput}});var F=n(1074);Object.defineProperty(t,"FormSelect",{enumerable:!0,get:function(){return F.FormSelect}});var H=n(2923);Object.defineProperty(t,"FormStepInput",{enumerable:!0,get:function(){return H.FormStepInput}});var U=n(794);Object.defineProperty(t,"FormTextArea",{enumerable:!0,get:function(){return U.FormTextArea}});var W=n(7876);Object.defineProperty(t,"Icon",{enumerable:!0,get:function(){return W.Icon}});var $=n(1058);Object.defineProperty(t,"IconTabBar",{enumerable:!0,get:function(){return $.IconTabBar}});var V=n(5426);Object.defineProperty(t,"IconTabBarItem",{enumerable:!0,get:function(){return V.IconTabBarItem}});var G=n(4229);Object.defineProperty(t,"InfoLabel",{enumerable:!0,get:function(){return G.InfoLabel}});var q=n(3595);Object.defineProperty(t,"List",{enumerable:!0,get:function(){return q.List}});var X=n(6374);Object.defineProperty(t,"Link",{enumerable:!0,get:function(){return X.Link}});var Y=n(1665);Object.defineProperty(t,"Menu",{enumerable:!0,get:function(){return Y.Menu}});var Z=n(7778);Object.defineProperty(t,"ObjectText",{enumerable:!0,get:function(){return Z.ObjectText}});var K=n(3417);Object.defineProperty(t,"ObjectIdentifier",{enumerable:!0,get:function(){return K.ObjectIdentifier}});var Q=n(225);Object.defineProperty(t,"ObjectList",{enumerable:!0,get:function(){return Q.ObjectList}});var J=n(3610);Object.defineProperty(t,"ObjectListItem",{enumerable:!0,get:function(){return J.ObjectListItem}});var ee=n(6519);Object.defineProperty(t,"ObjectMarker",{enumerable:!0,get:function(){return ee.ObjectMarker}});var te=n(3501);Object.defineProperty(t,"ObjectNumber",{enumerable:!0,get:function(){return te.ObjectNumber}});var ne=n(4279);Object.defineProperty(t,"ObjectStatus",{enumerable:!0,get:function(){return ne.ObjectStatus}});var ae=n(2192);Object.defineProperty(t,"Page",{enumerable:!0,get:function(){return ae.Page}});var le=n(9283);Object.defineProperty(t,"PageHeader",{enumerable:!0,get:function(){return le.PageHeader}});var re=n(3845);Object.defineProperty(t,"PageHeaderAttribute",{enumerable:!0,get:function(){return re.PageHeaderAttribute}});var ie=n(8087);Object.defineProperty(t,"PageBody",{enumerable:!0,get:function(){return ie.PageBody}});var oe=n(8327);Object.defineProperty(t,"PageFooter",{enumerable:!0,get:function(){return oe.PageFooter}});var ue=n(7774);Object.defineProperty(t,"Panel",{enumerable:!0,get:function(){return ue.Panel}});var ce=n(805);Object.defineProperty(t,"Popover",{enumerable:!0,get:function(){return ce.Popover}});var se=n(7674);Object.defineProperty(t,"Select",{enumerable:!0,get:function(){return se.Select}});var de=n(7893);Object.defineProperty(t,"ShellBar",{enumerable:!0,get:function(){return de.ShellBar}});var fe=n(524);Object.defineProperty(t,"Table",{enumerable:!0,get:function(){return fe.Table}});var me=n(4111);Object.defineProperty(t,"TableCell",{enumerable:!0,get:function(){return me.TableCell}});var pe=n(5270);Object.defineProperty(t,"TableHeaderCell",{enumerable:!0,get:function(){return pe.TableHeaderCell}});var ve=n(9027);Object.defineProperty(t,"TableRow",{enumerable:!0,get:function(){return ve.TableRow}});var he=n(9268);Object.defineProperty(t,"Tile",{enumerable:!0,get:function(){return he.Tile}});var be=n(6056);Object.defineProperty(t,"TileContainer",{enumerable:!0,get:function(){return be.TileContainer}});var ge=n(153);Object.defineProperty(t,"TileContentNumeric",{enumerable:!0,get:function(){return ge.TileContentNumeric}});var Ee=n(5791);Object.defineProperty(t,"Title",{enumerable:!0,get:function(){return Ee.Title}});var ye=n(1054);Object.defineProperty(t,"Toolbar",{enumerable:!0,get:function(){return ye.Toolbar}});var _e=n(5703);Object.defineProperty(t,"ToolbarSeparator",{enumerable:!0,get:function(){return _e.ToolbarSeparator}});var Ae=n(2744);Object.defineProperty(t,"ToolbarSpacer",{enumerable:!0,get:function(){return Ae.ToolbarSpacer}});var Se=n(4419);Object.defineProperty(t,"VerticalNavigation",{enumerable:!0,get:function(){return Se.VerticalNavigation}});var Ce=n(8927);Object.defineProperty(t,"VerticalNavigationItem",{enumerable:!0,get:function(){return Ce.VerticalNavigationItem}})},2509:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const l=a(n(7294)),r=n(9818),i=a(n(2420)),o=a(n(9266)),u=a(n(9240));t.default=()=>l.default.createElement(r.Routes,null,l.default.createElement(r.Route,{path:"*",element:l.default.createElement(i.default,null)},l.default.createElement(r.Route,{path:"components",element:l.default.createElement(o.default,null)},l.default.createElement(r.Route,{path:":componentId",element:l.default.createElement(u.default,null)}))))},9240:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.RouteComponent=void 0;const l=a(n(7294)),r=n(9818),i=n(6042);t.RouteComponent=()=>{const e=(0,r.useParams)().componentId,t=i.COMPONENTS.find((t=>t.id===e));return t?l.default.createElement(t.demo,null):l.default.createElement("div",null,"INDALID")},t.default=t.RouteComponent},9266:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.RouteComponents=void 0;const l=a(n(7294)),r=n(9818);t.RouteComponents=()=>l.default.createElement(r.Outlet,null),t.default=t.RouteComponents},2420:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const l=a(n(7294)),r=n(9818),i=n(4529),o=n(4110),u=n(5487);t.default=()=>l.default.createElement("div",{style:{display:"flex",flexDirection:"column",height:"100%"}},l.default.createElement("div",{style:{flexShrink:0}},l.default.createElement(i.AppHeader,null)),l.default.createElement("div",{style:{display:"flex",flexBasis:0,flexGrow:1,overflow:"hidden"}},l.default.createElement("div",{style:{overflow:"auto",flexShrink:0}},l.default.createElement(u.AppSidePanel,null)),l.default.createElement("div",{style:{flexBasis:0,flexGrow:1}},l.default.createElement(o.AppMainContent,null,l.default.createElement(r.Outlet,null)))))},8932:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.changeTheme=void 0;const l=a(n(6386)),r=n(1175);t.changeTheme=(e,t)=>{e(l.default.actions.setBusy({busy:!0,busyMessage:"Changing Theme"})),e(l.default.actions.setTheme({theme:t})),(0,r.injectThemeCss)(t).finally((()=>{e(l.default.actions.setBusy({busy:!1}))}))}},8989:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default={busy:e=>e.app.busy,theme:e=>e.app.theme}},6386:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const a=n(3629),l={busy:!1,busyMessage:"",theme:n(497).Theme.FIORI_3},r=(0,a.createSlice)({name:"app",initialState:l,reducers:{setBusy:(e,t)=>{const{busy:n,busyMessage:a}=t.payload;e.busy=n,e.busyMessage=n&&a||""},setTheme:(e,t)=>{e.theme=t.payload.theme}}});t.default=r},1079:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const l=n(3629),r=a(n(6386));t.default=(0,l.configureStore)({reducer:{app:r.default.reducer}})},3250:(e,t,n)=>{var a=n(7294),l="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},r=a.useState,i=a.useEffect,o=a.useLayoutEffect,u=a.useDebugValue;function c(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!l(e,n)}catch(e){return!0}}var s="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),a=r({inst:{value:n,getSnapshot:t}}),l=a[0].inst,s=a[1];return o((function(){l.value=n,l.getSnapshot=t,c(l)&&s({inst:l})}),[e,n,t]),i((function(){return c(l)&&s({inst:l}),e((function(){c(l)&&s({inst:l})}))}),[e]),u(n),n};t.useSyncExternalStore=void 0!==a.useSyncExternalStore?a.useSyncExternalStore:s},139:(e,t,n)=>{var a=n(7294),l=n(1688),r="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},i=l.useSyncExternalStore,o=a.useRef,u=a.useEffect,c=a.useMemo,s=a.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,a,l){var d=o(null);if(null===d.current){var f={hasValue:!1,value:null};d.current=f}else f=d.current;d=c((function(){function e(e){if(!u){if(u=!0,i=e,e=a(e),void 0!==l&&f.hasValue){var t=f.value;if(l(t,e))return o=t}return o=e}if(t=o,r(i,e))return t;var n=a(e);return void 0!==l&&l(t,n)?t:(i=e,o=n)}var i,o,u=!1,c=void 0===n?null:n;return[function(){return e(t())},null===c?void 0:function(){return e(c())}]}),[t,n,a,l]);var m=i(e,d[0],d[1]);return u((function(){f.hasValue=!0,f.value=m}),[m]),s(m),m}},1688:(e,t,n)=>{e.exports=n(3250)},2798:(e,t,n)=>{e.exports=n(139)}},a={};function l(e){var t=a[e];if(void 0!==t)return t.exports;var r=a[e]={id:e,exports:{}};return n[e].call(r.exports,r,r.exports,l),r.exports}l.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return l.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,l.t=function(n,a){if(1&a&&(n=this(n)),8&a)return n;if("object"==typeof n&&n){if(4&a&&n.__esModule)return n;if(16&a&&"function"==typeof n.then)return n}var r=Object.create(null);l.r(r);var i={};e=e||[null,t({}),t([]),t(t)];for(var o=2&a&&n;"object"==typeof o&&!~e.indexOf(o);o=t(o))Object.getOwnPropertyNames(o).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,l.d(r,i),r},l.d=(e,t)=>{for(var n in t)l.o(t,n)&&!l.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},l.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.nc=void 0,l(6212)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,