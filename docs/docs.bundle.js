/*! For license information please see docs.bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={6380:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default={LETTERS:{A:"a",B:"b",C:"c",D:"d",E:"e",F:"f",G:"g",H:"h",I:"i",J:"j",K:"k",L:"l",M:"m",N:"n",O:"o",P:"p",Q:"q",R:"r",S:"s",T:"t",U:"u",V:"v",W:"w",X:"x",Y:"y",Z:"z"}}},51:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.randomSubArray=t.shuffle=t.createIntArray=void 0,t.createIntArray=function(e){void 0===e&&(e=0);for(var t=[],n=0;n<e;n++)t.push(n);return t},t.shuffle=function(e){void 0===e&&(e=[]);for(var t=[].concat(e),n=[];t.length;){var r=Math.floor(Math.random()*t.length);n.push(t.splice(r,1)[0])}return n},t.randomSubArray=function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);for(var n=[].concat(e),r=[],a=0;a<t;a++){var l=Math.floor(Math.random()*n.length);r.push(n.splice(l,1)[0])}return r}},2920:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default={NEVER:"NEVER",FETCHING_FIRST:"FETCHING_FIRST",FETCHING:"FETCHING",SUCCESS:"SUCCESS",FAILURE:"FAILURE",OUTDATED:"OUTDATED"}},2684:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.mergeDataStates=void 0;var a=r(n(2920));t.mergeDataStates=function(e){return 0===e.length?a.default.NEVER:e.some((function(e){return e===a.default.FAILURE}))?a.default.FAILURE:e.some((function(e){return e===a.default.OUTDATED}))?a.default.OUTDATED:e.some((function(e){return e===a.default.NEVER}))?a.default.NEVER:e.some((function(e){return e===a.default.FETCHING_FIRST}))?a.default.FETCHING_FIRST:e.some((function(e){return e===a.default.FETCHING}))?a.default.FETCHING:a.default.SUCCESS}},207:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.nowString=t.dateString=t.normalizeTime=t.durationToHumanTime=t.TimeConstants=void 0;var n=1e3,r=36e5;t.TimeConstants={MIL_PER_SEC:n,SEC_PER_MIN:60,MIL_PER_MIN:6e4,MIN_PER_HOU:60,SEC_PER_HOU:3600,MIL_PER_HOU:r,HOU_PER_DAY:24,MIN_PER_DAY:1440,SEC_PER_DAY:86400,MIL_PER_DAY:864e5},t.durationToHumanTime=function(e){return{millis:e%n,seconds:Math.floor(e/n)%60,minutes:Math.floor(e/6e4)%60,hours:Math.floor(e/r)}},t.normalizeTime=function(e){return"".concat(e).padStart(2,"0")},t.dateString=function(e){var n=(0,t.normalizeTime)(e.getFullYear()),r=(0,t.normalizeTime)(e.getMonth()),a=(0,t.normalizeTime)(e.getDate()),l=(0,t.normalizeTime)(e.getHours()),o=(0,t.normalizeTime)(e.getMinutes()),i=(0,t.normalizeTime)(e.getSeconds());return"".concat(n,"-").concat(r,"-").concat(a," ").concat(l,":").concat(o,":").concat(i)},t.nowString=function(){return(0,t.dateString)(new Date(Date.now()))}},2993:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.decodeBasicHeader=t.encodeBasicHeader=t.decode=t.encode=void 0,t.encode=function(e){return void 0===e&&(e=""),Buffer.from(e).toString("base64")},t.decode=function(e){return void 0===e&&(e=""),Buffer.from(e,"base64").toString()},t.encodeBasicHeader=function(e,n){void 0===e&&(e=""),void 0===n&&(n="");var r="".concat(e,":").concat(n),a=(0,t.encode)(r);return"Basic ".concat(a)},t.decodeBasicHeader=function(e){void 0===e&&(e="");var n=e.split("Basic ").join(""),r=(0,t.decode)(n).split(":");return 2===r.length?{username:r[0],password:r[1]}:{username:null,password:null}}},576:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.checkSize=t.checkExtension=t.getExtension=void 0,t.getExtension=function(e){var t=e.name;return t.substring(t.lastIndexOf(".")+1).toLowerCase()},t.checkExtension=function(e,n){return-1!==n.indexOf((0,t.getExtension)(e))},t.checkSize=function(e,t){return e.size<=t}},190:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getParamNames=void 0;var n=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,r=/([^\s,]+)/g;t.getParamNames=function(e){var t=e.toString().replace(n,""),a=t.slice(t.indexOf("(")+1,t.indexOf(")")).match(r);return null===a?[]:a}},9431:(e,t)=>{var n,r,a;Object.defineProperty(t,"__esModule",{value:!0}),t.HttpStatus=t.HttpMethod=t.HttpHeader=void 0,(a=t.HttpHeader||(t.HttpHeader={})).ACCESS_CONTROL_ALLOW_ORIGIN="Access-Control-Allow-Origin",a.ACCESS_CONTROL_ALLOW_HEADERS="Access-Control-Allow-Headers",a.ACCESS_CONTROL_ALLOW_METHODS="Access-Control-Allow-Methods",(r=t.HttpMethod||(t.HttpMethod={})).GET="GET",r.POST="POST",r.PUT="PUT",r.PATCH="PATCH",r.DELETE="DELETE",r.OPTIONS="OPTIONS",(n=t.HttpStatus||(t.HttpStatus={}))[n.OK=200]="OK",n[n.CREATED=201]="CREATED",n[n.REMOVED=204]="REMOVED",n[n.BAD_REQUEST=400]="BAD_REQUEST",n[n.UNAUTHORIZED=401]="UNAUTHORIZED",n[n.FORBIDDEN=403]="FORBIDDEN",n[n.NOT_FOUND=404]="NOT_FOUND",n[n.ERROR=500]="ERROR"},2574:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clone=t.getProperty=void 0,t.getProperty=function(e,t){return t.split(".").reduce((function(e,t){if(e&&"object"==typeof e)return e[t]}),e)},t.clone=function(e){return JSON.parse(JSON.stringify(e))}},2186:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.delayedPromise=void 0,t.delayedPromise=function(e,t){return void 0===t&&(t=0),Promise.all([e,new Promise((function(e){return setTimeout(e,t)}))]).then((function(e){return e[0]})).catch((function(e){throw e}))}},989:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.merge=t.remove=t.add=t.toSet=void 0,t.toSet=function(e){return e.reduce((function(e,t){return e.includes(t)||e.push(t),e}),[])},t.add=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.forEach((function(t){e.includes(t)||e.push(t)})),e},t.remove=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.forEach((function(t){var n=e.indexOf(t);-1!==n&&e.splice(n,1)})),e},t.merge=function(e,n){return(0,t.toSet)(e.concat(n))}},3838:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});var o=l(n(953)),i=function(){function e(e,t){void 0===t&&(t=" "),this._value=e,this._words=e.split(t).map((function(e){return e.toLowerCase()})).filter((function(e){return Boolean(e)}))}return Object.defineProperty(e.prototype,"words",{get:function(){return this._words},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"camel",{get:function(){return this.words.map((function(e,t){return 0===t?e:o.capitalize(e)})).join("")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pascal",{get:function(){return this.words.map((function(e){return o.capitalize(e)})).join("")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"worm",{get:function(){return this.words.map((function(e){return e.toLowerCase()})).join("_")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"snake",{get:function(){return this.words.map((function(e){return o.capitalize(e)})).join("_")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"serpent",{get:function(){return this.words.map((function(e){return e.toUpperCase()})).join("_")},enumerable:!1,configurable:!0}),e}();t.default=i},953:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.replaceAll=t.capitalizeFirst=t.capitalize=void 0,t.capitalize=function(e){return e.length?e.substring(0,1).toUpperCase()+e.substring(1).toLowerCase():""},t.capitalizeFirst=function(e){return e.length?e.substring(0,1).toUpperCase():""},t.replaceAll=function(e,t,n){return e.split(t).join(n)}},8267:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var n={next:function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))}};t.default=n},6414:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.UUID=t.StringUtils=t.StringLabel=t.Sets=t.PromiseUtils=t.ObjectUtils=t.HttpUtils=t.FunctionUtils=t.FileUtils=t.EncodeUtils=t.DateUtils=t.DataStatesUtils=t.DataStates=t.ArrayUtils=t.Alphabet=void 0;var i=l(n(6380)),u=l(n(51)),c=o(n(2920)),s=l(n(2684)),d=l(n(207)),f=l(n(2993)),p=l(n(576)),m=l(n(190)),h=l(n(9431)),v=l(n(2574)),b=l(n(2186)),g=l(n(989)),y=o(n(3838)),_=l(n(953)),E=o(n(8267));t.Alphabet=i,t.ArrayUtils=u,t.DataStates=c.default,t.DataStatesUtils=s,t.DateUtils=d,t.EncodeUtils=f,t.FileUtils=p,t.FunctionUtils=m,t.HttpUtils=h,t.ObjectUtils=v,t.PromiseUtils=b,t.Sets=g,t.StringLabel=y.default,t.StringUtils=_,t.UUID=E.default},1171:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7537),a=n.n(r),l=n(3645),o=n.n(l)()(a());o.push([e.id,".code-panel {\r\n  border-radius: 0.5rem;\r\n  border: 2px solid #e5e5e5;\r\n  margin: 2rem 0;\r\n}\r\n.code-panel .header {\r\n  padding: 0.5rem;\r\n}\r\n.code-panel .rendering {\r\n  position: relative;\r\n  padding: 2rem 1rem 3rem 1rem;\r\n  background-color: #f7f7f7;\r\n}\r\n.code-panel .button-show {\r\n  position: absolute;\r\n  right: 0;\r\n  padding: 0.5rem;\r\n  cursor: pointer;\r\n  background: white;\r\n  border: 1px solid darkgray;\r\n  border-radius: 0.25rem;\r\n  bottom: 0;\r\n}\r\n.code-panel .code {\r\n  white-space: pre-line;\r\n  position: relative;\r\n  padding: 1rem;\r\n  background-color: #262626;\r\n  color: white;\r\n  font-size: 12px;\r\n  font-family: ui-monospace, Menlo, Monaco, 'Roboto Mono', 'Oxygen Mono', 'Ubuntu Monospace', 'Source Code Pro',\r\n    'Droid Sans Mono', 'Courier New', monospace;\r\n}\r\n.code-panel .button-copy {\r\n  position: absolute;\r\n  right: 0;\r\n  bottom: 0;\r\n  padding: 0.5rem;\r\n  cursor: pointer;\r\n  border: none;\r\n  border-radius: 0.25rem;\r\n  background-color: black;\r\n  color: white;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/common/CodePanel.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,yBAAyB;EACzB,cAAc;AAChB;AACA;EACE,eAAe;AACjB;AACA;EACE,kBAAkB;EAClB,4BAA4B;EAC5B,yBAAyB;AAC3B;AACA;EACE,kBAAkB;EAClB,QAAQ;EACR,eAAe;EACf,eAAe;EACf,iBAAiB;EACjB,0BAA0B;EAC1B,sBAAsB;EACtB,SAAS;AACX;AACA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,aAAa;EACb,yBAAyB;EACzB,YAAY;EACZ,eAAe;EACf;+CAC6C;AAC/C;AACA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,eAAe;EACf,eAAe;EACf,YAAY;EACZ,sBAAsB;EACtB,uBAAuB;EACvB,YAAY;AACd",sourcesContent:[".code-panel {\r\n  border-radius: 0.5rem;\r\n  border: 2px solid #e5e5e5;\r\n  margin: 2rem 0;\r\n}\r\n.code-panel .header {\r\n  padding: 0.5rem;\r\n}\r\n.code-panel .rendering {\r\n  position: relative;\r\n  padding: 2rem 1rem 3rem 1rem;\r\n  background-color: #f7f7f7;\r\n}\r\n.code-panel .button-show {\r\n  position: absolute;\r\n  right: 0;\r\n  padding: 0.5rem;\r\n  cursor: pointer;\r\n  background: white;\r\n  border: 1px solid darkgray;\r\n  border-radius: 0.25rem;\r\n  bottom: 0;\r\n}\r\n.code-panel .code {\r\n  white-space: pre-line;\r\n  position: relative;\r\n  padding: 1rem;\r\n  background-color: #262626;\r\n  color: white;\r\n  font-size: 12px;\r\n  font-family: ui-monospace, Menlo, Monaco, 'Roboto Mono', 'Oxygen Mono', 'Ubuntu Monospace', 'Source Code Pro',\r\n    'Droid Sans Mono', 'Courier New', monospace;\r\n}\r\n.code-panel .button-copy {\r\n  position: absolute;\r\n  right: 0;\r\n  bottom: 0;\r\n  padding: 0.5rem;\r\n  cursor: pointer;\r\n  border: none;\r\n  border-radius: 0.25rem;\r\n  background-color: black;\r\n  color: white;\r\n}\r\n"],sourceRoot:""}]);const i=o},8743:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7537),a=n.n(r),l=n(3645),o=n.n(l)()(a());o.push([e.id,"\r\n  .demo-page .fd-title--h2 {\r\n    margin-top: 2rem;\r\n    border-bottom: var(--sapList_BorderWidth) solid var(--sapList_BorderColor);\r\n  }.demo-page .fd-title--h3 {\r\n    margin-top: 1rem;\r\n  }\r\n\r\n","",{version:3,sources:["webpack://./src/components/common/DemoPage.css"],names:[],mappings:";EACE;IACE,gBAAgB;IAChB,0EAA0E;EAC5E,CACA;IACE,gBAAgB;EAClB",sourcesContent:[".demo-page {\r\n  & .fd-title--h2 {\r\n    margin-top: 2rem;\r\n    border-bottom: var(--sapList_BorderWidth) solid var(--sapList_BorderColor);\r\n  }\r\n  & .fd-title--h3 {\r\n    margin-top: 1rem;\r\n  }\r\n}\r\n\r\n"],sourceRoot:""}]);const i=o},2785:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7537),a=n.n(r),l=n(3645),o=n.n(l)()(a());o.push([e.id,".fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n@media (min-width: 600px) {\r\n  .fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n    padding: 0 2rem;\r\n  }\r\n}\r\n\r\n@media (min-width: 1400px) {\r\n  .fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n    padding: 0 3rem;\r\n  }\r\n}","",{version:3,sources:["webpack://./src/lib/components/icontabbar/IconTabBar.css"],names:[],mappings:"AAAA;EACE,iBAAiB;AACnB;;AAEA;EACE;IACE,eAAe;EACjB;AACF;;AAEA;EACE;IACE,eAAe;EACjB;AACF",sourcesContent:[".fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n@media (min-width: 600px) {\r\n  .fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n    padding: 0 2rem;\r\n  }\r\n}\r\n\r\n@media (min-width: 1400px) {\r\n  .fd-icon-tab-bar .fd-icon-tab-bar__header {\r\n    padding: 0 3rem;\r\n  }\r\n}"],sourceRoot:""}]);const i=o},232:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7537),a=n.n(r),l=n(3645),o=n.n(l)()(a());o.push([e.id,".fd-object-header-attribute {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.fd-object-header-attribute .fd-object-header-attribute__label {\r\n  color: var(--sapContent_LabelColor);\r\n}\r\n.fd-object-header-attribute .fd-object-header-attribute__text {\r\n  word-wrap: break-word;\r\n}\r\n.fd-object-header-attribute + .fd-object-header-attribute {\r\n  margin-top: 0.25rem;\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/object/ObjectHeaderAttribute.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;AACxB;AACA;EACE,mCAAmC;AACrC;AACA;EACE,qBAAyB;AAC3B;AACA;EACE,mBAAmB;AACrB",sourcesContent:[".fd-object-header-attribute {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.fd-object-header-attribute .fd-object-header-attribute__label {\r\n  color: var(--sapContent_LabelColor);\r\n}\r\n.fd-object-header-attribute .fd-object-header-attribute__text {\r\n  overflow-wrap: break-word;\r\n}\r\n.fd-object-header-attribute + .fd-object-header-attribute {\r\n  margin-top: 0.25rem;\r\n}\r\n"],sourceRoot:""}]);const i=o},1976:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7537),a=n.n(r),l=n(3645),o=n.n(l)()(a());o.push([e.id,".fd-page {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n.fd-page .fd-page__header {\r\n  flex-shrink: 0;\r\n  flex-basis: 100px;\r\n  padding: 1rem 0.5rem 1rem 0.5rem;\r\n\r\n  background: var(--sapList_Background);\r\n}\r\n\r\n@media screen and (min-width: 600px) {\r\n  .fd-page .fd-page__header {\r\n    padding: 1rem 2rem 1rem 2rem;\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 1400px) {\r\n  .fd-page .fd-page__header {\r\n    padding: 1rem 3rem 1rem 3rem;\r\n  }\r\n}\r\n\r\n.fd-page .fd-page__header .fd-toolbar {\r\n  padding: 0;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.fd-page .fd-page__content {\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  overflow: auto;\r\n}\r\n\r\n.fd-page .fd-page__content .fd-page__body {\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n\r\n  background: var(--sapBackgroundColor);\r\n}\r\n\r\n.fd-page .fd-page__content .fd-page__footer {\r\n  flex-shrink: 0;\r\n  flex-basis: 100px;\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/page/Page.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;;EAEtB,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,cAAc;EACd,iBAAiB;EACjB,gCAAgC;;EAEhC,qCAAqC;AACvC;;AAEA;EACE;IACE,4BAA4B;EAC9B;AACF;;AAEA;EACE;IACE,4BAA4B;EAC9B;AACF;;AAEA;EACE,UAAU;EACV,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,aAAa;;EAEb,aAAa;EACb,sBAAsB;;EAEtB,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,aAAa;;EAEb,qCAAqC;AACvC;;AAEA;EACE,cAAc;EACd,iBAAiB;AACnB",sourcesContent:[".fd-page {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n.fd-page .fd-page__header {\r\n  flex-shrink: 0;\r\n  flex-basis: 100px;\r\n  padding: 1rem 0.5rem 1rem 0.5rem;\r\n\r\n  background: var(--sapList_Background);\r\n}\r\n\r\n@media screen and (min-width: 600px) {\r\n  .fd-page .fd-page__header {\r\n    padding: 1rem 2rem 1rem 2rem;\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 1400px) {\r\n  .fd-page .fd-page__header {\r\n    padding: 1rem 3rem 1rem 3rem;\r\n  }\r\n}\r\n\r\n.fd-page .fd-page__header .fd-toolbar {\r\n  padding: 0;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.fd-page .fd-page__content {\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  overflow: auto;\r\n}\r\n\r\n.fd-page .fd-page__content .fd-page__body {\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n\r\n  background: var(--sapBackgroundColor);\r\n}\r\n\r\n.fd-page .fd-page__content .fd-page__footer {\r\n  flex-shrink: 0;\r\n  flex-basis: 100px;\r\n}\r\n"],sourceRoot:""}]);const i=o},1047:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7537),a=n.n(r),l=n(3645),o=n.n(l)()(a());o.push([e.id,".fd-section .fd-toolbar {\r\n  padding: 0 0 0 0.25rem;\r\n}\r\n","",{version:3,sources:["webpack://./src/lib/components/toolbar/Toolbar.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB",sourcesContent:[".fd-section .fd-toolbar {\r\n  padding: 0 0 0 0.25rem;\r\n}\r\n"],sourceRoot:""}]);const i=o},3645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,l){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(o[u]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&o[s[0]]||(void 0!==l&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=l),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),a&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=a):s[4]="".concat(a)),t.push(s))}},t}},7537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),l="/*# ".concat(a," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([l]).join("\n")}return[t].join("\n")}},4448:(e,t,n)=>{var r=n(7294),a=n(3840);function l(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var o=new Set,i={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(i[e]=t,e=0;e<t.length;e++)o.add(t[e])}var s=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},m={};function h(e,t,n,r,a,l,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=l,this.removeEmptyString=o}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var b=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function y(e,t,n,r){var a=v.hasOwnProperty(t)?v[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(m,e)||!d.call(p,e)&&(f.test(e)?m[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(b,g);v[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(b,g);v[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(b,g);v[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=Symbol.for("react.element"),w=Symbol.for("react.portal"),C=Symbol.for("react.fragment"),S=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),x=Symbol.for("react.provider"),O=Symbol.for("react.context"),A=Symbol.for("react.forward_ref"),P=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),D=Symbol.for("react.memo"),j=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var T=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var M=Symbol.iterator;function L(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=M&&e[M]||e["@@iterator"])?e:null}var R,I=Object.assign;function B(e){if(void 0===R)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);R=t&&t[1]||""}return"\n"+R+e}var z=!1;function F(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),l=r.stack.split("\n"),o=a.length-1,i=l.length-1;1<=o&&0<=i&&a[o]!==l[i];)i--;for(;1<=o&&0<=i;o--,i--)if(a[o]!==l[i]){if(1!==o||1!==i)do{if(o--,0>--i||a[o]!==l[i]){var u="\n"+a[o].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=o&&0<=i);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?B(e):""}function U(e){switch(e.tag){case 5:return B(e.type);case 16:return B("Lazy");case 13:return B("Suspense");case 19:return B("SuspenseList");case 0:case 2:case 15:return F(e.type,!1);case 11:return F(e.type.render,!1);case 1:return F(e.type,!0);default:return""}}function H(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case C:return"Fragment";case w:return"Portal";case k:return"Profiler";case S:return"StrictMode";case P:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case x:return(e._context.displayName||"Context")+".Provider";case A:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case D:return null!==(t=e.displayName||null)?t:H(e.type)||"Memo";case j:t=e._payload,e=e._init;try{return H(e(t))}catch(e){}}return null}function $(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return H(t);case 8:return t===S?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,l=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,l.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=W(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function q(e,t){var n=t.checked;return I({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Z(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function G(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function X(e,t){G(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(l(91));return I({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(l(92));if(te(n)){if(1<n.length)throw Error(l(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function le(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function oe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,se,de=(se=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return se(e,t)}))}:se);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function he(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=he(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){me.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var be=I({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(be[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(l(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(l(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(l(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(l(62))}}function ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var _e=null;function Ee(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var we=null,Ce=null,Se=null;function ke(e){if(e=ya(e)){if("function"!=typeof we)throw Error(l(280));var t=e.stateNode;t&&(t=Ea(t),we(e.stateNode,e.type,t))}}function xe(e){Ce?Se?Se.push(e):Se=[e]:Ce=e}function Oe(){if(Ce){var e=Ce,t=Se;if(Se=Ce=null,ke(e),t)for(e=0;e<t.length;e++)ke(t[e])}}function Ae(e,t){return e(t)}function Pe(){}var Ne=!1;function De(e,t,n){if(Ne)return e(t,n);Ne=!0;try{return Ae(e,t,n)}finally{Ne=!1,(null!==Ce||null!==Se)&&(Pe(),Oe())}}function je(e,t){var n=e.stateNode;if(null===n)return null;var r=Ea(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(l(231,t,typeof n));return n}var Te=!1;if(s)try{var Me={};Object.defineProperty(Me,"passive",{get:function(){Te=!0}}),window.addEventListener("test",Me,Me),window.removeEventListener("test",Me,Me)}catch(se){Te=!1}function Le(e,t,n,r,a,l,o,i,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Re=!1,Ie=null,Be=!1,ze=null,Fe={onError:function(e){Re=!0,Ie=e}};function Ue(e,t,n,r,a,l,o,i,u){Re=!1,Ie=null,Le.apply(Fe,arguments)}function He(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function $e(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if(He(e)!==e)throw Error(l(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=He(e)))throw Error(l(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return Ve(a),e;if(o===r)return Ve(a),t;o=o.sibling}throw Error(l(188))}if(n.return!==r.return)n=a,r=o;else{for(var i=!1,u=a.child;u;){if(u===n){i=!0,n=a,r=o;break}if(u===r){i=!0,r=a,n=o;break}u=u.sibling}if(!i){for(u=o.child;u;){if(u===n){i=!0,n=o,r=a;break}if(u===r){i=!0,r=o,n=a;break}u=u.sibling}if(!i)throw Error(l(189))}}if(n.alternate!==r)throw Error(l(190))}if(3!==n.tag)throw Error(l(188));return n.stateNode.current===n?e:t}(e))?Ye(e):null}function Ye(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ye(e);if(null!==t)return t;e=e.sibling}return null}var Qe=a.unstable_scheduleCallback,Ke=a.unstable_cancelCallback,qe=a.unstable_shouldYield,Ze=a.unstable_requestPaint,Ge=a.unstable_now,Xe=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,lt=null,ot=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(it(e)/ut|0)|0},it=Math.log,ut=Math.LN2,ct=64,st=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,l=e.pingedLanes,o=268435455&n;if(0!==o){var i=o&~a;0!==i?r=dt(i):0!=(l&=o)&&(r=dt(l))}else 0!=(o=n&~a)?r=dt(o):0!==l&&(r=dt(l));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(l=t&-t)||16===a&&0!=(4194240&l)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-ot(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function bt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-ot(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-ot(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var yt=0;function _t(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var Et,wt,Ct,St,kt,xt=!1,Ot=[],At=null,Pt=null,Nt=null,Dt=new Map,jt=new Map,Tt=[],Mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Lt(e,t){switch(e){case"focusin":case"focusout":At=null;break;case"dragenter":case"dragleave":Pt=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":Dt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":jt.delete(t.pointerId)}}function Rt(e,t,n,r,a,l){return null===e||e.nativeEvent!==l?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:l,targetContainers:[a]},null!==t&&null!==(t=ya(t))&&wt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function It(e){var t=ga(e.target);if(null!==t){var n=He(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=$e(n)))return e.blockedOn=t,void kt(e.priority,(function(){Ct(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Bt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ya(n))&&wt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);_e=r,n.target.dispatchEvent(r),_e=null,t.shift()}return!0}function zt(e,t,n){Bt(e)&&n.delete(t)}function Ft(){xt=!1,null!==At&&Bt(At)&&(At=null),null!==Pt&&Bt(Pt)&&(Pt=null),null!==Nt&&Bt(Nt)&&(Nt=null),Dt.forEach(zt),jt.forEach(zt)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,xt||(xt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Ft)))}function Ht(e){function t(t){return Ut(t,e)}if(0<Ot.length){Ut(Ot[0],e);for(var n=1;n<Ot.length;n++){var r=Ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==At&&Ut(At,e),null!==Pt&&Ut(Pt,e),null!==Nt&&Ut(Nt,e),Dt.forEach(t),jt.forEach(t),n=0;n<Tt.length;n++)(r=Tt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Tt.length&&null===(n=Tt[0]).blockedOn;)It(n),null===n.blockedOn&&Tt.shift()}var $t=_.ReactCurrentBatchConfig,Vt=!0;function Wt(e,t,n,r){var a=yt,l=$t.transition;$t.transition=null;try{yt=1,Qt(e,t,n,r)}finally{yt=a,$t.transition=l}}function Yt(e,t,n,r){var a=yt,l=$t.transition;$t.transition=null;try{yt=4,Qt(e,t,n,r)}finally{yt=a,$t.transition=l}}function Qt(e,t,n,r){if(Vt){var a=qt(e,t,n,r);if(null===a)Vr(e,t,r,Kt,n),Lt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return At=Rt(At,e,t,n,r,a),!0;case"dragenter":return Pt=Rt(Pt,e,t,n,r,a),!0;case"mouseover":return Nt=Rt(Nt,e,t,n,r,a),!0;case"pointerover":var l=a.pointerId;return Dt.set(l,Rt(Dt.get(l)||null,e,t,n,r,a)),!0;case"gotpointercapture":return l=a.pointerId,jt.set(l,Rt(jt.get(l)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Lt(e,r),4&t&&-1<Mt.indexOf(e)){for(;null!==a;){var l=ya(a);if(null!==l&&Et(l),null===(l=qt(e,t,n,r))&&Vr(e,t,r,Kt,n),l===a)break;a=l}null!==a&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var Kt=null;function qt(e,t,n,r){if(Kt=null,null!==(e=ga(e=Ee(r))))if(null===(t=He(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=$e(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Zt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Gt=null,Xt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Xt,r=n.length,a="value"in Gt?Gt.value:Gt.textContent,l=a.length;for(e=0;e<r&&n[e]===a[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===a[l-t];t++);return Jt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,l){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(a):a[o]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return I(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var ln,on,un,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=an(cn),dn=I({},cn,{view:0,detail:0}),fn=an(dn),pn=I({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(ln=e.screenX-un.screenX,on=e.screenY-un.screenY):on=ln=0,un=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:on}}),mn=an(pn),hn=an(I({},pn,{dataTransfer:0})),vn=an(I({},dn,{relatedTarget:0})),bn=an(I({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=I({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yn=an(gn),_n=an(I({},cn,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function kn(){return Sn}var xn=I({},dn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?wn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),On=an(xn),An=an(I({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pn=an(I({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kn})),Nn=an(I({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Dn=I({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),jn=an(Dn),Tn=[9,13,27,32],Mn=s&&"CompositionEvent"in window,Ln=null;s&&"documentMode"in document&&(Ln=document.documentMode);var Rn=s&&"TextEvent"in window&&!Ln,In=s&&(!Mn||Ln&&8<Ln&&11>=Ln),Bn=String.fromCharCode(32),zn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Tn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Hn=!1,$n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$n[e.type]:"textarea"===t}function Wn(e,t,n,r){xe(r),0<(t=Yr(t,"onChange")).length&&(n=new sn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Yn=null,Qn=null;function Kn(e){Br(e,0)}function qn(e){if(Q(_a(e)))return e}function Zn(e,t){if("change"===e)return t}var Gn=!1;if(s){var Xn;if(s){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Xn=Jn}else Xn=!1;Gn=Xn&&(!document.documentMode||9<document.documentMode)}function tr(){Yn&&(Yn.detachEvent("onpropertychange",nr),Qn=Yn=null)}function nr(e){if("value"===e.propertyName&&qn(Qn)){var t=[];Wn(t,Qn,e,Ee(e)),De(Kn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Qn=n,(Yn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qn(Qn)}function lr(e,t){if("click"===e)return qn(t)}function or(e,t){if("input"===e||"change"===e)return qn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!ir(e[a],t[a]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function mr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,l=Math.min(r.start,a);r=void 0===r.end?l:Math.min(r.end,a),!e.extend&&l>r&&(a=r,r=l,l=a),a=sr(n,l);var o=sr(n,r);a&&o&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==o.node||e.focusOffset!==o.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),l>r?(e.addRange(t),e.extend(o.node,o.offset)):(t.setEnd(o.node,o.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hr=s&&"documentMode"in document&&11>=document.documentMode,vr=null,br=null,gr=null,yr=!1;function _r(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==vr||vr!==K(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ur(gr,r)||(gr=r,0<(r=Yr(br,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function Er(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var wr={animationend:Er("Animation","AnimationEnd"),animationiteration:Er("Animation","AnimationIteration"),animationstart:Er("Animation","AnimationStart"),transitionend:Er("Transition","TransitionEnd")},Cr={},Sr={};function kr(e){if(Cr[e])return Cr[e];if(!wr[e])return e;var t,n=wr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Sr)return Cr[e]=n[t];return e}s&&(Sr=document.createElement("div").style,"AnimationEvent"in window||(delete wr.animationend.animation,delete wr.animationiteration.animation,delete wr.animationstart.animation),"TransitionEvent"in window||delete wr.transitionend.transition);var xr=kr("animationend"),Or=kr("animationiteration"),Ar=kr("animationstart"),Pr=kr("transitionend"),Nr=new Map,Dr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function jr(e,t){Nr.set(e,t),u(t,[e])}for(var Tr=0;Tr<Dr.length;Tr++){var Mr=Dr[Tr];jr(Mr.toLowerCase(),"on"+(Mr[0].toUpperCase()+Mr.slice(1)))}jr(xr,"onAnimationEnd"),jr(Or,"onAnimationIteration"),jr(Ar,"onAnimationStart"),jr("dblclick","onDoubleClick"),jr("focusin","onFocus"),jr("focusout","onBlur"),jr(Pr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Rr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Lr));function Ir(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,o,i,u,c){if(Ue.apply(this,arguments),Re){if(!Re)throw Error(l(198));var s=Ie;Re=!1,Ie=null,Be||(Be=!0,ze=s)}}(r,t,void 0,e),e.currentTarget=null}function Br(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var l=void 0;if(t)for(var o=r.length-1;0<=o;o--){var i=r[o],u=i.instance,c=i.currentTarget;if(i=i.listener,u!==l&&a.isPropagationStopped())break e;Ir(a,i,c),l=u}else for(o=0;o<r.length;o++){if(u=(i=r[o]).instance,c=i.currentTarget,i=i.listener,u!==l&&a.isPropagationStopped())break e;Ir(a,i,c),l=u}}}if(Be)throw e=ze,Be=!1,ze=null,e}function zr(e,t){var n=t[ha];void 0===n&&(n=t[ha]=new Set);var r=e+"__bubble";n.has(r)||($r(t,e,2,!1),n.add(r))}function Fr(e,t,n){var r=0;t&&(r|=4),$r(n,e,r,t)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function Hr(e){if(!e[Ur]){e[Ur]=!0,o.forEach((function(t){"selectionchange"!==t&&(Rr.has(t)||Fr(t,!1,e),Fr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ur]||(t[Ur]=!0,Fr("selectionchange",!1,t))}}function $r(e,t,n,r){switch(Zt(t)){case 1:var a=Wt;break;case 4:a=Yt;break;default:a=Qt}n=a.bind(null,t,n,e),a=void 0,!Te||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,a){var l=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var i=r.stateNode.containerInfo;if(i===a||8===i.nodeType&&i.parentNode===a)break;if(4===o)for(o=r.return;null!==o;){var u=o.tag;if((3===u||4===u)&&((u=o.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;o=o.return}for(;null!==i;){if(null===(o=ga(i)))return;if(5===(u=o.tag)||6===u){r=l=o;continue e}i=i.parentNode}}r=r.return}De((function(){var r=l,a=Ee(n),o=[];e:{var i=Nr.get(e);if(void 0!==i){var u=sn,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=On;break;case"focusin":c="focus",u=vn;break;case"focusout":c="blur",u=vn;break;case"beforeblur":case"afterblur":u=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=hn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Pn;break;case xr:case Or:case Ar:u=bn;break;case Pr:u=Nn;break;case"scroll":u=fn;break;case"wheel":u=jn;break;case"copy":case"cut":case"paste":u=yn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=An}var s=0!=(4&t),d=!s&&"scroll"===e,f=s?null!==i?i+"Capture":null:i;s=[];for(var p,m=r;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==f&&null!=(h=je(m,f))&&s.push(Wr(m,h,p))),d)break;m=m.return}0<s.length&&(i=new u(i,c,null,n,a),o.push({event:i,listeners:s}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===_e||!(c=n.relatedTarget||n.fromElement)||!ga(c)&&!c[ma])&&(u||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?ga(c):null)&&(c!==(d=He(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=r),u!==c)){if(s=mn,h="onMouseLeave",f="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(s=An,h="onPointerLeave",f="onPointerEnter",m="pointer"),d=null==u?i:_a(u),p=null==c?i:_a(c),(i=new s(h,m+"leave",u,n,a)).target=d,i.relatedTarget=p,h=null,ga(a)===r&&((s=new s(f,m+"enter",c,n,a)).target=p,s.relatedTarget=d,h=s),d=h,u&&c)e:{for(f=c,m=0,p=s=u;p;p=Qr(p))m++;for(p=0,h=f;h;h=Qr(h))p++;for(;0<m-p;)s=Qr(s),m--;for(;0<p-m;)f=Qr(f),p--;for(;m--;){if(s===f||null!==f&&s===f.alternate)break e;s=Qr(s),f=Qr(f)}s=null}else s=null;null!==u&&Kr(o,i,u,s,!1),null!==c&&null!==d&&Kr(o,d,c,s,!0)}if("select"===(u=(i=r?_a(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var v=Zn;else if(Vn(i))if(Gn)v=or;else{v=ar;var b=rr}else(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(v=lr);switch(v&&(v=v(e,r))?Wn(o,v,n,a):(b&&b(e,i,r),"focusout"===e&&(b=i._wrapperState)&&b.controlled&&"number"===i.type&&ee(i,"number",i.value)),b=r?_a(r):window,e){case"focusin":(Vn(b)||"true"===b.contentEditable)&&(vr=b,br=r,gr=null);break;case"focusout":gr=br=vr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,_r(o,n,a);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":_r(o,n,a)}var g;if(Mn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Hn?Fn(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(In&&"ko"!==n.locale&&(Hn||"onCompositionStart"!==y?"onCompositionEnd"===y&&Hn&&(g=en()):(Xt="value"in(Gt=a)?Gt.value:Gt.textContent,Hn=!0)),0<(b=Yr(r,y)).length&&(y=new _n(y,e,null,n,a),o.push({event:y,listeners:b}),(g||null!==(g=Un(n)))&&(y.data=g))),(g=Rn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(zn=!0,Bn);case"textInput":return(e=t.data)===Bn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Hn)return"compositionend"===e||!Mn&&Fn(e,t)?(e=en(),Jt=Xt=Gt=null,Hn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return In&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Yr(r,"onBeforeInput")).length&&(a=new _n("onBeforeInput","beforeinput",null,n,a),o.push({event:a,listeners:r}),a.data=g)}Br(o,t)}))}function Wr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Yr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,l=a.stateNode;5===a.tag&&null!==l&&(a=l,null!=(l=je(e,n))&&r.unshift(Wr(e,l,a)),null!=(l=je(e,t))&&r.push(Wr(e,l,a))),e=e.return}return r}function Qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,t,n,r,a){for(var l=t._reactName,o=[];null!==n&&n!==r;){var i=n,u=i.alternate,c=i.stateNode;if(null!==u&&u===r)break;5===i.tag&&null!==c&&(i=c,a?null!=(u=je(n,l))&&o.unshift(Wr(n,u,i)):a||null!=(u=je(n,l))&&o.push(Wr(n,u,i))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var qr=/\r\n?/g,Zr=/\u0000|\uFFFD/g;function Gr(e){return("string"==typeof e?e:""+e).replace(qr,"\n").replace(Zr,"")}function Xr(e,t,n){if(t=Gr(t),Gr(e)!==t&&n)throw Error(l(425))}function Jr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,la="function"==typeof Promise?Promise:void 0,oa="function"==typeof queueMicrotask?queueMicrotask:void 0!==la?function(e){return la.resolve(null).then(e).catch(ia)}:ra;function ia(e){setTimeout((function(){throw e}))}function ua(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Ht(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Ht(t)}function ca(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function sa(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),fa="__reactFiber$"+da,pa="__reactProps$"+da,ma="__reactContainer$"+da,ha="__reactEvents$"+da,va="__reactListeners$"+da,ba="__reactHandles$"+da;function ga(e){var t=e[fa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ma]||n[fa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=sa(e);null!==e;){if(n=e[fa])return n;e=sa(e)}return t}n=(e=n).parentNode}return null}function ya(e){return!(e=e[fa]||e[ma])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function _a(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(l(33))}function Ea(e){return e[pa]||null}var wa=[],Ca=-1;function Sa(e){return{current:e}}function ka(e){0>Ca||(e.current=wa[Ca],wa[Ca]=null,Ca--)}function xa(e,t){Ca++,wa[Ca]=e.current,e.current=t}var Oa={},Aa=Sa(Oa),Pa=Sa(!1),Na=Oa;function Da(e,t){var n=e.type.contextTypes;if(!n)return Oa;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,l={};for(a in n)l[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=l),l}function ja(e){return null!=e.childContextTypes}function Ta(){ka(Pa),ka(Aa)}function Ma(e,t,n){if(Aa.current!==Oa)throw Error(l(168));xa(Aa,t),xa(Pa,n)}function La(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(l(108,$(e)||"Unknown",a));return I({},n,r)}function Ra(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Oa,Na=Aa.current,xa(Aa,e),xa(Pa,Pa.current),!0}function Ia(e,t,n){var r=e.stateNode;if(!r)throw Error(l(169));n?(e=La(e,t,Na),r.__reactInternalMemoizedMergedChildContext=e,ka(Pa),ka(Aa),xa(Aa,e)):ka(Pa),xa(Pa,n)}var Ba=null,za=!1,Fa=!1;function Ua(e){null===Ba?Ba=[e]:Ba.push(e)}function Ha(){if(!Fa&&null!==Ba){Fa=!0;var e=0,t=yt;try{var n=Ba;for(yt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ba=null,za=!1}catch(t){throw null!==Ba&&(Ba=Ba.slice(e+1)),Qe(Je,Ha),t}finally{yt=t,Fa=!1}}return null}var $a=[],Va=0,Wa=null,Ya=0,Qa=[],Ka=0,qa=null,Za=1,Ga="";function Xa(e,t){$a[Va++]=Ya,$a[Va++]=Wa,Wa=e,Ya=t}function Ja(e,t,n){Qa[Ka++]=Za,Qa[Ka++]=Ga,Qa[Ka++]=qa,qa=e;var r=Za;e=Ga;var a=32-ot(r)-1;r&=~(1<<a),n+=1;var l=32-ot(t)+a;if(30<l){var o=a-a%5;l=(r&(1<<o)-1).toString(32),r>>=o,a-=o,Za=1<<32-ot(t)+a|n<<a|r,Ga=l+e}else Za=1<<l|n<<a|r,Ga=e}function el(e){null!==e.return&&(Xa(e,1),Ja(e,1,0))}function tl(e){for(;e===Wa;)Wa=$a[--Va],$a[Va]=null,Ya=$a[--Va],$a[Va]=null;for(;e===qa;)qa=Qa[--Ka],Qa[Ka]=null,Ga=Qa[--Ka],Qa[Ka]=null,Za=Qa[--Ka],Qa[Ka]=null}var nl=null,rl=null,al=!1,ll=null;function ol(e,t){var n=Dc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function il(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,nl=e,rl=ca(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,nl=e,rl=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==qa?{id:Za,overflow:Ga}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Dc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,nl=e,rl=null,!0);default:return!1}}function ul(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function cl(e){if(al){var t=rl;if(t){var n=t;if(!il(e,t)){if(ul(e))throw Error(l(418));t=ca(n.nextSibling);var r=nl;t&&il(e,t)?ol(r,n):(e.flags=-4097&e.flags|2,al=!1,nl=e)}}else{if(ul(e))throw Error(l(418));e.flags=-4097&e.flags|2,al=!1,nl=e}}}function sl(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;nl=e}function dl(e){if(e!==nl)return!1;if(!al)return sl(e),al=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=rl)){if(ul(e))throw fl(),Error(l(418));for(;t;)ol(e,t),t=ca(t.nextSibling)}if(sl(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){rl=ca(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}rl=null}}else rl=nl?ca(e.stateNode.nextSibling):null;return!0}function fl(){for(var e=rl;e;)e=ca(e.nextSibling)}function pl(){rl=nl=null,al=!1}function ml(e){null===ll?ll=[e]:ll.push(e)}var hl=_.ReactCurrentBatchConfig;function vl(e,t){if(e&&e.defaultProps){for(var n in t=I({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var bl=Sa(null),gl=null,yl=null,_l=null;function El(){_l=yl=gl=null}function wl(e){var t=bl.current;ka(bl),e._currentValue=t}function Cl(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Sl(e,t){gl=e,_l=yl=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(_i=!0),e.firstContext=null)}function kl(e){var t=e._currentValue;if(_l!==e)if(e={context:e,memoizedValue:t,next:null},null===yl){if(null===gl)throw Error(l(308));yl=e,gl.dependencies={lanes:0,firstContext:e}}else yl=yl.next=e;return t}var xl=null;function Ol(e){null===xl?xl=[e]:xl.push(e)}function Al(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,Ol(t)):(n.next=a.next,a.next=n),t.interleaved=n,Pl(e,r)}function Pl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Nl=!1;function Dl(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function jl(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Tl(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ml(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Au)){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,Pl(e,n)}return null===(a=r.interleaved)?(t.next=t,Ol(r)):(t.next=a.next,a.next=t),r.interleaved=t,Pl(e,n)}function Ll(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function Rl(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,l=null;if(null!==(n=n.firstBaseUpdate)){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===l?a=l=o:l=l.next=o,n=n.next}while(null!==n);null===l?a=l=t:l=l.next=t}else a=l=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:l,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Il(e,t,n,r){var a=e.updateQueue;Nl=!1;var l=a.firstBaseUpdate,o=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var u=i,c=u.next;u.next=null,null===o?l=c:o.next=c,o=u;var s=e.alternate;null!==s&&(i=(s=s.updateQueue).lastBaseUpdate)!==o&&(null===i?s.firstBaseUpdate=c:i.next=c,s.lastBaseUpdate=u)}if(null!==l){var d=a.baseState;for(o=0,s=c=u=null,i=l;;){var f=i.lane,p=i.eventTime;if((r&f)===f){null!==s&&(s=s.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var m=e,h=i;switch(f=t,p=n,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(p,d,f);break e}d=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(f="function"==typeof(m=h.payload)?m.call(p,d,f):m))break e;d=I({},d,f);break e;case 2:Nl=!0}}null!==i.callback&&0!==i.lane&&(e.flags|=64,null===(f=a.effects)?a.effects=[i]:f.push(i))}else p={eventTime:p,lane:f,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===s?(c=s=p,u=d):s=s.next=p,o|=f;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(f=i).next,f.next=null,a.lastBaseUpdate=f,a.shared.pending=null}}if(null===s&&(u=d),a.baseState=u,a.firstBaseUpdate=c,a.lastBaseUpdate=s,null!==(t=a.shared.interleaved)){a=t;do{o|=a.lane,a=a.next}while(a!==t)}else null===l&&(a.shared.lanes=0);Ru|=o,e.lanes=o,e.memoizedState=d}}function Bl(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(l(191,a));a.call(r)}}}var zl=(new r.Component).refs;function Fl(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:I({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Ul={isMounted:function(e){return!!(e=e._reactInternals)&&He(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ec(),a=tc(e),l=Tl(r,a);l.payload=t,null!=n&&(l.callback=n),null!==(t=Ml(e,l,a))&&(nc(t,e,a,r),Ll(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ec(),a=tc(e),l=Tl(r,a);l.tag=1,l.payload=t,null!=n&&(l.callback=n),null!==(t=Ml(e,l,a))&&(nc(t,e,a,r),Ll(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ec(),r=tc(e),a=Tl(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=Ml(e,a,r))&&(nc(t,e,r,n),Ll(t,e,r))}};function Hl(e,t,n,r,a,l,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,l,o):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,l))}function $l(e,t,n){var r=!1,a=Oa,l=t.contextType;return"object"==typeof l&&null!==l?l=kl(l):(a=ja(t)?Na:Aa.current,l=(r=null!=(r=t.contextTypes))?Da(e,a):Oa),t=new t(n,l),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Ul,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=l),t}function Vl(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ul.enqueueReplaceState(t,t.state,null)}function Wl(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=zl,Dl(e);var l=t.contextType;"object"==typeof l&&null!==l?a.context=kl(l):(l=ja(t)?Na:Aa.current,a.context=Da(e,l)),a.state=e.memoizedState,"function"==typeof(l=t.getDerivedStateFromProps)&&(Fl(e,t,l,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&Ul.enqueueReplaceState(a,a.state,null),Il(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function Yl(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(l(309));var r=n.stateNode}if(!r)throw Error(l(147,e));var a=r,o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=a.refs;t===zl&&(t=a.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(l(284));if(!n._owner)throw Error(l(290,e))}return e}function Ql(e,t){throw e=Object.prototype.toString.call(t),Error(l(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Kl(e){return(0,e._init)(e._payload)}function ql(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Tc(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Ic(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function c(e,t,n,r){var l=n.type;return l===C?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===j&&Kl(l)===t.type)?((r=a(t,n.props)).ref=Yl(e,t,n),r.return=e,r):((r=Mc(n.type,n.key,n.props,null,e.mode,r)).ref=Yl(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Bc(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,l){return null===t||7!==t.tag?((t=Lc(n,e.mode,r,l)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ic(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=Mc(t.type,t.key,t.props,null,e.mode,n)).ref=Yl(e,null,t),n.return=e,n;case w:return(t=Bc(t,e.mode,n)).return=e,t;case j:return f(e,(0,t._init)(t._payload),n)}if(te(t)||L(t))return(t=Lc(t,e.mode,n,null)).return=e,t;Ql(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===a?c(e,t,n,r):null;case w:return n.key===a?s(e,t,n,r):null;case j:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||L(n))return null!==a?null:d(e,t,n,r,null);Ql(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case w:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case j:return m(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||L(r))return d(t,e=e.get(n)||null,r,a,null);Ql(t,r)}return null}function h(a,l,i,u){for(var c=null,s=null,d=l,h=l=0,v=null;null!==d&&h<i.length;h++){d.index>h?(v=d,d=null):v=d.sibling;var b=p(a,d,i[h],u);if(null===b){null===d&&(d=v);break}e&&d&&null===b.alternate&&t(a,d),l=o(b,l,h),null===s?c=b:s.sibling=b,s=b,d=v}if(h===i.length)return n(a,d),al&&Xa(a,h),c;if(null===d){for(;h<i.length;h++)null!==(d=f(a,i[h],u))&&(l=o(d,l,h),null===s?c=d:s.sibling=d,s=d);return al&&Xa(a,h),c}for(d=r(a,d);h<i.length;h++)null!==(v=m(d,a,h,i[h],u))&&(e&&null!==v.alternate&&d.delete(null===v.key?h:v.key),l=o(v,l,h),null===s?c=v:s.sibling=v,s=v);return e&&d.forEach((function(e){return t(a,e)})),al&&Xa(a,h),c}function v(a,i,u,c){var s=L(u);if("function"!=typeof s)throw Error(l(150));if(null==(u=s.call(u)))throw Error(l(151));for(var d=s=null,h=i,v=i=0,b=null,g=u.next();null!==h&&!g.done;v++,g=u.next()){h.index>v?(b=h,h=null):b=h.sibling;var y=p(a,h,g.value,c);if(null===y){null===h&&(h=b);break}e&&h&&null===y.alternate&&t(a,h),i=o(y,i,v),null===d?s=y:d.sibling=y,d=y,h=b}if(g.done)return n(a,h),al&&Xa(a,v),s;if(null===h){for(;!g.done;v++,g=u.next())null!==(g=f(a,g.value,c))&&(i=o(g,i,v),null===d?s=g:d.sibling=g,d=g);return al&&Xa(a,v),s}for(h=r(a,h);!g.done;v++,g=u.next())null!==(g=m(h,a,v,g.value,c))&&(e&&null!==g.alternate&&h.delete(null===g.key?v:g.key),i=o(g,i,v),null===d?s=g:d.sibling=g,d=g);return e&&h.forEach((function(e){return t(a,e)})),al&&Xa(a,v),s}return function e(r,l,o,u){if("object"==typeof o&&null!==o&&o.type===C&&null===o.key&&(o=o.props.children),"object"==typeof o&&null!==o){switch(o.$$typeof){case E:e:{for(var c=o.key,s=l;null!==s;){if(s.key===c){if((c=o.type)===C){if(7===s.tag){n(r,s.sibling),(l=a(s,o.props.children)).return=r,r=l;break e}}else if(s.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===j&&Kl(c)===s.type){n(r,s.sibling),(l=a(s,o.props)).ref=Yl(r,s,o),l.return=r,r=l;break e}n(r,s);break}t(r,s),s=s.sibling}o.type===C?((l=Lc(o.props.children,r.mode,u,o.key)).return=r,r=l):((u=Mc(o.type,o.key,o.props,null,r.mode,u)).ref=Yl(r,l,o),u.return=r,r=u)}return i(r);case w:e:{for(s=o.key;null!==l;){if(l.key===s){if(4===l.tag&&l.stateNode.containerInfo===o.containerInfo&&l.stateNode.implementation===o.implementation){n(r,l.sibling),(l=a(l,o.children||[])).return=r,r=l;break e}n(r,l);break}t(r,l),l=l.sibling}(l=Bc(o,r.mode,u)).return=r,r=l}return i(r);case j:return e(r,l,(s=o._init)(o._payload),u)}if(te(o))return h(r,l,o,u);if(L(o))return v(r,l,o,u);Ql(r,o)}return"string"==typeof o&&""!==o||"number"==typeof o?(o=""+o,null!==l&&6===l.tag?(n(r,l.sibling),(l=a(l,o)).return=r,r=l):(n(r,l),(l=Ic(o,r.mode,u)).return=r,r=l),i(r)):n(r,l)}}var Zl=ql(!0),Gl=ql(!1),Xl={},Jl=Sa(Xl),eo=Sa(Xl),to=Sa(Xl);function no(e){if(e===Xl)throw Error(l(174));return e}function ro(e,t){switch(xa(to,t),xa(eo,e),xa(Jl,Xl),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ka(Jl),xa(Jl,t)}function ao(){ka(Jl),ka(eo),ka(to)}function lo(e){no(to.current);var t=no(Jl.current),n=ue(t,e.type);t!==n&&(xa(eo,e),xa(Jl,n))}function oo(e){eo.current===e&&(ka(Jl),ka(eo))}var io=Sa(0);function uo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var co=[];function so(){for(var e=0;e<co.length;e++)co[e]._workInProgressVersionPrimary=null;co.length=0}var fo=_.ReactCurrentDispatcher,po=_.ReactCurrentBatchConfig,mo=0,ho=null,vo=null,bo=null,go=!1,yo=!1,_o=0,Eo=0;function wo(){throw Error(l(321))}function Co(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function So(e,t,n,r,a,o){if(mo=o,ho=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,fo.current=null===e||null===e.memoizedState?ii:ui,e=n(r,a),yo){o=0;do{if(yo=!1,_o=0,25<=o)throw Error(l(301));o+=1,bo=vo=null,t.updateQueue=null,fo.current=ci,e=n(r,a)}while(yo)}if(fo.current=oi,t=null!==vo&&null!==vo.next,mo=0,bo=vo=ho=null,go=!1,t)throw Error(l(300));return e}function ko(){var e=0!==_o;return _o=0,e}function xo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===bo?ho.memoizedState=bo=e:bo=bo.next=e,bo}function Oo(){if(null===vo){var e=ho.alternate;e=null!==e?e.memoizedState:null}else e=vo.next;var t=null===bo?ho.memoizedState:bo.next;if(null!==t)bo=t,vo=e;else{if(null===e)throw Error(l(310));e={memoizedState:(vo=e).memoizedState,baseState:vo.baseState,baseQueue:vo.baseQueue,queue:vo.queue,next:null},null===bo?ho.memoizedState=bo=e:bo=bo.next=e}return bo}function Ao(e,t){return"function"==typeof t?t(e):t}function Po(e){var t=Oo(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=vo,a=r.baseQueue,o=n.pending;if(null!==o){if(null!==a){var i=a.next;a.next=o.next,o.next=i}r.baseQueue=a=o,n.pending=null}if(null!==a){o=a.next,r=r.baseState;var u=i=null,c=null,s=o;do{var d=s.lane;if((mo&d)===d)null!==c&&(c=c.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var f={lane:d,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===c?(u=c=f,i=r):c=c.next=f,ho.lanes|=d,Ru|=d}s=s.next}while(null!==s&&s!==o);null===c?i=r:c.next=u,ir(r,t.memoizedState)||(_i=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{o=a.lane,ho.lanes|=o,Ru|=o,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function No(e){var t=Oo(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{o=e(o,i.action),i=i.next}while(i!==a);ir(o,t.memoizedState)||(_i=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function Do(){}function jo(e,t){var n=ho,r=Oo(),a=t(),o=!ir(r.memoizedState,a);if(o&&(r.memoizedState=a,_i=!0),r=r.queue,Vo(Lo.bind(null,n,r,e),[e]),r.getSnapshot!==t||o||null!==bo&&1&bo.memoizedState.tag){if(n.flags|=2048,zo(9,Mo.bind(null,n,r,a,t),void 0,null),null===Pu)throw Error(l(349));0!=(30&mo)||To(n,t,a)}return a}function To(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ho.updateQueue)?(t={lastEffect:null,stores:null},ho.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Mo(e,t,n,r){t.value=n,t.getSnapshot=r,Ro(t)&&Io(e)}function Lo(e,t,n){return n((function(){Ro(t)&&Io(e)}))}function Ro(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ir(e,n)}catch(e){return!0}}function Io(e){var t=Pl(e,1);null!==t&&nc(t,e,1,-1)}function Bo(e){var t=xo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ao,lastRenderedState:e},t.queue=e,e=e.dispatch=ni.bind(null,ho,e),[t.memoizedState,e]}function zo(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ho.updateQueue)?(t={lastEffect:null,stores:null},ho.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Fo(){return Oo().memoizedState}function Uo(e,t,n,r){var a=xo();ho.flags|=e,a.memoizedState=zo(1|t,n,void 0,void 0===r?null:r)}function Ho(e,t,n,r){var a=Oo();r=void 0===r?null:r;var l=void 0;if(null!==vo){var o=vo.memoizedState;if(l=o.destroy,null!==r&&Co(r,o.deps))return void(a.memoizedState=zo(t,n,l,r))}ho.flags|=e,a.memoizedState=zo(1|t,n,l,r)}function $o(e,t){return Uo(8390656,8,e,t)}function Vo(e,t){return Ho(2048,8,e,t)}function Wo(e,t){return Ho(4,2,e,t)}function Yo(e,t){return Ho(4,4,e,t)}function Qo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ko(e,t,n){return n=null!=n?n.concat([e]):null,Ho(4,4,Qo.bind(null,t,e),n)}function qo(){}function Zo(e,t){var n=Oo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Co(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Go(e,t){var n=Oo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Co(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Xo(e,t,n){return 0==(21&mo)?(e.baseState&&(e.baseState=!1,_i=!0),e.memoizedState=n):(ir(n,t)||(n=ht(),ho.lanes|=n,Ru|=n,e.baseState=!0),t)}function Jo(e,t){var n=yt;yt=0!==n&&4>n?n:4,e(!0);var r=po.transition;po.transition={};try{e(!1),t()}finally{yt=n,po.transition=r}}function ei(){return Oo().memoizedState}function ti(e,t,n){var r=tc(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},ri(e)?ai(t,n):null!==(n=Al(e,t,n,r))&&(nc(n,e,r,ec()),li(n,t,r))}function ni(e,t,n){var r=tc(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(ri(e))ai(t,a);else{var l=e.alternate;if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=t.lastRenderedReducer))try{var o=t.lastRenderedState,i=l(o,n);if(a.hasEagerState=!0,a.eagerState=i,ir(i,o)){var u=t.interleaved;return null===u?(a.next=a,Ol(t)):(a.next=u.next,u.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=Al(e,t,a,r))&&(nc(n,e,r,a=ec()),li(n,t,r))}}function ri(e){var t=e.alternate;return e===ho||null!==t&&t===ho}function ai(e,t){yo=go=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function li(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var oi={readContext:kl,useCallback:wo,useContext:wo,useEffect:wo,useImperativeHandle:wo,useInsertionEffect:wo,useLayoutEffect:wo,useMemo:wo,useReducer:wo,useRef:wo,useState:wo,useDebugValue:wo,useDeferredValue:wo,useTransition:wo,useMutableSource:wo,useSyncExternalStore:wo,useId:wo,unstable_isNewReconciler:!1},ii={readContext:kl,useCallback:function(e,t){return xo().memoizedState=[e,void 0===t?null:t],e},useContext:kl,useEffect:$o,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Uo(4194308,4,Qo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Uo(4194308,4,e,t)},useInsertionEffect:function(e,t){return Uo(4,2,e,t)},useMemo:function(e,t){var n=xo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=xo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=ti.bind(null,ho,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},xo().memoizedState=e},useState:Bo,useDebugValue:qo,useDeferredValue:function(e){return xo().memoizedState=e},useTransition:function(){var e=Bo(!1),t=e[0];return e=Jo.bind(null,e[1]),xo().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ho,a=xo();if(al){if(void 0===n)throw Error(l(407));n=n()}else{if(n=t(),null===Pu)throw Error(l(349));0!=(30&mo)||To(r,t,n)}a.memoizedState=n;var o={value:n,getSnapshot:t};return a.queue=o,$o(Lo.bind(null,r,o,e),[e]),r.flags|=2048,zo(9,Mo.bind(null,r,o,n,t),void 0,null),n},useId:function(){var e=xo(),t=Pu.identifierPrefix;if(al){var n=Ga;t=":"+t+"R"+(n=(Za&~(1<<32-ot(Za)-1)).toString(32)+n),0<(n=_o++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Eo++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ui={readContext:kl,useCallback:Zo,useContext:kl,useEffect:Vo,useImperativeHandle:Ko,useInsertionEffect:Wo,useLayoutEffect:Yo,useMemo:Go,useReducer:Po,useRef:Fo,useState:function(){return Po(Ao)},useDebugValue:qo,useDeferredValue:function(e){return Xo(Oo(),vo.memoizedState,e)},useTransition:function(){return[Po(Ao)[0],Oo().memoizedState]},useMutableSource:Do,useSyncExternalStore:jo,useId:ei,unstable_isNewReconciler:!1},ci={readContext:kl,useCallback:Zo,useContext:kl,useEffect:Vo,useImperativeHandle:Ko,useInsertionEffect:Wo,useLayoutEffect:Yo,useMemo:Go,useReducer:No,useRef:Fo,useState:function(){return No(Ao)},useDebugValue:qo,useDeferredValue:function(e){var t=Oo();return null===vo?t.memoizedState=e:Xo(t,vo.memoizedState,e)},useTransition:function(){return[No(Ao)[0],Oo().memoizedState]},useMutableSource:Do,useSyncExternalStore:jo,useId:ei,unstable_isNewReconciler:!1};function si(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function di(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fi(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pi="function"==typeof WeakMap?WeakMap:Map;function mi(e,t,n){(n=Tl(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Vu||(Vu=!0,Wu=r),fi(0,t)},n}function hi(e,t,n){(n=Tl(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){fi(0,t)}}var l=e.stateNode;return null!==l&&"function"==typeof l.componentDidCatch&&(n.callback=function(){fi(0,t),"function"!=typeof r&&(null===Yu?Yu=new Set([this]):Yu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function vi(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pi;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=kc.bind(null,e,t,n),t.then(e,e))}function bi(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gi(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Tl(-1,1)).tag=2,Ml(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}var yi=_.ReactCurrentOwner,_i=!1;function Ei(e,t,n,r){t.child=null===e?Gl(t,null,n,r):Zl(t,e.child,n,r)}function wi(e,t,n,r,a){n=n.render;var l=t.ref;return Sl(t,a),r=So(e,t,n,r,l,a),n=ko(),null===e||_i?(al&&n&&el(t),t.flags|=1,Ei(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Vi(e,t,a))}function Ci(e,t,n,r,a){if(null===e){var l=n.type;return"function"!=typeof l||jc(l)||void 0!==l.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Mc(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=l,Si(e,t,l,r,a))}if(l=e.child,0==(e.lanes&a)){var o=l.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(o,r)&&e.ref===t.ref)return Vi(e,t,a)}return t.flags|=1,(e=Tc(l,r)).ref=t.ref,e.return=t,t.child=e}function Si(e,t,n,r,a){if(null!==e){var l=e.memoizedProps;if(ur(l,r)&&e.ref===t.ref){if(_i=!1,t.pendingProps=r=l,0==(e.lanes&a))return t.lanes=e.lanes,Vi(e,t,a);0!=(131072&e.flags)&&(_i=!0)}}return Oi(e,t,n,r,a)}function ki(e,t,n){var r=t.pendingProps,a=r.children,l=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},xa(Tu,ju),ju|=n;else{if(0==(1073741824&n))return e=null!==l?l.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,xa(Tu,ju),ju|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==l?l.baseLanes:n,xa(Tu,ju),ju|=r}else null!==l?(r=l.baseLanes|n,t.memoizedState=null):r=n,xa(Tu,ju),ju|=r;return Ei(e,t,a,n),t.child}function xi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Oi(e,t,n,r,a){var l=ja(n)?Na:Aa.current;return l=Da(t,l),Sl(t,a),n=So(e,t,n,r,l,a),r=ko(),null===e||_i?(al&&r&&el(t),t.flags|=1,Ei(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Vi(e,t,a))}function Ai(e,t,n,r,a){if(ja(n)){var l=!0;Ra(t)}else l=!1;if(Sl(t,a),null===t.stateNode)$i(e,t),$l(t,n,r),Wl(t,n,r,a),r=!0;else if(null===e){var o=t.stateNode,i=t.memoizedProps;o.props=i;var u=o.context,c=n.contextType;c="object"==typeof c&&null!==c?kl(c):Da(t,c=ja(n)?Na:Aa.current);var s=n.getDerivedStateFromProps,d="function"==typeof s||"function"==typeof o.getSnapshotBeforeUpdate;d||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(i!==r||u!==c)&&Vl(t,o,r,c),Nl=!1;var f=t.memoizedState;o.state=f,Il(t,r,o,a),u=t.memoizedState,i!==r||f!==u||Pa.current||Nl?("function"==typeof s&&(Fl(t,n,s,r),u=t.memoizedState),(i=Nl||Hl(t,n,i,r,f,u,c))?(d||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4194308)):("function"==typeof o.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),o.props=r,o.state=u,o.context=c,r=i):("function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,jl(e,t),i=t.memoizedProps,c=t.type===t.elementType?i:vl(t.type,i),o.props=c,d=t.pendingProps,f=o.context,u="object"==typeof(u=n.contextType)&&null!==u?kl(u):Da(t,u=ja(n)?Na:Aa.current);var p=n.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(i!==d||f!==u)&&Vl(t,o,r,u),Nl=!1,f=t.memoizedState,o.state=f,Il(t,r,o,a);var m=t.memoizedState;i!==d||f!==m||Pa.current||Nl?("function"==typeof p&&(Fl(t,n,p,r),m=t.memoizedState),(c=Nl||Hl(t,n,c,r,f,m,u)||!1)?(s||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,m,u),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,m,u)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof o.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=m),o.props=r,o.state=m,o.context=u,r=c):("function"!=typeof o.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Pi(e,t,n,r,l,a)}function Pi(e,t,n,r,a,l){xi(e,t);var o=0!=(128&t.flags);if(!r&&!o)return a&&Ia(t,n,!1),Vi(e,t,l);r=t.stateNode,yi.current=t;var i=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&o?(t.child=Zl(t,e.child,null,l),t.child=Zl(t,null,i,l)):Ei(e,t,i,l),t.memoizedState=r.state,a&&Ia(t,n,!0),t.child}function Ni(e){var t=e.stateNode;t.pendingContext?Ma(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ma(0,t.context,!1),ro(e,t.containerInfo)}function Di(e,t,n,r,a){return pl(),ml(a),t.flags|=256,Ei(e,t,n,r),t.child}var ji,Ti,Mi,Li={dehydrated:null,treeContext:null,retryLane:0};function Ri(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ii(e,t,n){var r,a=t.pendingProps,o=io.current,i=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(i=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(o|=1),xa(io,1&o),null===e)return cl(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=a.children,e=a.fallback,i?(a=t.mode,i=t.child,u={mode:"hidden",children:u},0==(1&a)&&null!==i?(i.childLanes=0,i.pendingProps=u):i=Rc(u,a,0,null),e=Lc(e,a,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=Ri(n),t.memoizedState=Li,e):Bi(t,u));if(null!==(o=e.memoizedState)&&null!==(r=o.dehydrated))return function(e,t,n,r,a,o,i){if(n)return 256&t.flags?(t.flags&=-257,zi(e,t,i,r=di(Error(l(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(o=r.fallback,a=t.mode,r=Rc({mode:"visible",children:r.children},a,0,null),(o=Lc(o,a,i,null)).flags|=2,r.return=t,o.return=t,r.sibling=o,t.child=r,0!=(1&t.mode)&&Zl(t,e.child,null,i),t.child.memoizedState=Ri(i),t.memoizedState=Li,o);if(0==(1&t.mode))return zi(e,t,i,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var u=r.dgst;return r=u,zi(e,t,i,r=di(o=Error(l(419)),r,void 0))}if(u=0!=(i&e.childLanes),_i||u){if(null!==(r=Pu)){switch(i&-i){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!=(a&(r.suspendedLanes|i))?0:a)&&a!==o.retryLane&&(o.retryLane=a,Pl(e,a),nc(r,e,a,-1))}return hc(),zi(e,t,i,r=di(Error(l(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=Oc.bind(null,e),a._reactRetry=t,null):(e=o.treeContext,rl=ca(a.nextSibling),nl=t,al=!0,ll=null,null!==e&&(Qa[Ka++]=Za,Qa[Ka++]=Ga,Qa[Ka++]=qa,Za=e.id,Ga=e.overflow,qa=t),(t=Bi(t,r.children)).flags|=4096,t)}(e,t,u,a,r,o,n);if(i){i=a.fallback,u=t.mode,r=(o=e.child).sibling;var c={mode:"hidden",children:a.children};return 0==(1&u)&&t.child!==o?((a=t.child).childLanes=0,a.pendingProps=c,t.deletions=null):(a=Tc(o,c)).subtreeFlags=14680064&o.subtreeFlags,null!==r?i=Tc(r,i):(i=Lc(i,u,n,null)).flags|=2,i.return=t,a.return=t,a.sibling=i,t.child=a,a=i,i=t.child,u=null===(u=e.child.memoizedState)?Ri(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},i.memoizedState=u,i.childLanes=e.childLanes&~n,t.memoizedState=Li,a}return e=(i=e.child).sibling,a=Tc(i,{mode:"visible",children:a.children}),0==(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function Bi(e,t){return(t=Rc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function zi(e,t,n,r){return null!==r&&ml(r),Zl(t,e.child,null,n),(e=Bi(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Fi(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Cl(e.return,t,n)}function Ui(e,t,n,r,a){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(l.isBackwards=t,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=n,l.tailMode=a)}function Hi(e,t,n){var r=t.pendingProps,a=r.revealOrder,l=r.tail;if(Ei(e,t,r.children,n),0!=(2&(r=io.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Fi(e,n,t);else if(19===e.tag)Fi(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(xa(io,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===uo(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Ui(t,!1,a,n,l);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===uo(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Ui(t,!0,n,null,l);break;case"together":Ui(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function $i(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Vi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ru|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(l(153));if(null!==t.child){for(n=Tc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Wi(e,t){if(!al)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Yi(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Qi(e,t,n){var r=t.pendingProps;switch(tl(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Yi(t),null;case 1:case 17:return ja(t.type)&&Ta(),Yi(t),null;case 3:return r=t.stateNode,ao(),ka(Pa),ka(Aa),so(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(dl(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ll&&(oc(ll),ll=null))),Yi(t),null;case 5:oo(t);var a=no(to.current);if(n=t.type,null!==e&&null!=t.stateNode)Ti(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(l(166));return Yi(t),null}if(e=no(Jl.current),dl(t)){r=t.stateNode,n=t.type;var o=t.memoizedProps;switch(r[fa]=t,r[pa]=o,e=0!=(1&t.mode),n){case"dialog":zr("cancel",r),zr("close",r);break;case"iframe":case"object":case"embed":zr("load",r);break;case"video":case"audio":for(a=0;a<Lr.length;a++)zr(Lr[a],r);break;case"source":zr("error",r);break;case"img":case"image":case"link":zr("error",r),zr("load",r);break;case"details":zr("toggle",r);break;case"input":Z(r,o),zr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!o.multiple},zr("invalid",r);break;case"textarea":ae(r,o),zr("invalid",r)}for(var u in ge(n,o),a=null,o)if(o.hasOwnProperty(u)){var c=o[u];"children"===u?"string"==typeof c?r.textContent!==c&&(!0!==o.suppressHydrationWarning&&Xr(r.textContent,c,e),a=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==o.suppressHydrationWarning&&Xr(r.textContent,c,e),a=["children",""+c]):i.hasOwnProperty(u)&&null!=c&&"onScroll"===u&&zr("scroll",r)}switch(n){case"input":Y(r),J(r,o,!0);break;case"textarea":Y(r),oe(r);break;case"select":case"option":break;default:"function"==typeof o.onClick&&(r.onclick=Jr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ie(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[fa]=t,e[pa]=r,ji(e,t),t.stateNode=e;e:{switch(u=ye(n,r),n){case"dialog":zr("cancel",e),zr("close",e),a=r;break;case"iframe":case"object":case"embed":zr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Lr.length;a++)zr(Lr[a],e);a=r;break;case"source":zr("error",e),a=r;break;case"img":case"image":case"link":zr("error",e),zr("load",e),a=r;break;case"details":zr("toggle",e),a=r;break;case"input":Z(e,r),a=q(e,r),zr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=I({},r,{value:void 0}),zr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),zr("invalid",e)}for(o in ge(n,a),c=a)if(c.hasOwnProperty(o)){var s=c[o];"style"===o?ve(e,s):"dangerouslySetInnerHTML"===o?null!=(s=s?s.__html:void 0)&&de(e,s):"children"===o?"string"==typeof s?("textarea"!==n||""!==s)&&fe(e,s):"number"==typeof s&&fe(e,""+s):"suppressContentEditableWarning"!==o&&"suppressHydrationWarning"!==o&&"autoFocus"!==o&&(i.hasOwnProperty(o)?null!=s&&"onScroll"===o&&zr("scroll",e):null!=s&&y(e,o,s,u))}switch(n){case"input":Y(e),J(e,r,!1);break;case"textarea":Y(e),oe(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(o=r.value)?ne(e,!!r.multiple,o,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Yi(t),null;case 6:if(e&&null!=t.stateNode)Mi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(l(166));if(n=no(to.current),no(Jl.current),dl(t)){if(r=t.stateNode,n=t.memoizedProps,r[fa]=t,(o=r.nodeValue!==n)&&null!==(e=nl))switch(e.tag){case 3:Xr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xr(r.nodeValue,n,0!=(1&e.mode))}o&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fa]=t,t.stateNode=r}return Yi(t),null;case 13:if(ka(io),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(al&&null!==rl&&0!=(1&t.mode)&&0==(128&t.flags))fl(),pl(),t.flags|=98560,o=!1;else if(o=dl(t),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error(l(318));if(!(o=null!==(o=t.memoizedState)?o.dehydrated:null))throw Error(l(317));o[fa]=t}else pl(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Yi(t),o=!1}else null!==ll&&(oc(ll),ll=null),o=!0;if(!o)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&io.current)?0===Mu&&(Mu=3):hc())),null!==t.updateQueue&&(t.flags|=4),Yi(t),null);case 4:return ao(),null===e&&Hr(t.stateNode.containerInfo),Yi(t),null;case 10:return wl(t.type._context),Yi(t),null;case 19:if(ka(io),null===(o=t.memoizedState))return Yi(t),null;if(r=0!=(128&t.flags),null===(u=o.rendering))if(r)Wi(o,!1);else{if(0!==Mu||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=uo(e))){for(t.flags|=128,Wi(o,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(o=n).flags&=14680066,null===(u=o.alternate)?(o.childLanes=0,o.lanes=e,o.child=null,o.subtreeFlags=0,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=u.childLanes,o.lanes=u.lanes,o.child=u.child,o.subtreeFlags=0,o.deletions=null,o.memoizedProps=u.memoizedProps,o.memoizedState=u.memoizedState,o.updateQueue=u.updateQueue,o.type=u.type,e=u.dependencies,o.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return xa(io,1&io.current|2),t.child}e=e.sibling}null!==o.tail&&Ge()>Hu&&(t.flags|=128,r=!0,Wi(o,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=uo(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Wi(o,!0),null===o.tail&&"hidden"===o.tailMode&&!u.alternate&&!al)return Yi(t),null}else 2*Ge()-o.renderingStartTime>Hu&&1073741824!==n&&(t.flags|=128,r=!0,Wi(o,!1),t.lanes=4194304);o.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=o.last)?n.sibling=u:t.child=u,o.last=u)}return null!==o.tail?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=Ge(),t.sibling=null,n=io.current,xa(io,r?1&n|2:1&n),t):(Yi(t),null);case 22:case 23:return dc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&ju)&&(Yi(t),6&t.subtreeFlags&&(t.flags|=8192)):Yi(t),null;case 24:case 25:return null}throw Error(l(156,t.tag))}function Ki(e,t){switch(tl(t),t.tag){case 1:return ja(t.type)&&Ta(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ao(),ka(Pa),ka(Aa),so(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return oo(t),null;case 13:if(ka(io),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(l(340));pl()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return ka(io),null;case 4:return ao(),null;case 10:return wl(t.type._context),null;case 22:case 23:return dc(),null;default:return null}}ji=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ti=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,no(Jl.current);var l,o=null;switch(n){case"input":a=q(e,a),r=q(e,r),o=[];break;case"select":a=I({},a,{value:void 0}),r=I({},r,{value:void 0}),o=[];break;case"textarea":a=re(e,a),r=re(e,r),o=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(s in ge(n,r),n=null,a)if(!r.hasOwnProperty(s)&&a.hasOwnProperty(s)&&null!=a[s])if("style"===s){var u=a[s];for(l in u)u.hasOwnProperty(l)&&(n||(n={}),n[l]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(i.hasOwnProperty(s)?o||(o=[]):(o=o||[]).push(s,null));for(s in r){var c=r[s];if(u=null!=a?a[s]:void 0,r.hasOwnProperty(s)&&c!==u&&(null!=c||null!=u))if("style"===s)if(u){for(l in u)!u.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in c)c.hasOwnProperty(l)&&u[l]!==c[l]&&(n||(n={}),n[l]=c[l])}else n||(o||(o=[]),o.push(s,n)),n=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(o=o||[]).push(s,c)):"children"===s?"string"!=typeof c&&"number"!=typeof c||(o=o||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(i.hasOwnProperty(s)?(null!=c&&"onScroll"===s&&zr("scroll",e),o||u===c||(o=[])):(o=o||[]).push(s,c))}n&&(o=o||[]).push("style",n);var s=o;(t.updateQueue=s)&&(t.flags|=4)}},Mi=function(e,t,n,r){n!==r&&(t.flags|=4)};var qi=!1,Zi=!1,Gi="function"==typeof WeakSet?WeakSet:Set,Xi=null;function Ji(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Sc(e,t,n)}else n.current=null}function eu(e,t,n){try{n()}catch(n){Sc(e,t,n)}}var tu=!1;function nu(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var l=a.destroy;a.destroy=void 0,void 0!==l&&eu(t,n,l)}a=a.next}while(a!==r)}}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function au(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function lu(e){var t=e.alternate;null!==t&&(e.alternate=null,lu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fa],delete t[pa],delete t[ha],delete t[va],delete t[ba]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ou(e){return 5===e.tag||3===e.tag||4===e.tag}function iu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ou(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(uu(e,t,n),e=e.sibling;null!==e;)uu(e,t,n),e=e.sibling}function cu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}var su=null,du=!1;function fu(e,t,n){for(n=n.child;null!==n;)pu(e,t,n),n=n.sibling}function pu(e,t,n){if(lt&&"function"==typeof lt.onCommitFiberUnmount)try{lt.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Zi||Ji(n,t);case 6:var r=su,a=du;su=null,fu(e,t,n),du=a,null!==(su=r)&&(du?(e=su,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):su.removeChild(n.stateNode));break;case 18:null!==su&&(du?(e=su,n=n.stateNode,8===e.nodeType?ua(e.parentNode,n):1===e.nodeType&&ua(e,n),Ht(e)):ua(su,n.stateNode));break;case 4:r=su,a=du,su=n.stateNode.containerInfo,du=!0,fu(e,t,n),su=r,du=a;break;case 0:case 11:case 14:case 15:if(!Zi&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var l=a,o=l.destroy;l=l.tag,void 0!==o&&(0!=(2&l)||0!=(4&l))&&eu(n,t,o),a=a.next}while(a!==r)}fu(e,t,n);break;case 1:if(!Zi&&(Ji(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Sc(n,t,e)}fu(e,t,n);break;case 21:fu(e,t,n);break;case 22:1&n.mode?(Zi=(r=Zi)||null!==n.memoizedState,fu(e,t,n),Zi=r):fu(e,t,n);break;default:fu(e,t,n)}}function mu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Gi),t.forEach((function(t){var r=Ac.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function hu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var o=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 5:su=u.stateNode,du=!1;break e;case 3:case 4:su=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===su)throw Error(l(160));pu(o,i,a),su=null,du=!1;var c=a.alternate;null!==c&&(c.return=null),a.return=null}catch(e){Sc(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vu(t,e),t=t.sibling}function vu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(hu(t,e),bu(e),4&r){try{nu(3,e,e.return),ru(3,e)}catch(t){Sc(e,e.return,t)}try{nu(5,e,e.return)}catch(t){Sc(e,e.return,t)}}break;case 1:hu(t,e),bu(e),512&r&&null!==n&&Ji(n,n.return);break;case 5:if(hu(t,e),bu(e),512&r&&null!==n&&Ji(n,n.return),32&e.flags){var a=e.stateNode;try{fe(a,"")}catch(t){Sc(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var o=e.memoizedProps,i=null!==n?n.memoizedProps:o,u=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===u&&"radio"===o.type&&null!=o.name&&G(a,o),ye(u,i);var s=ye(u,o);for(i=0;i<c.length;i+=2){var d=c[i],f=c[i+1];"style"===d?ve(a,f):"dangerouslySetInnerHTML"===d?de(a,f):"children"===d?fe(a,f):y(a,d,f,s)}switch(u){case"input":X(a,o);break;case"textarea":le(a,o);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!o.multiple;var m=o.value;null!=m?ne(a,!!o.multiple,m,!1):p!==!!o.multiple&&(null!=o.defaultValue?ne(a,!!o.multiple,o.defaultValue,!0):ne(a,!!o.multiple,o.multiple?[]:"",!1))}a[pa]=o}catch(t){Sc(e,e.return,t)}}break;case 6:if(hu(t,e),bu(e),4&r){if(null===e.stateNode)throw Error(l(162));a=e.stateNode,o=e.memoizedProps;try{a.nodeValue=o}catch(t){Sc(e,e.return,t)}}break;case 3:if(hu(t,e),bu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ht(t.containerInfo)}catch(t){Sc(e,e.return,t)}break;case 4:default:hu(t,e),bu(e);break;case 13:hu(t,e),bu(e),8192&(a=e.child).flags&&(o=null!==a.memoizedState,a.stateNode.isHidden=o,!o||null!==a.alternate&&null!==a.alternate.memoizedState||(Uu=Ge())),4&r&&mu(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Zi=(s=Zi)||d,hu(t,e),Zi=s):hu(t,e),bu(e),8192&r){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!d&&0!=(1&e.mode))for(Xi=e,d=e.child;null!==d;){for(f=Xi=d;null!==Xi;){switch(m=(p=Xi).child,p.tag){case 0:case 11:case 14:case 15:nu(4,p,p.return);break;case 1:Ji(p,p.return);var h=p.stateNode;if("function"==typeof h.componentWillUnmount){r=p,n=p.return;try{t=r,h.props=t.memoizedProps,h.state=t.memoizedState,h.componentWillUnmount()}catch(e){Sc(r,n,e)}}break;case 5:Ji(p,p.return);break;case 22:if(null!==p.memoizedState){Eu(f);continue}}null!==m?(m.return=p,Xi=m):Eu(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{a=f.stateNode,s?"function"==typeof(o=a.style).setProperty?o.setProperty("display","none","important"):o.display="none":(u=f.stateNode,i=null!=(c=f.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,u.style.display=he("display",i))}catch(t){Sc(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=s?"":f.memoizedProps}catch(t){Sc(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:hu(t,e),bu(e),4&r&&mu(e);case 21:}}function bu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ou(n)){var r=n;break e}n=n.return}throw Error(l(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(fe(a,""),r.flags&=-33),cu(e,iu(e),a);break;case 3:case 4:var o=r.stateNode.containerInfo;uu(e,iu(e),o);break;default:throw Error(l(161))}}catch(t){Sc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gu(e,t,n){Xi=e,yu(e,t,n)}function yu(e,t,n){for(var r=0!=(1&e.mode);null!==Xi;){var a=Xi,l=a.child;if(22===a.tag&&r){var o=null!==a.memoizedState||qi;if(!o){var i=a.alternate,u=null!==i&&null!==i.memoizedState||Zi;i=qi;var c=Zi;if(qi=o,(Zi=u)&&!c)for(Xi=a;null!==Xi;)u=(o=Xi).child,22===o.tag&&null!==o.memoizedState?wu(a):null!==u?(u.return=o,Xi=u):wu(a);for(;null!==l;)Xi=l,yu(l,t,n),l=l.sibling;Xi=a,qi=i,Zi=c}_u(e)}else 0!=(8772&a.subtreeFlags)&&null!==l?(l.return=a,Xi=l):_u(e)}}function _u(e){for(;null!==Xi;){var t=Xi;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Zi||ru(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Zi)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:vl(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var o=t.updateQueue;null!==o&&Bl(t,o,r);break;case 3:var i=t.updateQueue;if(null!==i){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Bl(t,i,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var s=t.alternate;if(null!==s){var d=s.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Ht(f)}}}break;default:throw Error(l(163))}Zi||512&t.flags&&au(t)}catch(e){Sc(t,t.return,e)}}if(t===e){Xi=null;break}if(null!==(n=t.sibling)){n.return=t.return,Xi=n;break}Xi=t.return}}function Eu(e){for(;null!==Xi;){var t=Xi;if(t===e){Xi=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Xi=n;break}Xi=t.return}}function wu(e){for(;null!==Xi;){var t=Xi;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ru(4,t)}catch(e){Sc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){Sc(t,a,e)}}var l=t.return;try{au(t)}catch(e){Sc(t,l,e)}break;case 5:var o=t.return;try{au(t)}catch(e){Sc(t,o,e)}}}catch(e){Sc(t,t.return,e)}if(t===e){Xi=null;break}var i=t.sibling;if(null!==i){i.return=t.return,Xi=i;break}Xi=t.return}}var Cu,Su=Math.ceil,ku=_.ReactCurrentDispatcher,xu=_.ReactCurrentOwner,Ou=_.ReactCurrentBatchConfig,Au=0,Pu=null,Nu=null,Du=0,ju=0,Tu=Sa(0),Mu=0,Lu=null,Ru=0,Iu=0,Bu=0,zu=null,Fu=null,Uu=0,Hu=1/0,$u=null,Vu=!1,Wu=null,Yu=null,Qu=!1,Ku=null,qu=0,Zu=0,Gu=null,Xu=-1,Ju=0;function ec(){return 0!=(6&Au)?Ge():-1!==Xu?Xu:Xu=Ge()}function tc(e){return 0==(1&e.mode)?1:0!=(2&Au)&&0!==Du?Du&-Du:null!==hl.transition?(0===Ju&&(Ju=ht()),Ju):0!==(e=yt)?e:e=void 0===(e=window.event)?16:Zt(e.type)}function nc(e,t,n,r){if(50<Zu)throw Zu=0,Gu=null,Error(l(185));bt(e,n,r),0!=(2&Au)&&e===Pu||(e===Pu&&(0==(2&Au)&&(Iu|=n),4===Mu&&ic(e,Du)),rc(e,r),1===n&&0===Au&&0==(1&t.mode)&&(Hu=Ge()+500,za&&Ha()))}function rc(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var o=31-ot(l),i=1<<o,u=a[o];-1===u?0!=(i&n)&&0==(i&r)||(a[o]=pt(i,t)):u<=t&&(e.expiredLanes|=i),l&=~i}}(e,t);var r=ft(e,e===Pu?Du:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){za=!0,Ua(e)}(uc.bind(null,e)):Ua(uc.bind(null,e)),oa((function(){0==(6&Au)&&Ha()})),n=null;else{switch(_t(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Pc(n,ac.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ac(e,t){if(Xu=-1,Ju=0,0!=(6&Au))throw Error(l(327));var n=e.callbackNode;if(wc()&&e.callbackNode!==n)return null;var r=ft(e,e===Pu?Du:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=vc(e,r);else{t=r;var a=Au;Au|=2;var o=mc();for(Pu===e&&Du===t||($u=null,Hu=Ge()+500,fc(e,t));;)try{gc();break}catch(t){pc(e,t)}El(),ku.current=o,Au=a,null!==Nu?t=0:(Pu=null,Du=0,t=Mu)}if(0!==t){if(2===t&&0!==(a=mt(e))&&(r=a,t=lc(e,a)),1===t)throw n=Lu,fc(e,0),ic(e,r),rc(e,Ge()),n;if(6===t)ic(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],l=a.getSnapshot;a=a.value;try{if(!ir(l(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=vc(e,r))&&0!==(o=mt(e))&&(r=o,t=lc(e,o)),1===t))throw n=Lu,fc(e,0),ic(e,r),rc(e,Ge()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(l(345));case 2:case 5:Ec(e,Fu,$u);break;case 3:if(ic(e,r),(130023424&r)===r&&10<(t=Uu+500-Ge())){if(0!==ft(e,0))break;if(((a=e.suspendedLanes)&r)!==r){ec(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(Ec.bind(null,e,Fu,$u),t);break}Ec(e,Fu,$u);break;case 4:if(ic(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var i=31-ot(r);o=1<<i,(i=t[i])>a&&(a=i),r&=~o}if(r=a,10<(r=(120>(r=Ge()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Su(r/1960))-r)){e.timeoutHandle=ra(Ec.bind(null,e,Fu,$u),r);break}Ec(e,Fu,$u);break;default:throw Error(l(329))}}}return rc(e,Ge()),e.callbackNode===n?ac.bind(null,e):null}function lc(e,t){var n=zu;return e.current.memoizedState.isDehydrated&&(fc(e,t).flags|=256),2!==(e=vc(e,t))&&(t=Fu,Fu=n,null!==t&&oc(t)),e}function oc(e){null===Fu?Fu=e:Fu.push.apply(Fu,e)}function ic(e,t){for(t&=~Bu,t&=~Iu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-ot(t),r=1<<n;e[n]=-1,t&=~r}}function uc(e){if(0!=(6&Au))throw Error(l(327));wc();var t=ft(e,0);if(0==(1&t))return rc(e,Ge()),null;var n=vc(e,t);if(0!==e.tag&&2===n){var r=mt(e);0!==r&&(t=r,n=lc(e,r))}if(1===n)throw n=Lu,fc(e,0),ic(e,t),rc(e,Ge()),n;if(6===n)throw Error(l(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ec(e,Fu,$u),rc(e,Ge()),null}function cc(e,t){var n=Au;Au|=1;try{return e(t)}finally{0===(Au=n)&&(Hu=Ge()+500,za&&Ha())}}function sc(e){null!==Ku&&0===Ku.tag&&0==(6&Au)&&wc();var t=Au;Au|=1;var n=Ou.transition,r=yt;try{if(Ou.transition=null,yt=1,e)return e()}finally{yt=r,Ou.transition=n,0==(6&(Au=t))&&Ha()}}function dc(){ju=Tu.current,ka(Tu)}function fc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Nu)for(n=Nu.return;null!==n;){var r=n;switch(tl(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ta();break;case 3:ao(),ka(Pa),ka(Aa),so();break;case 5:oo(r);break;case 4:ao();break;case 13:case 19:ka(io);break;case 10:wl(r.type._context);break;case 22:case 23:dc()}n=n.return}if(Pu=e,Nu=e=Tc(e.current,null),Du=ju=t,Mu=0,Lu=null,Bu=Iu=Ru=0,Fu=zu=null,null!==xl){for(t=0;t<xl.length;t++)if(null!==(r=(n=xl[t]).interleaved)){n.interleaved=null;var a=r.next,l=n.pending;if(null!==l){var o=l.next;l.next=a,r.next=o}n.pending=r}xl=null}return e}function pc(e,t){for(;;){var n=Nu;try{if(El(),fo.current=oi,go){for(var r=ho.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}go=!1}if(mo=0,bo=vo=ho=null,yo=!1,_o=0,xu.current=null,null===n||null===n.return){Mu=1,Lu=t,Nu=null;break}e:{var o=e,i=n.return,u=n,c=t;if(t=Du,u.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var s=c,d=u,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var m=bi(i);if(null!==m){m.flags&=-257,gi(m,i,u,0,t),1&m.mode&&vi(o,s,t),c=s;var h=(t=m).updateQueue;if(null===h){var v=new Set;v.add(c),t.updateQueue=v}else h.add(c);break e}if(0==(1&t)){vi(o,s,t),hc();break e}c=Error(l(426))}else if(al&&1&u.mode){var b=bi(i);if(null!==b){0==(65536&b.flags)&&(b.flags|=256),gi(b,i,u,0,t),ml(si(c,u));break e}}o=c=si(c,u),4!==Mu&&(Mu=2),null===zu?zu=[o]:zu.push(o),o=i;do{switch(o.tag){case 3:o.flags|=65536,t&=-t,o.lanes|=t,Rl(o,mi(0,c,t));break e;case 1:u=c;var g=o.type,y=o.stateNode;if(0==(128&o.flags)&&("function"==typeof g.getDerivedStateFromError||null!==y&&"function"==typeof y.componentDidCatch&&(null===Yu||!Yu.has(y)))){o.flags|=65536,t&=-t,o.lanes|=t,Rl(o,hi(o,u,t));break e}}o=o.return}while(null!==o)}_c(n)}catch(e){t=e,Nu===n&&null!==n&&(Nu=n=n.return);continue}break}}function mc(){var e=ku.current;return ku.current=oi,null===e?oi:e}function hc(){0!==Mu&&3!==Mu&&2!==Mu||(Mu=4),null===Pu||0==(268435455&Ru)&&0==(268435455&Iu)||ic(Pu,Du)}function vc(e,t){var n=Au;Au|=2;var r=mc();for(Pu===e&&Du===t||($u=null,fc(e,t));;)try{bc();break}catch(t){pc(e,t)}if(El(),Au=n,ku.current=r,null!==Nu)throw Error(l(261));return Pu=null,Du=0,Mu}function bc(){for(;null!==Nu;)yc(Nu)}function gc(){for(;null!==Nu&&!qe();)yc(Nu)}function yc(e){var t=Cu(e.alternate,e,ju);e.memoizedProps=e.pendingProps,null===t?_c(e):Nu=t,xu.current=null}function _c(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Qi(n,t,ju)))return void(Nu=n)}else{if(null!==(n=Ki(n,t)))return n.flags&=32767,void(Nu=n);if(null===e)return Mu=6,void(Nu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Nu=t);Nu=t=e}while(null!==t);0===Mu&&(Mu=5)}function Ec(e,t,n){var r=yt,a=Ou.transition;try{Ou.transition=null,yt=1,function(e,t,n,r){do{wc()}while(null!==Ku);if(0!=(6&Au))throw Error(l(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(l(177));e.callbackNode=null,e.callbackPriority=0;var o=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-ot(n),l=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~l}}(e,o),e===Pu&&(Nu=Pu=null,Du=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Qu||(Qu=!0,Pc(tt,(function(){return wc(),null}))),o=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||o){o=Ou.transition,Ou.transition=null;var i=yt;yt=1;var u=Au;Au|=4,xu.current=null,function(e,t){if(ea=Vt,pr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch(e){n=null;break e}var i=0,u=-1,c=-1,s=0,d=0,f=e,p=null;t:for(;;){for(var m;f!==n||0!==a&&3!==f.nodeType||(u=i+a),f!==o||0!==r&&3!==f.nodeType||(c=i+r),3===f.nodeType&&(i+=f.nodeValue.length),null!==(m=f.firstChild);)p=f,f=m;for(;;){if(f===e)break t;if(p===n&&++s===a&&(u=i),p===o&&++d===r&&(c=i),null!==(m=f.nextSibling))break;p=(f=p).parentNode}f=m}n=-1===u||-1===c?null:{start:u,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Vt=!1,Xi=t;null!==Xi;)if(e=(t=Xi).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Xi=e;else for(;null!==Xi;){t=Xi;try{var h=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var v=h.memoizedProps,b=h.memoizedState,g=t.stateNode,y=g.getSnapshotBeforeUpdate(t.elementType===t.type?v:vl(t.type,v),b);g.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var _=t.stateNode.containerInfo;1===_.nodeType?_.textContent="":9===_.nodeType&&_.documentElement&&_.removeChild(_.documentElement);break;default:throw Error(l(163))}}catch(e){Sc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Xi=e;break}Xi=t.return}h=tu,tu=!1}(e,n),vu(n,e),mr(ta),Vt=!!ea,ta=ea=null,e.current=n,gu(n,e,a),Ze(),Au=u,yt=i,Ou.transition=o}else e.current=n;if(Qu&&(Qu=!1,Ku=e,qu=a),0===(o=e.pendingLanes)&&(Yu=null),function(e){if(lt&&"function"==typeof lt.onCommitFiberRoot)try{lt.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),rc(e,Ge()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Vu)throw Vu=!1,e=Wu,Wu=null,e;0!=(1&qu)&&0!==e.tag&&wc(),0!=(1&(o=e.pendingLanes))?e===Gu?Zu++:(Zu=0,Gu=e):Zu=0,Ha()}(e,t,n,r)}finally{Ou.transition=a,yt=r}return null}function wc(){if(null!==Ku){var e=_t(qu),t=Ou.transition,n=yt;try{if(Ou.transition=null,yt=16>e?16:e,null===Ku)var r=!1;else{if(e=Ku,Ku=null,qu=0,0!=(6&Au))throw Error(l(331));var a=Au;for(Au|=4,Xi=e.current;null!==Xi;){var o=Xi,i=o.child;if(0!=(16&Xi.flags)){var u=o.deletions;if(null!==u){for(var c=0;c<u.length;c++){var s=u[c];for(Xi=s;null!==Xi;){var d=Xi;switch(d.tag){case 0:case 11:case 15:nu(8,d,o)}var f=d.child;if(null!==f)f.return=d,Xi=f;else for(;null!==Xi;){var p=(d=Xi).sibling,m=d.return;if(lu(d),d===s){Xi=null;break}if(null!==p){p.return=m,Xi=p;break}Xi=m}}}var h=o.alternate;if(null!==h){var v=h.child;if(null!==v){h.child=null;do{var b=v.sibling;v.sibling=null,v=b}while(null!==v)}}Xi=o}}if(0!=(2064&o.subtreeFlags)&&null!==i)i.return=o,Xi=i;else e:for(;null!==Xi;){if(0!=(2048&(o=Xi).flags))switch(o.tag){case 0:case 11:case 15:nu(9,o,o.return)}var g=o.sibling;if(null!==g){g.return=o.return,Xi=g;break e}Xi=o.return}}var y=e.current;for(Xi=y;null!==Xi;){var _=(i=Xi).child;if(0!=(2064&i.subtreeFlags)&&null!==_)_.return=i,Xi=_;else e:for(i=y;null!==Xi;){if(0!=(2048&(u=Xi).flags))try{switch(u.tag){case 0:case 11:case 15:ru(9,u)}}catch(e){Sc(u,u.return,e)}if(u===i){Xi=null;break e}var E=u.sibling;if(null!==E){E.return=u.return,Xi=E;break e}Xi=u.return}}if(Au=a,Ha(),lt&&"function"==typeof lt.onPostCommitFiberRoot)try{lt.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{yt=n,Ou.transition=t}}return!1}function Cc(e,t,n){e=Ml(e,t=mi(0,t=si(n,t),1),1),t=ec(),null!==e&&(bt(e,1,t),rc(e,t))}function Sc(e,t,n){if(3===e.tag)Cc(e,e,n);else for(;null!==t;){if(3===t.tag){Cc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Yu||!Yu.has(r))){t=Ml(t,e=hi(t,e=si(n,e),1),1),e=ec(),null!==t&&(bt(t,1,e),rc(t,e));break}}t=t.return}}function kc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ec(),e.pingedLanes|=e.suspendedLanes&n,Pu===e&&(Du&n)===n&&(4===Mu||3===Mu&&(130023424&Du)===Du&&500>Ge()-Uu?fc(e,0):Bu|=n),rc(e,t)}function xc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=st,0==(130023424&(st<<=1))&&(st=4194304)));var n=ec();null!==(e=Pl(e,t))&&(bt(e,t,n),rc(e,n))}function Oc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),xc(e,n)}function Ac(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(l(314))}null!==r&&r.delete(t),xc(e,n)}function Pc(e,t){return Qe(e,t)}function Nc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Dc(e,t,n,r){return new Nc(e,t,n,r)}function jc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tc(e,t){var n=e.alternate;return null===n?((n=Dc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Mc(e,t,n,r,a,o){var i=2;if(r=e,"function"==typeof e)jc(e)&&(i=1);else if("string"==typeof e)i=5;else e:switch(e){case C:return Lc(n.children,a,o,t);case S:i=8,a|=8;break;case k:return(e=Dc(12,n,t,2|a)).elementType=k,e.lanes=o,e;case P:return(e=Dc(13,n,t,a)).elementType=P,e.lanes=o,e;case N:return(e=Dc(19,n,t,a)).elementType=N,e.lanes=o,e;case T:return Rc(n,a,o,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case x:i=10;break e;case O:i=9;break e;case A:i=11;break e;case D:i=14;break e;case j:i=16,r=null;break e}throw Error(l(130,null==e?e:typeof e,""))}return(t=Dc(i,n,t,a)).elementType=e,t.type=r,t.lanes=o,t}function Lc(e,t,n,r){return(e=Dc(7,e,r,t)).lanes=n,e}function Rc(e,t,n,r){return(e=Dc(22,e,r,t)).elementType=T,e.lanes=n,e.stateNode={isHidden:!1},e}function Ic(e,t,n){return(e=Dc(6,e,null,t)).lanes=n,e}function Bc(e,t,n){return(t=Dc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function zc(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Fc(e,t,n,r,a,l,o,i,u){return e=new zc(e,t,n,i,u),1===t?(t=1,!0===l&&(t|=8)):t=0,l=Dc(3,null,null,t),e.current=l,l.stateNode=e,l.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Dl(l),e}function Uc(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:w,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Hc(e){if(!e)return Oa;e:{if(He(e=e._reactInternals)!==e||1!==e.tag)throw Error(l(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(ja(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(l(171))}if(1===e.tag){var n=e.type;if(ja(n))return La(e,n,t)}return t}function $c(e,t,n,r,a,l,o,i,u){return(e=Fc(n,r,!0,e,0,l,0,i,u)).context=Hc(null),n=e.current,(l=Tl(r=ec(),a=tc(n))).callback=null!=t?t:null,Ml(n,l,a),e.current.lanes=a,bt(e,a,r),rc(e,r),e}function Vc(e,t,n,r){var a=t.current,l=ec(),o=tc(a);return n=Hc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Tl(l,o)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Ml(a,t,o))&&(nc(e,a,o,l),Ll(e,a,o)),o}function Wc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Yc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Qc(e,t){Yc(e,t),(e=e.alternate)&&Yc(e,t)}Cu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Pa.current)_i=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return _i=!1,function(e,t,n){switch(t.tag){case 3:Ni(t),pl();break;case 5:lo(t);break;case 1:ja(t.type)&&Ra(t);break;case 4:ro(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;xa(bl,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(xa(io,1&io.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ii(e,t,n):(xa(io,1&io.current),null!==(e=Vi(e,t,n))?e.sibling:null);xa(io,1&io.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Hi(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),xa(io,io.current),r)break;return null;case 22:case 23:return t.lanes=0,ki(e,t,n)}return Vi(e,t,n)}(e,t,n);_i=0!=(131072&e.flags)}else _i=!1,al&&0!=(1048576&t.flags)&&Ja(t,Ya,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;$i(e,t),e=t.pendingProps;var a=Da(t,Aa.current);Sl(t,n),a=So(null,t,r,e,a,n);var o=ko();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,ja(r)?(o=!0,Ra(t)):o=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Dl(t),a.updater=Ul,t.stateNode=a,a._reactInternals=t,Wl(t,r,e,n),t=Pi(null,t,r,!0,o,n)):(t.tag=0,al&&o&&el(t),Ei(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch($i(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return jc(e)?1:0;if(null!=e){if((e=e.$$typeof)===A)return 11;if(e===D)return 14}return 2}(r),e=vl(r,e),a){case 0:t=Oi(null,t,r,e,n);break e;case 1:t=Ai(null,t,r,e,n);break e;case 11:t=wi(null,t,r,e,n);break e;case 14:t=Ci(null,t,r,vl(r.type,e),n);break e}throw Error(l(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Oi(e,t,r,a=t.elementType===r?a:vl(r,a),n);case 1:return r=t.type,a=t.pendingProps,Ai(e,t,r,a=t.elementType===r?a:vl(r,a),n);case 3:e:{if(Ni(t),null===e)throw Error(l(387));r=t.pendingProps,a=(o=t.memoizedState).element,jl(e,t),Il(t,r,null,n);var i=t.memoizedState;if(r=i.element,o.isDehydrated){if(o={element:r,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions},t.updateQueue.baseState=o,t.memoizedState=o,256&t.flags){t=Di(e,t,r,n,a=si(Error(l(423)),t));break e}if(r!==a){t=Di(e,t,r,n,a=si(Error(l(424)),t));break e}for(rl=ca(t.stateNode.containerInfo.firstChild),nl=t,al=!0,ll=null,n=Gl(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(pl(),r===a){t=Vi(e,t,n);break e}Ei(e,t,r,n)}t=t.child}return t;case 5:return lo(t),null===e&&cl(t),r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,i=a.children,na(r,a)?i=null:null!==o&&na(r,o)&&(t.flags|=32),xi(e,t),Ei(e,t,i,n),t.child;case 6:return null===e&&cl(t),null;case 13:return Ii(e,t,n);case 4:return ro(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Zl(t,null,r,n):Ei(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,wi(e,t,r,a=t.elementType===r?a:vl(r,a),n);case 7:return Ei(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ei(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,o=t.memoizedProps,i=a.value,xa(bl,r._currentValue),r._currentValue=i,null!==o)if(ir(o.value,i)){if(o.children===a.children&&!Pa.current){t=Vi(e,t,n);break e}}else for(null!==(o=t.child)&&(o.return=t);null!==o;){var u=o.dependencies;if(null!==u){i=o.child;for(var c=u.firstContext;null!==c;){if(c.context===r){if(1===o.tag){(c=Tl(-1,n&-n)).tag=2;var s=o.updateQueue;if(null!==s){var d=(s=s.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),s.pending=c}}o.lanes|=n,null!==(c=o.alternate)&&(c.lanes|=n),Cl(o.return,n,t),u.lanes|=n;break}c=c.next}}else if(10===o.tag)i=o.type===t.type?null:o.child;else if(18===o.tag){if(null===(i=o.return))throw Error(l(341));i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),Cl(i,n,t),i=o.sibling}else i=o.child;if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===t){i=null;break}if(null!==(o=i.sibling)){o.return=i.return,i=o;break}i=i.return}o=i}Ei(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Sl(t,n),r=r(a=kl(a)),t.flags|=1,Ei(e,t,r,n),t.child;case 14:return a=vl(r=t.type,t.pendingProps),Ci(e,t,r,a=vl(r.type,a),n);case 15:return Si(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:vl(r,a),$i(e,t),t.tag=1,ja(r)?(e=!0,Ra(t)):e=!1,Sl(t,n),$l(t,r,a),Wl(t,r,a,n),Pi(null,t,r,!0,e,n);case 19:return Hi(e,t,n);case 22:return ki(e,t,n)}throw Error(l(156,t.tag))};var Kc="function"==typeof reportError?reportError:function(e){console.error(e)};function qc(e){this._internalRoot=e}function Zc(e){this._internalRoot=e}function Gc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Jc(){}function es(e,t,n,r,a){var l=n._reactRootContainer;if(l){var o=l;if("function"==typeof a){var i=a;a=function(){var e=Wc(o);i.call(e)}}Vc(t,o,e,a)}else o=function(e,t,n,r,a){if(a){if("function"==typeof r){var l=r;r=function(){var e=Wc(o);l.call(e)}}var o=$c(t,r,e,0,null,!1,0,"",Jc);return e._reactRootContainer=o,e[ma]=o.current,Hr(8===e.nodeType?e.parentNode:e),sc(),o}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var i=r;r=function(){var e=Wc(u);i.call(e)}}var u=Fc(e,0,!1,null,0,!1,0,"",Jc);return e._reactRootContainer=u,e[ma]=u.current,Hr(8===e.nodeType?e.parentNode:e),sc((function(){Vc(t,u,n,r)})),u}(n,t,e,a,r);return Wc(o)}Zc.prototype.render=qc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(l(409));Vc(e,t,null,null)},Zc.prototype.unmount=qc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;sc((function(){Vc(null,e,null,null)})),t[ma]=null}},Zc.prototype.unstable_scheduleHydration=function(e){if(e){var t=St();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Tt.length&&0!==t&&t<Tt[n].priority;n++);Tt.splice(n,0,e),0===n&&It(e)}},Et=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(gt(t,1|n),rc(t,Ge()),0==(6&Au)&&(Hu=Ge()+500,Ha()))}break;case 13:sc((function(){var t=Pl(e,1);if(null!==t){var n=ec();nc(t,e,1,n)}})),Qc(e,1)}},wt=function(e){if(13===e.tag){var t=Pl(e,134217728);null!==t&&nc(t,e,134217728,ec()),Qc(e,134217728)}},Ct=function(e){if(13===e.tag){var t=tc(e),n=Pl(e,t);null!==n&&nc(n,e,t,ec()),Qc(e,t)}},St=function(){return yt},kt=function(e,t){var n=yt;try{return yt=e,t()}finally{yt=n}},we=function(e,t,n){switch(t){case"input":if(X(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=Ea(r);if(!a)throw Error(l(90));Q(r),X(r,a)}}}break;case"textarea":le(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ae=cc,Pe=sc;var ts={usingClientEntryPoint:!1,Events:[ya,_a,Ea,xe,Oe,cc]},ns={findFiberByHostInstance:ga,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rs={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var as=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!as.isDisabled&&as.supportsFiber)try{at=as.inject(rs),lt=as}catch(se){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Gc(t))throw Error(l(200));return Uc(e,t,null,n)},t.createRoot=function(e,t){if(!Gc(e))throw Error(l(299));var n=!1,r="",a=Kc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Fc(e,1,!1,null,0,n,0,r,a),e[ma]=t.current,Hr(8===e.nodeType?e.parentNode:e),new qc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(l(188));throw e=Object.keys(e).join(","),Error(l(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return sc(e)},t.hydrate=function(e,t,n){if(!Xc(t))throw Error(l(200));return es(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Gc(e))throw Error(l(405));var r=null!=n&&n.hydratedSources||null,a=!1,o="",i=Kc;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onRecoverableError&&(i=n.onRecoverableError)),t=$c(t,null,e,1,null!=n?n:null,a,0,o,i),e[ma]=t.current,Hr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Zc(t)},t.render=function(e,t,n){if(!Xc(t))throw Error(l(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xc(e))throw Error(l(40));return!!e._reactRootContainer&&(sc((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[ma]=null}))})),!0)},t.unstable_batchedUpdates=cc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xc(n))throw Error(l(200));if(null==e||void 0===e._reactInternals)throw Error(l(38));return es(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{var r=n(3935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},3935:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9818:(e,t,n)=>{n.r(t),n.d(t,{AbortedDeferredError:()=>U,Await:()=>gt,BrowserRouter:()=>It,Form:()=>Ht,HashRouter:()=>Bt,Link:()=>Ft,MemoryRouter:()=>ft,NavLink:()=>Ut,Navigate:()=>pt,NavigationType:()=>r,Outlet:()=>mt,Route:()=>ht,Router:()=>vt,RouterProvider:()=>dt,Routes:()=>bt,ScrollRestoration:()=>Vt,UNSAFE_DataRouterContext:()=>Pe,UNSAFE_DataRouterStateContext:()=>Ne,UNSAFE_DataStaticRouterContext:()=>Ae,UNSAFE_LocationContext:()=>Te,UNSAFE_NavigationContext:()=>je,UNSAFE_RouteContext:()=>Me,UNSAFE_enhanceManualRouteObjects:()=>St,createBrowserRouter:()=>Lt,createHashRouter:()=>Rt,createMemoryRouter:()=>kt,createPath:()=>m,createRoutesFromChildren:()=>wt,createRoutesFromElements:()=>wt,createSearchParams:()=>Dt,defer:()=>V,generatePath:()=>x,isRouteErrorResponse:()=>Q,json:()=>F,matchPath:()=>O,matchRoutes:()=>_,parsePath:()=>h,redirect:()=>W,renderMatches:()=>Ct,resolvePath:()=>j,unstable_HistoryRouter:()=>zt,useActionData:()=>it,useAsyncError:()=>st,useAsyncValue:()=>ct,useFetcher:()=>tn,useFetchers:()=>nn,useFormAction:()=>Jt,useHref:()=>Re,useInRouterContext:()=>Ie,useLinkClickHandler:()=>qt,useLoaderData:()=>lt,useLocation:()=>Be,useMatch:()=>Fe,useMatches:()=>at,useNavigate:()=>Ue,useNavigation:()=>nt,useNavigationType:()=>ze,useOutlet:()=>Ve,useOutletContext:()=>$e,useParams:()=>We,useResolvedPath:()=>Ye,useRevalidator:()=>rt,useRouteError:()=>ut,useRouteLoaderData:()=>ot,useRoutes:()=>Qe,useSearchParams:()=>Zt,useSubmit:()=>Gt});var r,a=n(7294),l=n.t(a,2);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(r||(r={}));const i="popstate";function u(e){void 0===e&&(e={});let t,{initialEntries:n=["/"],initialIndex:a,v5Compat:l=!1}=e;t=n.map(((e,t)=>f(e,"string"==typeof e?null:e.state,0===t?"default":void 0)));let o=c(null==a?t.length-1:a),i=r.Pop,u=null;function c(e){return Math.min(Math.max(e,0),t.length-1)}function s(){return t[o]}function f(e,n,r){void 0===n&&(n=null);let a=p(t?s().pathname:"/",e,n,r);return d("/"===a.pathname.charAt(0),"relative pathnames are not supported in memory history: "+JSON.stringify(e)),a}return{get index(){return o},get action(){return i},get location(){return s()},createHref:e=>"string"==typeof e?e:m(e),encodeLocation:e=>e,push(e,n){i=r.Push;let a=f(e,n);o+=1,t.splice(o,t.length,a),l&&u&&u({action:i,location:a})},replace(e,n){i=r.Replace;let a=f(e,n);t[o]=a,l&&u&&u({action:i,location:a})},go(e){i=r.Pop,o=c(o+e),u&&u({action:i,location:s()})},listen:e=>(u=e,()=>{u=null})}}function c(e){return void 0===e&&(e={}),b((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return p("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:m(t)}),null,e)}function s(e){return void 0===e&&(e={}),b((function(e,t){let{pathname:n="/",search:r="",hash:a=""}=h(e.location.hash.substr(1));return p("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:m(t))}),(function(e,t){d("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),e)}function d(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function f(e){return{usr:e.state,key:e.key}}function p(e,t,n,r){return void 0===n&&(n=null),o({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?h(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function m(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function h(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}function v(e){let t="undefined"!=typeof window&&void 0!==window.location&&"null"!==window.location.origin?window.location.origin:"unknown://unknown",n="string"==typeof e?e:m(e);return new URL(n,t)}function b(e,t,n,a){void 0===a&&(a={});let{window:l=document.defaultView,v5Compat:u=!1}=a,c=l.history,s=r.Pop,d=null;function h(){s=r.Pop,d&&d({action:s,location:b.location})}let b={get action(){return s},get location(){return e(l,c)},listen(e){if(d)throw new Error("A history only accepts one active listener");return l.addEventListener(i,h),d=e,()=>{l.removeEventListener(i,h),d=null}},createHref:e=>t(l,e),encodeLocation(e){let t=v(m(e));return o({},e,{pathname:t.pathname,search:t.search,hash:t.hash})},push:function(e,t){s=r.Push;let a=p(b.location,e,t);n&&n(a,e);let o=f(a),i=b.createHref(a);try{c.pushState(o,"",i)}catch(e){l.location.assign(i)}u&&d&&d({action:s,location:b.location})},replace:function(e,t){s=r.Replace;let a=p(b.location,e,t);n&&n(a,e);let l=f(a),o=b.createHref(a);c.replaceState(l,"",o),u&&d&&d({action:s,location:b.location})},go:e=>c.go(e)};return b}var g;function y(e,t,n){return void 0===t&&(t=[]),void 0===n&&(n=new Set),e.map(((e,r)=>{let a=[...t,r],l="string"==typeof e.id?e.id:a.join("-");return N(!0!==e.index||!e.children,"Cannot specify children on an index route"),N(!n.has(l),'Found a route id collision on id "'+l+"\".  Route id's must be globally unique within Data Router usages"),n.add(l),function(e){return!0===e.index}(e)?o({},e,{id:l}):o({},e,{id:l,children:e.children?y(e.children,a,n):void 0})}))}function _(e,t,n){void 0===n&&(n="/");let r=P(("string"==typeof t?h(t):t).pathname||"/",n);if(null==r)return null;let a=E(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let l=null;for(let e=0;null==l&&e<a.length;++e)l=k(a[e],A(r));return l}function E(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,a)=>{let l={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};l.relativePath.startsWith("/")&&(N(l.relativePath.startsWith(r),'Absolute route path "'+l.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),l.relativePath=l.relativePath.slice(r.length));let o=R([r,l.relativePath]),i=n.concat(l);e.children&&e.children.length>0&&(N(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+o+'".'),E(e.children,t,i,o)),(null!=e.path||e.index)&&t.push({path:o,score:S(o,e.index),routesMeta:i})})),t}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(g||(g={}));const w=/^:\w+$/,C=e=>"*"===e;function S(e,t){let n=e.split("/"),r=n.length;return n.some(C)&&(r+=-2),t&&(r+=2),n.filter((e=>!C(e))).reduce(((e,t)=>e+(w.test(t)?3:""===t?1:10)),r)}function k(e,t){let{routesMeta:n}=e,r={},a="/",l=[];for(let e=0;e<n.length;++e){let o=n[e],i=e===n.length-1,u="/"===a?t:t.slice(a.length)||"/",c=O({path:o.relativePath,caseSensitive:o.caseSensitive,end:i},u);if(!c)return null;Object.assign(r,c.params);let s=o.route;l.push({params:r,pathname:R([a,c.pathname]),pathnameBase:I(R([a,c.pathnameBase])),route:s}),"/"!==c.pathnameBase&&(a=R([a,c.pathnameBase]))}return l}function x(e,t){return void 0===t&&(t={}),e.replace(/:(\w+)/g,((e,n)=>(N(null!=t[n],'Missing ":'+n+'" param'),t[n]))).replace(/(\/?)\*/,((e,n,r,a)=>null==t["*"]?"/*"===a?"/":"":""+n+t["*"]))}function O(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),D("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let l=a[0],o=l.replace(/(.)\/+$/,"$1"),i=a.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=i[n]||"";o=l.slice(0,l.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return D(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(i[n]||"",t),e}),{}),pathname:l,pathnameBase:o,pattern:e}}function A(e){try{return decodeURI(e)}catch(t){return D(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function P(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function N(e,t){if(!1===e||null==e)throw new Error(t)}function D(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function j(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?h(e):e,l=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:l,search:B(r),hash:z(a)}}function T(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function M(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function L(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=h(e):(a=o({},e),N(!a.pathname||!a.pathname.includes("?"),T("?","pathname","search",a)),N(!a.pathname||!a.pathname.includes("#"),T("#","pathname","hash",a)),N(!a.search||!a.search.includes("#"),T("#","search","hash",a)));let l,i=""===e||""===a.pathname,u=i?"/":a.pathname;if(r||null==u)l=n;else{let e=t.length-1;if(u.startsWith("..")){let t=u.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}l=e>=0?t[e]:"/"}let c=j(a,l),s=u&&"/"!==u&&u.endsWith("/"),d=(i||"."===u)&&n.endsWith("/");return c.pathname.endsWith("/")||!s&&!d||(c.pathname+="/"),c}const R=e=>e.join("/").replace(/\/\/+/g,"/"),I=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),B=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",z=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"",F=function(e,t){void 0===t&&(t={});let n="number"==typeof t?{status:t}:t,r=new Headers(n.headers);return r.has("Content-Type")||r.set("Content-Type","application/json; charset=utf-8"),new Response(JSON.stringify(e),o({},n,{headers:r}))};class U extends Error{}class H{constructor(e){let t;this.pendingKeys=new Set,this.subscriber=void 0,N(e&&"object"==typeof e&&!Array.isArray(e),"defer() only accepts plain objects"),this.abortPromise=new Promise(((e,n)=>t=n)),this.controller=new AbortController;let n=()=>t(new U("Deferred data aborted"));this.unlistenAbortSignal=()=>this.controller.signal.removeEventListener("abort",n),this.controller.signal.addEventListener("abort",n),this.data=Object.entries(e).reduce(((e,t)=>{let[n,r]=t;return Object.assign(e,{[n]:this.trackPromise(n,r)})}),{})}trackPromise(e,t){if(!(t instanceof Promise))return t;this.pendingKeys.add(e);let n=Promise.race([t,this.abortPromise]).then((t=>this.onSettle(n,e,null,t)),(t=>this.onSettle(n,e,t)));return n.catch((()=>{})),Object.defineProperty(n,"_tracked",{get:()=>!0}),n}onSettle(e,t,n,r){if(this.controller.signal.aborted&&n instanceof U)return this.unlistenAbortSignal(),Object.defineProperty(e,"_error",{get:()=>n}),Promise.reject(n);this.pendingKeys.delete(t),this.done&&this.unlistenAbortSignal();const a=this.subscriber;return n?(Object.defineProperty(e,"_error",{get:()=>n}),a&&a(!1),Promise.reject(n)):(Object.defineProperty(e,"_data",{get:()=>r}),a&&a(!1),r)}subscribe(e){this.subscriber=e}cancel(){this.controller.abort(),this.pendingKeys.forEach(((e,t)=>this.pendingKeys.delete(t)));let e=this.subscriber;e&&e(!0)}async resolveData(e){let t=!1;if(!this.done){let n=()=>this.cancel();e.addEventListener("abort",n),t=await new Promise((t=>{this.subscribe((r=>{e.removeEventListener("abort",n),(r||this.done)&&t(r)}))}))}return t}get done(){return 0===this.pendingKeys.size}get unwrappedData(){return N(null!==this.data&&this.done,"Can only unwrap data on initialized and settled deferreds"),Object.entries(this.data).reduce(((e,t)=>{let[n,r]=t;return Object.assign(e,{[n]:$(r)})}),{})}}function $(e){if(!function(e){return e instanceof Promise&&!0===e._tracked}(e))return e;if(e._error)throw e._error;return e._data}function V(e){return new H(e)}const W=function(e,t){void 0===t&&(t=302);let n=t;"number"==typeof n?n={status:n}:void 0===n.status&&(n.status=302);let r=new Headers(n.headers);return r.set("Location",e),new Response(null,o({},n,{headers:r}))};class Y{constructor(e,t,n){this.status=e,this.statusText=t||"",this.data=n}}function Q(e){return e instanceof Y}const K={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},q={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},Z=!("undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement);function G(e){N(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let t=y(e.routes),n=null,a=new Set,l=null,i=null,u=null,c=!1,s=_(t,e.history.location,e.basename),d=null;if(null==s){let{matches:e,route:n,error:r}=se(t);s=e,d={[n.id]:r}}let f,m,h=!s.some((e=>e.route.loader))||null!=e.hydrationData,v={historyAction:e.history.action,location:e.history.location,matches:s,initialized:h,navigation:K,restoreScrollPosition:null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||d,fetchers:new Map},b=r.Pop,g=!1,E=!1,w=!1,C=[],S=[],k=new Map,x=0,O=-1,A=new Map,P=new Set,D=new Map,j=new Map;function T(e){v=o({},v,e),a.forEach((e=>e(v)))}function M(t,n){var a;T(o({},null!=v.actionData&&null!=v.navigation.formMethod&&"loading"===v.navigation.state&&(null==(a=v.navigation.formAction)?void 0:a.split("?")[0])===t.pathname?{}:{actionData:null},n,n.loaderData?{loaderData:ue(v.loaderData,n.loaderData,n.matches||[])}:{},{historyAction:b,location:t,initialized:!0,navigation:K,revalidation:"idle",restoreScrollPosition:!v.navigation.formData&&Q(t,n.matches||v.matches),preventScrollReset:g})),E||b===r.Pop||(b===r.Push?e.history.push(t,t.state):b===r.Replace&&e.history.replace(t,t.state)),b=r.Pop,g=!1,E=!1,w=!1,C=[],S=[]}async function L(n,a,c){m&&m.abort(),m=null,b=n,E=!0===(c&&c.startUninterruptedRevalidation),function(e,t){if(l&&i&&u){let n=t.map((e=>_e(e,v.loaderData))),r=i(e,n)||e.key;l[r]=u()}}(v.location,v.matches),g=!0===(c&&c.preventScrollReset);let s=c&&c.overrideNavigation,d=_(t,a,e.basename);if(!d){let{matches:e,route:n,error:r}=se(t);return W(),void M(a,{matches:e,loaderData:{},errors:{[n.id]:r}})}if(y=a,(h=v.location).pathname===y.pathname&&h.search===y.search&&h.hash!==y.hash)return void M(a,{matches:d});var h,y;m=new AbortController;let A,L,R=le(a,m.signal,c&&c.submission);if(c&&c.pendingError)L={[ce(d).route.id]:c.pendingError};else if(c&&c.submission){let e=await async function(e,t,n,a,l){let i;z(),T({navigation:o({state:"submitting",location:t},n)});let u=Ee(a,t);if(u.route.action){if(i=await ae("action",e,u,a,f.basename),e.signal.aborted)return{shortCircuited:!0}}else i=de(t);if(ve(i)){let e=o({state:"loading",location:p(v.location,i.location)},n);return await I(i,e,l&&l.replace),{shortCircuited:!0}}if(he(i)){let e=ce(a,u.route.id);return!0!==(l&&l.replace)&&(b=r.Push),{pendingActionError:{[e.route.id]:i.error}}}if(me(i))throw new Error("defer() is not supported in actions");return{pendingActionData:{[u.route.id]:i.data}}}(R,a,c.submission,d,{replace:c.replace});if(e.shortCircuited)return;A=e.pendingActionData,L=e.pendingActionError,s=o({state:"loading",location:a},c.submission)}let{shortCircuited:F,loaderData:U,errors:H}=await async function(e,t,n,r,a,l,i,u){let c=r;c||(c={state:"loading",location:t,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0});let[s,d]=te(v,n,a,t,w,C,S,i,u,D);if(W((e=>!(n&&n.some((t=>t.route.id===e)))||s&&s.some((t=>t.route.id===e)))),0===s.length&&0===d.length)return M(t,{matches:n,loaderData:ue(v.loaderData,{},n),errors:u||null,actionData:i||null}),{shortCircuited:!0};E||(d.forEach((e=>{let[t]=e,n=v.fetchers.get(t),r={state:"loading",data:n&&n.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};v.fetchers.set(t,r)})),T(o({navigation:c,actionData:i||v.actionData||null},d.length>0?{fetchers:new Map(v.fetchers)}:{}))),O=++x,d.forEach((e=>{let[t]=e;return k.set(t,m)}));let{results:f,loaderResults:p,fetcherResults:h}=await B(v.matches,n,s,d,e);if(e.signal.aborted)return{shortCircuited:!0};d.forEach((e=>{let[t]=e;return k.delete(t)}));let b=fe(f);if(b){let e=ee(v,b);return await I(b,e,l),{shortCircuited:!0}}let{loaderData:g,errors:y}=ie(v,n,s,p,u,d,h,j);return j.forEach(((e,t)=>{e.subscribe((n=>{(n||e.done)&&j.delete(t)}))})),function(){let e=[];for(let t of P){let n=v.fetchers.get(t);N(n,"Expected fetcher: "+t),"loading"===n.state&&(P.delete(t),e.push(t))}$(e)}(),o({loaderData:g,errors:y},V(O)||d.length>0?{fetchers:new Map(v.fetchers)}:{})}(R,a,d,s,c&&c.submission,c&&c.replace,A,L);F||(m=null,M(a,{matches:d,loaderData:U,errors:H}))}function R(e){return v.fetchers.get(e)||q}async function I(e,t,n){e.revalidate&&(w=!0),N(t.location,"Expected a location on the redirect navigation"),m=null;let a=!0===n?r.Replace:r.Push;await L(a,t.location,{overrideNavigation:t})}async function B(e,t,n,r,a){let l=await Promise.all([...n.map((e=>ae("loader",a,e,t,f.basename))),...r.map((e=>{let[,t,n,r]=e;return ae("loader",le(t,a.signal),n,r,f.basename)}))]),o=l.slice(0,n.length),i=l.slice(n.length);return await Promise.all([be(e,n,o,a.signal,!1,v.loaderData),be(e,r.map((e=>{let[,,t]=e;return t})),i,a.signal,!0)]),{results:l,loaderResults:o,fetcherResults:i}}function z(){w=!0,C.push(...W()),D.forEach(((e,t)=>{k.has(t)&&(S.push(t),H(t))}))}function F(e,t,n){let r=ce(v.matches,t);U(e),T({errors:{[r.route.id]:n},fetchers:new Map(v.fetchers)})}function U(e){k.has(e)&&H(e),D.delete(e),A.delete(e),P.delete(e),v.fetchers.delete(e)}function H(e){let t=k.get(e);N(t,"Expected fetch controller: "+e),t.abort(),k.delete(e)}function $(e){for(let t of e){let e={state:"idle",data:R(t).data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};v.fetchers.set(t,e)}}function V(e){let t=[];for(let[n,r]of A)if(r<e){let e=v.fetchers.get(n);N(e,"Expected fetcher: "+n),"loading"===e.state&&(H(n),A.delete(n),t.push(n))}return $(t),t.length>0}function W(e){let t=[];return j.forEach(((n,r)=>{e&&!e(r)||(n.cancel(),t.push(r),j.delete(r))})),t}function Q(e,t){if(l&&i&&u){let n=t.map((e=>_e(e,v.loaderData))),r=i(e,n)||e.key,a=l[r];if("number"==typeof a)return a}return null}return f={get basename(){return e.basename},get state(){return v},get routes(){return t},initialize:function(){return n=e.history.listen((e=>{let{action:t,location:n}=e;return L(t,n)})),v.initialized||L(r.Pop,v.location),f},subscribe:function(e){return a.add(e),()=>a.delete(e)},enableScrollRestoration:function(e,t,n){if(l=e,u=t,i=n||(e=>e.key),!c&&v.navigation===K){c=!0;let e=Q(v.location,v.matches);null!=e&&T({restoreScrollPosition:e})}return()=>{l=null,u=null,i=null}},navigate:async function(t,n){if("number"==typeof t)return void e.history.go(t);let{path:a,submission:l,error:o}=J(t,n),i=p(v.location,a,n&&n.state);i=e.history.encodeLocation(i);let u=!0===(n&&n.replace)||null!=l?r.Replace:r.Push,c=n&&"preventScrollReset"in n?!0===n.preventScrollReset:void 0;return await L(u,i,{submission:l,pendingError:o,preventScrollReset:c,replace:n&&n.replace})},fetch:function(n,r,a,l){if(Z)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");k.has(n)&&H(n);let i=_(t,a,e.basename);if(!i)return void F(n,r,new Y(404,"Not Found",null));let{path:u,submission:c}=J(a,l,!0),s=Ee(i,u);c?async function(n,r,a,l,i,u){if(z(),D.delete(n),!l.route.action){let{error:e}=de(a);return void F(n,r,e)}let c=v.fetchers.get(n),s=o({state:"submitting"},u,{data:c&&c.data});v.fetchers.set(n,s),T({fetchers:new Map(v.fetchers)});let d=new AbortController,h=le(a,d.signal,u);k.set(n,d);let g=await ae("action",h,l,i,f.basename);if(h.signal.aborted)return void(k.get(n)===d&&k.delete(n));if(ve(g)){k.delete(n),P.add(n);let e=o({state:"loading"},u,{data:void 0});v.fetchers.set(n,e),T({fetchers:new Map(v.fetchers)});let t=o({state:"loading",location:p(v.location,g.location)},u);return void await I(g,t)}if(he(g))return void F(n,r,g.error);me(g)&&N(!1,"defer() is not supported in actions");let y=v.navigation.location||v.location,E=le(y,d.signal),L="idle"!==v.navigation.state?_(t,v.navigation.location,e.basename):v.matches;N(L,"Didn't find any matches after fetcher action");let R=++x;A.set(n,R);let U=o({state:"loading",data:g.data},u);v.fetchers.set(n,U);let[H,$]=te(v,L,u,y,w,C,S,{[l.route.id]:g.data},void 0,D);$.filter((e=>{let[t]=e;return t!==n})).forEach((e=>{let[t]=e,n=v.fetchers.get(t),r={state:"loading",data:n&&n.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};v.fetchers.set(t,r),k.set(t,d)})),T({fetchers:new Map(v.fetchers)});let{results:W,loaderResults:Y,fetcherResults:Q}=await B(v.matches,L,H,$,E);if(d.signal.aborted)return;A.delete(n),k.delete(n),$.forEach((e=>{let[t]=e;return k.delete(t)}));let K=fe(W);if(K){let e=ee(v,K);return void await I(K,e)}let{loaderData:q,errors:Z}=ie(v,v.matches,H,Y,void 0,$,Q,j),G={state:"idle",data:g.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};v.fetchers.set(n,G);let X=V(R);"loading"===v.navigation.state&&R>O?(N(b,"Expected pending action"),m&&m.abort(),M(v.navigation.location,{matches:L,loaderData:q,errors:Z,fetchers:new Map(v.fetchers)})):(T(o({errors:Z,loaderData:ue(v.loaderData,q,L)},X?{fetchers:new Map(v.fetchers)}:{})),w=!1)}(n,r,u,s,i,c):(D.set(n,[u,s,i]),async function(e,t,n,r,a){let l=v.fetchers.get(e),o={state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,data:l&&l.data};v.fetchers.set(e,o),T({fetchers:new Map(v.fetchers)});let i=new AbortController,u=le(n,i.signal);k.set(e,i);let c=await ae("loader",u,r,a,f.basename);if(me(c)&&(c=await ge(c,u.signal,!0)||c),k.get(e)===i&&k.delete(e),u.signal.aborted)return;if(ve(c)){let e=ee(v,c);return void await I(c,e)}if(he(c)){let n=ce(v.matches,t);return v.fetchers.delete(e),void T({fetchers:new Map(v.fetchers),errors:{[n.route.id]:c.error}})}N(!me(c),"Unhandled fetcher deferred data");let s={state:"idle",data:c.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};v.fetchers.set(e,s),T({fetchers:new Map(v.fetchers)})}(n,r,u,s,i))},revalidate:function(){z(),T({revalidation:"loading"}),"submitting"!==v.navigation.state&&("idle"!==v.navigation.state?L(b||v.historyAction,v.navigation.location,{overrideNavigation:v.navigation}):L(v.historyAction,v.location,{startUninterruptedRevalidation:!0}))},createHref:t=>e.history.createHref(t),getFetcher:R,deleteFetcher:U,dispose:function(){n&&n(),a.clear(),m&&m.abort(),v.fetchers.forEach(((e,t)=>U(t)))},_internalFetchControllers:k,_internalActiveDeferreds:j},f}const X=new Set(["POST","PUT","PATCH","DELETE"]);function J(e,t,n){void 0===n&&(n=!1);let r="string"==typeof e?e:m(e);if(!t||!("formMethod"in t)&&!("formData"in t))return{path:r};if(null!=t.formMethod&&"get"!==t.formMethod)return{path:r,submission:{formMethod:t.formMethod,formAction:pe(r),formEncType:t&&t.formEncType||"application/x-www-form-urlencoded",formData:t.formData}};if(!t.formData)return{path:r};let a=h(r);try{let e=oe(t.formData);n&&a.search&&ye(a.search)&&e.append("index",""),a.search="?"+e}catch(e){return{path:r,error:new Y(400,"Bad Request","Cannot submit binary form data using GET")}}return{path:m(a)}}function ee(e,t){let{formMethod:n,formAction:r,formEncType:a,formData:l}=e.navigation;return{state:"loading",location:p(e.location,t.location),formMethod:n||void 0,formAction:r||void 0,formEncType:a||void 0,formData:l||void 0}}function te(e,t,n,r,a,l,o,i,u,c){let s=u?Object.values(u)[0]:i?Object.values(i)[0]:null,d=function(e,t){let n=e;if(t){let r=e.findIndex((e=>e.route.id===t));r>=0&&(n=e.slice(0,r))}return n}(t,u?Object.keys(u)[0]:void 0).filter(((t,o)=>null!=t.route.loader&&(function(e,t,n){let r=!t||n.route.id!==t.route.id,a=void 0===e[n.route.id];return r||a}(e.loaderData,e.matches[o],t)||l.some((e=>e===t.route.id))||re(e.location,e.matches[o],n,r,t,a,s)))),f=[];return c&&c.forEach(((e,t)=>{let[r,l,i]=e;(o.includes(t)||a&&re(r,l,n,r,l,a,s))&&f.push([t,r,l,i])})),[d,f]}function ne(e,t){let n=e.route.path;return e.pathname!==t.pathname||n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function re(e,t,n,r,a,l,i){let u=v(e),c=t.params,s=v(r),d=a.params,f=ne(t,a)||u.toString()===s.toString()||u.search!==s.search||l;if(a.route.shouldRevalidate){let e=a.route.shouldRevalidate(o({currentUrl:u,currentParams:c,nextUrl:s,nextParams:d},n,{actionResult:i,defaultShouldRevalidate:f}));if("boolean"==typeof e)return e}return f}async function ae(e,t,n,r,a,l,o){let i,u,c;void 0===l&&(l=!1),void 0===o&&(o=!1);let s=new Promise(((e,t)=>c=t)),d=()=>c();t.signal.addEventListener("abort",d);try{let r=n.route[e];N(r,"Could not find the "+e+' to run on the "'+n.route.id+'" route'),u=await Promise.race([r({request:t,params:n.params}),s])}catch(e){i=g.error,u=e}finally{t.signal.removeEventListener("abort",d)}if(u instanceof Response){let e,c=u.status;if(c>=300&&c<=399){let e=u.headers.get("Location");N(e,"Redirects returned/thrown from loaders/actions must have a Location header");let o=L(e,M(r.slice(0,r.indexOf(n)+1)).map((e=>e.pathnameBase)),v(t.url).pathname);if(N(m(o),"Unable to resolve redirect location: "+u.headers.get("Location")),a){let e=o.pathname;o.pathname="/"===e?a:R([a,e])}if(e=m(o),l)throw u.headers.set("Location",e),u;return{type:g.redirect,status:c,location:e,revalidate:null!==u.headers.get("X-Remix-Revalidate")}}if(o)throw{type:i||g.data,response:u};let s=u.headers.get("Content-Type");return e=s&&s.startsWith("application/json")?await u.json():await u.text(),i===g.error?{type:i,error:new Y(c,u.statusText,e),headers:u.headers}:{type:g.data,data:e,statusCode:u.status,headers:u.headers}}return i===g.error?{type:i,error:u}:u instanceof H?{type:g.deferred,deferredData:u}:{type:g.data,data:u}}function le(e,t,n){let r=v(pe(e)).toString(),a={signal:t};if(n){let{formMethod:e,formEncType:t,formData:r}=n;a.method=e.toUpperCase(),a.body="application/x-www-form-urlencoded"===t?oe(r):r}return new Request(r,a)}function oe(e){let t=new URLSearchParams;for(let[n,r]of e.entries())N("string"==typeof r,'File inputs are not supported with encType "application/x-www-form-urlencoded", please use "multipart/form-data" instead.'),t.append(n,r);return t}function ie(e,t,n,r,a,l,i,u){let{loaderData:c,errors:s}=function(e,t,n,r,a){let l,o={},i=null,u=!1,c={};return n.forEach(((n,s)=>{let d=t[s].route.id;if(N(!ve(n),"Cannot handle redirect results in processLoaderData"),he(n)){let t=ce(e,d),a=n.error;r&&(a=Object.values(r)[0],r=void 0),i=Object.assign(i||{},{[t.route.id]:a}),u||(u=!0,l=Q(n.error)?n.error.status:500),n.headers&&(c[d]=n.headers)}else me(n)?(a&&a.set(d,n.deferredData),o[d]=n.deferredData.data):(o[d]=n.data,null==n.statusCode||200===n.statusCode||u||(l=n.statusCode),n.headers&&(c[d]=n.headers))})),r&&(i=r),{loaderData:o,errors:i,statusCode:l||200,loaderHeaders:c}}(t,n,r,a,u);for(let t=0;t<l.length;t++){let[n,,r]=l[t];N(void 0!==i&&void 0!==i[t],"Did not find corresponding fetcher result");let a=i[t];if(he(a)){let t=ce(e.matches,r.route.id);s&&s[t.route.id]||(s=o({},s,{[t.route.id]:a.error})),e.fetchers.delete(n)}else{if(ve(a))throw new Error("Unhandled fetcher revalidation redirect");if(me(a))throw new Error("Unhandled fetcher deferred data");{let t={state:"idle",data:a.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};e.fetchers.set(n,t)}}}return{loaderData:c,errors:s}}function ue(e,t,n){let r=o({},t);return n.forEach((n=>{let a=n.route.id;void 0===t[a]&&void 0!==e[a]&&(r[a]=e[a])})),r}function ce(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function se(e){return function(e,t,n){let r=e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-"+t+"-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:r}],route:r,error:new Y(t,n,null)}}(e,404,"Not Found")}function de(e){let t="string"==typeof e?e:m(e);return console.warn("You're trying to submit to a route that does not have an action.  To fix this, please add an `action` function to the route for ["+t+"]"),{type:g.error,error:new Y(405,"Method Not Allowed","")}}function fe(e){for(let t=e.length-1;t>=0;t--){let n=e[t];if(ve(n))return n}}function pe(e){return m(o({},"string"==typeof e?h(e):e,{hash:""}))}function me(e){return e.type===g.deferred}function he(e){return e.type===g.error}function ve(e){return(e&&e.type)===g.redirect}async function be(e,t,n,r,a,l){for(let o=0;o<n.length;o++){let i=n[o],u=t[o],c=e.find((e=>e.route.id===u.route.id)),s=null!=c&&!ne(c,u)&&void 0!==(l&&l[u.route.id]);me(i)&&(a||s)&&await ge(i,r,a).then((e=>{e&&(n[o]=e||n[o])}))}}async function ge(e,t,n){if(void 0===n&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:g.data,data:e.deferredData.unwrappedData}}catch(e){return{type:g.error,error:e}}return{type:g.data,data:e.deferredData.data}}}function ye(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function _e(e,t){let{route:n,pathname:r,params:a}=e;return{id:n.id,pathname:r,params:a,data:t[n.id],handle:n.handle}}function Ee(e,t){let n="string"==typeof t?h(t).search:t.search;if(e[e.length-1].route.index&&ye(n||""))return e[e.length-1];let r=M(e);return r[r.length-1]}function we(){return we=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},we.apply(this,arguments)}new Set(["GET","HEAD",...X]);"function"==typeof Object.is&&Object.is;const{useState:Ce,useEffect:Se,useLayoutEffect:ke,useDebugValue:xe}=l;"undefined"==typeof window||void 0===window.document||window.document.createElement;const Oe=l.useSyncExternalStore,Ae=a.createContext(null),Pe=a.createContext(null),Ne=a.createContext(null),De=a.createContext(null),je=a.createContext(null),Te=a.createContext(null),Me=a.createContext({outlet:null,matches:[]}),Le=a.createContext(null);function Re(e,t){let{relative:n}=void 0===t?{}:t;Ie()||N(!1);let{basename:r,navigator:l}=a.useContext(je),{hash:o,pathname:i,search:u}=Ye(e,{relative:n}),c=i;return"/"!==r&&(c="/"===i?r:R([r,i])),l.createHref({pathname:c,search:u,hash:o})}function Ie(){return null!=a.useContext(Te)}function Be(){return Ie()||N(!1),a.useContext(Te).location}function ze(){return a.useContext(Te).navigationType}function Fe(e){Ie()||N(!1);let{pathname:t}=Be();return a.useMemo((()=>O(e,t)),[t,e])}function Ue(){Ie()||N(!1);let{basename:e,navigator:t}=a.useContext(je),{matches:n}=a.useContext(Me),{pathname:r}=Be(),l=JSON.stringify(M(n).map((e=>e.pathnameBase))),o=a.useRef(!1);return a.useEffect((()=>{o.current=!0})),a.useCallback((function(n,a){if(void 0===a&&(a={}),!o.current)return;if("number"==typeof n)return void t.go(n);let i=L(n,JSON.parse(l),r,"path"===a.relative);"/"!==e&&(i.pathname="/"===i.pathname?e:R([e,i.pathname])),(a.replace?t.replace:t.push)(i,a.state,a)}),[e,t,l,r])}const He=a.createContext(null);function $e(){return a.useContext(He)}function Ve(e){let t=a.useContext(Me).outlet;return t?a.createElement(He.Provider,{value:e},t):t}function We(){let{matches:e}=a.useContext(Me),t=e[e.length-1];return t?t.params:{}}function Ye(e,t){let{relative:n}=void 0===t?{}:t,{matches:r}=a.useContext(Me),{pathname:l}=Be(),o=JSON.stringify(M(r).map((e=>e.pathnameBase)));return a.useMemo((()=>L(e,JSON.parse(o),l,"path"===n)),[e,o,l,n])}function Qe(e,t){Ie()||N(!1);let n=a.useContext(Ne),{matches:l}=a.useContext(Me),o=l[l.length-1],i=o?o.params:{},u=(o&&o.pathname,o?o.pathnameBase:"/");o&&o.route;let c,s=Be();if(t){var d;let e="string"==typeof t?h(t):t;"/"===u||(null==(d=e.pathname)?void 0:d.startsWith(u))||N(!1),c=e}else c=s;let f=c.pathname||"/",p=_(e,{pathname:"/"===u?f:f.slice(u.length)||"/"}),m=Ge(p&&p.map((e=>Object.assign({},e,{params:Object.assign({},i,e.params),pathname:R([u,e.pathname]),pathnameBase:"/"===e.pathnameBase?u:R([u,e.pathnameBase])}))),l,n||void 0);return t&&m?a.createElement(Te.Provider,{value:{location:we({pathname:"/",search:"",hash:"",state:null,key:"default"},c),navigationType:r.Pop}},m):m}function Ke(){let e=ut(),t=Q(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r="rgba(200,200,200, 0.5)",l={padding:"0.5rem",backgroundColor:r},o={padding:"2px 4px",backgroundColor:r};return a.createElement(a.Fragment,null,a.createElement("h2",null,"Unhandled Thrown Error!"),a.createElement("h3",{style:{fontStyle:"italic"}},t),n?a.createElement("pre",{style:l},n):null,a.createElement("p",null,"💿 Hey developer 👋"),a.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",a.createElement("code",{style:o},"errorElement")," props on ",a.createElement("code",{style:o},"<Route>")))}class qe extends a.Component{constructor(e){super(e),this.state={location:e.location,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error,location:e.location}:{error:e.error||t.error,location:t.location}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?a.createElement(Le.Provider,{value:this.state.error,children:this.props.component}):this.props.children}}function Ze(e){let{routeContext:t,match:n,children:r}=e,l=a.useContext(Ae);return l&&n.route.errorElement&&(l._deepestRenderedBoundaryId=n.route.id),a.createElement(Me.Provider,{value:t},r)}function Ge(e,t,n){if(void 0===t&&(t=[]),null==e){if(null==n||!n.errors)return null;e=n.matches}let r=e,l=null==n?void 0:n.errors;if(null!=l){let e=r.findIndex((e=>e.route.id&&(null==l?void 0:l[e.route.id])));e>=0||N(!1),r=r.slice(0,Math.min(r.length,e+1))}return r.reduceRight(((e,o,i)=>{let u=o.route.id?null==l?void 0:l[o.route.id]:null,c=n?o.route.errorElement||a.createElement(Ke,null):null,s=()=>a.createElement(Ze,{match:o,routeContext:{outlet:e,matches:t.concat(r.slice(0,i+1))}},u?c:void 0!==o.route.element?o.route.element:e);return n&&(o.route.errorElement||0===i)?a.createElement(qe,{location:n.location,component:c,error:u,children:s()}):s()}),null)}var Xe,Je,et;function tt(e){let t=a.useContext(Ne);return t||N(!1),t}function nt(){return tt(Je.UseNavigation).navigation}function rt(){let e=function(e){let t=a.useContext(Pe);return t||N(!1),t}(Xe.UseRevalidator),t=tt(Je.UseRevalidator);return{revalidate:e.router.revalidate,state:t.revalidation}}function at(){let{matches:e,loaderData:t}=tt(Je.UseMatches);return a.useMemo((()=>e.map((e=>{let{pathname:n,params:r}=e;return{id:e.route.id,pathname:n,params:r,data:t[e.route.id],handle:e.route.handle}}))),[e,t])}function lt(){let e=tt(Je.UseLoaderData),t=a.useContext(Me);t||N(!1);let n=t.matches[t.matches.length-1];return n.route.id||N(!1),e.loaderData[n.route.id]}function ot(e){return tt(Je.UseRouteLoaderData).loaderData[e]}function it(){let e=tt(Je.UseActionData);return a.useContext(Me)||N(!1),Object.values((null==e?void 0:e.actionData)||{})[0]}function ut(){var e;let t=a.useContext(Le),n=tt(Je.UseRouteError),r=a.useContext(Me),l=r.matches[r.matches.length-1];return t||(r||N(!1),l.route.id||N(!1),null==(e=n.errors)?void 0:e[l.route.id])}function ct(){let e=a.useContext(De);return null==e?void 0:e._data}function st(){let e=a.useContext(De);return null==e?void 0:e._error}function dt(e){let{fallbackElement:t,router:n}=e,r=Oe(n.subscribe,(()=>n.state),(()=>n.state)),l=a.useMemo((()=>({createHref:n.createHref,go:e=>n.navigate(e),push:(e,t,r)=>n.navigate(e,{state:t,preventScrollReset:null==r?void 0:r.preventScrollReset}),replace:(e,t,r)=>n.navigate(e,{replace:!0,state:t,preventScrollReset:null==r?void 0:r.preventScrollReset})})),[n]),o=n.basename||"/";return a.createElement(Pe.Provider,{value:{router:n,navigator:l,static:!1,basename:o}},a.createElement(Ne.Provider,{value:r},a.createElement(vt,{basename:n.basename,location:n.state.location,navigationType:n.state.historyAction,navigator:l},n.state.initialized?a.createElement(bt,null):t)))}function ft(e){let{basename:t,children:n,initialEntries:r,initialIndex:l}=e,o=a.useRef();null==o.current&&(o.current=u({initialEntries:r,initialIndex:l,v5Compat:!0}));let i=o.current,[c,s]=a.useState({action:i.action,location:i.location});return a.useLayoutEffect((()=>i.listen(s)),[i]),a.createElement(vt,{basename:t,children:n,location:c.location,navigationType:c.action,navigator:i})}function pt(e){let{to:t,replace:n,state:r,relative:l}=e;Ie()||N(!1);let o=a.useContext(Ne),i=Ue();return a.useEffect((()=>{o&&"idle"!==o.navigation.state||i(t,{replace:n,state:r,relative:l})})),null}function mt(e){return Ve(e.context)}function ht(e){N(!1)}function vt(e){let{basename:t="/",children:n=null,location:l,navigationType:o=r.Pop,navigator:i,static:u=!1}=e;Ie()&&N(!1);let c=t.replace(/^\/*/,"/"),s=a.useMemo((()=>({basename:c,navigator:i,static:u})),[c,i,u]);"string"==typeof l&&(l=h(l));let{pathname:d="/",search:f="",hash:p="",state:m=null,key:v="default"}=l,b=a.useMemo((()=>{let e=P(d,c);return null==e?null:{pathname:e,search:f,hash:p,state:m,key:v}}),[c,d,f,p,m,v]);return null==b?null:a.createElement(je.Provider,{value:s},a.createElement(Te.Provider,{children:n,value:{location:b,navigationType:o}}))}function bt(e){let{children:t,location:n}=e,r=a.useContext(Pe);return Qe(r&&!t?r.router.routes:wt(t),n)}function gt(e){let{children:t,errorElement:n,resolve:r}=e;return a.createElement(_t,{resolve:r,errorElement:n},a.createElement(Et,null,t))}!function(e){e.UseRevalidator="useRevalidator"}(Xe||(Xe={})),function(e){e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator"}(Je||(Je={})),function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(et||(et={}));const yt=new Promise((()=>{}));class _t extends a.Component{constructor(e){super(e),this.state={error:null}}static getDerivedStateFromError(e){return{error:e}}componentDidCatch(e,t){console.error("<Await> caught the following error during render",e,t)}render(){let{children:e,errorElement:t,resolve:n}=this.props,r=null,l=et.pending;if(n instanceof Promise)if(this.state.error){l=et.error;let e=this.state.error;r=Promise.reject().catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_error",{get:()=>e})}else n._tracked?(r=n,l=void 0!==r._error?et.error:void 0!==r._data?et.success:et.pending):(l=et.pending,Object.defineProperty(n,"_tracked",{get:()=>!0}),r=n.then((e=>Object.defineProperty(n,"_data",{get:()=>e})),(e=>Object.defineProperty(n,"_error",{get:()=>e}))));else l=et.success,r=Promise.resolve(),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_data",{get:()=>n});if(l===et.error&&r._error instanceof U)throw yt;if(l===et.error&&!t)throw r._error;if(l===et.error)return a.createElement(De.Provider,{value:r,children:t});if(l===et.success)return a.createElement(De.Provider,{value:r,children:e});throw r}}function Et(e){let{children:t}=e,n=ct();return"function"==typeof t?t(n):a.createElement(a.Fragment,null,t)}function wt(e,t){void 0===t&&(t=[]);let n=[];return a.Children.forEach(e,((e,r)=>{if(!a.isValidElement(e))return;if(e.type===a.Fragment)return void n.push.apply(n,wt(e.props.children,t));e.type!==ht&&N(!1),e.props.index&&e.props.children&&N(!1);let l=[...t,r],o={id:e.props.id||l.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,hasErrorBoundary:null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle};e.props.children&&(o.children=wt(e.props.children,l)),n.push(o)})),n}function Ct(e){return Ge(e)}function St(e){return e.map((e=>{let t=we({},e);return null==t.hasErrorBoundary&&(t.hasErrorBoundary=null!=t.errorElement),t.children&&(t.children=St(t.children)),t}))}function kt(e,t){return G({basename:null==t?void 0:t.basename,history:u({initialEntries:null==t?void 0:t.initialEntries,initialIndex:null==t?void 0:t.initialIndex}),hydrationData:null==t?void 0:t.hydrationData,routes:St(e)}).initialize()}function xt(){return xt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},xt.apply(this,arguments)}function Ot(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}const At="get",Pt="application/x-www-form-urlencoded";function Nt(e){return null!=e&&"string"==typeof e.tagName}function Dt(e){return void 0===e&&(e=""),new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((t,n)=>{let r=e[n];return t.concat(Array.isArray(r)?r.map((e=>[n,e])):[[n,r]])}),[]))}const jt=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"],Tt=["aria-current","caseSensitive","className","end","style","to","children"],Mt=["reloadDocument","replace","method","action","onSubmit","fetcherKey","routeId","relative"];function Lt(e,t){var n;return G({basename:null==t?void 0:t.basename,history:c({window:null==t?void 0:t.window}),hydrationData:(null==t?void 0:t.hydrationData)||(null==(n=window)?void 0:n.__staticRouterHydrationData),routes:St(e)}).initialize()}function Rt(e,t){var n;return G({basename:null==t?void 0:t.basename,history:s({window:null==t?void 0:t.window}),hydrationData:(null==t?void 0:t.hydrationData)||(null==(n=window)?void 0:n.__staticRouterHydrationData),routes:St(e)}).initialize()}function It(e){let{basename:t,children:n,window:r}=e,l=a.useRef();null==l.current&&(l.current=c({window:r,v5Compat:!0}));let o=l.current,[i,u]=a.useState({action:o.action,location:o.location});return a.useLayoutEffect((()=>o.listen(u)),[o]),a.createElement(vt,{basename:t,children:n,location:i.location,navigationType:i.action,navigator:o})}function Bt(e){let{basename:t,children:n,window:r}=e,l=a.useRef();null==l.current&&(l.current=s({window:r,v5Compat:!0}));let o=l.current,[i,u]=a.useState({action:o.action,location:o.location});return a.useLayoutEffect((()=>o.listen(u)),[o]),a.createElement(vt,{basename:t,children:n,location:i.location,navigationType:i.action,navigator:o})}function zt(e){let{basename:t,children:n,history:r}=e;const[l,o]=a.useState({action:r.action,location:r.location});return a.useLayoutEffect((()=>r.listen(o)),[r]),a.createElement(vt,{basename:t,children:n,location:l.location,navigationType:l.action,navigator:r})}const Ft=a.forwardRef((function(e,t){let{onClick:n,relative:r,reloadDocument:l,replace:o,state:i,target:u,to:c,preventScrollReset:s}=e,d=Ot(e,jt),f=Re(c,{relative:r}),p=qt(c,{replace:o,state:i,target:u,preventScrollReset:s,relative:r});return a.createElement("a",xt({},d,{href:f,onClick:l?n:function(e){n&&n(e),e.defaultPrevented||p(e)},ref:t,target:u}))})),Ut=a.forwardRef((function(e,t){let{"aria-current":n="page",caseSensitive:r=!1,className:l="",end:o=!1,style:i,to:u,children:c}=e,s=Ot(e,Tt),d=Ye(u,{relative:s.relative}),f=Be(),p=a.useContext(Ne),m=d.pathname,h=f.pathname,v=p&&p.navigation&&p.navigation.location?p.navigation.location.pathname:null;r||(h=h.toLowerCase(),v=v?v.toLowerCase():null,m=m.toLowerCase());let b,g=h===m||!o&&h.startsWith(m)&&"/"===h.charAt(m.length),y=null!=v&&(v===m||!o&&v.startsWith(m)&&"/"===v.charAt(m.length)),_=g?n:void 0;b="function"==typeof l?l({isActive:g,isPending:y}):[l,g?"active":null,y?"pending":null].filter(Boolean).join(" ");let E="function"==typeof i?i({isActive:g,isPending:y}):i;return a.createElement(Ft,xt({},s,{"aria-current":_,className:b,ref:t,style:E,to:u}),"function"==typeof c?c({isActive:g,isPending:y}):c)})),Ht=a.forwardRef(((e,t)=>a.createElement($t,xt({},e,{ref:t})))),$t=a.forwardRef(((e,t)=>{let{reloadDocument:n,replace:r,method:l=At,action:o,onSubmit:i,fetcherKey:u,routeId:c,relative:s}=e,d=Ot(e,Mt),f=Xt(u,c),p="get"===l.toLowerCase()?"get":"post",m=Jt(o,{relative:s});return a.createElement("form",xt({ref:t,method:p,action:m,onSubmit:n?i:e=>{if(i&&i(e),e.defaultPrevented)return;e.preventDefault();let t=e.nativeEvent.submitter;f(t||e.currentTarget,{method:l,replace:r,relative:s})}},d))}));function Vt(e){let{getKey:t,storageKey:n}=e;return function(e){let{getKey:t,storageKey:n}=void 0===e?{}:e,{router:r}=Qt(Wt.UseScrollRestoration),{restoreScrollPosition:l,preventScrollReset:o}=Kt(Yt.UseScrollRestoration),i=Be(),u=at(),c=nt();var s;a.useEffect((()=>(window.history.scrollRestoration="manual",()=>{window.history.scrollRestoration="auto"})),[]),s=a.useCallback((()=>{if("idle"===c.state){let e=(t?t(i,u):null)||i.key;an[e]=window.scrollY}sessionStorage.setItem(n||rn,JSON.stringify(an)),window.history.scrollRestoration="auto"}),[n,t,c.state,i,u]),a.useEffect((()=>(window.addEventListener("beforeunload",s),()=>{window.removeEventListener("beforeunload",s)})),[s]),a.useLayoutEffect((()=>{try{let e=sessionStorage.getItem(n||rn);e&&(an=JSON.parse(e))}catch(e){}}),[n]),a.useLayoutEffect((()=>{let e=null==r?void 0:r.enableScrollRestoration(an,(()=>window.scrollY),t);return()=>e&&e()}),[r,t]),a.useLayoutEffect((()=>{if(!1!==l)if("number"!=typeof l){if(i.hash){let e=document.getElementById(i.hash.slice(1));if(e)return void e.scrollIntoView()}!0!==o&&window.scrollTo(0,0)}else window.scrollTo(0,l)}),[i,l,o])}({getKey:t,storageKey:n}),null}var Wt,Yt;function Qt(e){let t=a.useContext(Pe);return t||N(!1),t}function Kt(e){let t=a.useContext(Ne);return t||N(!1),t}function qt(e,t){let{target:n,replace:r,state:l,preventScrollReset:o,relative:i}=void 0===t?{}:t,u=Ue(),c=Be(),s=Ye(e,{relative:i});return a.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,n)){t.preventDefault();let n=void 0!==r?r:m(c)===m(s);u(e,{replace:n,state:l,preventScrollReset:o,relative:i})}}),[c,u,s,r,l,n,e,o,i])}function Zt(e){let t=a.useRef(Dt(e)),n=Be(),r=a.useMemo((()=>function(e,t){let n=Dt(e);for(let e of t.keys())n.has(e)||t.getAll(e).forEach((t=>{n.append(e,t)}));return n}(n.search,t.current)),[n.search]),l=Ue(),o=a.useCallback(((e,t)=>{const n=Dt("function"==typeof e?e(r):e);l("?"+n,t)}),[l,r]);return[r,o]}function Gt(){return Xt()}function Xt(e,t){let{router:n}=Qt(Wt.UseSubmitImpl),r=Jt();return a.useCallback((function(a,l){if(void 0===l&&(l={}),"undefined"==typeof document)throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");let{method:o,encType:i,formData:u,url:c}=function(e,t,n){let r,a,l,o;if(Nt(i=e)&&"form"===i.tagName.toLowerCase()){let i=n.submissionTrigger;r=n.method||e.getAttribute("method")||At,a=n.action||e.getAttribute("action")||t,l=n.encType||e.getAttribute("enctype")||Pt,o=new FormData(e),i&&i.name&&o.append(i.name,i.value)}else if(function(e){return Nt(e)&&"button"===e.tagName.toLowerCase()}(e)||function(e){return Nt(e)&&"input"===e.tagName.toLowerCase()}(e)&&("submit"===e.type||"image"===e.type)){let i=e.form;if(null==i)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');r=n.method||e.getAttribute("formmethod")||i.getAttribute("method")||At,a=n.action||e.getAttribute("formaction")||i.getAttribute("action")||t,l=n.encType||e.getAttribute("formenctype")||i.getAttribute("enctype")||Pt,o=new FormData(i),e.name&&o.append(e.name,e.value)}else{if(Nt(e))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');if(r=n.method||At,a=n.action||t,l=n.encType||Pt,e instanceof FormData)o=e;else if(o=new FormData,e instanceof URLSearchParams)for(let[t,n]of e)o.append(t,n);else if(null!=e)for(let t of Object.keys(e))o.append(t,e[t])}var i;let{protocol:u,host:c}=window.location;return{url:new URL(a,u+"//"+c),method:r,encType:l,formData:o}}(a,r,l),s=c.pathname+c.search,d={replace:l.replace,formData:u,formMethod:o,formEncType:i};e?(null==t&&N(!1),n.fetch(e,t,s,d)):n.navigate(s,d)}),[r,n,e,t])}function Jt(e,t){let{relative:n}=void 0===t?{}:t,{basename:r}=a.useContext(je),l=a.useContext(Me);l||N(!1);let[o]=l.matches.slice(-1),i=xt({},Ye(null!=e?e:".",{relative:n})),u=Be();if(null==e&&(i.search=u.search,i.hash=u.hash,o.route.index)){let e=new URLSearchParams(i.search);e.delete("index"),i.search=e.toString()?"?"+e.toString():""}return e&&"."!==e||!o.route.index||(i.search=i.search?i.search.replace(/^\?/,"?index&"):"?index"),"/"!==r&&(i.pathname="/"===i.pathname?r:R([r,i.pathname])),m(i)}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"})(Wt||(Wt={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Yt||(Yt={}));let en=0;function tn(){var e;let{router:t}=Qt(Wt.UseFetcher),n=a.useContext(Me);n||N(!1);let r=null==(e=n.matches[n.matches.length-1])?void 0:e.route.id;null==r&&N(!1);let[l]=a.useState((()=>String(++en))),[o]=a.useState((()=>(r||N(!1),function(e,t){return a.forwardRef(((n,r)=>a.createElement($t,xt({},n,{ref:r,fetcherKey:e,routeId:t}))))}(l,r)))),[i]=a.useState((()=>e=>{t||N(!1),r||N(!1),t.fetch(l,r,e)})),u=Xt(l,r),c=t.getFetcher(l),s=a.useMemo((()=>xt({Form:o,submit:u,load:i},c)),[c,o,u,i]);return a.useEffect((()=>()=>{t?t.deleteFetcher(l):console.warn("No fetcher available to clean up from useFetcher()")}),[t,l]),s}function nn(){return[...Kt(Yt.UseFetchers).fetchers.values()]}const rn="react-router-scroll-positions";let an={}},2408:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),l=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),i=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,v={};function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||m}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||m}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=b.prototype;var _=y.prototype=new g;_.constructor=y,h(_,b.prototype),_.isPureReactComponent=!0;var E=Array.isArray,w=Object.prototype.hasOwnProperty,C={current:null},S={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,r){var a,l={},o=null,i=null;if(null!=t)for(a in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(o=""+t.key),t)w.call(t,a)&&!S.hasOwnProperty(a)&&(l[a]=t[a]);var u=arguments.length-2;if(1===u)l.children=r;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];l.children=c}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===l[a]&&(l[a]=u[a]);return{$$typeof:n,type:e,key:o,ref:i,props:l,_owner:C.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var O=/\/+/g;function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,a,l,o){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return o=o(u=e),e=""===l?"."+A(u,0):l,E(o)?(a="",null!=e&&(a=e.replace(O,"$&/")+"/"),P(o,t,a,"",(function(e){return e}))):null!=o&&(x(o)&&(o=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(o,a+(!o.key||u&&u.key===o.key?"":(""+o.key).replace(O,"$&/")+"/")+e)),t.push(o)),1;if(u=0,l=""===l?".":l+":",E(e))for(var c=0;c<e.length;c++){var s=l+A(i=e[c],c);u+=P(i,t,a,s,o)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),c=0;!(i=e.next()).done;)u+=P(i=i.value,t,a,s=l+A(i,c++),o);else if("object"===i)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function N(e,t,n){if(null==e)return e;var r=[],a=0;return P(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function D(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var j={current:null},T={transition:null},M={ReactCurrentDispatcher:j,ReactCurrentBatchConfig:T,ReactCurrentOwner:C};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=b,t.Fragment=a,t.Profiler=o,t.PureComponent=y,t.StrictMode=l,t.Suspense=s,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=h({},e.props),l=e.key,o=e.ref,i=e._owner;if(null!=t){if(void 0!==t.ref&&(o=t.ref,i=C.current),void 0!==t.key&&(l=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)w.call(t,c)&&!S.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=r;else if(1<c){u=Array(c);for(var s=0;s<c;s++)u[s]=arguments[s+2];a.children=u}return{$$typeof:n,type:e.type,key:l,ref:o,props:a,_owner:i}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:D}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=T.transition;T.transition={};try{e()}finally{T.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return j.current.useCallback(e,t)},t.useContext=function(e){return j.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return j.current.useDeferredValue(e)},t.useEffect=function(e,t){return j.current.useEffect(e,t)},t.useId=function(){return j.current.useId()},t.useImperativeHandle=function(e,t,n){return j.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return j.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return j.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return j.current.useMemo(e,t)},t.useReducer=function(e,t,n){return j.current.useReducer(e,t,n)},t.useRef=function(e){return j.current.useRef(e)},t.useState=function(e){return j.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return j.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return j.current.useTransition()},t.version="18.2.0"},7294:(e,t,n)=>{e.exports=n(2408)},53:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<l(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,o=a>>>1;r<o;){var i=2*(r+1)-1,u=e[i],c=i+1,s=e[c];if(0>l(u,n))c<a&&0>l(s,u)?(e[r]=s,e[c]=n,r=c):(e[r]=u,e[i]=n,r=i);else{if(!(c<a&&0>l(s,n)))break e;e[r]=s,e[c]=n,r=c}}}return t}function l(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var c=[],s=[],d=1,f=null,p=3,m=!1,h=!1,v=!1,b="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function _(e){for(var t=r(s);null!==t;){if(null===t.callback)a(s);else{if(!(t.startTime<=e))break;a(s),t.sortIndex=t.expirationTime,n(c,t)}t=r(s)}}function E(e){if(v=!1,_(e),!h)if(null!==r(c))h=!0,T(w);else{var t=r(s);null!==t&&M(E,t.startTime-e)}}function w(e,n){h=!1,v&&(v=!1,g(x),x=-1),m=!0;var l=p;try{for(_(n),f=r(c);null!==f&&(!(f.expirationTime>n)||e&&!P());){var o=f.callback;if("function"==typeof o){f.callback=null,p=f.priorityLevel;var i=o(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof i?f.callback=i:f===r(c)&&a(c),_(n)}else a(c);f=r(c)}if(null!==f)var u=!0;else{var d=r(s);null!==d&&M(E,d.startTime-n),u=!1}return u}finally{f=null,p=l,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var C,S=!1,k=null,x=-1,O=5,A=-1;function P(){return!(t.unstable_now()-A<O)}function N(){if(null!==k){var e=t.unstable_now();A=e;var n=!0;try{n=k(!0,e)}finally{n?C():(S=!1,k=null)}}else S=!1}if("function"==typeof y)C=function(){y(N)};else if("undefined"!=typeof MessageChannel){var D=new MessageChannel,j=D.port2;D.port1.onmessage=N,C=function(){j.postMessage(null)}}else C=function(){b(N,0)};function T(e){k=e,S||(S=!0,C())}function M(e,n){x=b((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,T(w))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):O=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,l){var o=t.unstable_now();switch(l="object"==typeof l&&null!==l&&"number"==typeof(l=l.delay)&&0<l?o+l:o,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:l,expirationTime:i=l+i,sortIndex:-1},l>o?(e.sortIndex=l,n(s,e),null===r(c)&&e===r(s)&&(v?(g(x),x=-1):v=!0,M(E,l-o))):(e.sortIndex=i,n(c,e),h||m||(h=!0,T(w))),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},3840:(e,t,n)=>{e.exports=n(53)},1379:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var r=n(3379),a=n.n(r),l=n(7795),o=n.n(l),i=n(569),u=n.n(i),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),p=n(4589),m=n.n(p),h=n(1171),v={};v.styleTagTransform=m(),v.setAttributes=s(),v.insert=u().bind(null,"head"),v.domAPI=o(),v.insertStyleElement=f(),a()(h.Z,v);const b=h.Z&&h.Z.locals?h.Z.locals:void 0},7623:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var r=n(3379),a=n.n(r),l=n(7795),o=n.n(l),i=n(569),u=n.n(i),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),p=n(4589),m=n.n(p),h=n(8743),v={};v.styleTagTransform=m(),v.setAttributes=s(),v.insert=u().bind(null,"head"),v.domAPI=o(),v.insertStyleElement=f(),a()(h.Z,v);const b=h.Z&&h.Z.locals?h.Z.locals:void 0},4902:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var r=n(3379),a=n.n(r),l=n(7795),o=n.n(l),i=n(569),u=n.n(i),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),p=n(4589),m=n.n(p),h=n(2785),v={};v.styleTagTransform=m(),v.setAttributes=s(),v.insert=u().bind(null,"head"),v.domAPI=o(),v.insertStyleElement=f(),a()(h.Z,v);const b=h.Z&&h.Z.locals?h.Z.locals:void 0},2717:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var r=n(3379),a=n.n(r),l=n(7795),o=n.n(l),i=n(569),u=n.n(i),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),p=n(4589),m=n.n(p),h=n(232),v={};v.styleTagTransform=m(),v.setAttributes=s(),v.insert=u().bind(null,"head"),v.domAPI=o(),v.insertStyleElement=f(),a()(h.Z,v);const b=h.Z&&h.Z.locals?h.Z.locals:void 0},6040:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var r=n(3379),a=n.n(r),l=n(7795),o=n.n(l),i=n(569),u=n.n(i),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),p=n(4589),m=n.n(p),h=n(1976),v={};v.styleTagTransform=m(),v.setAttributes=s(),v.insert=u().bind(null,"head"),v.domAPI=o(),v.insertStyleElement=f(),a()(h.Z,v);const b=h.Z&&h.Z.locals?h.Z.locals:void 0},792:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var r=n(3379),a=n.n(r),l=n(7795),o=n.n(l),i=n(569),u=n.n(i),c=n(3565),s=n.n(c),d=n(9216),f=n.n(d),p=n(4589),m=n.n(p),h=n(1047),v={};v.styleTagTransform=m(),v.setAttributes=s(),v.insert=u().bind(null,"head"),v.domAPI=o(),v.insertStyleElement=f(),a()(h.Z,v);const b=h.Z&&h.Z.locals?h.Z.locals:void 0},3379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var l={},o=[],i=0;i<e.length;i++){var u=e[i],c=r.base?u[0]+r.base:u[0],s=l[c]||0,d="".concat(c," ").concat(s);l[c]=s+1;var f=n(d),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var m=a(p,r);r.byIndex=i,t.splice(i,0,{identifier:d,updater:m,references:1})}o.push(d)}return o}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var l=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<l.length;o++){var i=n(l[o]);t[i].references--}for(var u=r(e,a),c=0;c<l.length;c++){var s=n(l[c]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}l=u}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var l=n.sourceMap;l&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},4529:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AppHeader=void 0;const a=r(n(7294)),l=n(7893);t.AppHeader=()=>a.default.createElement(l.ShellBar,null)},4110:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AppMainContent=void 0;const a=r(n(7294));t.AppMainContent=({children:e})=>a.default.createElement("div",{style:{width:"100%",height:"100%",overflow:"auto",boxSizing:"border-box",padding:"1rem 4rem"}},e)},5487:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AppSidePanel=void 0;const a=r(n(7294)),l=n(9818),o=n(4419),i=n(6042);t.AppSidePanel=()=>{const e=(0,l.useNavigate)();return a.default.createElement(o.VerticalNavigation,{label:"Navigation",itemsLabel:"Core Navigation",items:[{id:"components",text:"Components",glyph:"folder-blank",expanded:!0,items:i.COMPONENTS.map((e=>Object.assign(Object.assign({},e),{glyph:"document-text"})))}],onItemSelect:t=>{"components"!==t&&e(`/demo/${t}`)}})}},4595:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CodePanel=void 0;const o=l(n(7294));n(1379),t.CodePanel=({title:e,result:t,code:n})=>{const[r,a]=(0,o.useState)(!1);return o.default.createElement("div",{className:"code-panel"},o.default.createElement("div",{className:"header"},e),o.default.createElement("div",{className:"rendering"},t,o.default.createElement("button",{className:"button-show",onClick:()=>{a(!r)}},r?"Hide Code":"Show Code")),r?o.default.createElement("div",{className:"code"},n,o.default.createElement("button",{className:"button-copy"},"Copy")):null)}},7027:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DemoPage=void 0;const a=r(n(7294)),l=n(2531),o=n(4595);n(7623),t.DemoPage=({title:e,labels:t,description:n,props:r,examples:i})=>a.default.createElement("div",{className:"demo-page"},a.default.createElement(l.Title,{text:e}),a.default.createElement("div",{style:{display:"flex",gap:"0.25rem",flexWrap:"wrap"}},t.map((e=>a.default.createElement(l.InfoLabel,Object.assign({key:e.text},e))))),a.default.createElement(l.Title,{text:"Properties",level:l.TitleLevels.H2}),a.default.createElement("p",null,n),a.default.createElement(l.Table,{columns:[{key:"id",name:"Property",formatter:e=>a.default.createElement("strong",null,e.id)},{key:"type",name:"Type"},{key:"description",name:"Description"}],compact:!0,rows:r.map((e=>({data:e})))}),a.default.createElement(l.Title,{text:"Examples",level:l.TitleLevels.H2}),i.map((e=>a.default.createElement(a.default.Fragment,null,a.default.createElement(l.Title,{text:e.title,level:l.TitleLevels.H3}),a.default.createElement("p",null,e.description),a.default.createElement(o.CodePanel,{title:"",result:e.result,code:e.code})))))},6884:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AvatarDemo=void 0;const a=r(n(7294));t.AvatarDemo=()=>a.default.createElement("div",null,"AVATAR")},6849:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BadgeDemo=void 0;const a=r(n(7294));t.BadgeDemo=()=>a.default.createElement("div",null,"BADGE")},7532:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BarDemo=void 0;const a=r(n(7294));t.BarDemo=()=>a.default.createElement("div",null,"BAR")},1055:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonDemo=void 0;const a=r(n(7294));t.ButtonDemo=()=>a.default.createElement("div",null,"BUTTON")},7340:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarDemo=void 0;const a=r(n(7294));t.CalendarDemo=()=>a.default.createElement("div",null,"CALENDAR")},1974:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CardDemo=void 0;const a=r(n(7294));t.CardDemo=()=>a.default.createElement("div",null,"CARD")},3242:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DialogDemo=void 0;const a=r(n(7294));t.DialogDemo=()=>a.default.createElement("div",null,"DIALOG")},6661:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormDemo=void 0;const a=r(n(7294));t.FormDemo=()=>a.default.createElement("div",null,"FORM")},6170:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IconTabBarDemo=void 0;const a=n(2531),l=r(n(7294)),o=n(7027),i={title:"Icon Tab Bar",labels:[{text:"version 0.0.3",accentColor:a.AccentColors.COLOR_8},{text:"in progress",accentColor:a.AccentColors.COLOR_5},{text:"themable",accentColor:a.AccentColors.COLOR_3}],description:"Info Label is a small non-interactive numeric or text-based label. Its primary use is to add user-defined characteristic to an object.",props:[{id:"selectedTab",type:"boolean",description:"The identifier of the currently selected tab"},{id:"tabs",type:"IconTabBarItemProperties[]",description:"List of tabs to display"},{id:"onTabSelect",type:"Callback (string) => void",description:"Event called when a tab is selected"}],examples:[{title:"Text Only (Inline mode)",description:"The text-only variant is one of the most common types. It allows longer labels, and can also display counters next to the text to indicate the number of items on the tab page. The labels of the tabs do not get truncated. The full text is always shown. As a result, you need to ensure that your labels do not become too long. They should still be easy to read on smaller screens. The control has the same look and feel in Cozy and Compact mode.",result:l.default.createElement(a.IconTabBar,{selectedTab:"tab1",tabs:[{id:"tab1",title:"Info"},{id:"tab2",title:"Attachements (16)"},{id:"tab3",title:"Approvals (42)"}]}),code:l.default.createElement("div",{style:{whiteSpace:"pre"}},l.default.createElement("div",null,"<IconTabBar"),l.default.createElement("div",null,"  selectedTab='tab1'"),l.default.createElement("div",null,"  tabs={["),l.default.createElement("div",null,"    { id: 'tab1', title: 'Info' },"),l.default.createElement("div",null,"    { id: 'tab2', title: 'Attachements (16)' },"),l.default.createElement("div",null,"    { id: 'tab3', title: 'Approvals (42)' },"),l.default.createElement("div",null,"  ]}"),l.default.createElement("div",null,"/>"))}]};t.IconTabBarDemo=()=>l.default.createElement(o.DemoPage,Object.assign({},i))},6446:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.InfoLabelDemo=void 0;const a=r(n(7294)),l=n(2531),o=n(7027),i={title:"Info Label",labels:[{text:"version 0.0.3",accentColor:l.AccentColors.COLOR_8},{text:"reviewed 0.0.3",accentColor:l.AccentColors.COLOR_6},{text:"themable",accentColor:l.AccentColors.COLOR_3}],description:"Info Label is a small non-interactive numeric or text-based label. Its primary use is to add user-defined characteristic to an object. Use the Info Label base class with following modifiers:",props:[{id:"icon",type:"string",description:"(Optional) If provided, an icon will be displayed as the first element of the Info Label"},{id:"text",type:"string",description:"(Optional) If provided, a text will be displayed in the Info Label"},{id:"display",type:"boolean",description:"(Optional) Apply the default styling to the Info Label"},{id:"numeric",type:"boolean",description:"(Optional) Subbtle style modification to enhance display in case of numeric information"},{id:"accentColor",type:"AccentColor",description:"(Optional) Apply semantic color to Info Label"}],examples:[{title:"Color Flavors",description:"Use the fd-info-label--accent-color-* modifier class to apply semantic color to Info Label. Options include numbers from 1 to 10.",result:a.default.createElement("div",{style:{display:"flex",gap:"0.25rem",flexWrap:"wrap"}},a.default.createElement(l.InfoLabel,{text:"color 1",accentColor:l.AccentColors.COLOR_1}),a.default.createElement(l.InfoLabel,{text:"color 2",accentColor:l.AccentColors.COLOR_2}),a.default.createElement(l.InfoLabel,{text:"color 3",accentColor:l.AccentColors.COLOR_3}),a.default.createElement(l.InfoLabel,{text:"color 4",accentColor:l.AccentColors.COLOR_4}),a.default.createElement(l.InfoLabel,{text:"color 5",accentColor:l.AccentColors.COLOR_5}),a.default.createElement(l.InfoLabel,{text:"color 6",accentColor:l.AccentColors.COLOR_6}),a.default.createElement(l.InfoLabel,{text:"color 7",accentColor:l.AccentColors.COLOR_7}),a.default.createElement(l.InfoLabel,{text:"color 8",accentColor:l.AccentColors.COLOR_8}),a.default.createElement(l.InfoLabel,{text:"color 9",accentColor:l.AccentColors.COLOR_9}),a.default.createElement(l.InfoLabel,{text:"color 10",accentColor:l.AccentColors.COLOR_10})),code:a.default.createElement("div",null,a.default.createElement("div",null,"<InfoLabel text='color 1' accentColor={AccentColors.COLOR_1} />"),a.default.createElement("div",null,"<InfoLabel text='color 2' accentColor={AccentColors.COLOR_2} />"),a.default.createElement("div",null,"<InfoLabel text='color 3' accentColor={AccentColors.COLOR_3} />"),a.default.createElement("div",null,"<InfoLabel text='color 4' accentColor={AccentColors.COLOR_4} />"),a.default.createElement("div",null,"<InfoLabel text='color 5' accentColor={AccentColors.COLOR_5} />"),a.default.createElement("div",null,"<InfoLabel text='color 6' accentColor={AccentColors.COLOR_6} />"),a.default.createElement("div",null,"<InfoLabel text='color 7' accentColor={AccentColors.COLOR_7} />"),a.default.createElement("div",null,"<InfoLabel text='color 8' accentColor={AccentColors.COLOR_8} />"),a.default.createElement("div",null,"<InfoLabel text='color 9' accentColor={AccentColors.COLOR_9} />"),a.default.createElement("div",null,"<InfoLabel text='color 10' accentColor={AccentColors.COLOR_10} />"))},{title:"Info Label with Icon",description:"Use the fd-info-label--icon modifier class and icon type to create Info Label with Icon.",result:a.default.createElement("div",{style:{display:"flex",gap:"0.25rem",flexWrap:"wrap"}},a.default.createElement(l.InfoLabel,{text:"Info Label",icon:"past",accentColor:l.AccentColors.COLOR_1}),a.default.createElement(l.InfoLabel,{icon:"action",accentColor:l.AccentColors.COLOR_2})),code:a.default.createElement("div",null,a.default.createElement("div",null,"<InfoLabel text='Info Label' icon='past' accentColor={AccentColors.COLOR_1} />"),a.default.createElement("div",null,"<InfoLabel icon='action' accentColor={AccentColors.COLOR_2} />"))},{title:"Numeric Info Label",description:"For Numeric Info Label use the fd-info-label--numeric modifier class.",result:a.default.createElement("div",{style:{display:"flex",gap:"0.25rem",flexWrap:"wrap"}},a.default.createElement(l.InfoLabel,{text:"6",numeric:!0,accentColor:l.AccentColors.COLOR_1}),a.default.createElement(l.InfoLabel,{text:"6.2",numeric:!0,accentColor:l.AccentColors.COLOR_2}),a.default.createElement(l.InfoLabel,{text:"42K",numeric:!0,accentColor:l.AccentColors.COLOR_3})),code:a.default.createElement("div",null,a.default.createElement("div",null,"<InfoLabel text='6' numeric accentColor={AccentColors.COLOR_1} />"),a.default.createElement("div",null,"<InfoLabel text='6.2' numeric accentColor={AccentColors.COLOR_2} />"),a.default.createElement("div",null,"<InfoLabel text='42K' numeric accentColor={AccentColors.COLOR_3} />"))},{title:"Display Only Info Label",description:"For Display Only Info Label use the fd-info-label--display modifier class",result:a.default.createElement("div",{style:{display:"flex",gap:"0.25rem",flexWrap:"wrap"}},a.default.createElement(l.InfoLabel,{text:"system status",display:!0}),a.default.createElement(l.InfoLabel,{text:"42",display:!0,numeric:!0}),a.default.createElement(l.InfoLabel,{icon:"action",display:!0}),a.default.createElement(l.InfoLabel,{text:"Info Label",icon:"past",display:!0})),code:a.default.createElement("div",null,a.default.createElement("div",null,"<InfoLabel text='system status' display />"),a.default.createElement("div",null,"<InfoLabel text='42' display numeric />"),a.default.createElement("div",null,"<InfoLabel icon='action' display />"),a.default.createElement("div",null,"<InfoLabel text='Info Label' icon='past' display />"))}]};t.InfoLabelDemo=()=>a.default.createElement(o.DemoPage,Object.assign({},i))},8398:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.LinkDemo=void 0;const a=r(n(7294));t.LinkDemo=()=>a.default.createElement("div",null,"LINK")},6358:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectDemo=void 0;const a=r(n(7294));t.ObjectDemo=()=>a.default.createElement("div",null,"OBJECT")},3675:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PageDemo=void 0;const a=r(n(7294));t.PageDemo=()=>a.default.createElement("div",null,"PAGE")},5135:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PanelDemo=void 0;const a=r(n(7294));t.PanelDemo=()=>a.default.createElement("div",null,"PANEL")},8165:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectDemo=void 0;const a=r(n(7294));t.SelectDemo=()=>a.default.createElement("div",null,"SELECT")},6615:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ShellBarDemo=void 0;const a=r(n(7294));t.ShellBarDemo=()=>a.default.createElement("div",null,"SHELL BAR")},7055:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TableDemo=void 0;const a=r(n(7294));t.TableDemo=()=>a.default.createElement("div",null,"TABLE")},2612:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TileDemo=void 0;const a=r(n(7294));t.TileDemo=()=>a.default.createElement("div",null,"TILE")},8566:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TitleDemo=void 0;const a=r(n(7294));t.TitleDemo=()=>a.default.createElement("div",null,"TITLE")},7026:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ToolbarDemo=void 0;const a=r(n(7294));t.ToolbarDemo=()=>a.default.createElement("div",null,"TOOLBAR")},4392:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.VerticalNavigationDemo=void 0;const a=r(n(7294));t.VerticalNavigationDemo=()=>a.default.createElement("div",null,"VERTICAL NAVIGATION")},6212:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(7294)),l=n(9818),o=n(745),i=r(n(2509)),u=document.getElementById("reactroot");(0,o.createRoot)(u).render(a.default.createElement(l.HashRouter,null,a.default.createElement(i.default,null)))},8277:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Avatar=void 0;const a=r(n(7294)),l=n(3723);t.Avatar=({label:e,icon:t,initials:n,size:r=l.Sizes.MEDIUM,style:o,accentColor:i,shell:u,bordered:c,transparent:s,circle:d})=>{const f=["fd-avatar"];return r&&f.push(`fd-avatar--${r}`),i&&f.push(`fd-avatar--${i}`),u&&f.push("fd-avatar--shell"),c&&f.push("fd-avatar--border"),s&&f.push("fd-avatar--transparent"),d&&f.push("fd-avatar--circle"),a.default.createElement("span",{className:f.join(" "),"aria-label":e,style:o},t?a.default.createElement("i",{className:`fd-avatar__icon sap-icon--${t}`,role:"presentation"}):null,t?null:n)}},6149:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Badge=void 0;const a=r(n(7294));t.Badge=({text:e,accentColor:t})=>{const n=["fd-badge"];return t&&n.push(`fd-info-label--${t}`),a.default.createElement("div",{className:n.join(" ")},e)}},9128:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Bar=void 0;const a=r(n(7294));t.Bar=()=>a.default.createElement("div",{className:"fd-bar"},a.default.createElement("div",{className:"fd-bar__left"},a.default.createElement("div",{className:"fd-bar__element"},a.default.createElement("h5",{className:"fd-title fd-title--h5","aria-label":"text"},"TEXT"))),a.default.createElement("div",{className:"fd-bar__middle"},a.default.createElement("div",{className:"fd-bar__element"},a.default.createElement("div",{className:"fd-segmented-button",role:"group","aria-label":"Group label"},a.default.createElement("button",{"aria-label":"button",className:"fd-button fd-button--compact","aria-pressed":"true"},a.default.createElement("i",{className:"sap-icon--email"})),a.default.createElement("button",{"aria-label":"button",className:"fd-button fd-button--compact"},a.default.createElement("i",{className:"sap-icon--iphone"})),a.default.createElement("button",{"aria-label":"button",className:"fd-button fd-button--compact"},a.default.createElement("i",{className:"sap-icon--notification-2"}))))),a.default.createElement("div",{className:"fd-bar__right"},a.default.createElement("div",{className:"fd-bar__element"},a.default.createElement("span",{className:"fd-avatar fd-avatar--xs fd-avatar--circle fd-avatar--thumbnail",role:"img","aria-label":"John Doe"})),a.default.createElement("div",{className:"fd-bar__element"},a.default.createElement("button",{"aria-label":"button",className:"fd-button fd-button--transparent fd-button--compact"},a.default.createElement("i",{className:"sap-icon--grid"})))))},4326:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Button=void 0;const a=r(n(7294)),l=n(1903);t.Button=({className:e,ariaLabel:t,style:n,icon:r,iconAfter:o,text:i,badge:u,selected:c,menu:s,disabled:d,compact:f,tabIndex:p,type:m=l.ButtonTypes.BUTTON,onClick:h})=>{const v=["fd-button"];return e&&v.push(e),n&&v.push(`fd-button--${n}`),c&&v.push("is-selected"),f&&v.push("fd-button--compact"),s&&v.push("fd-button--menu"),a.default.createElement("button",{className:v.join(" "),"aria-label":t,onClick:()=>{h&&h()},tabIndex:p||0,type:m,"aria-disabled":!!d,disabled:d},r&&!o?a.default.createElement("i",{className:`sap-icon--${r}`,role:"presentation"}):null,i?a.default.createElement("span",{className:"fd-button__text"},i):null,r&&o?a.default.createElement("i",{className:`sap-icon--${r}`,role:"presentation"}):null,s?a.default.createElement("i",{className:"sap-icon--slim-arrow-down"}):null,u?a.default.createElement("span",{className:"fd-button__badge"},u):null)}},8681:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Calendar=t.DISPLAY_MODE=void 0;const o=l(n(7294)),i=n(7280),u=n(8551),c=n(1663);t.DISPLAY_MODE={DAYS:"DAYS",MONTHS:"MONTHS",YEARS:"YEARS"},t.Calendar=({date:e=new Date,selectedDate:n,compact:r,onSelectedDateChange:a})=>{let l=t.DISPLAY_MODE.DAYS;const[s,d]=(0,o.useState)(e),[f,p]=(0,o.useState)(t.DISPLAY_MODE.DAYS);(0,o.useEffect)((()=>{f!==t.DISPLAY_MODE.YEARS&&(l=f)}),[f]);const m=e=>{d(e)},h=e=>{p(e)},v=e=>{p(e)},b=e=>{p(l||e)};switch(f){case t.DISPLAY_MODE.MONTHS:return o.default.createElement(u.CalendarMonths,{date:s,onDisplayDateChange:m,onDisplayModeChange:v});case t.DISPLAY_MODE.YEARS:return o.default.createElement(c.CalendarYears,{date:s,onDisplayDateChange:m,onDisplayModeChange:b});default:return o.default.createElement(i.CalendarDays,{date:s,selectedDate:n,compact:r,onDisplayDateChange:m,onDisplayModeChange:h,onSelectedDateChange:a})}}},7280:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarDays=void 0;const o=l(n(7294)),i=n(6414),u=n(4326),c=n(8681),s=n(2183);t.CalendarDays=({date:e,selectedDate:t,compact:n,onDisplayDateChange:r,onDisplayModeChange:a,onSelectedDateChange:l})=>{const m="en",h=new Intl.Locale(m),{firstDay:v,minimalDays:b,weekend:g}=h.weekInfo,[y,_]=(0,o.useState)([]),[E,w]=(0,o.useState)([]);(0,o.useEffect)((()=>{const e=[],t=new Date;for(;t.getDay()!==v%7;)t.setDate(t.getDate()-1);for(let n=0;n<7;n++){const n=t.toLocaleString(m,{weekday:"short"});e.push(n.substring(0,1).toUpperCase()),t.setDate(t.getDate()+1)}w(e)}),[]),(0,o.useEffect)((()=>{const n=new Date,r=[],a=new Date(e.getFullYear(),e.getMonth(),1);for(;a.getDay()!==v%7;)a.setDate(a.getDate()-1);for(let l=0;l<5;l++){const l=[];for(let r=1;r<8;r++){const o=n.getFullYear()===a.getFullYear(),i=n.getMonth()===a.getMonth(),u=n.getDate()===a.getDate(),c=!!t&&t.getFullYear()===a.getFullYear(),s=!!t&&t.getMonth()===a.getMonth(),d=!!t&&t.getDate()===a.getDate();l.push({date:new Date(a.getTime()),text:a.getDate(),otherMonth:a.getMonth()!==e.getMonth(),current:o&&i&&u,active:c&&s&&d,weekend:g.includes(r)}),a.setDate(a.getDate()+1)}r.push(l)}_(r)}),[e,t]);const C=["fd-calendar"];return n&&C.push("fd-calendar--compact"),o.default.createElement("section",{className:C.join(" ")},o.default.createElement("header",{className:"fd-calendar__header"},o.default.createElement("div",{className:"fd-calendar__navigation"},o.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-left"},o.default.createElement(u.Button,{style:s.ButtonStyles.TRANSPARENT,icon:"slim-arrow-left",onClick:()=>{const t=new Date(e.getFullYear(),e.getMonth(),0);r(t)}})),o.default.createElement("div",{className:"fd-calendar__action"},o.default.createElement(u.Button,{style:s.ButtonStyles.TRANSPARENT,text:i.StringUtils.capitalize(e.toLocaleString(m,{month:"long"})),onClick:()=>{a(c.DISPLAY_MODE.MONTHS)}})),o.default.createElement("div",{className:"fd-calendar__action"},o.default.createElement(u.Button,{style:s.ButtonStyles.TRANSPARENT,text:e.getFullYear(),onClick:()=>{a(c.DISPLAY_MODE.YEARS)}})),o.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-right"},o.default.createElement(u.Button,{style:s.ButtonStyles.TRANSPARENT,icon:"slim-arrow-right",onClick:()=>{const t=new Date(e.getFullYear(),e.getMonth()+1,1);r(t)}})))),o.default.createElement("div",{className:"fd-calendar__content fd-calendar__content--dates"},o.default.createElement("table",{className:"fd-calendar__table",role:"grid"},o.default.createElement("thead",{className:"fd-calendar__group"},o.default.createElement("tr",{className:"fd-calendar__row"},o.default.createElement(d,null),E.map(((e,t)=>o.default.createElement(d,{key:`calendar-week-day-${t}`,text:e}))))),o.default.createElement("tbody",{className:"fd-calendar__group"},y.map(((e,t)=>o.default.createElement("tr",{key:`calendar-week-${t}`,className:"fd-calendar__row"},o.default.createElement(f,{text:t+1}),e.map((e=>o.default.createElement(p,Object.assign({key:`calendar-week-${t}-day-${e.text}`},e,{onCalendarDayClicked:()=>l&&l(e.date)})))))))))),o.default.createElement("div",{"aria-live":"polite",className:"fd-calendar__content fd-calendar__content--screen-reader-only"},"Use arrow keys to navigate dates"))};const d=({text:e})=>o.default.createElement("th",{className:"fd-calendar__item fd-calendar__item--side-helper"},e?o.default.createElement("span",{className:"fd-calendar__text",role:"button"},e):null),f=({text:e})=>o.default.createElement("td",{className:"fd-calendar__item fd-calendar__item--side-helper"},o.default.createElement("span",{className:"fd-calendar__text",role:"button"},e)),p=({text:e,active:t,current:n,otherMonth:r,range:a,specialDay:l,weekend:i,onCalendarDayClicked:u})=>{const c=["fd-calendar__item"];return t&&c.push("is-active"),n&&c.push("fd-calendar__item--current"),r&&c.push("fd-calendar__item--other-month"),a&&c.push("fd-calendar__item--range"),l&&c.push(`fd-calendar__special-day--${l}`),i&&c.push("fd-calendar__item--weekend"),o.default.createElement("td",{className:c.join(" "),role:"gridcell",style:{cursor:"pointer"}},o.default.createElement("span",{className:"fd-calendar__text",role:"button",onClick:u},e))}},8551:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarMonths=void 0;const o=l(n(7294)),i=n(6414),u=n(4326),c=n(8681),s=n(2183);t.CalendarMonths=({date:e,onDisplayDateChange:t,onDisplayModeChange:n})=>{const[r,a]=(0,o.useState)([]);(0,o.useEffect)((()=>{const t=new Date,n=[];for(let r=0;r<4;r++){const a=[];for(let n=0;n<3;n++){const l=4*n+r,o=e.getFullYear()===t.getFullYear(),i=t.getMonth()===l;a.push({month:l,current:o&&i})}n.push(a)}a(n)}),[e]);const l=e=>{const t=new Date(2e3,e).toLocaleString("en",{month:"long"});return i.StringUtils.capitalize(t)};return o.default.createElement("section",{className:["fd-calendar"].join(" ")},o.default.createElement("header",{className:"fd-calendar__header"},o.default.createElement("div",{className:"fd-calendar__navigation"},o.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-left"},o.default.createElement(u.Button,{style:s.ButtonStyles.TRANSPARENT,icon:"slim-arrow-left",onClick:()=>{const n=new Date(e.getFullYear()-1,e.getMonth(),1);t(n)}})),o.default.createElement("div",{className:"fd-calendar__action"},o.default.createElement(u.Button,{style:s.ButtonStyles.TRANSPARENT,text:e.getFullYear(),onClick:()=>{n(c.DISPLAY_MODE.YEARS)}})),o.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-right"},o.default.createElement(u.Button,{style:s.ButtonStyles.TRANSPARENT,icon:"slim-arrow-right",onClick:()=>{const n=new Date(e.getFullYear()+1,e.getMonth(),1);t(n)}})))),o.default.createElement("div",{className:"fd-calendar__content fd-calendar__content--months"},o.default.createElement("table",{className:"fd-calendar__table",role:"grid"},o.default.createElement("tbody",{className:"fd-calendar__group"},r.map(((r,a)=>o.default.createElement("tr",{key:`'calendar-month-row-${a}`,className:"fd-calendar__row"},r.map((r=>o.default.createElement(d,{key:`'calendar-month-${r.month}`,text:l(r.month),current:r.current,onClick:()=>(r=>{const a=new Date(e.getFullYear(),r,1);t(a),n(c.DISPLAY_MODE.DAYS)})(r.month)}))))))))),o.default.createElement("div",{"aria-live":"polite",className:"fd-calendar__content fd-calendar__content--screen-reader-only"},"Use arrow keys to navigate dates"))};const d=({text:e,active:t,current:n,onClick:r})=>{const a=["fd-calendar__item"];n&&a.push("fd-calendar__item--current");const l=["fd-button fd-button--transparent fd-calendar__item-button"];return t&&l.push("is-active"),o.default.createElement("td",{className:a.join(" "),role:"gridcell"},o.default.createElement("button",{className:l.join(" "),type:"button",onClick:r},o.default.createElement("span",{className:"fd-calendar__text"},e)))}},1663:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarYears=void 0;const o=l(n(7294)),i=n(4326),u=n(8681),c=n(2183);t.CalendarYears=({date:e,onDisplayDateChange:t,onDisplayModeChange:n})=>{const[r,a]=(0,o.useState)([]);return(0,o.useEffect)((()=>{const t=new Date;let n=10*Math.floor(e.getFullYear()/10);const r=[];for(let e=0;e<4;e++){const e=[];for(let r=0;r<5;r++)e.push({current:n===t.getFullYear(),year:n++});r.push(e)}a(r)}),[e]),o.default.createElement("section",{className:["fd-calendar"].join(" "),style:{marginBottom:"1rem"}},o.default.createElement("header",{className:"fd-calendar__header"},o.default.createElement("div",{className:"fd-calendar__navigation"},o.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-left"},o.default.createElement(i.Button,{style:c.ButtonStyles.TRANSPARENT,icon:"slim-arrow-left",onClick:()=>{const n=new Date(e.getFullYear()-20,e.getMonth(),1);t(n)}})),o.default.createElement("div",{className:"fd-calendar__action"},o.default.createElement(i.Button,{style:c.ButtonStyles.TRANSPARENT,text:r&&r.length?`${r[0][0].year} - ${r[3][4].year}`:void 0})),o.default.createElement("div",{className:"fd-calendar__action fd-calendar__action--arrow-right"},o.default.createElement(i.Button,{style:c.ButtonStyles.TRANSPARENT,icon:"slim-arrow-right",onClick:()=>{const n=new Date(e.getFullYear()+20,e.getMonth(),1);t(n)}})))),o.default.createElement("div",{className:"fd-calendar__content fd-calendar__content--years ",id:"57YUZ521"},o.default.createElement("table",{className:"fd-calendar__table",role:"grid"},o.default.createElement("tbody",{className:"fd-calendar__group"},r.map(((r,a)=>o.default.createElement("tr",{key:`'calendar-years-row-${a}`,className:"fd-calendar__row"},r.map((r=>o.default.createElement(s,{key:`'calendar-years-${r.year}`,text:r.year,current:r.current,onClick:()=>(r=>{const a=new Date(r,e.getMonth(),1);t(a),n(u.DISPLAY_MODE.MONTHS)})(r.year)}))))))))),o.default.createElement("div",{"aria-live":"polite",className:"fd-calendar__content fd-calendar__content--screen-reader-only"},"Use arrow keys to navigate dates"))};const s=({text:e,active:t,current:n,onClick:r})=>{const a=["fd-calendar__item"];n&&a.push("fd-calendar__item--current");const l=["fd-button fd-button--transparent fd-calendar__item-button"];return t&&l.push("is-active"),o.default.createElement("td",{className:a.join(" "),role:"gridcell"},o.default.createElement("button",{className:l.join(" "),type:"button",onClick:r},o.default.createElement("span",{className:"fd-calendar__text"},e)))}},6369:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Card=void 0;const a=r(n(7294)),l=n(6149),o=n(3824),i=n(6864);t.Card=({badge:e,header:t,footer:n,children:r})=>a.default.createElement("div",{className:["fd-card"].join(" ")},e?a.default.createElement(l.Badge,Object.assign({},e)):null,a.default.createElement(o.CardHeader,Object.assign({},t)),r?a.default.createElement("div",{className:"fd-card__content",role:"group","aria-label":"Card Content"},r):null,a.default.createElement(i.CardFooter,Object.assign({},n)))},6864:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CardFooter=void 0;const a=r(n(7294));t.CardFooter=({className:e,children:t})=>{const n=["fd-card__footer"];return e&&n.push(e),a.default.createElement("a",{className:n.join(" ")},t)}},3824:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CardHeader=void 0;const a=r(n(7294)),l=n(8277);t.CardHeader=({avatar:e,title:t,titleCounter:n,subTitle:r,onClick:o})=>a.default.createElement("a",{className:["fd-card__header"].join(" "),tabIndex:0,onClick:()=>{o&&o()},onKeyUp:e=>{switch(e.code){case"Enter":case"Space":e.stopPropagation(),o&&o()}}},e?a.default.createElement(l.Avatar,Object.assign({},e)):null,t||n?a.default.createElement("div",{className:"fd-card__title-area"},a.default.createElement("div",{className:"fd-card__title"},t),a.default.createElement("span",{className:"fd-object-status fd-card__counter"},n)):null,r?a.default.createElement("div",{className:"fd-card__subtitle-area"},a.default.createElement("div",{className:"fd-card__subtitle"},r)):null)},9456:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Dialog=void 0;const o=l(n(7294)),i=n(8329),u=n(9929);t.Dialog=({resizable:e,header:t,footer:n,children:r})=>{const a=(0,o.useRef)(null);return(0,o.useEffect)((()=>{const e=null==a?void 0:a.current;if(e){const t=e.querySelector('[tabindex="0"]');t&&t.focus()}}),[]),o.default.createElement("section",{className:"fd-dialog-docs-static fd-dialog fd-dialog--active"},o.default.createElement("div",{className:"fd-dialog__content",role:"dialog","aria-modal":"true","aria-labelledby":"dialog-title-1",ref:a},e?o.default.createElement("span",{className:"fd-dialog__resize-handle"}):null,t?o.default.createElement(u.DialogHeader,Object.assign({},t)):null,o.default.createElement("div",{className:"fd-dialog__body"},r),n?o.default.createElement(i.DialogFooter,Object.assign({},n)):null))}},8329:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DialogFooter=void 0;const a=r(n(7294));t.DialogFooter=({left:e,right:t,children:n})=>{const r=e=>e?Array.isArray(e)?a.default.createElement(a.default.Fragment,null,e.map(((e,t)=>l(e,`elem-${t}`)))):l(e):null,l=(e,t)=>a.default.createElement("div",{key:t,className:"fd-bar__element"},e);return a.default.createElement("footer",{className:"fd-dialog__footer fd-bar fd-bar--footer"},a.default.createElement("div",{className:"fd-bar__left"},e?r(e):null),a.default.createElement("div",{className:"fd-bar__right"},r(t||n)))}},9929:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DialogHeader=void 0;const a=r(n(7294));t.DialogHeader=({left:e,right:t,subheader:n})=>{const r=["fd-dialog__header fd-bar"];n?r.push("fd-bar--header-with-subheader"):r.push("fd-bar--header");const l=e=>{if(e)return Array.isArray(e)?a.default.createElement(a.default.Fragment,null,e.map(((e,t)=>o(e,`elem-${t}`)))):o(e)},o=(e,t)=>a.default.createElement("div",{key:t,className:"fd-bar__element"},e);return a.default.createElement("footer",{className:r.join(" ")},a.default.createElement("div",{className:"fd-bar__left"},e?l(e):null),a.default.createElement("div",{className:"fd-bar__right"},l(t)))}},5291:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FormInput=void 0;const a=r(n(7294)),l=n(6414);t.FormInput=({className:e,label:t,placeholder:n,type:r="text"})=>{const o=l.UUID.next(),i=["fd-form-item"];return e&&i.push(e),a.default.createElement("div",{className:i.join(" ")},a.default.createElement("label",{className:"fd-form-label",htmlFor:o},t),a.default.createElement("input",{className:"fd-input",type:r,id:o,placeholder:n}))}},2923:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.FormStepInput=void 0;const o=l(n(7294)),i=n(6414),u=n(4326),c=n(2183);t.FormStepInput=({className:e,label:t,min:n,max:r,value:a,onChange:l})=>{const s=(0,o.useRef)(null),[d,f]=(0,o.useState)(n);(0,o.useEffect)((()=>{p(a)}),[a]);const p=e=>{let t=e;!isNaN(n)&&t<n&&(t=n),r&&!isNaN(r)&&t>r&&(t=r),f(t),l(t)},m=i.UUID.next(),h=["fd-form-item"];return e&&h.push(e),o.default.createElement("div",{className:h.join(" ")},o.default.createElement("label",{className:"fd-form-label",htmlFor:m},t),o.default.createElement("div",{className:"fd-step-input"},o.default.createElement(u.Button,{className:"fd-step-input__button",ariaLabel:"Step down",style:c.ButtonStyles.TRANSPARENT,tabIndex:-1,icon:"less",onClick:()=>{p(d-1)}}),o.default.createElement("input",{id:m,className:"fd-input fd-input--no-number-spinner fd-step-input__input",style:{width:"100%"},type:"number",value:d,ref:s,onChange:e=>{p(Number(e.target.value))}}),o.default.createElement(u.Button,{className:"fd-step-input__button",ariaLabel:"Step Up",style:c.ButtonStyles.TRANSPARENT,tabIndex:-1,icon:"add",onClick:()=>{p(d+1)}})))}},1058:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IconTabBar=void 0;const a=r(n(7294)),l=n(5426);n(4902),t.IconTabBar=({selectedTab:e,tabs:t,onTabSelect:n,children:r})=>a.default.createElement("div",{className:["fd-icon-tab-bar"].join(" ")},a.default.createElement("ul",{className:"fd-icon-tab-bar__header",role:"tablist"},null==t?void 0:t.map((t=>a.default.createElement(l.IconTabBarItem,Object.assign({key:t.id,selected:e===t.id},t,{onTabSelect:n})))),r))},5426:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IconTabBarItem=void 0;const a=r(n(7294));t.IconTabBarItem=({id:e,badge:t,selected:n,semantic:r,title:l,onTabSelect:o})=>{const i=["fd-icon-tab-bar__item"];return r&&i.push(`fd-icon-tab-bar__item--${r}`),a.default.createElement("li",{className:i.join(" "),role:"presentation",onClick:()=>{o&&o(e)},onKeyUp:t=>{switch(t.code){case"Enter":case"Space":t.stopPropagation(),o&&o(e)}}},a.default.createElement("span",{id:e,className:"fd-icon-tab-bar__tab","aria-selected":!!n,role:"tab",tabIndex:0},a.default.createElement("span",{className:"fd-icon-tab-bar__tag"},l),t?a.default.createElement("span",{className:"fd-icon-tab-bar__badge"}):null))}},4229:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.InfoLabel=void 0;const a=r(n(7294));t.InfoLabel=({icon:e,text:t,display:n,numeric:r,accentColor:l})=>{const o=["fd-info-label"];return l&&o.push(`fd-info-label--${l}`),r&&o.push("fd-info-label--numeric"),n&&o.push("fd-info-label--display"),a.default.createElement("span",{className:o.join(" ")},e?a.default.createElement("i",{className:`fd-info-label__icon sap-icon--${e}`,role:"presentation"}):null,t?a.default.createElement("span",{className:"fd-info-label__text"},t):null)}},6374:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Link=void 0;const a=r(n(7294));t.Link=({href:e,className:t,ariaLabel:n,style:r,icon:l,iconAfter:o,text:i,disabled:u,tabIndex:c})=>{const s=["fd-link"];return t&&s.push(t),r&&s.push(`fd-link--${r}`),a.default.createElement("a",{href:e,className:s.join(" "),"aria-label":n,tabIndex:c||0,"aria-disabled":!!u},a.default.createElement("span",{className:"fd-link__content"},l&&!o?a.default.createElement("span",{className:`sap-icon--${l}`}):null,i,l&&o?a.default.createElement("span",{className:`sap-icon--${l}`}):null))}},8775:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectAttribute=void 0;const a=r(n(7294));t.ObjectAttribute=({text:e})=>a.default.createElement("div",{className:"fd-object-list__object-attribute"},e)},9579:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectHeaderAttribute=void 0;const a=r(n(7294));n(2717),t.ObjectHeaderAttribute=({className:e,label:t,text:n})=>{const r=["fd-object-header-attribute"];return e&&r.push(e),a.default.createElement("div",{className:r.join(" ")},a.default.createElement("label",{className:"fd-object-header-attribute__label"},t),a.default.createElement("div",{className:"fd-object-header-attribute__text"},n))}},3417:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectIdentifier=void 0;const a=r(n(7294));t.ObjectIdentifier=({title:e,text:t,bold:n,medium:r,className:l})=>{const o=["fd-object-identifier"];r&&o.push("fd-object-identifier--medium"),l&&o.push(l);const i=["fd-object-identifier__title"];return n&&i.push("fd-object-identifier__title--bold"),a.default.createElement("div",{className:o.join(" ")},a.default.createElement("p",{className:i.join(" ")},e),t?a.default.createElement("p",{className:"fd-object-identifier__text"},t):null)}},225:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectList=void 0;const a=r(n(7294)),l=n(3610);t.ObjectList=({ariaLabeledBy:e,items:t,children:n,bordered:r})=>{const o=["fd-list fd-object-list"];return r||o.push("fd-list--no-border"),a.default.createElement("ul",{className:o.join(" "),role:"list","aria-labelledby":e},null==t?void 0:t.map(((e,t)=>a.default.createElement(l.ObjectListItem,Object.assign({key:`item-${t}`},e)))),n)}},3610:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectListItem=void 0;const a=r(n(7294)),l=n(8277),o=n(8775),i=n(3417),u=n(6519),c=n(3501),s=n(4279),d=n(3723);t.ObjectListItem=({intro:e,avatar:t,title:n,info:r,attributes:u,children:c})=>a.default.createElement("li",{className:"fd-list__item fd-object-list__item",style:{height:"auto"},role:"listitem",tabIndex:0},a.default.createElement("div",{className:"fd-object-list__container"},e?a.default.createElement("div",{className:"fd-object-list__intro"},e):null,r&&t&&n?a.default.createElement(f,{avatar:a.default.createElement(l.Avatar,Object.assign({},t,{size:d.Sizes.SMALL})),left:a.default.createElement(i.ObjectIdentifier,{className:"fd-object-list__object-identifier",title:n}),right:a.default.createElement(g,{type:r.type,props:r.props})}):null,a.default.createElement("div",{className:"fd-object-list__content"},null==u?void 0:u.map(((e,t)=>{var n;return a.default.createElement(h,{key:`attribute-${t}`},a.default.createElement(v,null,a.default.createElement(o.ObjectAttribute,{text:e.name})),a.default.createElement(b,null,null===(n=e.items)||void 0===n?void 0:n.map(((e,n)=>a.default.createElement(g,Object.assign({key:`item-${t}-${n}`},e))))))})),c)));const f=({avatar:e,left:t,right:n,children:r})=>a.default.createElement("div",{className:"fd-object-list__header"},e||r,t?a.default.createElement(p,null,t):null,n?a.default.createElement(m,null,n):null),p=({children:e})=>a.default.createElement("div",{className:"fd-object-list__header-left"},e),m=({children:e})=>a.default.createElement("div",{className:"fd-object-list__header-right"},e),h=({left:e,right:t,children:n})=>a.default.createElement("div",{className:"fd-object-list__row"},e?a.default.createElement(v,null,e):null,t?a.default.createElement(b,null,t):null,e||t?null:n),v=({children:e})=>a.default.createElement("div",{className:"fd-object-list__row-left"},e),b=({children:e})=>a.default.createElement("div",{className:"fd-object-list__row-right"},e),g=({type:e,props:t})=>{switch(e){case"attribute":return a.default.createElement(o.ObjectAttribute,{text:t.text});case"marker":return a.default.createElement(u.ObjectMarker,{icon:t.icon,iconOnly:t.iconOnly,text:t.text});case"number":return a.default.createElement(c.ObjectNumber,{className:"fd-object-list__object-number",value:t.value,unit:t.unit});case"status":return a.default.createElement(s.ObjectStatus,{text:t.text,semantic:t.semantic});case"identifier":return a.default.createElement(i.ObjectIdentifier,{className:"fd-object-list__object-identifier",title:t.title});default:return null}}},6519:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectMarker=void 0;const a=r(n(7294));t.ObjectMarker=({icon:e,iconOnly:t,text:n,className:r})=>{const l=["fd-object-marker"];return r&&l.push(r),a.default.createElement("div",{className:l.join(" ")},e?a.default.createElement("i",{className:`fd-object-marker__icon sap-icon--${e}`,"aria-label":t?n:void 0,role:t?void 0:"presentation"}):null,!t&&n?a.default.createElement("span",{className:"fd-object-marker__text"},n):null)}},3501:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectNumber=void 0;const a=r(n(7294));t.ObjectNumber=({value:e,unit:t,bold:n,large:r,semantic:l,className:o})=>{const i=["fd-object-number"];o&&i.push(o),r&&i.push("fd-object-number--large"),l&&i.push(`fd-object-number--${l}`);const u=["fd-object-number__text"];return n&&u.push("fd-object-number__text--bold"),a.default.createElement("span",{className:i.join(" ")},a.default.createElement("span",{className:u.join(" ")},e),a.default.createElement("span",{className:"fd-object-number__unit"},t))}},4279:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectStatus=void 0;const a=r(n(7294));t.ObjectStatus=({icon:e,iconOnly:t,text:n,inverted:r,large:l,semantic:o})=>{const i=["fd-object-status"];return o&&i.push(`fd-object-status--${o}`),r&&i.push("fd-object-status--inverted"),l&&i.push("fd-object-status--large"),a.default.createElement("span",{className:i.join(" ")},a.default.createElement("i",{className:`fd-object-status__icon sap-icon--${e}`,"aria-label":t?n:void 0,role:t?void 0:"presentation"}),t?null:a.default.createElement("span",{className:"fd-object-status__text"},n))}},2192:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Page=void 0;const a=r(n(7294));n(6040),t.Page=({className:e,children:[t,n,r]})=>{const l=["fd-page"];return e&&l.push(e),a.default.createElement("div",{className:l.join(" ")},t,a.default.createElement("div",{className:"fd-page__content"},n,r))}},8087:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PageBody=void 0;const a=r(n(7294));t.PageBody=({className:e,children:t})=>{const n=["fd-page__body"];return e&&n.push(e),a.default.createElement("div",{className:n.join(" ")},t)}},8327:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PageFooter=void 0;const a=r(n(7294));t.PageFooter=({className:e,children:t})=>{const n=["fd-page__footer"];return e&&n.push(e),a.default.createElement("div",{className:n.join(" ")},t)}},9283:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PageHeader=void 0;const a=r(n(7294));t.PageHeader=({className:e,children:t})=>{const n=["fd-page__header"];return e&&n.push(e),a.default.createElement("div",{className:n.join(" ")},t)}},7774:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Panel=void 0;const o=l(n(7294));t.Panel=({compact:e,expanded:t,expandable:n,title:r,toolbar:a,children:l})=>{const[i,u]=(0,o.useState)(null);(0,o.useEffect)((()=>{u(t)}),[t]);const c=["fd-panel"];return e&&c.push("fd-panel--compact"),n||c.push("fd-panel--fixed"),o.default.createElement("div",{className:c.join(" ")},o.default.createElement("div",{className:"fd-panel__header"},n?o.default.createElement("div",{className:"fd-panel__expand"},o.default.createElement("button",{className:"fd-button fd-button--compact fd-button--transparent fd-panel__button","aria-expanded":!!i,"aria-haspopup":"true","aria-controls":"panel-content","aria-labelledby":"panel-title",onClick:()=>{u(!i)}},o.default.createElement("i",{className:i?"sap-icon--slim-arrow-down":"sap-icon--slim-arrow-right"}))):null,o.default.createElement("h4",{className:"fd-panel__title",id:"panel-title"},r),a||null),o.default.createElement("div",{id:"panel-content",className:"fd-panel__content",role:"region","aria-hidden":!i},l))}},7674:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Select=void 0;const o=l(n(7294)),i=n(6414);t.Select=({children:e})=>{const[t,n]=(0,o.useState)(),[r,a]=(0,o.useState)(!1);return(0,o.useEffect)((()=>{n(i.UUID.next())}),[]),o.default.createElement("div",{className:"fd-popover"},o.default.createElement("div",{className:"fd-popover__control"},o.default.createElement("div",{className:"fd-select"},o.default.createElement("button",{id:t,className:"fd-select__control","aria-expanded":!!r,"aria-haspopup":"listbox","aria-labelledby":"cozySelectLabel cozySelectValue",tabIndex:0,value:"List Item 1",onClick:()=>{a(!r)}},o.default.createElement("span",{is:"cozySelectValue",className:"fd-select__text-content"},"List Item 1"),o.default.createElement("span",{className:"fd-button fd-button--transparent fd-select__button"},o.default.createElement("i",{className:"sap-icon--slim-arrow-down"}))))),o.default.createElement("div",{className:"fd-popover__body fd-popover__body--no-arrow fd-popover__body--dropdown","aria-hidden":!r},o.default.createElement("ul",{"aria-activedescendant":"cozySelectCombobox-currentlyFocusedItem","aria-labelledby":t,className:"fd-list fd-list--dropdown",role:"listbox"},e)))}},7459:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectItem=void 0;const a=r(n(7294));t.SelectItem=({selected:e,title:t,onSelect:n})=>{const r=["fd-list__item"];return e&&r.push("is-selected"),a.default.createElement("li",{className:r.join(" "),"aria-selected":`${Boolean(e)}`,role:"option",tabIndex:0,onClick:()=>{n()}},a.default.createElement("span",{className:"fd-list__title"},t))}},7893:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ShellBar=void 0;const a=r(n(7294));t.ShellBar=()=>a.default.createElement("div",{className:"fd-shellbar"},a.default.createElement("div",{className:"fd-shellbar__group fd-shellbar__group--product"},a.default.createElement("span",{className:"fd-shellbar__logo"},a.default.createElement("img",{src:"//unpkg.com/fundamental-styles/dist/images/sap-logo.png",width:"48",height:"24",alt:"SAP"})),a.default.createElement("span",{className:"fd-shellbar__title"},"Fundamental React")))},524:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TableCell=t.TableHeaderCell=t.Table=t.TableCellIndicators=void 0;const a=r(n(7294)),l=n(9027);t.TableCellIndicators={VALID:"valid",WARNING:"warning",ERROR:"error",INFORMATION:"information"},t.Table=({borderedHorizontal:e,borderedVertical:n,compact:r,indicator:o,columns:i,rows:u,children:c})=>{const s=["fd-table"];return n||s.push("fd-table--no-vertical-borders"),e||s.push("fd-table--no-horizontal-borders"),r&&s.push("fd-table--compact"),a.default.createElement("table",{className:s.join(" ")},a.default.createElement("thead",{className:"fd-table__header"},a.default.createElement(l.TableRow,null,a.default.createElement(a.default.Fragment,null,o?a.default.createElement(t.TableCell,{type:"status-indicator"}):null,i.map((e=>a.default.createElement(t.TableHeaderCell,{key:e.key,type:e.type},a.default.createElement("span",null,e.name))))))),a.default.createElement("tbody",{className:"fd-table__body"},null==u?void 0:u.map(((e,n)=>a.default.createElement(l.TableRow,{key:e.data.id},a.default.createElement(a.default.Fragment,null,o?a.default.createElement(t.TableCell,{type:"status-indicator",indicator:e.indicator}):null,i.map((n=>{const r=n.render||(e=>a.default.createElement("span",null,n.formatter?n.formatter(e):e[n.key]));return a.default.createElement(t.TableCell,{key:n.key},r(e.data))})))))),c))},t.TableHeaderCell=({children:e,type:t})=>{const n=["fd-table__cell"];return t&&n.push(`fd-table__cell--${t}`),a.default.createElement("th",{className:n.join(" "),scope:"col"},e)},t.TableCell=({children:e,type:t,indicator:n})=>{const r=["fd-table__cell"];return t&&r.push(`fd-table__cell--${t}`),"status-indicator"===t&&n&&r.push(`fd-table__cell--status-indicator--${n}`),a.default.createElement("td",{className:r.join(" ")},e)}},9027:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TableRow=void 0;const a=r(n(7294));t.TableRow=({children:e})=>a.default.createElement("tr",{className:"fd-table__row"},e)},9268:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Tile=void 0;const a=r(n(7294)),l=n(6149),o=n(3723);t.Tile=({className:e,badge:t,title:n,subTitle:r,footer:i,size:u=o.Sizes.LARGE,children:c,onClick:s})=>{const d=["fd-tile"];return e&&d.push(e),u&&d.push(`fd-tile--${u}`),a.default.createElement("div",{className:d.join(" "),role:"button",tabIndex:0,onClick:()=>{s&&s()}},t?a.default.createElement(l.Badge,{text:t}):null,a.default.createElement("div",{className:"fd-tile__header"},a.default.createElement("div",{className:"fd-tile__title"},n),r?a.default.createElement("div",{className:"fd-tile__subtitle"},r):null),a.default.createElement("div",{className:"fd-tile__content"},c),i?a.default.createElement("div",{className:"fd-tile__footer"},a.default.createElement("span",{className:"fd-tile__footer-text"},i)):null)}},6056:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TileContainer=void 0;const a=r(n(7294));t.TileContainer=({className:e,children:t})=>{const n=["fd-tile fd-tile-container"];return e&&n.push(e),a.default.createElement("div",{className:n.join(" "),style:{minHeight:0,maxHeight:"none",height:"auto",minWidth:0,maxWidth:"none",width:"100%"}},t)}},153:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TileContentNumeric=void 0;const a=r(n(7294)),l=n(3723);t.TileContentNumeric=({value:e,size:t=l.Sizes.LARGE,semantic:n})=>{const r=["fd-numeric-content"];t&&r.push(`fd-numeric-content--${t}`);const o=["fd-numeric-content__kpi"];return n&&o.push(`fd-numeric-content__kpi--${n}`),a.default.createElement("div",{className:r.join(" ")},a.default.createElement("div",{className:"fd-numeric-content__kpi-container"},a.default.createElement("div",{className:o.join(" ")},e)))}},5791:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Title=void 0;const a=r(n(7294)),l=n(3904);t.Title=({className:e,level:t,levelVisual:n,wrap:r,text:o})=>{const i=["fd-title"];switch(i.push(`fd-title--h${n||t||l.TitleLevels.H1}`),e&&i.push(e),r&&i.push("fd-title--wrap"),t){case l.TitleLevels.H6:return a.default.createElement("h6",{className:i.join(" ")},o);case l.TitleLevels.H5:return a.default.createElement("h5",{className:i.join(" ")},o);case l.TitleLevels.H4:return a.default.createElement("h4",{className:i.join(" ")},o);case l.TitleLevels.H3:return a.default.createElement("h3",{className:i.join(" ")},o);case l.TitleLevels.H2:return a.default.createElement("h2",{className:i.join(" ")},o);default:return a.default.createElement("h1",{className:i.join(" ")},o)}}},1054:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Toolbar=void 0;const a=r(n(7294)),l=n(2744),o=n(5791),i=n(3904);n(792),t.Toolbar=({title:e,titleLevel:t=i.TitleLevels.H4,active:n,clear:r,transparent:u,solid:c,children:s})=>{const d=["fd-toolbar"];return n&&d.push("fd-toolbar-active"),e&&d.push("fd-toolbar--title"),r&&d.push("fd-toolbar--clear"),u&&d.push("fd-toolbar--transparent"),c&&d.push("fd-toolbar--solid"),a.default.createElement("div",{className:d.join(" ")},e?a.default.createElement(o.Title,{className:"fd-toolbar__title",level:t,text:e}):null,a.default.createElement(l.ToolbarSpacer,null),s)}},5703:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ToolbarSeparator=void 0;const a=r(n(7294));t.ToolbarSeparator=()=>a.default.createElement("span",{className:"fd-toolbar__separator"})},2744:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ToolbarSpacer=void 0;const a=r(n(7294));t.ToolbarSpacer=()=>a.default.createElement("span",{className:"fd-toolbar__spacer"})},4419:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.VerticalNavigation=void 0;const a=r(n(7294)),l=n(8927);t.VerticalNavigation=({className:e,label:t,itemsLabel:n,items:r,onItemSelect:o,children:i})=>{const u=["fd-vertical-nav"];return e&&u.push(e),a.default.createElement("div",{className:u.join(" ")},a.default.createElement("nav",{className:"fd-vertical-nav__main-navigation","aria-label":t},a.default.createElement("ul",{className:"fd-list","aria-label":n},null==r?void 0:r.map((e=>a.default.createElement(l.VerticalNavigationItem,{key:e.id,id:e.id,className:e.className,expanded:e.expanded,items:e.items,glyph:e.glyph,text:e.text,selected:e.selected,onItemSelect:e.onItemSelect||o}))),i)))}},8927:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.VerticalNavigationItem=void 0;const o=l(n(7294));t.VerticalNavigationItem=({id:e,className:n,expanded:r,items:a,glyph:l,selected:i,text:u,onItemSelect:c,children:s})=>{const[d,f]=(0,o.useState)(r),p=Boolean(null==a?void 0:a.length)||Boolean(s),m=["fd-list__navigation-item"];n&&m.push(n),p&&m.push("fd-list__navigation-item--expandable"),d&&m.push("is-expanded"),i&&m.push("fd-list__navigation-item--indicated");const h=["fd-list__navigation-item-arrow"];return d?(h.push("is-expanded"),h.push("sap-icon--navigation-down-arrow")):h.push("sap-icon--navigation-right-arrow"),o.default.createElement("li",{className:m.join(" "),tabIndex:0,onClick:t=>{t.stopPropagation(),c&&c(e)},onKeyUp:t=>{switch(t.code){case"Enter":case"Space":t.stopPropagation(),c&&c(e)}}},l?o.default.createElement("i",{className:`fd-list__navigation-item-icon sap-icon--${l}`,role:"presentation"}):null,o.default.createElement("span",{className:"fd-list__navigation-item-text"},u),p?o.default.createElement("button",{className:h.join(" "),"aria-label":"Expand second submenu",onClick:()=>f(!d)}):null,p&&d&&(Boolean(null==a?void 0:a.length)||Boolean(s))?o.default.createElement("ul",{className:"fd-list"},null==a?void 0:a.map((e=>o.default.createElement(t.VerticalNavigationItem,{key:e.id,id:e.id,className:e.className,expanded:e.expanded,items:e.items,glyph:e.glyph,text:e.text,selected:e.selected,onItemSelect:c}))),s):null)}},7517:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AccentColors=void 0,t.AccentColors={COLOR_1:"accent-color-1",COLOR_2:"accent-color-2",COLOR_3:"accent-color-3",COLOR_4:"accent-color-4",COLOR_5:"accent-color-5",COLOR_6:"accent-color-6",COLOR_7:"accent-color-7",COLOR_8:"accent-color-8",COLOR_9:"accent-color-9",COLOR_10:"accent-color-10"}},2183:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonStyles=void 0,t.ButtonStyles={EMPHASIZED:"emphasized",GHOST:"ghost",POSITIVE:"positive",NEGATIVE:"negative",ATTENTION:"attention",TRANSPARENT:"transparent"}},1903:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonTypes=void 0,t.ButtonTypes={BUTTON:"button",SUBMIT:"submit",RESET:"reset"}},8313:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LinkTypes=void 0,t.LinkTypes={EMPHASIZED:"emphasized",SUBTLE:"subtle",INVERTED:"inverted"}},9041:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Semantics=void 0,t.Semantics={POSITIVE:"positive",NEGATIVE:"negative",CRITICAL:"critical",INFORMATIVE:"informative"}},3723:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Sizes=void 0,t.Sizes={X_SMALL:"xs",SMALL:"s",MEDIUM:"m",LARGE:"l",X_LARGE:"xl"}},3904:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TitleLevels=void 0,t.TitleLevels={H1:1,H2:2,H3:3,H4:4,H5:5,H6:6}},6042:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.COMPONENTS=t.COMPONENT=void 0;const r=n(6884),a=n(6849),l=n(7532),o=n(1055),i=n(7340),u=n(1974),c=n(3242),s=n(6661),d=n(6170),f=n(6446),p=n(8398),m=n(6358),h=n(3675),v=n(5135),b=n(8165),g=n(6615),y=n(7055),_=n(2612),E=n(8566),w=n(7026),C=n(4392);t.COMPONENT={AVATAR:{id:"avatar",text:"Avatar",demo:r.AvatarDemo},BADGE:{id:"badge",text:"Badge",demo:a.BadgeDemo},BAR:{id:"bar",text:"Bar",demo:l.BarDemo},BUTTON:{id:"button",text:"Button",demo:o.ButtonDemo},CALENDAR:{id:"calendar",text:"Calendar",demo:i.CalendarDemo},CARD:{id:"card",text:"Card",demo:u.CardDemo},DIALOG:{id:"dialog",text:"Dialog",demo:c.DialogDemo},FORM:{id:"form",text:"Form",demo:s.FormDemo},ICON_TAB_BAR:{id:"icontabbar",text:"IconTabBar",demo:d.IconTabBarDemo},INFO_LABEL:{id:"infolabel",text:"InfoLabel",demo:f.InfoLabelDemo},LINK:{id:"link",text:"Link",demo:p.LinkDemo},OBJECT:{id:"object",text:"Object",demo:m.ObjectDemo},PAGE:{id:"page",text:"Page",demo:h.PageDemo},PANEL:{id:"panel",text:"Panel",demo:v.PanelDemo},SELECT:{id:"select",text:"Select",demo:b.SelectDemo},SHELL_BAR:{id:"shellbar",text:"ShellBar",demo:g.ShellBarDemo},TABLE:{id:"table",text:"Table",demo:y.TableDemo},TILE:{id:"tile",text:"Tile",demo:_.TileDemo},TITLE:{id:"title",text:"Title",demo:E.TitleDemo},TOOLBAR:{id:"toolbar",text:"Toolbar",demo:w.ToolbarDemo},VERTICAL_NAVIGATION:{id:"verticalnavigation",text:"VerticalNavigation",demo:C.VerticalNavigationDemo}},t.COMPONENTS=Object.values(t.COMPONENT)},2531:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.VerticalNavigation=t.ToolbarSpacer=t.ToolbarSeparator=t.Toolbar=t.Title=t.TileContentNumeric=t.TileContainer=t.Tile=t.TableRow=t.Table=t.ShellBar=t.SelectItem=t.Select=t.Panel=t.PageFooter=t.PageBody=t.PageHeader=t.Page=t.ObjectStatus=t.ObjectNumber=t.ObjectMarker=t.ObjectListItem=t.ObjectList=t.ObjectIdentifier=t.ObjectHeaderAttribute=t.ObjectAttribute=t.Link=t.InfoLabel=t.IconTabBarItem=t.IconTabBar=t.FormStepInput=t.FormInput=t.DialogFooter=t.DialogHeader=t.Dialog=t.CardFooter=t.CardHeader=t.Card=t.Calendar=t.Button=t.Bar=t.Badge=t.Avatar=t.TitleLevels=t.Sizes=t.Semantics=t.LinkTypes=t.ButtonTypes=t.ButtonStyles=t.AccentColors=void 0,t.VerticalNavigationItem=void 0;var r=n(7517);Object.defineProperty(t,"AccentColors",{enumerable:!0,get:function(){return r.AccentColors}});var a=n(2183);Object.defineProperty(t,"ButtonStyles",{enumerable:!0,get:function(){return a.ButtonStyles}});var l=n(1903);Object.defineProperty(t,"ButtonTypes",{enumerable:!0,get:function(){return l.ButtonTypes}});var o=n(8313);Object.defineProperty(t,"LinkTypes",{enumerable:!0,get:function(){return o.LinkTypes}});var i=n(9041);Object.defineProperty(t,"Semantics",{enumerable:!0,get:function(){return i.Semantics}});var u=n(3723);Object.defineProperty(t,"Sizes",{enumerable:!0,get:function(){return u.Sizes}});var c=n(3904);Object.defineProperty(t,"TitleLevels",{enumerable:!0,get:function(){return c.TitleLevels}});var s=n(8277);Object.defineProperty(t,"Avatar",{enumerable:!0,get:function(){return s.Avatar}});var d=n(6149);Object.defineProperty(t,"Badge",{enumerable:!0,get:function(){return d.Badge}});var f=n(9128);Object.defineProperty(t,"Bar",{enumerable:!0,get:function(){return f.Bar}});var p=n(4326);Object.defineProperty(t,"Button",{enumerable:!0,get:function(){return p.Button}});var m=n(8681);Object.defineProperty(t,"Calendar",{enumerable:!0,get:function(){return m.Calendar}});var h=n(6369);Object.defineProperty(t,"Card",{enumerable:!0,get:function(){return h.Card}});var v=n(3824);Object.defineProperty(t,"CardHeader",{enumerable:!0,get:function(){return v.CardHeader}});var b=n(6864);Object.defineProperty(t,"CardFooter",{enumerable:!0,get:function(){return b.CardFooter}});var g=n(9456);Object.defineProperty(t,"Dialog",{enumerable:!0,get:function(){return g.Dialog}});var y=n(9929);Object.defineProperty(t,"DialogHeader",{enumerable:!0,get:function(){return y.DialogHeader}});var _=n(8329);Object.defineProperty(t,"DialogFooter",{enumerable:!0,get:function(){return _.DialogFooter}});var E=n(5291);Object.defineProperty(t,"FormInput",{enumerable:!0,get:function(){return E.FormInput}});var w=n(2923);Object.defineProperty(t,"FormStepInput",{enumerable:!0,get:function(){return w.FormStepInput}});var C=n(1058);Object.defineProperty(t,"IconTabBar",{enumerable:!0,get:function(){return C.IconTabBar}});var S=n(5426);Object.defineProperty(t,"IconTabBarItem",{enumerable:!0,get:function(){return S.IconTabBarItem}});var k=n(4229);Object.defineProperty(t,"InfoLabel",{enumerable:!0,get:function(){return k.InfoLabel}});var x=n(6374);Object.defineProperty(t,"Link",{enumerable:!0,get:function(){return x.Link}});var O=n(8775);Object.defineProperty(t,"ObjectAttribute",{enumerable:!0,get:function(){return O.ObjectAttribute}});var A=n(9579);Object.defineProperty(t,"ObjectHeaderAttribute",{enumerable:!0,get:function(){return A.ObjectHeaderAttribute}});var P=n(3417);Object.defineProperty(t,"ObjectIdentifier",{enumerable:!0,get:function(){return P.ObjectIdentifier}});var N=n(225);Object.defineProperty(t,"ObjectList",{enumerable:!0,get:function(){return N.ObjectList}});var D=n(3610);Object.defineProperty(t,"ObjectListItem",{enumerable:!0,get:function(){return D.ObjectListItem}});var j=n(6519);Object.defineProperty(t,"ObjectMarker",{enumerable:!0,get:function(){return j.ObjectMarker}});var T=n(3501);Object.defineProperty(t,"ObjectNumber",{enumerable:!0,get:function(){return T.ObjectNumber}});var M=n(4279);Object.defineProperty(t,"ObjectStatus",{enumerable:!0,get:function(){return M.ObjectStatus}});var L=n(2192);Object.defineProperty(t,"Page",{enumerable:!0,get:function(){return L.Page}});var R=n(9283);Object.defineProperty(t,"PageHeader",{enumerable:!0,get:function(){return R.PageHeader}});var I=n(8087);Object.defineProperty(t,"PageBody",{enumerable:!0,get:function(){return I.PageBody}});var B=n(8327);Object.defineProperty(t,"PageFooter",{enumerable:!0,get:function(){return B.PageFooter}});var z=n(7774);Object.defineProperty(t,"Panel",{enumerable:!0,get:function(){return z.Panel}});var F=n(7674);Object.defineProperty(t,"Select",{enumerable:!0,get:function(){return F.Select}});var U=n(7459);Object.defineProperty(t,"SelectItem",{enumerable:!0,get:function(){return U.SelectItem}});var H=n(7893);Object.defineProperty(t,"ShellBar",{enumerable:!0,get:function(){return H.ShellBar}});var $=n(524);Object.defineProperty(t,"Table",{enumerable:!0,get:function(){return $.Table}});var V=n(9027);Object.defineProperty(t,"TableRow",{enumerable:!0,get:function(){return V.TableRow}});var W=n(9268);Object.defineProperty(t,"Tile",{enumerable:!0,get:function(){return W.Tile}});var Y=n(6056);Object.defineProperty(t,"TileContainer",{enumerable:!0,get:function(){return Y.TileContainer}});var Q=n(153);Object.defineProperty(t,"TileContentNumeric",{enumerable:!0,get:function(){return Q.TileContentNumeric}});var K=n(5791);Object.defineProperty(t,"Title",{enumerable:!0,get:function(){return K.Title}});var q=n(1054);Object.defineProperty(t,"Toolbar",{enumerable:!0,get:function(){return q.Toolbar}});var Z=n(5703);Object.defineProperty(t,"ToolbarSeparator",{enumerable:!0,get:function(){return Z.ToolbarSeparator}});var G=n(2744);Object.defineProperty(t,"ToolbarSpacer",{enumerable:!0,get:function(){return G.ToolbarSpacer}});var X=n(4419);Object.defineProperty(t,"VerticalNavigation",{enumerable:!0,get:function(){return X.VerticalNavigation}});var J=n(8927);Object.defineProperty(t,"VerticalNavigationItem",{enumerable:!0,get:function(){return J.VerticalNavigationItem}})},2509:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(7294)),l=n(9818),o=r(n(2420)),i=r(n(1629)),u=r(n(2888));t.default=()=>a.default.createElement(l.Routes,null,a.default.createElement(l.Route,{path:"*",element:a.default.createElement(o.default,null)},a.default.createElement(l.Route,{path:"demo",element:a.default.createElement(i.default,null)},a.default.createElement(l.Route,{path:":demoId",element:a.default.createElement(u.default,null)}))))},2888:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.RouteDemo=void 0;const a=r(n(7294)),l=n(9818),o=n(6042);t.RouteDemo=()=>{const e=(0,l.useParams)().demoId,t=o.COMPONENTS.find((t=>t.id===e));return t?a.default.createElement(t.demo,null):a.default.createElement("div",null,"INDALID")},t.default=t.RouteDemo},1629:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.RouteDemos=void 0;const a=r(n(7294)),l=n(9818);t.RouteDemos=()=>a.default.createElement(l.Outlet,null),t.default=t.RouteDemos},2420:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(7294)),l=n(9818),o=n(4529),i=n(4110),u=n(5487);t.default=()=>a.default.createElement("div",{style:{display:"flex",flexDirection:"column",height:"100%"}},a.default.createElement("div",{style:{flexShrink:0}},a.default.createElement(o.AppHeader,null)),a.default.createElement("div",{style:{display:"flex",flexBasis:0,flexGrow:1,overflow:"hidden"}},a.default.createElement("div",{style:{overflow:"auto",flexShrink:0}},a.default.createElement(u.AppSidePanel,null)),a.default.createElement("div",{style:{flexBasis:0,flexGrow:1}},a.default.createElement(i.AppMainContent,null,a.default.createElement(l.Outlet,null)))))}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var l=r[e]={id:e,exports:{}};return n[e].call(l.exports,l,l.exports,a),l.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var l=Object.create(null);a.r(l);var o={};e=e||[null,t({}),t([]),t(t)];for(var i=2&r&&n;"object"==typeof i&&!~e.indexOf(i);i=t(i))Object.getOwnPropertyNames(i).forEach((e=>o[e]=()=>n[e]));return o.default=()=>n,a.d(l,o),l},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.nc=void 0,a(6212)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFFM2dCLFlBQVksRUFBTUMsSUFBS210RSxFQUFXenNELElBRTFFLEVDTkRnc0QsRUFBb0JwdEUsRUFBSSxDQUFDNDJELEVBQUtxRCxJQUFVeGtFLE9BQU9xTCxVQUFVQyxlQUFlQyxLQUFLNDFELEVBQUtxRCxHQ0NsRm1ULEVBQW9CaHJFLEVBQUt6TSxJQUNILG9CQUFYMlMsUUFBMEJBLE9BQU93bEUsYUFDMUNyNEUsT0FBT0MsZUFBZUMsRUFBUzJTLE9BQU93bEUsWUFBYSxDQUFFbDRFLE1BQU8sV0FFN0RILE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLEdBQU8sRUNMOUR3M0UsRUFBb0JXLFFBQUszdEUsRUNHQ2d0RSxFQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC93ZWJwYWNrL3J1bnRpbWUvY3JlYXRlIGZha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQHVuY292ZXIvanMtdXRpbHMvZGlzdC9BbHBoYWJldC5qcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQHVuY292ZXIvanMtdXRpbHMvZGlzdC9BcnJheVV0aWxzLmpzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AdW5jb3Zlci9qcy11dGlscy9kaXN0L0RhdGFTdGF0ZXMuanMiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0B1bmNvdmVyL2pzLXV0aWxzL2Rpc3QvRGF0YVN0YXRlc1V0aWxzLmpzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AdW5jb3Zlci9qcy11dGlscy9kaXN0L0RhdGVVdGlscy5qcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQHVuY292ZXIvanMtdXRpbHMvZGlzdC9FbmNvZGVVdGlscy5qcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQHVuY292ZXIvanMtdXRpbHMvZGlzdC9GaWxlVXRpbHMuanMiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0B1bmNvdmVyL2pzLXV0aWxzL2Rpc3QvRnVuY3Rpb25VdGlscy5qcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQHVuY292ZXIvanMtdXRpbHMvZGlzdC9IdHRwVXRpbHMuanMiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0B1bmNvdmVyL2pzLXV0aWxzL2Rpc3QvT2JqZWN0VXRpbHMuanMiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0B1bmNvdmVyL2pzLXV0aWxzL2Rpc3QvUHJvbWlzZVV0aWxzLmpzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AdW5jb3Zlci9qcy11dGlscy9kaXN0L1NldHMuanMiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0B1bmNvdmVyL2pzLXV0aWxzL2Rpc3QvU3RyaW5nTGFiZWwuanMiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0B1bmNvdmVyL2pzLXV0aWxzL2Rpc3QvU3RyaW5nVXRpbHMuanMiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL0B1bmNvdmVyL2pzLXV0aWxzL2Rpc3QvVVVJRC5qcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9ub2RlX21vZHVsZXMvQHVuY292ZXIvanMtdXRpbHMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9jb21tb24vQ29kZVBhbmVsLmNzcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9jb21tb24vRGVtb1BhZ2UuY3NzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9pY29udGFiYmFyL0ljb25UYWJCYXIuY3NzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9vYmplY3QvT2JqZWN0SGVhZGVyQXR0cmlidXRlLmNzcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvcGFnZS9QYWdlLmNzcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvdG9vbGJhci9Ub29sYmFyLmNzcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL25vZGVfbW9kdWxlcy9AcmVtaXgtcnVuL3JvdXRlci9kaXN0L3JvdXRlci5qcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9jb21tb24vQ29kZVBhbmVsLmNzcz8xYjEzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9EZW1vUGFnZS5jc3M/NTVjNiIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvaWNvbnRhYmJhci9JY29uVGFiQmFyLmNzcz9lMTllIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9vYmplY3QvT2JqZWN0SGVhZGVyQXR0cmlidXRlLmNzcz84YjIzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9wYWdlL1BhZ2UuY3NzP2ZkODUiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2xpYi9jb21wb25lbnRzL3Rvb2xiYXIvVG9vbGJhci5jc3M/YWNhOCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9jb21wb25lbnRzL0FwcEhlYWRlci50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvQXBwTWFpbkNvbnRlbnQudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9jb21wb25lbnRzL0FwcFNpZGVQYW5lbC50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvY29tbW9uL0NvZGVQYW5lbC50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvY29tbW9uL0RlbW9QYWdlLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9kZW1vL0F2YXRhckRlbW8udHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2RlbW8vQmFkZ2VEZW1vLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9kZW1vL0JhckRlbW8udHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2RlbW8vQnV0dG9uRGVtby50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvZGVtby9DYWxlbmRhckRlbW8udHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2RlbW8vQ2FyZERlbW8udHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2RlbW8vRGlhbG9nRGVtby50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvZGVtby9Gb3JtRGVtby50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvZGVtby9JY29uVGFiQmFyRGVtby50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvZGVtby9JbmZvTGFiZWxEZW1vLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9kZW1vL0xpbmtEZW1vLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9kZW1vL09iamVjdERlbW8udHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2RlbW8vUGFnZURlbW8udHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2RlbW8vUGFuZWxEZW1vLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9kZW1vL1NlbGVjdERlbW8udHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2RlbW8vU2hlbGxCYXJEZW1vLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvY29tcG9uZW50cy9kZW1vL1RhYmxlRGVtby50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvZGVtby9UaWxlRGVtby50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2NvbXBvbmVudHMvZGVtby9UaXRsZURlbW8udHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2RlbW8vVG9vbGJhckRlbW8udHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9jb21wb25lbnRzL2RlbW8vVmVydGljYWxOYXZpZ2F0aW9uRGVtby50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2luZGV4LWRvY3MudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9hdmF0YXIvQXZhdGFyLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvYmFkZ2UvQmFkZ2UudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9iYXIvQmFyLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvYnV0dG9uL0J1dHRvbi50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2xpYi9jb21wb25lbnRzL2NhbGVuZGFyL0NhbGVuZGFyLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvY2FsZW5kYXIvQ2FsZW5kYXJEYXlzLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvY2FsZW5kYXIvQ2FsZW5kYXJNb250aHMudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9jYWxlbmRhci9DYWxlbmRhclllYXJzLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvY2FyZC9DYXJkLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvY2FyZC9DYXJkRm9vdGVyLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvY2FyZC9DYXJkSGVhZGVyLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvZGlhbG9nL0RpYWxvZy50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2xpYi9jb21wb25lbnRzL2RpYWxvZy9EaWFsb2dGb290ZXIudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9kaWFsb2cvRGlhbG9nSGVhZGVyLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvZm9ybS9Gb3JtSW5wdXQudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9mb3JtL0Zvcm1TdGVwSW5wdXQudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9pY29udGFiYmFyL0ljb25UYWJCYXIudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9pY29udGFiYmFyL0ljb25UYWJCYXJJdGVtLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvaW5mb2xhYmVsL0luZm9MYWJlbC50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2xpYi9jb21wb25lbnRzL2xpbmsvTGluay50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2xpYi9jb21wb25lbnRzL29iamVjdC9PYmplY3RBdHRyaWJ1dGUudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9vYmplY3QvT2JqZWN0SGVhZGVyQXR0cmlidXRlLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvb2JqZWN0L09iamVjdElkZW50aWZpZXIudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9vYmplY3QvT2JqZWN0TGlzdC50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2xpYi9jb21wb25lbnRzL29iamVjdC9PYmplY3RMaXN0SXRlbS50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2xpYi9jb21wb25lbnRzL29iamVjdC9PYmplY3RNYXJrZXIudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9vYmplY3QvT2JqZWN0TnVtYmVyLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvb2JqZWN0L09iamVjdFN0YXR1cy50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2xpYi9jb21wb25lbnRzL3BhZ2UvUGFnZS50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2xpYi9jb21wb25lbnRzL3BhZ2UvUGFnZUJvZHkudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9wYWdlL1BhZ2VGb290ZXIudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9wYWdlL1BhZ2VIZWFkZXIudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9wYW5lbC9QYW5lbC50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2xpYi9jb21wb25lbnRzL3NlbGVjdC9TZWxlY3QudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy9zZWxlY3QvU2VsZWN0SXRlbS50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2xpYi9jb21wb25lbnRzL3NoZWxsYmFyL1NoZWxsQmFyLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvdGFibGUvVGFibGUudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy90YWJsZS9UYWJsZVJvdy50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2xpYi9jb21wb25lbnRzL3RpbGUvVGlsZS50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2xpYi9jb21wb25lbnRzL3RpbGUvVGlsZUNvbnRhaW5lci50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2xpYi9jb21wb25lbnRzL3RpbGUvVGlsZUNvbnRlbnROdW1lcmljLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvdGl0bGUvVGl0bGUudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy90b29sYmFyL1Rvb2xiYXIudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy90b29sYmFyL1Rvb2xiYXJTZXBhcmF0b3IudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy90b29sYmFyL1Rvb2xiYXJTcGFjZXIudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29tcG9uZW50cy92ZXJ0aWNhbG5hdmlnYXRpb24vVmVydGljYWxOYXZpZ2F0aW9uLnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2NvbXBvbmVudHMvdmVydGljYWxuYXZpZ2F0aW9uL1ZlcnRpY2FsTmF2aWdhdGlvbkl0ZW0udHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29uc3RhbnRzL0FjY2VudENvbG9yLnRzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29uc3RhbnRzL0J1dHRvblN0eWxlLnRzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29uc3RhbnRzL0J1dHRvblR5cGUudHMiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2xpYi9jb25zdGFudHMvTGlua1R5cGUudHN4Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29uc3RhbnRzL1NlbWFudGljLnRzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvY29uc3RhbnRzL1NpemUudHMiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL2xpYi9jb25zdGFudHMvVGl0bGVMZXZlbC50cyIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvbGliL2luZGV4LWRlbW9zLnRzIiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC8uL3NyYy9saWIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL3JvdXRlcy9fX2xheW91dC50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL3JvdXRlcy9kZW1vL1x1MDAwMCNpZC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0Ly4vc3JjL3JvdXRlcy9kZW1vL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3QvLi9zcmMvcm91dGVzL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL0B1bmNvdmVyL2Z1bmRhbWVudGFscy1yZWFjdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0L3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vQHVuY292ZXIvZnVuZGFtZW50YWxzLXJlYWN0L3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9AdW5jb3Zlci9mdW5kYW1lbnRhbHMtcmVhY3Qvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiA/IChvYmopID0+IChPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSkgOiAob2JqKSA9PiAob2JqLl9fcHJvdG9fXyk7XG52YXIgbGVhZlByb3RvdHlwZXM7XG4vLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLy8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8vIG1vZGUgJiAxNjogcmV0dXJuIHZhbHVlIHdoZW4gaXQncyBQcm9taXNlLWxpa2Vcbi8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbl9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG5cdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IHRoaXModmFsdWUpO1xuXHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuXHRpZih0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlKSB7XG5cdFx0aWYoKG1vZGUgJiA0KSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG5cdFx0aWYoKG1vZGUgJiAxNikgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHJldHVybiB2YWx1ZTtcblx0fVxuXHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuXHR2YXIgZGVmID0ge307XG5cdGxlYWZQcm90b3R5cGVzID0gbGVhZlByb3RvdHlwZXMgfHwgW251bGwsIGdldFByb3RvKHt9KSwgZ2V0UHJvdG8oW10pLCBnZXRQcm90byhnZXRQcm90byldO1xuXHRmb3IodmFyIGN1cnJlbnQgPSBtb2RlICYgMiAmJiB2YWx1ZTsgdHlwZW9mIGN1cnJlbnQgPT0gJ29iamVjdCcgJiYgIX5sZWFmUHJvdG90eXBlcy5pbmRleE9mKGN1cnJlbnQpOyBjdXJyZW50ID0gZ2V0UHJvdG8oY3VycmVudCkpIHtcblx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdXJyZW50KS5mb3JFYWNoKChrZXkpID0+IChkZWZba2V5XSA9ICgpID0+ICh2YWx1ZVtrZXldKSkpO1xuXHR9XG5cdGRlZlsnZGVmYXVsdCddID0gKCkgPT4gKHZhbHVlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBkZWYpO1xuXHRyZXR1cm4gbnM7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEFMUEhBQkVUID0ge1xuICAgIExFVFRFUlM6IHtcbiAgICAgICAgQTogJ2EnLFxuICAgICAgICBCOiAnYicsXG4gICAgICAgIEM6ICdjJyxcbiAgICAgICAgRDogJ2QnLFxuICAgICAgICBFOiAnZScsXG4gICAgICAgIEY6ICdmJyxcbiAgICAgICAgRzogJ2cnLFxuICAgICAgICBIOiAnaCcsXG4gICAgICAgIEk6ICdpJyxcbiAgICAgICAgSjogJ2onLFxuICAgICAgICBLOiAnaycsXG4gICAgICAgIEw6ICdsJyxcbiAgICAgICAgTTogJ20nLFxuICAgICAgICBOOiAnbicsXG4gICAgICAgIE86ICdvJyxcbiAgICAgICAgUDogJ3AnLFxuICAgICAgICBROiAncScsXG4gICAgICAgIFI6ICdyJyxcbiAgICAgICAgUzogJ3MnLFxuICAgICAgICBUOiAndCcsXG4gICAgICAgIFU6ICd1JyxcbiAgICAgICAgVjogJ3YnLFxuICAgICAgICBXOiAndycsXG4gICAgICAgIFg6ICd4JyxcbiAgICAgICAgWTogJ3knLFxuICAgICAgICBaOiAneidcbiAgICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gQUxQSEFCRVQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmFuZG9tU3ViQXJyYXkgPSBleHBvcnRzLnNodWZmbGUgPSBleHBvcnRzLmNyZWF0ZUludEFycmF5ID0gdm9pZCAwO1xudmFyIGNyZWF0ZUludEFycmF5ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgICBpZiAoc2l6ZSA9PT0gdm9pZCAwKSB7IHNpemUgPSAwOyB9XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbmV4cG9ydHMuY3JlYXRlSW50QXJyYXkgPSBjcmVhdGVJbnRBcnJheTtcbnZhciBzaHVmZmxlID0gZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgaWYgKGFycmF5ID09PSB2b2lkIDApIHsgYXJyYXkgPSBbXTsgfVxuICAgIHZhciBzb3VyY2UgPSBbXS5jb25jYXQoYXJyYXkpO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB3aGlsZSAoc291cmNlLmxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoc291cmNlLmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQucHVzaChzb3VyY2Uuc3BsaWNlKGluZGV4LCAxKVswXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0cy5zaHVmZmxlID0gc2h1ZmZsZTtcbnZhciByYW5kb21TdWJBcnJheSA9IGZ1bmN0aW9uIChhcnJheSwgaXRlbXMpIHtcbiAgICBpZiAoYXJyYXkgPT09IHZvaWQgMCkgeyBhcnJheSA9IFtdOyB9XG4gICAgaWYgKGl0ZW1zID09PSB2b2lkIDApIHsgaXRlbXMgPSAwOyB9XG4gICAgdmFyIHNvdXJjZSA9IFtdLmNvbmNhdChhcnJheSk7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXM7IGkrKykge1xuICAgICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoc291cmNlLmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQucHVzaChzb3VyY2Uuc3BsaWNlKGluZGV4LCAxKVswXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0cy5yYW5kb21TdWJBcnJheSA9IHJhbmRvbVN1YkFycmF5O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRGF0YVN0YXRlcyA9IHtcbiAgICBORVZFUjogJ05FVkVSJyxcbiAgICBGRVRDSElOR19GSVJTVDogJ0ZFVENISU5HX0ZJUlNUJyxcbiAgICBGRVRDSElORzogJ0ZFVENISU5HJyxcbiAgICBTVUNDRVNTOiAnU1VDQ0VTUycsXG4gICAgRkFJTFVSRTogJ0ZBSUxVUkUnLFxuICAgIE9VVERBVEVEOiAnT1VUREFURUQnLFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IERhdGFTdGF0ZXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWVyZ2VEYXRhU3RhdGVzID0gdm9pZCAwO1xudmFyIERhdGFTdGF0ZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9EYXRhU3RhdGVzXCIpKTtcbnZhciBtZXJnZURhdGFTdGF0ZXMgPSBmdW5jdGlvbiAoc3RhdGVzKSB7XG4gICAgaWYgKHN0YXRlcy5sZW5ndGggPT09IDApXG4gICAgICAgIHJldHVybiBEYXRhU3RhdGVzXzEuZGVmYXVsdC5ORVZFUjtcbiAgICBpZiAoc3RhdGVzLnNvbWUoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMgPT09IERhdGFTdGF0ZXNfMS5kZWZhdWx0LkZBSUxVUkU7IH0pKVxuICAgICAgICByZXR1cm4gRGF0YVN0YXRlc18xLmRlZmF1bHQuRkFJTFVSRTtcbiAgICBpZiAoc3RhdGVzLnNvbWUoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMgPT09IERhdGFTdGF0ZXNfMS5kZWZhdWx0Lk9VVERBVEVEOyB9KSlcbiAgICAgICAgcmV0dXJuIERhdGFTdGF0ZXNfMS5kZWZhdWx0Lk9VVERBVEVEO1xuICAgIGlmIChzdGF0ZXMuc29tZShmdW5jdGlvbiAocykgeyByZXR1cm4gcyA9PT0gRGF0YVN0YXRlc18xLmRlZmF1bHQuTkVWRVI7IH0pKVxuICAgICAgICByZXR1cm4gRGF0YVN0YXRlc18xLmRlZmF1bHQuTkVWRVI7XG4gICAgaWYgKHN0YXRlcy5zb21lKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzID09PSBEYXRhU3RhdGVzXzEuZGVmYXVsdC5GRVRDSElOR19GSVJTVDsgfSkpXG4gICAgICAgIHJldHVybiBEYXRhU3RhdGVzXzEuZGVmYXVsdC5GRVRDSElOR19GSVJTVDtcbiAgICBpZiAoc3RhdGVzLnNvbWUoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMgPT09IERhdGFTdGF0ZXNfMS5kZWZhdWx0LkZFVENISU5HOyB9KSlcbiAgICAgICAgcmV0dXJuIERhdGFTdGF0ZXNfMS5kZWZhdWx0LkZFVENISU5HO1xuICAgIHJldHVybiBEYXRhU3RhdGVzXzEuZGVmYXVsdC5TVUNDRVNTO1xufTtcbmV4cG9ydHMubWVyZ2VEYXRhU3RhdGVzID0gbWVyZ2VEYXRhU3RhdGVzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm5vd1N0cmluZyA9IGV4cG9ydHMuZGF0ZVN0cmluZyA9IGV4cG9ydHMubm9ybWFsaXplVGltZSA9IGV4cG9ydHMuZHVyYXRpb25Ub0h1bWFuVGltZSA9IGV4cG9ydHMuVGltZUNvbnN0YW50cyA9IHZvaWQgMDtcbnZhciBNSUxfUEVSX1NFQyA9IDEwMDA7XG52YXIgU0VDX1BFUl9NSU4gPSA2MDtcbnZhciBNSUxfUEVSX01JTiA9IE1JTF9QRVJfU0VDICogU0VDX1BFUl9NSU47XG52YXIgTUlOX1BFUl9IT1UgPSA2MDtcbnZhciBTRUNfUEVSX0hPVSA9IFNFQ19QRVJfTUlOICogTUlOX1BFUl9IT1U7XG52YXIgTUlMX1BFUl9IT1UgPSBNSUxfUEVSX01JTiAqIE1JTl9QRVJfSE9VO1xudmFyIEhPVV9QRVJfREFZID0gMjQ7XG52YXIgTUlOX1BFUl9EQVkgPSBNSU5fUEVSX0hPVSAqIEhPVV9QRVJfREFZO1xudmFyIFNFQ19QRVJfREFZID0gU0VDX1BFUl9IT1UgKiBIT1VfUEVSX0RBWTtcbnZhciBNSUxfUEVSX0RBWSA9IE1JTF9QRVJfSE9VICogSE9VX1BFUl9EQVk7XG5leHBvcnRzLlRpbWVDb25zdGFudHMgPSB7XG4gICAgTUlMX1BFUl9TRUM6IE1JTF9QRVJfU0VDLFxuICAgIFNFQ19QRVJfTUlOOiBTRUNfUEVSX01JTixcbiAgICBNSUxfUEVSX01JTjogTUlMX1BFUl9NSU4sXG4gICAgTUlOX1BFUl9IT1U6IE1JTl9QRVJfSE9VLFxuICAgIFNFQ19QRVJfSE9VOiBTRUNfUEVSX0hPVSxcbiAgICBNSUxfUEVSX0hPVTogTUlMX1BFUl9IT1UsXG4gICAgSE9VX1BFUl9EQVk6IEhPVV9QRVJfREFZLFxuICAgIE1JTl9QRVJfREFZOiBNSU5fUEVSX0RBWSxcbiAgICBTRUNfUEVSX0RBWTogU0VDX1BFUl9EQVksXG4gICAgTUlMX1BFUl9EQVk6IE1JTF9QRVJfREFZXG59O1xudmFyIGR1cmF0aW9uVG9IdW1hblRpbWUgPSBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtaWxsaXM6IGR1cmF0aW9uICUgTUlMX1BFUl9TRUMsXG4gICAgICAgIHNlY29uZHM6IE1hdGguZmxvb3IoZHVyYXRpb24gLyBNSUxfUEVSX1NFQykgJSBTRUNfUEVSX01JTixcbiAgICAgICAgbWludXRlczogTWF0aC5mbG9vcihkdXJhdGlvbiAvIE1JTF9QRVJfTUlOKSAlIE1JTl9QRVJfSE9VLFxuICAgICAgICBob3VyczogTWF0aC5mbG9vcihkdXJhdGlvbiAvIE1JTF9QRVJfSE9VKVxuICAgIH07XG59O1xuZXhwb3J0cy5kdXJhdGlvblRvSHVtYW5UaW1lID0gZHVyYXRpb25Ub0h1bWFuVGltZTtcbnZhciBub3JtYWxpemVUaW1lID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHZhbHVlKS5wYWRTdGFydCgyLCAnMCcpO1xufTtcbmV4cG9ydHMubm9ybWFsaXplVGltZSA9IG5vcm1hbGl6ZVRpbWU7XG52YXIgZGF0ZVN0cmluZyA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgdmFyIHllYXIgPSAoMCwgZXhwb3J0cy5ub3JtYWxpemVUaW1lKShkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICAgIHZhciBtb250aCA9ICgwLCBleHBvcnRzLm5vcm1hbGl6ZVRpbWUpKGRhdGUuZ2V0TW9udGgoKSk7XG4gICAgdmFyIGRheSA9ICgwLCBleHBvcnRzLm5vcm1hbGl6ZVRpbWUpKGRhdGUuZ2V0RGF0ZSgpKTtcbiAgICB2YXIgaG91cnMgPSAoMCwgZXhwb3J0cy5ub3JtYWxpemVUaW1lKShkYXRlLmdldEhvdXJzKCkpO1xuICAgIHZhciBtaW51dGVzID0gKDAsIGV4cG9ydHMubm9ybWFsaXplVGltZSkoZGF0ZS5nZXRNaW51dGVzKCkpO1xuICAgIHZhciBzZWNvbmRzID0gKDAsIGV4cG9ydHMubm9ybWFsaXplVGltZSkoZGF0ZS5nZXRTZWNvbmRzKCkpO1xuICAgIHJldHVybiBcIlwiLmNvbmNhdCh5ZWFyLCBcIi1cIikuY29uY2F0KG1vbnRoLCBcIi1cIikuY29uY2F0KGRheSwgXCIgXCIpLmNvbmNhdChob3VycywgXCI6XCIpLmNvbmNhdChtaW51dGVzLCBcIjpcIikuY29uY2F0KHNlY29uZHMpO1xufTtcbmV4cG9ydHMuZGF0ZVN0cmluZyA9IGRhdGVTdHJpbmc7XG52YXIgbm93U3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAoMCwgZXhwb3J0cy5kYXRlU3RyaW5nKShuZXcgRGF0ZShEYXRlLm5vdygpKSk7XG59O1xuZXhwb3J0cy5ub3dTdHJpbmcgPSBub3dTdHJpbmc7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjb2RlQmFzaWNIZWFkZXIgPSBleHBvcnRzLmVuY29kZUJhc2ljSGVhZGVyID0gZXhwb3J0cy5kZWNvZGUgPSBleHBvcnRzLmVuY29kZSA9IHZvaWQgMDtcbnZhciBlbmNvZGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkgeyB2YWx1ZSA9ICcnOyB9XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlKS50b1N0cmluZygnYmFzZTY0Jyk7XG59O1xuZXhwb3J0cy5lbmNvZGUgPSBlbmNvZGU7XG52YXIgZGVjb2RlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHsgdmFsdWUgPSAnJzsgfVxuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZSwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCk7XG59O1xuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG52YXIgZW5jb2RlQmFzaWNIZWFkZXIgPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgaWYgKHVzZXJuYW1lID09PSB2b2lkIDApIHsgdXNlcm5hbWUgPSAnJzsgfVxuICAgIGlmIChwYXNzd29yZCA9PT0gdm9pZCAwKSB7IHBhc3N3b3JkID0gJyc7IH1cbiAgICB2YXIgZGVjb2RlZCA9IFwiXCIuY29uY2F0KHVzZXJuYW1lLCBcIjpcIikuY29uY2F0KHBhc3N3b3JkKTtcbiAgICB2YXIgZW5jb2RlZCA9ICgwLCBleHBvcnRzLmVuY29kZSkoZGVjb2RlZCk7XG4gICAgcmV0dXJuIFwiQmFzaWMgXCIuY29uY2F0KGVuY29kZWQpO1xufTtcbmV4cG9ydHMuZW5jb2RlQmFzaWNIZWFkZXIgPSBlbmNvZGVCYXNpY0hlYWRlcjtcbnZhciBkZWNvZGVCYXNpY0hlYWRlciA9IGZ1bmN0aW9uIChoZWFkZXIpIHtcbiAgICBpZiAoaGVhZGVyID09PSB2b2lkIDApIHsgaGVhZGVyID0gJyc7IH1cbiAgICB2YXIgZW5jb2RlZCA9IGhlYWRlci5zcGxpdCgnQmFzaWMgJykuam9pbignJyk7XG4gICAgdmFyIGRlY29kZWQgPSAoMCwgZXhwb3J0cy5kZWNvZGUpKGVuY29kZWQpO1xuICAgIHZhciB2YWx1ZXMgPSBkZWNvZGVkLnNwbGl0KCc6Jyk7XG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiB2YWx1ZXNbMF0sXG4gICAgICAgICAgICBwYXNzd29yZDogdmFsdWVzWzFdXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXNlcm5hbWU6IG51bGwsXG4gICAgICAgICAgICBwYXNzd29yZDogbnVsbFxuICAgICAgICB9O1xuICAgIH1cbn07XG5leHBvcnRzLmRlY29kZUJhc2ljSGVhZGVyID0gZGVjb2RlQmFzaWNIZWFkZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2hlY2tTaXplID0gZXhwb3J0cy5jaGVja0V4dGVuc2lvbiA9IGV4cG9ydHMuZ2V0RXh0ZW5zaW9uID0gdm9pZCAwO1xuLyoqXG4gKiBEZXRlcm1pbmUgYSBmaWxlIGV4dGVuc2lvblxuICogQHBhcmFtIHtvYmplY3R9IGZpbGUgOiBhIGZpbGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBmaWxlIGV4dGVuc2lvblxuICovXG52YXIgZ2V0RXh0ZW5zaW9uID0gZnVuY3Rpb24gKGZpbGUpIHtcbiAgICB2YXIgbmFtZSA9IGZpbGUubmFtZTtcbiAgICByZXR1cm4gbmFtZS5zdWJzdHJpbmcobmFtZS5sYXN0SW5kZXhPZignLicpICsgMSkudG9Mb3dlckNhc2UoKTtcbn07XG5leHBvcnRzLmdldEV4dGVuc2lvbiA9IGdldEV4dGVuc2lvbjtcbi8qKlxuICogQ2hlY2sgaWYgYSBmaWxlIGV4dGVuc2lvbiBpcyBvbmUgb2YgdGhlIHNwZWNpZmllZFxuICogQHBhcmFtIHtvYmplY3R9IGZpbGUgOiBhIGZpbGVcbiAqIEBwYXJhbSB7YXJyYXl9IGV4dGVudGlvbnMgOiBhIGxpc3Qgb2Ygc3VwcG9ydGVkIGV4dGVuc2lvblxuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGZpbGUgZXh0ZW5zaW9uIG1hdGNoXG4gKi9cbnZhciBjaGVja0V4dGVuc2lvbiA9IGZ1bmN0aW9uIChmaWxlLCBleHRlbnRpb25zKSB7XG4gICAgcmV0dXJuIChleHRlbnRpb25zKS5pbmRleE9mKCgwLCBleHBvcnRzLmdldEV4dGVuc2lvbikoZmlsZSkpICE9PSAtMTtcbn07XG5leHBvcnRzLmNoZWNrRXh0ZW5zaW9uID0gY2hlY2tFeHRlbnNpb247XG4vKipcbiAqIENoZWNrIGlmIGEgZmlsZSBzaXplIGRvZXMgbm90IGV4Y2VlZCBhIGxpbWl0XG4gKiBAcGFyYW0ge29iamVjdH0gZmlsZSA6IGEgZmlsZVxuICogQHBhcmFtIHtudW1iZXJ9IHNpemUgOiB0aGUgbWF4aW11bSBzaXplXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZmlsZSBzaXplIGlzIGJlbG93IHRoZSBsaW1pdFxuICovXG52YXIgY2hlY2tTaXplID0gZnVuY3Rpb24gKGZpbGUsIHNpemUpIHtcbiAgICByZXR1cm4gZmlsZS5zaXplIDw9IHNpemU7XG59O1xuZXhwb3J0cy5jaGVja1NpemUgPSBjaGVja1NpemU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0UGFyYW1OYW1lcyA9IHZvaWQgMDtcbi8qIEV4dHJhY3RzIHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24gcGFyYW1ldGVyc1xuICogQ291cnRlc3kgb2YgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTAwNzk4MS9ob3ctdG8tZ2V0LWZ1bmN0aW9uLXBhcmFtZXRlci1uYW1lcy12YWx1ZXMtZHluYW1pY2FsbHlcbiAqL1xudmFyIFNUUklQX0NPTU1FTlRTID0gLygoXFwvXFwvLiokKXwoXFwvXFwqW1xcc1xcU10qP1xcKlxcLykpL21nO1xudmFyIEFSR1VNRU5UX05BTUVTID0gLyhbXlxccyxdKykvZztcbnZhciBnZXRQYXJhbU5hbWVzID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICB2YXIgZm5TdHIgPSBmdW5jLnRvU3RyaW5nKCkucmVwbGFjZShTVFJJUF9DT01NRU5UUywgJycpO1xuICAgIHZhciByZXN1bHQgPSBmblN0ci5zbGljZShmblN0ci5pbmRleE9mKCcoJykgKyAxLCBmblN0ci5pbmRleE9mKCcpJykpLm1hdGNoKEFSR1VNRU5UX05BTUVTKTtcbiAgICBpZiAocmVzdWx0ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnRzLmdldFBhcmFtTmFtZXMgPSBnZXRQYXJhbU5hbWVzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkh0dHBTdGF0dXMgPSBleHBvcnRzLkh0dHBNZXRob2QgPSBleHBvcnRzLkh0dHBIZWFkZXIgPSB2b2lkIDA7XG52YXIgSHR0cEhlYWRlcjtcbihmdW5jdGlvbiAoSHR0cEhlYWRlcikge1xuICAgIEh0dHBIZWFkZXJbXCJBQ0NFU1NfQ09OVFJPTF9BTExPV19PUklHSU5cIl0gPSBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiO1xuICAgIEh0dHBIZWFkZXJbXCJBQ0NFU1NfQ09OVFJPTF9BTExPV19IRUFERVJTXCJdID0gXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXCI7XG4gICAgSHR0cEhlYWRlcltcIkFDQ0VTU19DT05UUk9MX0FMTE9XX01FVEhPRFNcIl0gPSBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHNcIjtcbn0pKEh0dHBIZWFkZXIgPSBleHBvcnRzLkh0dHBIZWFkZXIgfHwgKGV4cG9ydHMuSHR0cEhlYWRlciA9IHt9KSk7XG52YXIgSHR0cE1ldGhvZDtcbihmdW5jdGlvbiAoSHR0cE1ldGhvZCkge1xuICAgIEh0dHBNZXRob2RbXCJHRVRcIl0gPSBcIkdFVFwiO1xuICAgIEh0dHBNZXRob2RbXCJQT1NUXCJdID0gXCJQT1NUXCI7XG4gICAgSHR0cE1ldGhvZFtcIlBVVFwiXSA9IFwiUFVUXCI7XG4gICAgSHR0cE1ldGhvZFtcIlBBVENIXCJdID0gXCJQQVRDSFwiO1xuICAgIEh0dHBNZXRob2RbXCJERUxFVEVcIl0gPSBcIkRFTEVURVwiO1xuICAgIEh0dHBNZXRob2RbXCJPUFRJT05TXCJdID0gXCJPUFRJT05TXCI7XG59KShIdHRwTWV0aG9kID0gZXhwb3J0cy5IdHRwTWV0aG9kIHx8IChleHBvcnRzLkh0dHBNZXRob2QgPSB7fSkpO1xudmFyIEh0dHBTdGF0dXM7XG4oZnVuY3Rpb24gKEh0dHBTdGF0dXMpIHtcbiAgICBIdHRwU3RhdHVzW0h0dHBTdGF0dXNbXCJPS1wiXSA9IDIwMF0gPSBcIk9LXCI7XG4gICAgSHR0cFN0YXR1c1tIdHRwU3RhdHVzW1wiQ1JFQVRFRFwiXSA9IDIwMV0gPSBcIkNSRUFURURcIjtcbiAgICBIdHRwU3RhdHVzW0h0dHBTdGF0dXNbXCJSRU1PVkVEXCJdID0gMjA0XSA9IFwiUkVNT1ZFRFwiO1xuICAgIEh0dHBTdGF0dXNbSHR0cFN0YXR1c1tcIkJBRF9SRVFVRVNUXCJdID0gNDAwXSA9IFwiQkFEX1JFUVVFU1RcIjtcbiAgICBIdHRwU3RhdHVzW0h0dHBTdGF0dXNbXCJVTkFVVEhPUklaRURcIl0gPSA0MDFdID0gXCJVTkFVVEhPUklaRURcIjtcbiAgICBIdHRwU3RhdHVzW0h0dHBTdGF0dXNbXCJGT1JCSURERU5cIl0gPSA0MDNdID0gXCJGT1JCSURERU5cIjtcbiAgICBIdHRwU3RhdHVzW0h0dHBTdGF0dXNbXCJOT1RfRk9VTkRcIl0gPSA0MDRdID0gXCJOT1RfRk9VTkRcIjtcbiAgICBIdHRwU3RhdHVzW0h0dHBTdGF0dXNbXCJFUlJPUlwiXSA9IDUwMF0gPSBcIkVSUk9SXCI7XG59KShIdHRwU3RhdHVzID0gZXhwb3J0cy5IdHRwU3RhdHVzIHx8IChleHBvcnRzLkh0dHBTdGF0dXMgPSB7fSkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNsb25lID0gZXhwb3J0cy5nZXRQcm9wZXJ0eSA9IHZvaWQgMDtcbnZhciBnZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIHBhdGgpIHtcbiAgICByZXR1cm4gcGF0aC5zcGxpdCgnLicpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBlbGVtZW50KSB7XG4gICAgICAgIGlmIChhY2MgJiYgdHlwZW9mIGFjYyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBhY2NbZWxlbWVudF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LCBvYmplY3QpO1xufTtcbmV4cG9ydHMuZ2V0UHJvcGVydHkgPSBnZXRQcm9wZXJ0eTtcbnZhciBjbG9uZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmplY3QpKTtcbn07XG5leHBvcnRzLmNsb25lID0gY2xvbmU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVsYXllZFByb21pc2UgPSB2b2lkIDA7XG52YXIgREVMQVkgPSAwO1xudmFyIGRlbGF5ZWRQcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2UsIHRpbWVvdXQpIHtcbiAgICBpZiAodGltZW91dCA9PT0gdm9pZCAwKSB7IHRpbWVvdXQgPSBERUxBWTsgfVxuICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgIHByb21pc2UsXG4gICAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXQpOyB9KVxuICAgIF0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFswXTtcbiAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH0pO1xufTtcbmV4cG9ydHMuZGVsYXllZFByb21pc2UgPSBkZWxheWVkUHJvbWlzZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXJnZSA9IGV4cG9ydHMucmVtb3ZlID0gZXhwb3J0cy5hZGQgPSBleHBvcnRzLnRvU2V0ID0gdm9pZCAwO1xudmFyIHRvU2V0ID0gZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbiAoYWNjLCBlbGVtZW50KSB7XG4gICAgICAgIGlmICghYWNjLmluY2x1ZGVzKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICBhY2MucHVzaChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKTtcbn07XG5leHBvcnRzLnRvU2V0ID0gdG9TZXQ7XG52YXIgYWRkID0gZnVuY3Rpb24gKHNldCkge1xuICAgIHZhciBlbGVtZW50cyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGVsZW1lbnRzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIGlmICghc2V0LmluY2x1ZGVzKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICBzZXQucHVzaChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZXQ7XG59O1xuZXhwb3J0cy5hZGQgPSBhZGQ7XG52YXIgcmVtb3ZlID0gZnVuY3Rpb24gKHNldCkge1xuICAgIHZhciBlbGVtZW50cyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGVsZW1lbnRzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHZhciBpbmRleCA9IHNldC5pbmRleE9mKGVsZW1lbnQpO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBzZXQuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZXQ7XG59O1xuZXhwb3J0cy5yZW1vdmUgPSByZW1vdmU7XG52YXIgbWVyZ2UgPSBmdW5jdGlvbiAoc2V0MSwgc2V0Mikge1xuICAgIHJldHVybiAoMCwgZXhwb3J0cy50b1NldCkoc2V0MS5jb25jYXQoc2V0MikpO1xufTtcbmV4cG9ydHMubWVyZ2UgPSBtZXJnZTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3RyaW5nVXRpbHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vU3RyaW5nVXRpbHNcIikpO1xudmFyIFN0cmluZ0xhYmVsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0cmluZ0xhYmVsKHZhbHVlLCBzZXBhcmF0b3IpIHtcbiAgICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdm9pZCAwKSB7IHNlcGFyYXRvciA9ICcgJzsgfVxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLl93b3JkcyA9IHZhbHVlLnNwbGl0KHNlcGFyYXRvcikubWFwKGZ1bmN0aW9uICh3KSB7IHJldHVybiB3LnRvTG93ZXJDYXNlKCk7IH0pLmZpbHRlcihmdW5jdGlvbiAodykgeyByZXR1cm4gQm9vbGVhbih3KTsgfSk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmdMYWJlbC5wcm90b3R5cGUsIFwid29yZHNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93b3JkcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmdMYWJlbC5wcm90b3R5cGUsIFwiY2FtZWxcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndvcmRzLm1hcChmdW5jdGlvbiAodywgaW5kZXgpIHsgcmV0dXJuIChpbmRleCA9PT0gMCA/IHcgOiBTdHJpbmdVdGlscy5jYXBpdGFsaXplKHcpKTsgfSkuam9pbignJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaW5nTGFiZWwucHJvdG90eXBlLCBcInBhc2NhbFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud29yZHMubWFwKGZ1bmN0aW9uICh3KSB7IHJldHVybiBTdHJpbmdVdGlscy5jYXBpdGFsaXplKHcpOyB9KS5qb2luKCcnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmdMYWJlbC5wcm90b3R5cGUsIFwid29ybVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud29yZHMubWFwKGZ1bmN0aW9uICh3KSB7IHJldHVybiB3LnRvTG93ZXJDYXNlKCk7IH0pLmpvaW4oJ18nKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmdMYWJlbC5wcm90b3R5cGUsIFwic25ha2VcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndvcmRzLm1hcChmdW5jdGlvbiAodykgeyByZXR1cm4gU3RyaW5nVXRpbHMuY2FwaXRhbGl6ZSh3KTsgfSkuam9pbignXycpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmluZ0xhYmVsLnByb3RvdHlwZSwgXCJzZXJwZW50XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53b3Jkcy5tYXAoZnVuY3Rpb24gKHcpIHsgcmV0dXJuIHcudG9VcHBlckNhc2UoKTsgfSkuam9pbignXycpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFN0cmluZ0xhYmVsO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFN0cmluZ0xhYmVsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlcGxhY2VBbGwgPSBleHBvcnRzLmNhcGl0YWxpemVGaXJzdCA9IGV4cG9ydHMuY2FwaXRhbGl6ZSA9IHZvaWQgMDtcbnZhciBjYXBpdGFsaXplID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyB2YWx1ZS5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xufTtcbmV4cG9ydHMuY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG52YXIgY2FwaXRhbGl6ZUZpcnN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKDAsIDEpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuICAgIHJldHVybiAnJztcbn07XG5leHBvcnRzLmNhcGl0YWxpemVGaXJzdCA9IGNhcGl0YWxpemVGaXJzdDtcbnZhciByZXBsYWNlQWxsID0gZnVuY3Rpb24gKHZhbHVlLCByZXBsYWNlUGF0dGVybiwgcmVwbGFjZVdpdGgpIHtcbiAgICByZXR1cm4gdmFsdWUuc3BsaXQocmVwbGFjZVBhdHRlcm4pLmpvaW4ocmVwbGFjZVdpdGgpO1xufTtcbmV4cG9ydHMucmVwbGFjZUFsbCA9IHJlcGxhY2VBbGw7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qIHRzbGludDpkaXNhYmxlOm5vLWJpdHdpc2UgdHJpcGxlLWVxdWFscyAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gVVVJRCBnZW5lcmF0b3Jcbi8vIGNvdXJ0ZXN5IG9mIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNTAzNC9jcmVhdGUtZ3VpZC11dWlkLWluLWphdmFzY3JpcHQgKGFuc3dlciAjMilcbnZhciBVVUlEID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHZhciByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMDtcbiAgICAgICAgICAgIHZhciB2ID0gYyA9PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xuICAgICAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gVVVJRDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVVSUQgPSBleHBvcnRzLlN0cmluZ1V0aWxzID0gZXhwb3J0cy5TdHJpbmdMYWJlbCA9IGV4cG9ydHMuU2V0cyA9IGV4cG9ydHMuUHJvbWlzZVV0aWxzID0gZXhwb3J0cy5PYmplY3RVdGlscyA9IGV4cG9ydHMuSHR0cFV0aWxzID0gZXhwb3J0cy5GdW5jdGlvblV0aWxzID0gZXhwb3J0cy5GaWxlVXRpbHMgPSBleHBvcnRzLkVuY29kZVV0aWxzID0gZXhwb3J0cy5EYXRlVXRpbHMgPSBleHBvcnRzLkRhdGFTdGF0ZXNVdGlscyA9IGV4cG9ydHMuRGF0YVN0YXRlcyA9IGV4cG9ydHMuQXJyYXlVdGlscyA9IGV4cG9ydHMuQWxwaGFiZXQgPSB2b2lkIDA7XG52YXIgQWxwaGFiZXRCYXNlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL0FscGhhYmV0XCIpKTtcbnZhciBBcnJheVV0aWxzQmFzZSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9BcnJheVV0aWxzXCIpKTtcbnZhciBEYXRhU3RhdGVzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vRGF0YVN0YXRlc1wiKSk7XG52YXIgRGF0YVN0YXRlc1V0aWxzQmFzZSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9EYXRhU3RhdGVzVXRpbHNcIikpO1xudmFyIERhdGVVdGlsc0Jhc2UgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vRGF0ZVV0aWxzXCIpKTtcbnZhciBFbmNvZGVVdGlsc0Jhc2UgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vRW5jb2RlVXRpbHNcIikpO1xudmFyIEZpbGVVdGlsc0Jhc2UgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vRmlsZVV0aWxzXCIpKTtcbnZhciBGdW5jdGlvblV0aWxzQmFzZSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9GdW5jdGlvblV0aWxzXCIpKTtcbnZhciBIdHRwVXRpbHNCYXNlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL0h0dHBVdGlsc1wiKSk7XG52YXIgT2JqZWN0VXRpbHNCYXNlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL09iamVjdFV0aWxzXCIpKTtcbnZhciBQcm9taXNlVXRpbHNCYXNlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL1Byb21pc2VVdGlsc1wiKSk7XG52YXIgU2V0c0Jhc2UgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vU2V0c1wiKSk7XG52YXIgU3RyaW5nTGFiZWxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9TdHJpbmdMYWJlbFwiKSk7XG52YXIgU3RyaW5nVXRpbHNCYXNlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL1N0cmluZ1V0aWxzXCIpKTtcbnZhciBVVUlEXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vVVVJRFwiKSk7XG5leHBvcnRzLkFscGhhYmV0ID0gQWxwaGFiZXRCYXNlO1xuZXhwb3J0cy5BcnJheVV0aWxzID0gQXJyYXlVdGlsc0Jhc2U7XG5leHBvcnRzLkRhdGFTdGF0ZXMgPSBEYXRhU3RhdGVzXzEuZGVmYXVsdDtcbmV4cG9ydHMuRGF0YVN0YXRlc1V0aWxzID0gRGF0YVN0YXRlc1V0aWxzQmFzZTtcbmV4cG9ydHMuRGF0ZVV0aWxzID0gRGF0ZVV0aWxzQmFzZTtcbmV4cG9ydHMuRW5jb2RlVXRpbHMgPSBFbmNvZGVVdGlsc0Jhc2U7XG5leHBvcnRzLkZpbGVVdGlscyA9IEZpbGVVdGlsc0Jhc2U7XG5leHBvcnRzLkZ1bmN0aW9uVXRpbHMgPSBGdW5jdGlvblV0aWxzQmFzZTtcbmV4cG9ydHMuSHR0cFV0aWxzID0gSHR0cFV0aWxzQmFzZTtcbmV4cG9ydHMuT2JqZWN0VXRpbHMgPSBPYmplY3RVdGlsc0Jhc2U7XG5leHBvcnRzLlByb21pc2VVdGlscyA9IFByb21pc2VVdGlsc0Jhc2U7XG5leHBvcnRzLlNldHMgPSBTZXRzQmFzZTtcbmV4cG9ydHMuU3RyaW5nTGFiZWwgPSBTdHJpbmdMYWJlbF8xLmRlZmF1bHQ7XG5leHBvcnRzLlN0cmluZ1V0aWxzID0gU3RyaW5nVXRpbHNCYXNlO1xuZXhwb3J0cy5VVUlEID0gVVVJRF8xLmRlZmF1bHQ7XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5jb2RlLXBhbmVsIHtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcXHJcXG4gIGJvcmRlcjogMnB4IHNvbGlkICNlNWU1ZTU7XFxyXFxuICBtYXJnaW46IDJyZW0gMDtcXHJcXG59XFxyXFxuLmNvZGUtcGFuZWwgLmhlYWRlciB7XFxyXFxuICBwYWRkaW5nOiAwLjVyZW07XFxyXFxufVxcclxcbi5jb2RlLXBhbmVsIC5yZW5kZXJpbmcge1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgcGFkZGluZzogMnJlbSAxcmVtIDNyZW0gMXJlbTtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmN2Y3Zjc7XFxyXFxufVxcclxcbi5jb2RlLXBhbmVsIC5idXR0b24tc2hvdyB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICByaWdodDogMDtcXHJcXG4gIHBhZGRpbmc6IDAuNXJlbTtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xcclxcbiAgYm9yZGVyOiAxcHggc29saWQgZGFya2dyYXk7XFxyXFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcclxcbiAgYm90dG9tOiAwO1xcclxcbn1cXHJcXG4uY29kZS1wYW5lbCAuY29kZSB7XFxyXFxuICB3aGl0ZS1zcGFjZTogcHJlLWxpbmU7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICBwYWRkaW5nOiAxcmVtO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI2MjYyNjtcXHJcXG4gIGNvbG9yOiB3aGl0ZTtcXHJcXG4gIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gIGZvbnQtZmFtaWx5OiB1aS1tb25vc3BhY2UsIE1lbmxvLCBNb25hY28sICdSb2JvdG8gTW9ubycsICdPeHlnZW4gTW9ubycsICdVYnVudHUgTW9ub3NwYWNlJywgJ1NvdXJjZSBDb2RlIFBybycsXFxyXFxuICAgICdEcm9pZCBTYW5zIE1vbm8nLCAnQ291cmllciBOZXcnLCBtb25vc3BhY2U7XFxyXFxufVxcclxcbi5jb2RlLXBhbmVsIC5idXR0b24tY29weSB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICByaWdodDogMDtcXHJcXG4gIGJvdHRvbTogMDtcXHJcXG4gIHBhZGRpbmc6IDAuNXJlbTtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gIGJvcmRlcjogbm9uZTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXHJcXG4gIGNvbG9yOiB3aGl0ZTtcXHJcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL0NvZGVQYW5lbC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxxQkFBcUI7RUFDckIseUJBQXlCO0VBQ3pCLGNBQWM7QUFDaEI7QUFDQTtFQUNFLGVBQWU7QUFDakI7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQiw0QkFBNEI7RUFDNUIseUJBQXlCO0FBQzNCO0FBQ0E7RUFDRSxrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLGVBQWU7RUFDZixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLDBCQUEwQjtFQUMxQixzQkFBc0I7RUFDdEIsU0FBUztBQUNYO0FBQ0E7RUFDRSxxQkFBcUI7RUFDckIsa0JBQWtCO0VBQ2xCLGFBQWE7RUFDYix5QkFBeUI7RUFDekIsWUFBWTtFQUNaLGVBQWU7RUFDZjsrQ0FDNkM7QUFDL0M7QUFDQTtFQUNFLGtCQUFrQjtFQUNsQixRQUFRO0VBQ1IsU0FBUztFQUNULGVBQWU7RUFDZixlQUFlO0VBQ2YsWUFBWTtFQUNaLHNCQUFzQjtFQUN0Qix1QkFBdUI7RUFDdkIsWUFBWTtBQUNkXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5jb2RlLXBhbmVsIHtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcXHJcXG4gIGJvcmRlcjogMnB4IHNvbGlkICNlNWU1ZTU7XFxyXFxuICBtYXJnaW46IDJyZW0gMDtcXHJcXG59XFxyXFxuLmNvZGUtcGFuZWwgLmhlYWRlciB7XFxyXFxuICBwYWRkaW5nOiAwLjVyZW07XFxyXFxufVxcclxcbi5jb2RlLXBhbmVsIC5yZW5kZXJpbmcge1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgcGFkZGluZzogMnJlbSAxcmVtIDNyZW0gMXJlbTtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmN2Y3Zjc7XFxyXFxufVxcclxcbi5jb2RlLXBhbmVsIC5idXR0b24tc2hvdyB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICByaWdodDogMDtcXHJcXG4gIHBhZGRpbmc6IDAuNXJlbTtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xcclxcbiAgYm9yZGVyOiAxcHggc29saWQgZGFya2dyYXk7XFxyXFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcclxcbiAgYm90dG9tOiAwO1xcclxcbn1cXHJcXG4uY29kZS1wYW5lbCAuY29kZSB7XFxyXFxuICB3aGl0ZS1zcGFjZTogcHJlLWxpbmU7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICBwYWRkaW5nOiAxcmVtO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI2MjYyNjtcXHJcXG4gIGNvbG9yOiB3aGl0ZTtcXHJcXG4gIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gIGZvbnQtZmFtaWx5OiB1aS1tb25vc3BhY2UsIE1lbmxvLCBNb25hY28sICdSb2JvdG8gTW9ubycsICdPeHlnZW4gTW9ubycsICdVYnVudHUgTW9ub3NwYWNlJywgJ1NvdXJjZSBDb2RlIFBybycsXFxyXFxuICAgICdEcm9pZCBTYW5zIE1vbm8nLCAnQ291cmllciBOZXcnLCBtb25vc3BhY2U7XFxyXFxufVxcclxcbi5jb2RlLXBhbmVsIC5idXR0b24tY29weSB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICByaWdodDogMDtcXHJcXG4gIGJvdHRvbTogMDtcXHJcXG4gIHBhZGRpbmc6IDAuNXJlbTtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gIGJvcmRlcjogbm9uZTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXHJcXG4gIGNvbG9yOiB3aGl0ZTtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiXFxyXFxuICAuZGVtby1wYWdlIC5mZC10aXRsZS0taDIge1xcclxcbiAgICBtYXJnaW4tdG9wOiAycmVtO1xcclxcbiAgICBib3JkZXItYm90dG9tOiB2YXIoLS1zYXBMaXN0X0JvcmRlcldpZHRoKSBzb2xpZCB2YXIoLS1zYXBMaXN0X0JvcmRlckNvbG9yKTtcXHJcXG4gIH0uZGVtby1wYWdlIC5mZC10aXRsZS0taDMge1xcclxcbiAgICBtYXJnaW4tdG9wOiAxcmVtO1xcclxcbiAgfVxcclxcblxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9EZW1vUGFnZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtFQUNFO0lBQ0UsZ0JBQWdCO0lBQ2hCLDBFQUEwRTtFQUM1RSxDQUNBO0lBQ0UsZ0JBQWdCO0VBQ2xCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5kZW1vLXBhZ2Uge1xcclxcbiAgJiAuZmQtdGl0bGUtLWgyIHtcXHJcXG4gICAgbWFyZ2luLXRvcDogMnJlbTtcXHJcXG4gICAgYm9yZGVyLWJvdHRvbTogdmFyKC0tc2FwTGlzdF9Cb3JkZXJXaWR0aCkgc29saWQgdmFyKC0tc2FwTGlzdF9Cb3JkZXJDb2xvcik7XFxyXFxuICB9XFxyXFxuICAmIC5mZC10aXRsZS0taDMge1xcclxcbiAgICBtYXJnaW4tdG9wOiAxcmVtO1xcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuZmQtaWNvbi10YWItYmFyIC5mZC1pY29uLXRhYi1iYXJfX2hlYWRlciB7XFxyXFxuICBwYWRkaW5nOiAwIDAuNXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDYwMHB4KSB7XFxyXFxuICAuZmQtaWNvbi10YWItYmFyIC5mZC1pY29uLXRhYi1iYXJfX2hlYWRlciB7XFxyXFxuICAgIHBhZGRpbmc6IDAgMnJlbTtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDE0MDBweCkge1xcclxcbiAgLmZkLWljb24tdGFiLWJhciAuZmQtaWNvbi10YWItYmFyX19oZWFkZXIge1xcclxcbiAgICBwYWRkaW5nOiAwIDNyZW07XFxyXFxuICB9XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9saWIvY29tcG9uZW50cy9pY29udGFiYmFyL0ljb25UYWJCYXIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0U7SUFDRSxlQUFlO0VBQ2pCO0FBQ0Y7O0FBRUE7RUFDRTtJQUNFLGVBQWU7RUFDakI7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuZmQtaWNvbi10YWItYmFyIC5mZC1pY29uLXRhYi1iYXJfX2hlYWRlciB7XFxyXFxuICBwYWRkaW5nOiAwIDAuNXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDYwMHB4KSB7XFxyXFxuICAuZmQtaWNvbi10YWItYmFyIC5mZC1pY29uLXRhYi1iYXJfX2hlYWRlciB7XFxyXFxuICAgIHBhZGRpbmc6IDAgMnJlbTtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDE0MDBweCkge1xcclxcbiAgLmZkLWljb24tdGFiLWJhciAuZmQtaWNvbi10YWItYmFyX19oZWFkZXIge1xcclxcbiAgICBwYWRkaW5nOiAwIDNyZW07XFxyXFxuICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5mZC1vYmplY3QtaGVhZGVyLWF0dHJpYnV0ZSB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG59XFxyXFxuLmZkLW9iamVjdC1oZWFkZXItYXR0cmlidXRlIC5mZC1vYmplY3QtaGVhZGVyLWF0dHJpYnV0ZV9fbGFiZWwge1xcclxcbiAgY29sb3I6IHZhcigtLXNhcENvbnRlbnRfTGFiZWxDb2xvcik7XFxyXFxufVxcclxcbi5mZC1vYmplY3QtaGVhZGVyLWF0dHJpYnV0ZSAuZmQtb2JqZWN0LWhlYWRlci1hdHRyaWJ1dGVfX3RleHQge1xcclxcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xcclxcbn1cXHJcXG4uZmQtb2JqZWN0LWhlYWRlci1hdHRyaWJ1dGUgKyAuZmQtb2JqZWN0LWhlYWRlci1hdHRyaWJ1dGUge1xcclxcbiAgbWFyZ2luLXRvcDogMC4yNXJlbTtcXHJcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2xpYi9jb21wb25lbnRzL29iamVjdC9PYmplY3RIZWFkZXJBdHRyaWJ1dGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtBQUN4QjtBQUNBO0VBQ0UsbUNBQW1DO0FBQ3JDO0FBQ0E7RUFDRSxxQkFBeUI7QUFDM0I7QUFDQTtFQUNFLG1CQUFtQjtBQUNyQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuZmQtb2JqZWN0LWhlYWRlci1hdHRyaWJ1dGUge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxufVxcclxcbi5mZC1vYmplY3QtaGVhZGVyLWF0dHJpYnV0ZSAuZmQtb2JqZWN0LWhlYWRlci1hdHRyaWJ1dGVfX2xhYmVsIHtcXHJcXG4gIGNvbG9yOiB2YXIoLS1zYXBDb250ZW50X0xhYmVsQ29sb3IpO1xcclxcbn1cXHJcXG4uZmQtb2JqZWN0LWhlYWRlci1hdHRyaWJ1dGUgLmZkLW9iamVjdC1oZWFkZXItYXR0cmlidXRlX190ZXh0IHtcXHJcXG4gIG92ZXJmbG93LXdyYXA6IGJyZWFrLXdvcmQ7XFxyXFxufVxcclxcbi5mZC1vYmplY3QtaGVhZGVyLWF0dHJpYnV0ZSArIC5mZC1vYmplY3QtaGVhZGVyLWF0dHJpYnV0ZSB7XFxyXFxuICBtYXJnaW4tdG9wOiAwLjI1cmVtO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuZmQtcGFnZSB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG5cXHJcXG4gIGhlaWdodDogMTAwJTtcXHJcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxyXFxufVxcclxcblxcclxcbi5mZC1wYWdlIC5mZC1wYWdlX19oZWFkZXIge1xcclxcbiAgZmxleC1zaHJpbms6IDA7XFxyXFxuICBmbGV4LWJhc2lzOiAxMDBweDtcXHJcXG4gIHBhZGRpbmc6IDFyZW0gMC41cmVtIDFyZW0gMC41cmVtO1xcclxcblxcclxcbiAgYmFja2dyb3VuZDogdmFyKC0tc2FwTGlzdF9CYWNrZ3JvdW5kKTtcXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjAwcHgpIHtcXHJcXG4gIC5mZC1wYWdlIC5mZC1wYWdlX19oZWFkZXIge1xcclxcbiAgICBwYWRkaW5nOiAxcmVtIDJyZW0gMXJlbSAycmVtO1xcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxNDAwcHgpIHtcXHJcXG4gIC5mZC1wYWdlIC5mZC1wYWdlX19oZWFkZXIge1xcclxcbiAgICBwYWRkaW5nOiAxcmVtIDNyZW0gMXJlbSAzcmVtO1xcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG4uZmQtcGFnZSAuZmQtcGFnZV9faGVhZGVyIC5mZC10b29sYmFyIHtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxuICBtYXJnaW4tYm90dG9tOiAycmVtO1xcclxcbn1cXHJcXG5cXHJcXG4uZmQtcGFnZSAuZmQtcGFnZV9fY29udGVudCB7XFxyXFxuICBmbGV4LWdyb3c6IDE7XFxyXFxuICBmbGV4LWJhc2lzOiAwO1xcclxcblxcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuXFxyXFxuICBvdmVyZmxvdzogYXV0bztcXHJcXG59XFxyXFxuXFxyXFxuLmZkLXBhZ2UgLmZkLXBhZ2VfX2NvbnRlbnQgLmZkLXBhZ2VfX2JvZHkge1xcclxcbiAgZmxleC1ncm93OiAxO1xcclxcbiAgZmxleC1iYXNpczogMDtcXHJcXG5cXHJcXG4gIGJhY2tncm91bmQ6IHZhcigtLXNhcEJhY2tncm91bmRDb2xvcik7XFxyXFxufVxcclxcblxcclxcbi5mZC1wYWdlIC5mZC1wYWdlX19jb250ZW50IC5mZC1wYWdlX19mb290ZXIge1xcclxcbiAgZmxleC1zaHJpbms6IDA7XFxyXFxuICBmbGV4LWJhc2lzOiAxMDBweDtcXHJcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2xpYi9jb21wb25lbnRzL3BhZ2UvUGFnZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCOztFQUV0QixZQUFZO0VBQ1osZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsY0FBYztFQUNkLGlCQUFpQjtFQUNqQixnQ0FBZ0M7O0VBRWhDLHFDQUFxQztBQUN2Qzs7QUFFQTtFQUNFO0lBQ0UsNEJBQTRCO0VBQzlCO0FBQ0Y7O0FBRUE7RUFDRTtJQUNFLDRCQUE0QjtFQUM5QjtBQUNGOztBQUVBO0VBQ0UsVUFBVTtFQUNWLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLFlBQVk7RUFDWixhQUFhOztFQUViLGFBQWE7RUFDYixzQkFBc0I7O0VBRXRCLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxZQUFZO0VBQ1osYUFBYTs7RUFFYixxQ0FBcUM7QUFDdkM7O0FBRUE7RUFDRSxjQUFjO0VBQ2QsaUJBQWlCO0FBQ25CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5mZC1wYWdlIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcblxcclxcbiAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG59XFxyXFxuXFxyXFxuLmZkLXBhZ2UgLmZkLXBhZ2VfX2hlYWRlciB7XFxyXFxuICBmbGV4LXNocmluazogMDtcXHJcXG4gIGZsZXgtYmFzaXM6IDEwMHB4O1xcclxcbiAgcGFkZGluZzogMXJlbSAwLjVyZW0gMXJlbSAwLjVyZW07XFxyXFxuXFxyXFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1zYXBMaXN0X0JhY2tncm91bmQpO1xcclxcbn1cXHJcXG5cXHJcXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MDBweCkge1xcclxcbiAgLmZkLXBhZ2UgLmZkLXBhZ2VfX2hlYWRlciB7XFxyXFxuICAgIHBhZGRpbmc6IDFyZW0gMnJlbSAxcmVtIDJyZW07XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE0MDBweCkge1xcclxcbiAgLmZkLXBhZ2UgLmZkLXBhZ2VfX2hlYWRlciB7XFxyXFxuICAgIHBhZGRpbmc6IDFyZW0gM3JlbSAxcmVtIDNyZW07XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbi5mZC1wYWdlIC5mZC1wYWdlX19oZWFkZXIgLmZkLXRvb2xiYXIge1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDJyZW07XFxyXFxufVxcclxcblxcclxcbi5mZC1wYWdlIC5mZC1wYWdlX19jb250ZW50IHtcXHJcXG4gIGZsZXgtZ3JvdzogMTtcXHJcXG4gIGZsZXgtYmFzaXM6IDA7XFxyXFxuXFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG5cXHJcXG4gIG92ZXJmbG93OiBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG4uZmQtcGFnZSAuZmQtcGFnZV9fY29udGVudCAuZmQtcGFnZV9fYm9keSB7XFxyXFxuICBmbGV4LWdyb3c6IDE7XFxyXFxuICBmbGV4LWJhc2lzOiAwO1xcclxcblxcclxcbiAgYmFja2dyb3VuZDogdmFyKC0tc2FwQmFja2dyb3VuZENvbG9yKTtcXHJcXG59XFxyXFxuXFxyXFxuLmZkLXBhZ2UgLmZkLXBhZ2VfX2NvbnRlbnQgLmZkLXBhZ2VfX2Zvb3RlciB7XFxyXFxuICBmbGV4LXNocmluazogMDtcXHJcXG4gIGZsZXgtYmFzaXM6IDEwMHB4O1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuZmQtc2VjdGlvbiAuZmQtdG9vbGJhciB7XFxyXFxuICBwYWRkaW5nOiAwIDAgMCAwLjI1cmVtO1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvbGliL2NvbXBvbmVudHMvdG9vbGJhci9Ub29sYmFyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLHNCQUFzQjtBQUN4QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuZmQtc2VjdGlvbiAuZmQtdG9vbGJhciB7XFxyXFxuICBwYWRkaW5nOiAwIDAgMCAwLjI1cmVtO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksY2E9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBwKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifXZhciBkYT1uZXcgU2V0LGVhPXt9O2Z1bmN0aW9uIGZhKGEsYil7aGEoYSxiKTtoYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gaGEoYSxiKXtlYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspZGEuYWRkKGJbYV0pfVxudmFyIGlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxqYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGthPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxsYT1cbnt9LG1hPXt9O2Z1bmN0aW9uIG9hKGEpe2lmKGphLmNhbGwobWEsYSkpcmV0dXJuITA7aWYoamEuY2FsbChsYSxhKSlyZXR1cm4hMTtpZihrYS50ZXN0KGEpKXJldHVybiBtYVthXT0hMDtsYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBwYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHFhKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHBhKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gdihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIHo9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07eltiXT1uZXcgdihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciByYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHNhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLFxuc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxzYSk7eltiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxzYSk7eltiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuei54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gdGEoYSxiLGMsZCl7dmFyIGU9ei5oYXNPd25Qcm9wZXJ0eShiKT96W2JdOm51bGw7aWYobnVsbCE9PWU/MCE9PWUudHlwZTpkfHwhKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0pcWEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP29hKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKX1cbnZhciB1YT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCx2YT1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSx3YT1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHlhPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSx6YT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksQWE9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLEJhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxDYT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxEYT1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksRWE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLEZhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLEdhPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLEhhPVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtcbnZhciBJYT1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5jYWNoZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QudHJhY2luZ19tYXJrZXJcIik7dmFyIEphPVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBLYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9SmEmJmFbSmFdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIEE9T2JqZWN0LmFzc2lnbixMYTtmdW5jdGlvbiBNYShhKXtpZih2b2lkIDA9PT1MYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtMYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTGErYX12YXIgTmE9ITE7XG5mdW5jdGlvbiBPYShhLGIpe2lmKCFhfHxOYSlyZXR1cm5cIlwiO05hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChsKXt2YXIgZD1sfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2gobCl7ZD1sfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2gobCl7ZD1sfWEoKX19Y2F0Y2gobCl7aWYobCYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBsLnN0YWNrKXtmb3IodmFyIGU9bC5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXt2YXIgaz1cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO2EuZGlzcGxheU5hbWUmJmsuaW5jbHVkZXMoXCI8YW5vbnltb3VzPlwiKSYmKGs9ay5yZXBsYWNlKFwiPGFub255bW91cz5cIixhLmRpc3BsYXlOYW1lKSk7cmV0dXJuIGt9d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e05hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TWEoYSk6XCJcIn1cbmZ1bmN0aW9uIFBhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBNYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE1hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBNYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE1hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1PYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1PYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1PYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFFhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2Ugd2E6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIEFhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHphOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgRWE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgRmE6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQ2E6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgQmE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgRGE6dmFyIGI9YS5yZW5kZXI7YT1hLmRpc3BsYXlOYW1lO2F8fChhPWIuZGlzcGxheU5hbWV8fFxuYi5uYW1lfHxcIlwiLGE9XCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO3JldHVybiBhO2Nhc2UgR2E6cmV0dXJuIGI9YS5kaXNwbGF5TmFtZXx8bnVsbCxudWxsIT09Yj9iOlFhKGEudHlwZSl8fFwiTWVtb1wiO2Nhc2UgSGE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFFhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBSYShhKXt2YXIgYj1hLnR5cGU7c3dpdGNoKGEudGFnKXtjYXNlIDI0OnJldHVyblwiQ2FjaGVcIjtjYXNlIDk6cmV0dXJuKGIuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgMTA6cmV0dXJuKGIuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgMTg6cmV0dXJuXCJEZWh5ZHJhdGVkRnJhZ21lbnRcIjtjYXNlIDExOnJldHVybiBhPWIucmVuZGVyLGE9YS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIlwiLGIuZGlzcGxheU5hbWV8fChcIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSA3OnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIDU6cmV0dXJuIGI7Y2FzZSA0OnJldHVyblwiUG9ydGFsXCI7Y2FzZSAzOnJldHVyblwiUm9vdFwiO2Nhc2UgNjpyZXR1cm5cIlRleHRcIjtjYXNlIDE2OnJldHVybiBRYShiKTtjYXNlIDg6cmV0dXJuIGI9PT16YT9cIlN0cmljdE1vZGVcIjpcIk1vZGVcIjtjYXNlIDIyOnJldHVyblwiT2Zmc2NyZWVuXCI7XG5jYXNlIDEyOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIDIxOnJldHVyblwiU2NvcGVcIjtjYXNlIDEzOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIDE5OnJldHVyblwiU3VzcGVuc2VMaXN0XCI7Y2FzZSAyNTpyZXR1cm5cIlRyYWNpbmdNYXJrZXJcIjtjYXNlIDE6Y2FzZSAwOmNhc2UgMTc6Y2FzZSAyOmNhc2UgMTQ6Y2FzZSAxNTppZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYilyZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7Y2FzZSBcIm9iamVjdFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIEEoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gYWIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ0YShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYmIoYSxiKXthYihhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2NiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmNiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gZGIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBlYj1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IocCg5MSkpO3JldHVybiBBKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHAoOTIpKTtpZihlYihjKSl7aWYoMTxjLmxlbmd0aCl0aHJvdyBFcnJvcihwKDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX1mdW5jdGlvbiBrYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fVxuZnVuY3Rpb24gbGIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2tiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG1iLG5iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIhPT1hLm5hbWVzcGFjZVVSSXx8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle21iPW1ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO21iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW1iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIG9iKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcGI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGFzcGVjdFJhdGlvOiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCxcbnpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scWI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHBiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3FiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cGJbYl09cGJbYV19KX0pO2Z1bmN0aW9uIHJiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxwYi5oYXNPd25Qcm9wZXJ0eShhKSYmcGJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gc2IoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9cmIoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdGI9QSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHViKGEsYil7aWYoYil7aWYodGJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcihwKDYwKSk7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfHwhKFwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcihwKDYyKSk7fX1cbmZ1bmN0aW9uIHZiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgd2I9bnVsbDtmdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHAoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKCl7fXZhciBJYj0hMTtmdW5jdGlvbiBKYihhLGIsYyl7aWYoSWIpcmV0dXJuIGEoYixjKTtJYj0hMDt0cnl7cmV0dXJuIEdiKGEsYixjKX1maW5hbGx5e2lmKEliPSExLG51bGwhPT16Ynx8bnVsbCE9PUFiKUhiKCksRmIoKX19XG5mdW5jdGlvbiBLYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHAoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgTGI9ITE7aWYoaWEpdHJ5e3ZhciBNYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe0xiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYil9Y2F0Y2goYSl7TGI9ITF9ZnVuY3Rpb24gTmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIE9iPSExLFBiPW51bGwsUWI9ITEsUmI9bnVsbCxTYj17b25FcnJvcjpmdW5jdGlvbihhKXtPYj0hMDtQYj1hfX07ZnVuY3Rpb24gVGIoYSxiLGMsZCxlLGYsZyxoLGspe09iPSExO1BiPW51bGw7TmIuYXBwbHkoU2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFViKGEsYixjLGQsZSxmLGcsaCxrKXtUYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoT2Ipe2lmKE9iKXt2YXIgbD1QYjtPYj0hMTtQYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IocCgxOTgpKTtRYnx8KFFiPSEwLFJiPWwpfX1mdW5jdGlvbiBWYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmNDA5OCkmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIFdiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gWGIoYSl7aWYoVmIoYSkhPT1hKXRocm93IEVycm9yKHAoMTg4KSk7fVxuZnVuY3Rpb24gWWIoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9VmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gWGIoZSksYTtpZihmPT09ZClyZXR1cm4gWGIoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcihwKDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHAoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IocCgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBaYihhKXthPVliKGEpO3JldHVybiBudWxsIT09YT8kYihhKTpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhO2ZvcihhPWEuY2hpbGQ7bnVsbCE9PWE7KXt2YXIgYj0kYihhKTtpZihudWxsIT09YilyZXR1cm4gYjthPWEuc2libGluZ31yZXR1cm4gbnVsbH1cbnZhciBhYz1jYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLGJjPWNhLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLGNjPWNhLnVuc3RhYmxlX3Nob3VsZFlpZWxkLGRjPWNhLnVuc3RhYmxlX3JlcXVlc3RQYWludCxCPWNhLnVuc3RhYmxlX25vdyxlYz1jYS51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxmYz1jYS51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxnYz1jYS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxoYz1jYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxpYz1jYS51bnN0YWJsZV9Mb3dQcmlvcml0eSxqYz1jYS51bnN0YWJsZV9JZGxlUHJpb3JpdHksa2M9bnVsbCxsYz1udWxsO2Z1bmN0aW9uIG1jKGEpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclJvb3QpdHJ5e2xjLm9uQ29tbWl0RmliZXJSb290KGtjLGEsdm9pZCAwLDEyOD09PShhLmN1cnJlbnQuZmxhZ3MmMTI4KSl9Y2F0Y2goYil7fX1cbnZhciBvYz1NYXRoLmNsejMyP01hdGguY2x6MzI6bmMscGM9TWF0aC5sb2cscWM9TWF0aC5MTjI7ZnVuY3Rpb24gbmMoYSl7YT4+Pj0wO3JldHVybiAwPT09YT8zMjozMS0ocGMoYSkvcWN8MCl8MH12YXIgcmM9NjQsc2M9NDE5NDMwNDtcbmZ1bmN0aW9uIHRjKGEpe3N3aXRjaChhJi1hKXtjYXNlIDE6cmV0dXJuIDE7Y2FzZSAyOnJldHVybiAyO2Nhc2UgNDpyZXR1cm4gNDtjYXNlIDg6cmV0dXJuIDg7Y2FzZSAxNjpyZXR1cm4gMTY7Y2FzZSAzMjpyZXR1cm4gMzI7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYSY0MTk0MjQwO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuIGEmMTMwMDIzNDI0O2Nhc2UgMTM0MjE3NzI4OnJldHVybiAxMzQyMTc3Mjg7Y2FzZSAyNjg0MzU0NTY6cmV0dXJuIDI2ODQzNTQ1NjtjYXNlIDUzNjg3MDkxMjpyZXR1cm4gNTM2ODcwOTEyO2Nhc2UgMTA3Mzc0MTgyNDpyZXR1cm4gMTA3Mzc0MTgyNDtcbmRlZmF1bHQ6cmV0dXJuIGF9fWZ1bmN0aW9uIHVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIDA7dmFyIGQ9MCxlPWEuc3VzcGVuZGVkTGFuZXMsZj1hLnBpbmdlZExhbmVzLGc9YyYyNjg0MzU0NTU7aWYoMCE9PWcpe3ZhciBoPWcmfmU7MCE9PWg/ZD10YyhoKTooZiY9ZywwIT09ZiYmKGQ9dGMoZikpKX1lbHNlIGc9YyZ+ZSwwIT09Zz9kPXRjKGcpOjAhPT1mJiYoZD10YyhmKSk7aWYoMD09PWQpcmV0dXJuIDA7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZSkmJihlPWQmLWQsZj1iJi1iLGU+PWZ8fDE2PT09ZSYmMCE9PShmJjQxOTQyNDApKSlyZXR1cm4gYjswIT09KGQmNCkmJihkfD1jJjE2KTtiPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLW9jKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gdmMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6cmV0dXJuIGIrMjUwO2Nhc2UgODpjYXNlIDE2OmNhc2UgMzI6Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYis1RTM7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4tMTtjYXNlIDEzNDIxNzcyODpjYXNlIDI2ODQzNTQ1NjpjYXNlIDUzNjg3MDkxMjpjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuLTE7ZGVmYXVsdDpyZXR1cm4tMX19XG5mdW5jdGlvbiB3YyhhLGIpe2Zvcih2YXIgYz1hLnN1c3BlbmRlZExhbmVzLGQ9YS5waW5nZWRMYW5lcyxlPWEuZXhwaXJhdGlvblRpbWVzLGY9YS5wZW5kaW5nTGFuZXM7MDxmOyl7dmFyIGc9MzEtb2MoZiksaD0xPDxnLGs9ZVtnXTtpZigtMT09PWspe2lmKDA9PT0oaCZjKXx8MCE9PShoJmQpKWVbZ109dmMoaCxiKX1lbHNlIGs8PWImJihhLmV4cGlyZWRMYW5lc3w9aCk7ZiY9fmh9fWZ1bmN0aW9uIHhjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiB5Yygpe3ZhciBhPXJjO3JjPDw9MTswPT09KHJjJjQxOTQyNDApJiYocmM9NjQpO3JldHVybiBhfWZ1bmN0aW9uIHpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gQWMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iOzUzNjg3MDkxMiE9PWImJihhLnN1c3BlbmRlZExhbmVzPTAsYS5waW5nZWRMYW5lcz0wKTthPWEuZXZlbnRUaW1lcztiPTMxLW9jKGIpO2FbYl09Y31mdW5jdGlvbiBCYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzJn5iO2EucGVuZGluZ0xhbmVzPWI7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9YjthLm11dGFibGVSZWFkTGFuZXMmPWI7YS5lbnRhbmdsZWRMYW5lcyY9YjtiPWEuZW50YW5nbGVtZW50czt2YXIgZD1hLmV2ZW50VGltZXM7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxjOyl7dmFyIGU9MzEtb2MoYyksZj0xPDxlO2JbZV09MDtkW2VdPS0xO2FbZV09LTE7YyY9fmZ9fVxuZnVuY3Rpb24gQ2MoYSxiKXt2YXIgYz1hLmVudGFuZ2xlZExhbmVzfD1iO2ZvcihhPWEuZW50YW5nbGVtZW50cztjOyl7dmFyIGQ9MzEtb2MoYyksZT0xPDxkO2UmYnxhW2RdJmImJihhW2RdfD1iKTtjJj1+ZX19dmFyIEM9MDtmdW5jdGlvbiBEYyhhKXthJj0tYTtyZXR1cm4gMTxhPzQ8YT8wIT09KGEmMjY4NDM1NDU1KT8xNjo1MzY4NzA5MTI6NDoxfXZhciBFYyxGYyxHYyxIYyxJYyxKYz0hMSxLYz1bXSxMYz1udWxsLE1jPW51bGwsTmM9bnVsbCxPYz1uZXcgTWFwLFBjPW5ldyBNYXAsUWM9W10sUmM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gU2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpMYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6TWM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6TmM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOk9jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOlBjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gVGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT17YmxvY2tlZE9uOmIsZG9tRXZlbnROYW1lOmMsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmYsdGFyZ2V0Q29udGFpbmVyczpbZV19LG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmRmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gVWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4gTGM9VGMoTGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIE1jPVRjKE1jLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBOYz1UYyhOYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO09jLnNldChmLFRjKE9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxQYy5zZXQoZixUYyhQYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBWYyhhKXt2YXIgYj1XYyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVZiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPVdiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO0ljKGEucHJpb3JpdHksZnVuY3Rpb24oKXtHYyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiBYYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9WWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbD09PWMpe2M9YS5uYXRpdmVFdmVudDt2YXIgZD1uZXcgYy5jb25zdHJ1Y3RvcihjLnR5cGUsYyk7d2I9ZDtjLnRhcmdldC5kaXNwYXRjaEV2ZW50KGQpO3diPW51bGx9ZWxzZSByZXR1cm4gYj1DYihjKSxudWxsIT09YiYmRmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gWmMoYSxiLGMpe1hjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiAkYygpe0pjPSExO251bGwhPT1MYyYmWGMoTGMpJiYoTGM9bnVsbCk7bnVsbCE9PU1jJiZYYyhNYykmJihNYz1udWxsKTtudWxsIT09TmMmJlhjKE5jKSYmKE5jPW51bGwpO09jLmZvckVhY2goWmMpO1BjLmZvckVhY2goWmMpfVxuZnVuY3Rpb24gYWQoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLEpjfHwoSmM9ITAsY2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhjYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSwkYykpKX1cbmZ1bmN0aW9uIGJkKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIGFkKGIsYSl9aWYoMDxLYy5sZW5ndGgpe2FkKEtjWzBdLGEpO2Zvcih2YXIgYz0xO2M8S2MubGVuZ3RoO2MrKyl7dmFyIGQ9S2NbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1MYyYmYWQoTGMsYSk7bnVsbCE9PU1jJiZhZChNYyxhKTtudWxsIT09TmMmJmFkKE5jLGEpO09jLmZvckVhY2goYik7UGMuZm9yRWFjaChiKTtmb3IoYz0wO2M8UWMubGVuZ3RoO2MrKylkPVFjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxRYy5sZW5ndGgmJihjPVFjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmUWMuc2hpZnQoKX12YXIgY2Q9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsZGQ9ITA7XG5mdW5jdGlvbiBlZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9MSxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fWZ1bmN0aW9uIGdkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz00LGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19XG5mdW5jdGlvbiBmZChhLGIsYyxkKXtpZihkZCl7dmFyIGU9WWMoYSxiLGMsZCk7aWYobnVsbD09PWUpaGQoYSxiLGQsaWQsYyksU2MoYSxkKTtlbHNlIGlmKFVjKGUsYSxiLGMsZCkpZC5zdG9wUHJvcGFnYXRpb24oKTtlbHNlIGlmKFNjKGEsZCksYiY0JiYtMTxSYy5pbmRleE9mKGEpKXtmb3IoO251bGwhPT1lOyl7dmFyIGY9Q2IoZSk7bnVsbCE9PWYmJkVjKGYpO2Y9WWMoYSxiLGMsZCk7bnVsbD09PWYmJmhkKGEsYixkLGlkLGMpO2lmKGY9PT1lKWJyZWFrO2U9Zn1udWxsIT09ZSYmZC5zdG9wUHJvcGFnYXRpb24oKX1lbHNlIGhkKGEsYixkLG51bGwsYyl9fXZhciBpZD1udWxsO1xuZnVuY3Rpb24gWWMoYSxiLGMsZCl7aWQ9bnVsbDthPXhiKGQpO2E9V2MoYSk7aWYobnVsbCE9PWEpaWYoYj1WYihhKSxudWxsPT09YilhPW51bGw7ZWxzZSBpZihjPWIudGFnLDEzPT09Yyl7YT1XYihiKTtpZihudWxsIT09YSlyZXR1cm4gYTthPW51bGx9ZWxzZSBpZigzPT09Yyl7aWYoYi5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZClyZXR1cm4gMz09PWIudGFnP2Iuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDthPW51bGx9ZWxzZSBiIT09YSYmKGE9bnVsbCk7aWQ9YTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGpkKGEpe3N3aXRjaChhKXtjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsaWNrXCI6Y2FzZSBcImNsb3NlXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjpjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwia2V5dXBcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwicGFzdGVcIjpjYXNlIFwicGF1c2VcIjpjYXNlIFwicGxheVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmNhc2UgXCJyYXRlY2hhbmdlXCI6Y2FzZSBcInJlc2V0XCI6Y2FzZSBcInJlc2l6ZVwiOmNhc2UgXCJzZWVrZWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjpjYXNlIFwidm9sdW1lY2hhbmdlXCI6Y2FzZSBcImNoYW5nZVwiOmNhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjpjYXNlIFwidGV4dElucHV0XCI6Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjpjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjpjYXNlIFwiYmVmb3JlaW5wdXRcIjpjYXNlIFwiYmx1clwiOmNhc2UgXCJmdWxsc2NyZWVuY2hhbmdlXCI6Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImhhc2hjaGFuZ2VcIjpjYXNlIFwicG9wc3RhdGVcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInNlbGVjdHN0YXJ0XCI6cmV0dXJuIDE7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwic2Nyb2xsXCI6Y2FzZSBcInRvZ2dsZVwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwid2hlZWxcIjpjYXNlIFwibW91c2VlbnRlclwiOmNhc2UgXCJtb3VzZWxlYXZlXCI6Y2FzZSBcInBvaW50ZXJlbnRlclwiOmNhc2UgXCJwb2ludGVybGVhdmVcIjpyZXR1cm4gNDtcbmNhc2UgXCJtZXNzYWdlXCI6c3dpdGNoKGVjKCkpe2Nhc2UgZmM6cmV0dXJuIDE7Y2FzZSBnYzpyZXR1cm4gNDtjYXNlIGhjOmNhc2UgaWM6cmV0dXJuIDE2O2Nhc2UgamM6cmV0dXJuIDUzNjg3MDkxMjtkZWZhdWx0OnJldHVybiAxNn1kZWZhdWx0OnJldHVybiAxNn19dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO2Z1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1cbmZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9QShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9QSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPUEoe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPUEoe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPUEoe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1BKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9QSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1BKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9QSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1BKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1BKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9QSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9QSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9aWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9aWEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoaWEpe3ZhciB4ZTtpZihpYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO0piKHJlLGIpfX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlO1xuZnVuY3Rpb24gSWUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07aWYoIWphLmNhbGwoYixlKXx8IUhlKGFbZV0sYltlXSkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gSmUoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gS2UoYSxiKXt2YXIgYz1KZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1KZShjKX19ZnVuY3Rpb24gTGUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9MZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBNZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBOZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuZnVuY3Rpb24gT2UoYSl7dmFyIGI9TWUoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZjJiZjLm93bmVyRG9jdW1lbnQmJkxlKGMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG51bGwhPT1kJiZOZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKGE9KGI9Yy5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdyxhLmdldFNlbGVjdGlvbil7YT1hLmdldFNlbGVjdGlvbigpO3ZhciBlPWMudGV4dENvbnRlbnQubGVuZ3RoLGY9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2Y6TWF0aC5taW4oZC5lbmQsZSk7IWEuZXh0ZW5kJiZmPmQmJihlPWQsZD1mLGY9ZSk7ZT1LZShjLGYpO3ZhciBnPUtlKGMsXG5kKTtlJiZnJiYoMSE9PWEucmFuZ2VDb3VudHx8YS5hbmNob3JOb2RlIT09ZS5ub2RlfHxhLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxhLmZvY3VzTm9kZSE9PWcubm9kZXx8YS5mb2N1c09mZnNldCE9PWcub2Zmc2V0KSYmKGI9Yi5jcmVhdGVSYW5nZSgpLGIuc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KSxhLnJlbW92ZUFsbFJhbmdlcygpLGY+ZD8oYS5hZGRSYW5nZShiKSxhLmV4dGVuZChnLm5vZGUsZy5vZmZzZXQpKTooYi5zZXRFbmQoZy5ub2RlLGcub2Zmc2V0KSxhLmFkZFJhbmdlKGIpKSl9Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZm9jdXMmJmMuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH19XG52YXIgUGU9aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk5lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkllKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cbmZ1bmN0aW9uIFZlKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFdlPXthbmltYXRpb25lbmQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpWZShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFhlPXt9LFllPXt9O1xuaWEmJihZZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBXZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBXZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBXZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBXZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFplKGEpe2lmKFhlW2FdKXJldHVybiBYZVthXTtpZighV2VbYV0pcmV0dXJuIGE7dmFyIGI9V2VbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gWWUpcmV0dXJuIFhlW2FdPWJbY107cmV0dXJuIGF9dmFyICRlPVplKFwiYW5pbWF0aW9uZW5kXCIpLGFmPVplKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLGJmPVplKFwiYW5pbWF0aW9uc3RhcnRcIiksY2Y9WmUoXCJ0cmFuc2l0aW9uZW5kXCIpLGRmPW5ldyBNYXAsZWY9XCJhYm9ydCBhdXhDbGljayBjYW5jZWwgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkcmFnIGRyYWdFbmQgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkcmFnU3RhcnQgZHJvcCBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBnb3RQb2ludGVyQ2FwdHVyZSBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBsb3N0UG9pbnRlckNhcHR1cmUgbW91c2VEb3duIG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHBsYXlpbmcgcG9pbnRlckNhbmNlbCBwb2ludGVyRG93biBwb2ludGVyTW92ZSBwb2ludGVyT3V0IHBvaW50ZXJPdmVyIHBvaW50ZXJVcCBwcm9ncmVzcyByYXRlQ2hhbmdlIHJlc2V0IHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1Ym1pdCBzdXNwZW5kIHRpbWVVcGRhdGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2Ugc2Nyb2xsIHRvZ2dsZSB0b3VjaE1vdmUgd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIGZmKGEsYil7ZGYuc2V0KGEsYik7ZmEoYixbYV0pfWZvcih2YXIgZ2Y9MDtnZjxlZi5sZW5ndGg7Z2YrKyl7dmFyIGhmPWVmW2dmXSxqZj1oZi50b0xvd2VyQ2FzZSgpLGtmPWhmWzBdLnRvVXBwZXJDYXNlKCkraGYuc2xpY2UoMSk7ZmYoamYsXCJvblwiK2tmKX1mZigkZSxcIm9uQW5pbWF0aW9uRW5kXCIpO2ZmKGFmLFwib25BbmltYXRpb25JdGVyYXRpb25cIik7ZmYoYmYsXCJvbkFuaW1hdGlvblN0YXJ0XCIpO2ZmKFwiZGJsY2xpY2tcIixcIm9uRG91YmxlQ2xpY2tcIik7ZmYoXCJmb2N1c2luXCIsXCJvbkZvY3VzXCIpO2ZmKFwiZm9jdXNvdXRcIixcIm9uQmx1clwiKTtmZihjZixcIm9uVHJhbnNpdGlvbkVuZFwiKTtoYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtcbmhhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZmEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtmYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5mYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgbGY9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxtZj1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChsZikpO1xuZnVuY3Rpb24gbmYoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7VWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfX19aWYoUWIpdGhyb3cgYT1SYixRYj0hMSxSYj1udWxsLGE7fVxuZnVuY3Rpb24gRChhLGIpe3ZhciBjPWJbb2ZdO3ZvaWQgMD09PWMmJihjPWJbb2ZdPW5ldyBTZXQpO3ZhciBkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwocGYoYixhLDIsITEpLGMuYWRkKGQpKX1mdW5jdGlvbiBxZihhLGIsYyl7dmFyIGQ9MDtiJiYoZHw9NCk7cGYoYyxhLGQsYil9dmFyIHJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gc2YoYSl7aWYoIWFbcmZdKXthW3JmXT0hMDtkYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1wic2VsZWN0aW9uY2hhbmdlXCIhPT1iJiYobWYuaGFzKGIpfHxxZihiLCExLGEpLHFmKGIsITAsYSkpfSk7dmFyIGI9OT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7bnVsbD09PWJ8fGJbcmZdfHwoYltyZl09ITAscWYoXCJzZWxlY3Rpb25jaGFuZ2VcIiwhMSxiKSl9fVxuZnVuY3Rpb24gcGYoYSxiLGMsZCl7c3dpdGNoKGpkKGIpKXtjYXNlIDE6dmFyIGU9ZWQ7YnJlYWs7Y2FzZSA0OmU9Z2Q7YnJlYWs7ZGVmYXVsdDplPWZkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFMYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPVdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1KYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9ZGYuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLG49YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6bj1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpuPVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSAkZTpjYXNlIGFmOmNhc2UgYmY6az1IZDticmVhaztjYXNlIGNmOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHQ9MCE9PShiJjQpLEo9IXQmJlwic2Nyb2xsXCI9PT1hLHg9dD9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt0PVtdO2Zvcih2YXIgdz1kLHU7bnVsbCE9PVxudzspe3U9dzt2YXIgRj11LnN0YXRlTm9kZTs1PT09dS50YWcmJm51bGwhPT1GJiYodT1GLG51bGwhPT14JiYoRj1LYih3LHgpLG51bGwhPUYmJnQucHVzaCh0Zih3LEYsdSkpKSk7aWYoSilicmVhazt3PXcucmV0dXJufTA8dC5sZW5ndGgmJihoPW5ldyBrKGgsbixudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp0fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmYyE9PXdiJiYobj1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYoV2Mobil8fG5bdWZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYobj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCxuPW4/V2Mobik6bnVsbCxudWxsIT09XG5uJiYoSj1WYihuKSxuIT09Snx8NSE9PW4udGFnJiY2IT09bi50YWcpKW49bnVsbH1lbHNlIGs9bnVsbCxuPWQ7aWYoayE9PW4pe3Q9QmQ7Rj1cIm9uTW91c2VMZWF2ZVwiO3g9XCJvbk1vdXNlRW50ZXJcIjt3PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdD1UZCxGPVwib25Qb2ludGVyTGVhdmVcIix4PVwib25Qb2ludGVyRW50ZXJcIix3PVwicG9pbnRlclwiO0o9bnVsbD09az9oOnVlKGspO3U9bnVsbD09bj9oOnVlKG4pO2g9bmV3IHQoRix3K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9SjtoLnJlbGF0ZWRUYXJnZXQ9dTtGPW51bGw7V2MoZSk9PT1kJiYodD1uZXcgdCh4LHcrXCJlbnRlclwiLG4sYyxlKSx0LnRhcmdldD11LHQucmVsYXRlZFRhcmdldD1KLEY9dCk7Sj1GO2lmKGsmJm4pYjp7dD1rO3g9bjt3PTA7Zm9yKHU9dDt1O3U9dmYodSkpdysrO3U9MDtmb3IoRj14O0Y7Rj12ZihGKSl1Kys7Zm9yKDswPHctdTspdD12Zih0KSx3LS07Zm9yKDswPHUtdzspeD1cbnZmKHgpLHUtLTtmb3IoO3ctLTspe2lmKHQ9PT14fHxudWxsIT09eCYmdD09PXguYWx0ZXJuYXRlKWJyZWFrIGI7dD12Zih0KTt4PXZmKHgpfXQ9bnVsbH1lbHNlIHQ9bnVsbDtudWxsIT09ayYmd2YoZyxoLGssdCwhMSk7bnVsbCE9PW4mJm51bGwhPT1KJiZ3ZihnLEosbix0LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBuYT12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKW5hPUZlO2Vsc2V7bmE9RGU7dmFyIHhhPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYobmE9RWUpO2lmKG5hJiYobmE9bmEoYSxkKSkpe25lKGcsbmEsYyxlKTticmVhayBhfXhhJiZ4YShhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKHhhPWguX3dyYXBwZXJTdGF0ZSkmJlxueGEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmY2IoaCxcIm51bWJlclwiLGgudmFsdWUpfXhhPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKHhhKXx8XCJ0cnVlXCI9PT14YS5jb250ZW50RWRpdGFibGUpUWU9eGEsUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciAkYTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmJhPVwib25Db21wb3NpdGlvbkVuZFwiO1xuYnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpiYT1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifWJhPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihiYT1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtiYSYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09YmE/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1iYSYmaWUmJigkYT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLHhhPW9lKGQsYmEpLDA8eGEubGVuZ3RoJiYoYmE9bmV3IExkKGJhLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6YmEsbGlzdGVuZXJzOnhhfSksJGE/YmEuZGF0YT0kYTooJGE9aGUoYyksbnVsbCE9PSRhJiYoYmEuZGF0YT0kYSkpKSk7aWYoJGE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksXG4wPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9JGEpfXNlKGcsYil9KX1mdW5jdGlvbiB0ZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9S2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQodGYoYSxmLGUpKSxmPUtiKGEsYiksbnVsbCE9ZiYmZC5wdXNoKHRmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gdmYoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIHdmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9S2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQodGYoYyxrLGgpKSk6ZXx8KGs9S2IoYyxmKSxudWxsIT1rJiZnLnB1c2godGYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX12YXIgeGY9L1xcclxcbj8vZyx5Zj0vXFx1MDAwMHxcXHVGRkZEL2c7ZnVuY3Rpb24gemYoYSl7cmV0dXJuKFwic3RyaW5nXCI9PT10eXBlb2YgYT9hOlwiXCIrYSkucmVwbGFjZSh4ZixcIlxcblwiKS5yZXBsYWNlKHlmLFwiXCIpfWZ1bmN0aW9uIEFmKGEsYixjKXtiPXpmKGIpO2lmKHpmKGEpIT09YiYmYyl0aHJvdyBFcnJvcihwKDQyNSkpO31mdW5jdGlvbiBCZigpe31cbnZhciBDZj1udWxsLERmPW51bGw7ZnVuY3Rpb24gRWYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgRmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsR2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEhmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBQcm9taXNlP1Byb21pc2U6dm9pZCAwLEpmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBxdWV1ZU1pY3JvdGFzaz9xdWV1ZU1pY3JvdGFzazpcInVuZGVmaW5lZFwiIT09dHlwZW9mIEhmP2Z1bmN0aW9uKGEpe3JldHVybiBIZi5yZXNvbHZlKG51bGwpLnRoZW4oYSkuY2F0Y2goSWYpfTpGZjtmdW5jdGlvbiBJZihhKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYTt9KX1cbmZ1bmN0aW9uIEtmKGEsYil7dmFyIGM9YixkPTA7ZG97dmFyIGU9Yy5uZXh0U2libGluZzthLnJlbW92ZUNoaWxkKGMpO2lmKGUmJjg9PT1lLm5vZGVUeXBlKWlmKGM9ZS5kYXRhLFwiLyRcIj09PWMpe2lmKDA9PT1kKXthLnJlbW92ZUNoaWxkKGUpO2JkKGIpO3JldHVybn1kLS19ZWxzZVwiJFwiIT09YyYmXCIkP1wiIT09YyYmXCIkIVwiIT09Y3x8ZCsrO2M9ZX13aGlsZShjKTtiZChiKX1mdW5jdGlvbiBMZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVhaztpZig4PT09Yil7Yj1hLmRhdGE7aWYoXCIkXCI9PT1ifHxcIiQhXCI9PT1ifHxcIiQ/XCI9PT1iKWJyZWFrO2lmKFwiLyRcIj09PWIpcmV0dXJuIG51bGx9fXJldHVybiBhfVxuZnVuY3Rpb24gTWYoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIE5mPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE9mPVwiX19yZWFjdEZpYmVyJFwiK05mLFBmPVwiX19yZWFjdFByb3BzJFwiK05mLHVmPVwiX19yZWFjdENvbnRhaW5lciRcIitOZixvZj1cIl9fcmVhY3RFdmVudHMkXCIrTmYsUWY9XCJfX3JlYWN0TGlzdGVuZXJzJFwiK05mLFJmPVwiX19yZWFjdEhhbmRsZXMkXCIrTmY7XG5mdW5jdGlvbiBXYyhhKXt2YXIgYj1hW09mXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1t1Zl18fGNbT2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9TWYoYSk7bnVsbCE9PWE7KXtpZihjPWFbT2ZdKXJldHVybiBjO2E9TWYoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVtPZl18fGFbdWZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IocCgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVtQZl18fG51bGx9dmFyIFNmPVtdLFRmPS0xO2Z1bmN0aW9uIFVmKGEpe3JldHVybntjdXJyZW50OmF9fVxuZnVuY3Rpb24gRShhKXswPlRmfHwoYS5jdXJyZW50PVNmW1RmXSxTZltUZl09bnVsbCxUZi0tKX1mdW5jdGlvbiBHKGEsYil7VGYrKztTZltUZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBWZj17fSxIPVVmKFZmKSxXZj1VZighMSksWGY9VmY7ZnVuY3Rpb24gWWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBWZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFpmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gJGYoKXtFKFdmKTtFKEgpfWZ1bmN0aW9uIGFnKGEsYixjKXtpZihILmN1cnJlbnQhPT1WZil0aHJvdyBFcnJvcihwKDE2OCkpO0coSCxiKTtHKFdmLGMpfWZ1bmN0aW9uIGJnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtiPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYikpdGhyb3cgRXJyb3IocCgxMDgsUmEoYSl8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gQSh7fSxjLGQpfVxuZnVuY3Rpb24gY2coYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fFZmO1hmPUguY3VycmVudDtHKEgsYSk7RyhXZixXZi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBkZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IocCgxNjkpKTtjPyhhPWJnKGEsYixYZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEUoV2YpLEUoSCksRyhILGEpKTpFKFdmKTtHKFdmLGMpfXZhciBlZz1udWxsLGZnPSExLGdnPSExO2Z1bmN0aW9uIGhnKGEpe251bGw9PT1lZz9lZz1bYV06ZWcucHVzaChhKX1mdW5jdGlvbiBpZyhhKXtmZz0hMDtoZyhhKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWdnJiZudWxsIT09ZWcpe2dnPSEwO3ZhciBhPTAsYj1DO3RyeXt2YXIgYz1lZztmb3IoQz0xO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdO2RvIGQ9ZCghMCk7d2hpbGUobnVsbCE9PWQpfWVnPW51bGw7Zmc9ITF9Y2F0Y2goZSl7dGhyb3cgbnVsbCE9PWVnJiYoZWc9ZWcuc2xpY2UoYSsxKSksYWMoZmMsamcpLGU7fWZpbmFsbHl7Qz1iLGdnPSExfX1yZXR1cm4gbnVsbH12YXIga2c9W10sbGc9MCxtZz1udWxsLG5nPTAsb2c9W10scGc9MCxxZz1udWxsLHJnPTEsc2c9XCJcIjtmdW5jdGlvbiB0ZyhhLGIpe2tnW2xnKytdPW5nO2tnW2xnKytdPW1nO21nPWE7bmc9Yn1cbmZ1bmN0aW9uIHVnKGEsYixjKXtvZ1twZysrXT1yZztvZ1twZysrXT1zZztvZ1twZysrXT1xZztxZz1hO3ZhciBkPXJnO2E9c2c7dmFyIGU9MzItb2MoZCktMTtkJj1+KDE8PGUpO2MrPTE7dmFyIGY9MzItb2MoYikrZTtpZigzMDxmKXt2YXIgZz1lLWUlNTtmPShkJigxPDxnKS0xKS50b1N0cmluZygzMik7ZD4+PWc7ZS09ZztyZz0xPDwzMi1vYyhiKStlfGM8PGV8ZDtzZz1mK2F9ZWxzZSByZz0xPDxmfGM8PGV8ZCxzZz1hfWZ1bmN0aW9uIHZnKGEpe251bGwhPT1hLnJldHVybiYmKHRnKGEsMSksdWcoYSwxLDApKX1mdW5jdGlvbiB3ZyhhKXtmb3IoO2E9PT1tZzspbWc9a2dbLS1sZ10sa2dbbGddPW51bGwsbmc9a2dbLS1sZ10sa2dbbGddPW51bGw7Zm9yKDthPT09cWc7KXFnPW9nWy0tcGddLG9nW3BnXT1udWxsLHNnPW9nWy0tcGddLG9nW3BnXT1udWxsLHJnPW9nWy0tcGddLG9nW3BnXT1udWxsfXZhciB4Zz1udWxsLHlnPW51bGwsST0hMSx6Zz1udWxsO1xuZnVuY3Rpb24gQWcoYSxiKXt2YXIgYz1CZyg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtiPWEuZGVsZXRpb25zO251bGw9PT1iPyhhLmRlbGV0aW9ucz1bY10sYS5mbGFnc3w9MTYpOmIucHVzaChjKX1cbmZ1bmN0aW9uIENnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLHhnPWEseWc9TGYoYi5maXJzdENoaWxkKSwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLHhnPWEseWc9bnVsbCwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4gYj04IT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGM9bnVsbCE9PXFnP3tpZDpyZyxvdmVyZmxvdzpzZ306bnVsbCxhLm1lbW9pemVkU3RhdGU9e2RlaHlkcmF0ZWQ6Yix0cmVlQ29udGV4dDpjLHJldHJ5TGFuZToxMDczNzQxODI0fSxjPUJnKDE4LG51bGwsbnVsbCwwKSxjLnN0YXRlTm9kZT1iLGMucmV0dXJuPWEsYS5jaGlsZD1jLHhnPWEseWc9XG5udWxsLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBEZyhhKXtyZXR1cm4gMCE9PShhLm1vZGUmMSkmJjA9PT0oYS5mbGFncyYxMjgpfWZ1bmN0aW9uIEVnKGEpe2lmKEkpe3ZhciBiPXlnO2lmKGIpe3ZhciBjPWI7aWYoIUNnKGEsYikpe2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7Yj1MZihjLm5leHRTaWJsaW5nKTt2YXIgZD14ZztiJiZDZyhhLGIpP0FnKGQsYyk6KGEuZmxhZ3M9YS5mbGFncyYtNDA5N3wyLEk9ITEseGc9YSl9fWVsc2V7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTthLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MjtJPSExO3hnPWF9fX1mdW5jdGlvbiBGZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47eGc9YX1cbmZ1bmN0aW9uIEdnKGEpe2lmKGEhPT14ZylyZXR1cm4hMTtpZighSSlyZXR1cm4gRmcoYSksST0hMCwhMTt2YXIgYjsoYj0zIT09YS50YWcpJiYhKGI9NSE9PWEudGFnKSYmKGI9YS50eXBlLGI9XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFFZihhLnR5cGUsYS5tZW1vaXplZFByb3BzKSk7aWYoYiYmKGI9eWcpKXtpZihEZyhhKSl0aHJvdyBIZygpLEVycm9yKHAoNDE4KSk7Zm9yKDtiOylBZyhhLGIpLGI9TGYoYi5uZXh0U2libGluZyl9RmcoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcihwKDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXt5Zz1MZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfXlnPVxubnVsbH19ZWxzZSB5Zz14Zz9MZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBIZygpe2Zvcih2YXIgYT15ZzthOylhPUxmKGEubmV4dFNpYmxpbmcpfWZ1bmN0aW9uIElnKCl7eWc9eGc9bnVsbDtJPSExfWZ1bmN0aW9uIEpnKGEpe251bGw9PT16Zz96Zz1bYV06emcucHVzaChhKX12YXIgS2c9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24gTGcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1BKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIE1nPVVmKG51bGwpLE5nPW51bGwsT2c9bnVsbCxQZz1udWxsO2Z1bmN0aW9uIFFnKCl7UGc9T2c9Tmc9bnVsbH1mdW5jdGlvbiBSZyhhKXt2YXIgYj1NZy5jdXJyZW50O0UoTWcpO2EuX2N1cnJlbnRWYWx1ZT1ifVxuZnVuY3Rpb24gU2coYSxiLGMpe2Zvcig7bnVsbCE9PWE7KXt2YXIgZD1hLmFsdGVybmF0ZTsoYS5jaGlsZExhbmVzJmIpIT09Yj8oYS5jaGlsZExhbmVzfD1iLG51bGwhPT1kJiYoZC5jaGlsZExhbmVzfD1iKSk6bnVsbCE9PWQmJihkLmNoaWxkTGFuZXMmYikhPT1iJiYoZC5jaGlsZExhbmVzfD1iKTtpZihhPT09YylicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBUZyhhLGIpe05nPWE7UGc9T2c9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJihVZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBWZyhhKXt2YXIgYj1hLl9jdXJyZW50VmFsdWU7aWYoUGchPT1hKWlmKGE9e2NvbnRleHQ6YSxtZW1vaXplZFZhbHVlOmIsbmV4dDpudWxsfSxudWxsPT09T2cpe2lmKG51bGw9PT1OZyl0aHJvdyBFcnJvcihwKDMwOCkpO09nPWE7TmcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDphfX1lbHNlIE9nPU9nLm5leHQ9YTtyZXR1cm4gYn12YXIgV2c9bnVsbDtmdW5jdGlvbiBYZyhhKXtudWxsPT09V2c/V2c9W2FdOldnLnB1c2goYSl9ZnVuY3Rpb24gWWcoYSxiLGMsZCl7dmFyIGU9Yi5pbnRlcmxlYXZlZDtudWxsPT09ZT8oYy5uZXh0PWMsWGcoYikpOihjLm5leHQ9ZS5uZXh0LGUubmV4dD1jKTtiLmludGVybGVhdmVkPWM7cmV0dXJuIFpnKGEsZCl9XG5mdW5jdGlvbiBaZyhhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9dmFyICRnPSExO2Z1bmN0aW9uIGFoKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjB9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiBiaChhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiBjaChhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1cbmZ1bmN0aW9uIGRoKGEsYixjKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Q9ZC5zaGFyZWQ7aWYoMCE9PShLJjIpKXt2YXIgZT1kLnBlbmRpbmc7bnVsbD09PWU/Yi5uZXh0PWI6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QucGVuZGluZz1iO3JldHVybiBaZyhhLGMpfWU9ZC5pbnRlcmxlYXZlZDtudWxsPT09ZT8oYi5uZXh0PWIsWGcoZCkpOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLmludGVybGVhdmVkPWI7cmV0dXJuIFpnKGEsYyl9ZnVuY3Rpb24gZWgoYSxiLGMpe2I9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YiYmKGI9Yi5zaGFyZWQsMCE9PShjJjQxOTQyNDApKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbmZ1bmN0aW9uIGZoKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBnaChhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlOyRnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG09YS5hbHRlcm5hdGU7bnVsbCE9PW0mJihtPW0udXBkYXRlUXVldWUsaD1tLmxhc3RCYXNlVXBkYXRlLGghPT1nJiYobnVsbD09PWg/bS5maXJzdEJhc2VVcGRhdGU9bDpoLm5leHQ9bCxtLmxhc3RCYXNlVXBkYXRlPWspKX1pZihudWxsIT09Zil7dmFyIHE9ZS5iYXNlU3RhdGU7Zz0wO209bD1rPW51bGw7aD1mO2Rve3ZhciByPWgubGFuZSx5PWguZXZlbnRUaW1lO2lmKChkJnIpPT09cil7bnVsbCE9PW0mJihtPW0ubmV4dD17ZXZlbnRUaW1lOnksbGFuZTowLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIG49YSx0PWg7cj1iO3k9Yztzd2l0Y2godC50YWcpe2Nhc2UgMTpuPXQucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbil7cT1uLmNhbGwoeSxxLHIpO2JyZWFrIGF9cT1uO2JyZWFrIGE7Y2FzZSAzOm4uZmxhZ3M9bi5mbGFncyYtNjU1Mzd8MTI4O2Nhc2UgMDpuPXQucGF5bG9hZDtyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBuP24uY2FsbCh5LHEscik6bjtpZihudWxsPT09cnx8dm9pZCAwPT09cilicmVhayBhO3E9QSh7fSxxLHIpO2JyZWFrIGE7Y2FzZSAyOiRnPSEwfX1udWxsIT09aC5jYWxsYmFjayYmMCE9PWgubGFuZSYmKGEuZmxhZ3N8PTY0LHI9ZS5lZmZlY3RzLG51bGw9PT1yP2UuZWZmZWN0cz1baF06ci5wdXNoKGgpKX1lbHNlIHk9e2V2ZW50VGltZTp5LGxhbmU6cix0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1tPyhsPW09eSxrPXEpOm09bS5uZXh0PXksZ3w9cjtcbmg9aC5uZXh0O2lmKG51bGw9PT1oKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIHI9aCxoPXIubmV4dCxyLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPXIsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1tJiYoaz1xKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1tO2I9ZS5zaGFyZWQuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWIpe2U9YjtkbyBnfD1lLmxhbmUsZT1lLm5leHQ7d2hpbGUoZSE9PWIpfWVsc2UgbnVsbD09PWYmJihlLnNoYXJlZC5sYW5lcz0wKTtoaHw9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPXF9fVxuZnVuY3Rpb24gaWgoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHAoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgamg9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24ga2goYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOkEoe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIG5oPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1ZiKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUwoKSxlPWxoKGEpLGY9Y2goZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1kaChhLGYsZSk7bnVsbCE9PWImJihtaChiLGEsZSxkKSxlaChiLGEsZSkpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUwoKSxlPWxoKGEpLGY9Y2goZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPWRoKGEsZixlKTtudWxsIT09YiYmKG1oKGIsYSxlLGQpLGVoKGIsYSxlKSl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9TCgpLGQ9XG5saChhKSxlPWNoKGMsZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7Yj1kaChhLGUsZCk7bnVsbCE9PWImJihtaChiLGEsZCxjKSxlaChiLGEsZCkpfX07ZnVuY3Rpb24gb2goYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSWUoYyxkKXx8IUllKGUsZik6ITB9XG5mdW5jdGlvbiBwaChhLGIsYyl7dmFyIGQ9ITEsZT1WZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1WZyhmKTooZT1aZihiKT9YZjpILmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9ZZihhLGUpOlZmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9bmg7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBxaChhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmbmguZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiByaChhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWpoO2FoKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9VmcoZik6KGY9WmYoYik/WGY6SC5jdXJyZW50LGUuY29udGV4dD1ZZihhLGYpKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoa2goYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmbmguZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZ2goYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NDE5NDMwOCl9XG5mdW5jdGlvbiBzaChhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHAoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IocCgxNDcsYSkpO3ZhciBlPWQsZj1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZilyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1lLnJlZnM7Yj09PWpoJiYoYj1lLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2ZdOmJbZl09YX07Yi5fc3RyaW5nUmVmPWY7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHAoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHAoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiB0aChhLGIpe2E9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpO3Rocm93IEVycm9yKHAoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWE/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YSkpO31mdW5jdGlvbiB1aChhKXt2YXIgYj1hLl9pbml0O3JldHVybiBiKGEuX3BheWxvYWQpfVxuZnVuY3Rpb24gdmgoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIuZGVsZXRpb25zO251bGw9PT1kPyhiLmRlbGV0aW9ucz1bY10sYi5mbGFnc3w9MTYpOmQucHVzaChjKX19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9d2goYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBiLmZsYWdzfD0xMDQ4NTc2LGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFnc3w9MixjKTpkO2IuZmxhZ3N8PTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZcbm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3N8PTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj14aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe3ZhciBmPWMudHlwZTtpZihmPT09eWEpcmV0dXJuIG0oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxjLmtleSk7aWYobnVsbCE9PWImJihiLmVsZW1lbnRUeXBlPT09Znx8XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi4kJHR5cGVvZj09PUhhJiZ1aChmKT09PWIudHlwZSkpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPXNoKGEsYixjKSxkLnJldHVybj1hLGQ7ZD15aChjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1zaChhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fFxuYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPXpoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1BaChjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYiYmXCJcIiE9PWJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj14aChcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYz15aChiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxcbmMucmVmPXNoKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB3YTpyZXR1cm4gYj16aChiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7Y2FzZSBIYTp2YXIgZD1iLl9pbml0O3JldHVybiBxKGEsZChiLl9wYXlsb2FkKSxjKX1pZihlYihiKXx8S2EoYikpcmV0dXJuIGI9QWgoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7dGgoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiByKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjJiZcIlwiIT09Y3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYy5rZXk9PT1lP2soYSxiLGMsZCk6bnVsbDtjYXNlIHdhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsO2Nhc2UgSGE6cmV0dXJuIGU9Yy5faW5pdCxyKGEsXG5iLGUoYy5fcGF5bG9hZCksZCl9aWYoZWIoYyl8fEthKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTt0aChhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHkoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGQmJlwiXCIhPT1kfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpO2Nhc2Ugd2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSk7Y2FzZSBIYTp2YXIgZj1kLl9pbml0O3JldHVybiB5KGEsYixjLGYoZC5fcGF5bG9hZCksZSl9aWYoZWIoZCl8fEthKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTt0aChiLGQpfXJldHVybiBudWxsfVxuZnVuY3Rpb24gbihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxtPW51bGwsdT1nLHc9Zz0wLHg9bnVsbDtudWxsIT09dSYmdzxoLmxlbmd0aDt3Kyspe3UuaW5kZXg+dz8oeD11LHU9bnVsbCk6eD11LnNpYmxpbmc7dmFyIG49cihlLHUsaFt3XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXgpO2JyZWFrfWEmJnUmJm51bGw9PT1uLmFsdGVybmF0ZSYmYihlLHUpO2c9ZihuLGcsdyk7bnVsbD09PW0/bD1uOm0uc2libGluZz1uO209bjt1PXh9aWYodz09PWgubGVuZ3RoKXJldHVybiBjKGUsdSksSSYmdGcoZSx3KSxsO2lmKG51bGw9PT11KXtmb3IoO3c8aC5sZW5ndGg7dysrKXU9cShlLGhbd10sayksbnVsbCE9PXUmJihnPWYodSxnLHcpLG51bGw9PT1tP2w9dTptLnNpYmxpbmc9dSxtPXUpO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3c8aC5sZW5ndGg7dysrKXg9eSh1LGUsdyxoW3ddLGspLG51bGwhPT14JiYoYSYmbnVsbCE9PXguYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09XG54LmtleT93Ongua2V5KSxnPWYoeCxnLHcpLG51bGw9PT1tP2w9eDptLnNpYmxpbmc9eCxtPXgpO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiB0KGUsZyxoLGspe3ZhciBsPUthKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHAoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09aCl0aHJvdyBFcnJvcihwKDE1MSkpO2Zvcih2YXIgdT1sPW51bGwsbT1nLHc9Zz0wLHg9bnVsbCxuPWgubmV4dCgpO251bGwhPT1tJiYhbi5kb25lO3crKyxuPWgubmV4dCgpKXttLmluZGV4Pnc/KHg9bSxtPW51bGwpOng9bS5zaWJsaW5nO3ZhciB0PXIoZSxtLG4udmFsdWUsayk7aWYobnVsbD09PXQpe251bGw9PT1tJiYobT14KTticmVha31hJiZtJiZudWxsPT09dC5hbHRlcm5hdGUmJmIoZSxtKTtnPWYodCxnLHcpO251bGw9PT11P2w9dDp1LnNpYmxpbmc9dDt1PXQ7bT14fWlmKG4uZG9uZSlyZXR1cm4gYyhlLFxubSksSSYmdGcoZSx3KSxsO2lmKG51bGw9PT1tKXtmb3IoOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj1xKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXkobSxlLHcsbi52YWx1ZSxrKSxudWxsIT09biYmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PW4ua2V5P3c6bi5rZXkpLGc9ZihuLGcsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIEooYSxkLGYsaCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09eWEmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zil7c3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgdmE6YTp7Zm9yKHZhciBrPVxuZi5rZXksbD1kO251bGwhPT1sOyl7aWYobC5rZXk9PT1rKXtrPWYudHlwZTtpZihrPT09eWEpe2lmKDc9PT1sLnRhZyl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19ZWxzZSBpZihsLmVsZW1lbnRUeXBlPT09a3x8XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUhhJiZ1aChrKT09PWwudHlwZSl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcyk7ZC5yZWY9c2goYSxsLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YyhhLGwpO2JyZWFrfWVsc2UgYihhLGwpO2w9bC5zaWJsaW5nfWYudHlwZT09PXlhPyhkPUFoKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD15aChmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1zaChhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2Ugd2E6YTp7Zm9yKGw9Zi5rZXk7bnVsbCE9PVxuZDspe2lmKGQua2V5PT09bClpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD16aChmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKTtjYXNlIEhhOnJldHVybiBsPWYuX2luaXQsSihhLGQsbChmLl9wYXlsb2FkKSxoKX1pZihlYihmKSlyZXR1cm4gbihhLGQsZixoKTtpZihLYShmKSlyZXR1cm4gdChhLGQsZixoKTt0aChhLGYpfXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgZiYmXCJcIiE9PWZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZj8oZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOlxuKGMoYSxkKSxkPXhoKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpKTpjKGEsZCl9cmV0dXJuIEp9dmFyIEJoPXZoKCEwKSxDaD12aCghMSksRGg9e30sRWg9VWYoRGgpLEZoPVVmKERoKSxHaD1VZihEaCk7ZnVuY3Rpb24gSGgoYSl7aWYoYT09PURoKXRocm93IEVycm9yKHAoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gSWgoYSxiKXtHKEdoLGIpO0coRmgsYSk7RyhFaCxEaCk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpsYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bGIoYixhKX1FKEVoKTtHKEVoLGIpfWZ1bmN0aW9uIEpoKCl7RShFaCk7RShGaCk7RShHaCl9XG5mdW5jdGlvbiBLaChhKXtIaChHaC5jdXJyZW50KTt2YXIgYj1IaChFaC5jdXJyZW50KTt2YXIgYz1sYihiLGEudHlwZSk7YiE9PWMmJihHKEZoLGEpLEcoRWgsYykpfWZ1bmN0aW9uIExoKGEpe0ZoLmN1cnJlbnQ9PT1hJiYoRShFaCksRShGaCkpfXZhciBNPVVmKDApO1xuZnVuY3Rpb24gTWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIE5oPVtdO1xuZnVuY3Rpb24gT2goKXtmb3IodmFyIGE9MDthPE5oLmxlbmd0aDthKyspTmhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDtOaC5sZW5ndGg9MH12YXIgUGg9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixRaD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxSaD0wLE49bnVsbCxPPW51bGwsUD1udWxsLFNoPSExLFRoPSExLFVoPTAsVmg9MDtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IocCgzMjEpKTt9ZnVuY3Rpb24gV2goYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFhoKGEsYixjLGQsZSxmKXtSaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO1BoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/WWg6Wmg7YT1jKGQsZSk7aWYoVGgpe2Y9MDtkb3tUaD0hMTtVaD0wO2lmKDI1PD1mKXRocm93IEVycm9yKHAoMzAxKSk7Zis9MTtQPU89bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7UGguY3VycmVudD0kaDthPWMoZCxlKX13aGlsZShUaCl9UGguY3VycmVudD1haTtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O1JoPTA7UD1PPU49bnVsbDtTaD0hMTtpZihiKXRocm93IEVycm9yKHAoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gYmkoKXt2YXIgYT0wIT09VWg7VWg9MDtyZXR1cm4gYX1cbmZ1bmN0aW9uIGNpKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hO3JldHVybiBQfWZ1bmN0aW9uIGRpKCl7aWYobnVsbD09PU8pe3ZhciBhPU4uYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPU8ubmV4dDt2YXIgYj1udWxsPT09UD9OLm1lbW9pemVkU3RhdGU6UC5uZXh0O2lmKG51bGwhPT1iKVA9YixPPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDMxMCkpO089YTthPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUsYmFzZVF1ZXVlOk8uYmFzZVF1ZXVlLHF1ZXVlOk8ucXVldWUsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWF9cmV0dXJuIFB9XG5mdW5jdGlvbiBlaShhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIGZpKGEpe3ZhciBiPWRpKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9TyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtmPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9bnVsbCxrPW51bGwsbD1mO2Rve3ZhciBtPWwubGFuZTtpZigoUmgmbSk9PT1tKW51bGwhPT1rJiYoaz1rLm5leHQ9e2xhbmU6MCxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1sLmhhc0VhZ2VyU3RhdGU/bC5lYWdlclN0YXRlOmEoZCxsLmFjdGlvbik7ZWxzZXt2YXIgcT17bGFuZTptLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxcbmVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWs/KGg9az1xLGc9ZCk6az1rLm5leHQ9cTtOLmxhbmVzfD1tO2hofD1tfWw9bC5uZXh0fXdoaWxlKG51bGwhPT1sJiZsIT09Zik7bnVsbD09PWs/Zz1kOmsubmV4dD1oO0hlKGQsYi5tZW1vaXplZFN0YXRlKXx8KFVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1nO2IuYmFzZVF1ZXVlPWs7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfWE9Yy5pbnRlcmxlYXZlZDtpZihudWxsIT09YSl7ZT1hO2RvIGY9ZS5sYW5lLE4ubGFuZXN8PWYsaGh8PWYsZT1lLm5leHQ7d2hpbGUoZSE9PWEpfWVsc2UgbnVsbD09PWUmJihjLmxhbmVzPTApO3JldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBnaShhKXt2YXIgYj1kaSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7SGUoZixiLm1lbW9pemVkU3RhdGUpfHwoVWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1mdW5jdGlvbiBoaSgpe31cbmZ1bmN0aW9uIGlpKGEsYil7dmFyIGM9TixkPWRpKCksZT1iKCksZj0hSGUoZC5tZW1vaXplZFN0YXRlLGUpO2YmJihkLm1lbW9pemVkU3RhdGU9ZSxVZz0hMCk7ZD1kLnF1ZXVlO2ppKGtpLmJpbmQobnVsbCxjLGQsYSksW2FdKTtpZihkLmdldFNuYXBzaG90IT09Ynx8Znx8bnVsbCE9PVAmJlAubWVtb2l6ZWRTdGF0ZS50YWcmMSl7Yy5mbGFnc3w9MjA0ODtsaSg5LG1pLmJpbmQobnVsbCxjLGQsZSxiKSx2b2lkIDAsbnVsbCk7aWYobnVsbD09PVIpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KFJoJjMwKXx8bmkoYyxiLGUpfXJldHVybiBlfWZ1bmN0aW9uIG5pKGEsYixjKXthLmZsYWdzfD0xNjM4NDthPXtnZXRTbmFwc2hvdDpiLHZhbHVlOmN9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5zdG9yZXM9W2FdKTooYz1iLnN0b3JlcyxudWxsPT09Yz9iLnN0b3Jlcz1bYV06Yy5wdXNoKGEpKX1cbmZ1bmN0aW9uIG1pKGEsYixjLGQpe2IudmFsdWU9YztiLmdldFNuYXBzaG90PWQ7b2koYikmJnBpKGEpfWZ1bmN0aW9uIGtpKGEsYixjKXtyZXR1cm4gYyhmdW5jdGlvbigpe29pKGIpJiZwaShhKX0pfWZ1bmN0aW9uIG9pKGEpe3ZhciBiPWEuZ2V0U25hcHNob3Q7YT1hLnZhbHVlO3RyeXt2YXIgYz1iKCk7cmV0dXJuIUhlKGEsYyl9Y2F0Y2goZCl7cmV0dXJuITB9fWZ1bmN0aW9uIHBpKGEpe3ZhciBiPVpnKGEsMSk7bnVsbCE9PWImJm1oKGIsYSwxLC0xKX1cbmZ1bmN0aW9uIHFpKGEpe3ZhciBiPWNpKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6ZWksbGFzdFJlbmRlcmVkU3RhdGU6YX07Yi5xdWV1ZT1hO2E9YS5kaXNwYXRjaD1yaS5iaW5kKG51bGwsTixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gbGkoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIHNpKCl7cmV0dXJuIGRpKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiB0aShhLGIsYyxkKXt2YXIgZT1jaSgpO04uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWxpKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiB1aShhLGIsYyxkKXt2YXIgZT1kaSgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJldoKGQsZy5kZXBzKSl7ZS5tZW1vaXplZFN0YXRlPWxpKGIsYyxmLGQpO3JldHVybn19Ti5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9bGkoMXxiLGMsZixkKX1mdW5jdGlvbiB2aShhLGIpe3JldHVybiB0aSg4MzkwNjU2LDgsYSxiKX1mdW5jdGlvbiBqaShhLGIpe3JldHVybiB1aSgyMDQ4LDgsYSxiKX1mdW5jdGlvbiB3aShhLGIpe3JldHVybiB1aSg0LDIsYSxiKX1mdW5jdGlvbiB4aShhLGIpe3JldHVybiB1aSg0LDQsYSxiKX1cbmZ1bmN0aW9uIHlpKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gemkoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB1aSg0LDQseWkuYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gQWkoKXt9ZnVuY3Rpb24gQmkoYSxiKXt2YXIgYz1kaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmV2goYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBDaShhLGIpe3ZhciBjPWRpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZXaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBEaShhLGIsYyl7aWYoMD09PShSaCYyMSkpcmV0dXJuIGEuYmFzZVN0YXRlJiYoYS5iYXNlU3RhdGU9ITEsVWc9ITApLGEubWVtb2l6ZWRTdGF0ZT1jO0hlKGMsYil8fChjPXljKCksTi5sYW5lc3w9YyxoaHw9YyxhLmJhc2VTdGF0ZT0hMCk7cmV0dXJuIGJ9ZnVuY3Rpb24gRWkoYSxiKXt2YXIgYz1DO0M9MCE9PWMmJjQ+Yz9jOjQ7YSghMCk7dmFyIGQ9UWgudHJhbnNpdGlvbjtRaC50cmFuc2l0aW9uPXt9O3RyeXthKCExKSxiKCl9ZmluYWxseXtDPWMsUWgudHJhbnNpdGlvbj1kfX1mdW5jdGlvbiBGaSgpe3JldHVybiBkaSgpLm1lbW9pemVkU3RhdGV9XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9bGgoYSk7Yz17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoSGkoYSkpSWkoYixjKTtlbHNlIGlmKGM9WWcoYSxiLGMsZCksbnVsbCE9PWMpe3ZhciBlPUwoKTttaChjLGEsZCxlKTtKaShjLGIsZCl9fVxuZnVuY3Rpb24gcmkoYSxiLGMpe3ZhciBkPWxoKGEpLGU9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKEhpKGEpKUlpKGIsZSk7ZWxzZXt2YXIgZj1hLmFsdGVybmF0ZTtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1mfHwwPT09Zi5sYW5lcykmJihmPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZikpdHJ5e3ZhciBnPWIubGFzdFJlbmRlcmVkU3RhdGUsaD1mKGcsYyk7ZS5oYXNFYWdlclN0YXRlPSEwO2UuZWFnZXJTdGF0ZT1oO2lmKEhlKGgsZykpe3ZhciBrPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWs/KGUubmV4dD1lLFhnKGIpKTooZS5uZXh0PWsubmV4dCxrLm5leHQ9ZSk7Yi5pbnRlcmxlYXZlZD1lO3JldHVybn19Y2F0Y2gobCl7fWZpbmFsbHl7fWM9WWcoYSxiLGUsZCk7bnVsbCE9PWMmJihlPUwoKSxtaChjLGEsZCxlKSxKaShjLGIsZCkpfX1cbmZ1bmN0aW9uIEhpKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO3JldHVybiBhPT09Tnx8bnVsbCE9PWImJmI9PT1OfWZ1bmN0aW9uIElpKGEsYil7VGg9U2g9ITA7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn1mdW5jdGlvbiBKaShhLGIsYyl7aWYoMCE9PShjJjQxOTQyNDApKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxudmFyIGFpPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpRLHVzZUNvbnRleHQ6USx1c2VFZmZlY3Q6USx1c2VJbXBlcmF0aXZlSGFuZGxlOlEsdXNlSW5zZXJ0aW9uRWZmZWN0OlEsdXNlTGF5b3V0RWZmZWN0OlEsdXNlTWVtbzpRLHVzZVJlZHVjZXI6USx1c2VSZWY6USx1c2VTdGF0ZTpRLHVzZURlYnVnVmFsdWU6USx1c2VEZWZlcnJlZFZhbHVlOlEsdXNlVHJhbnNpdGlvbjpRLHVzZU11dGFibGVTb3VyY2U6USx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpRLHVzZUlkOlEsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxZaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtjaSgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDp2aSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdGkoNDE5NDMwOCxcbjQseWkuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0aSg0MTk0MzA4LDQsYSxiKX0sdXNlSW5zZXJ0aW9uRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRpKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9Y2koKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9Y2koKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07ZC5xdWV1ZT1hO2E9YS5kaXNwYXRjaD1HaS5iaW5kKG51bGwsTixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9XG5jaSgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpxaSx1c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7cmV0dXJuIGNpKCkubWVtb2l6ZWRTdGF0ZT1hfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9cWkoITEpLGI9YVswXTthPUVpLmJpbmQobnVsbCxhWzFdKTtjaSgpLm1lbW9pemVkU3RhdGU9YTtyZXR1cm5bYixhXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbigpe30sdXNlU3luY0V4dGVybmFsU3RvcmU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPU4sZT1jaSgpO2lmKEkpe2lmKHZvaWQgMD09PWMpdGhyb3cgRXJyb3IocCg0MDcpKTtjPWMoKX1lbHNle2M9YigpO2lmKG51bGw9PT1SKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShSaCYzMCl8fG5pKGQsYixjKX1lLm1lbW9pemVkU3RhdGU9Yzt2YXIgZj17dmFsdWU6YyxnZXRTbmFwc2hvdDpifTtlLnF1ZXVlPWY7dmkoa2kuYmluZChudWxsLGQsXG5mLGEpLFthXSk7ZC5mbGFnc3w9MjA0ODtsaSg5LG1pLmJpbmQobnVsbCxkLGYsYyxiKSx2b2lkIDAsbnVsbCk7cmV0dXJuIGN9LHVzZUlkOmZ1bmN0aW9uKCl7dmFyIGE9Y2koKSxiPVIuaWRlbnRpZmllclByZWZpeDtpZihJKXt2YXIgYz1zZzt2YXIgZD1yZztjPShkJn4oMTw8MzItb2MoZCktMSkpLnRvU3RyaW5nKDMyKStjO2I9XCI6XCIrYitcIlJcIitjO2M9VWgrKzswPGMmJihiKz1cIkhcIitjLnRvU3RyaW5nKDMyKSk7Yis9XCI6XCJ9ZWxzZSBjPVZoKyssYj1cIjpcIitiK1wiclwiK2MudG9TdHJpbmcoMzIpK1wiOlwiO3JldHVybiBhLm1lbW9pemVkU3RhdGU9Yn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxaaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6QmksdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6amksdXNlSW1wZXJhdGl2ZUhhbmRsZTp6aSx1c2VJbnNlcnRpb25FZmZlY3Q6d2ksdXNlTGF5b3V0RWZmZWN0OnhpLHVzZU1lbW86Q2ksdXNlUmVkdWNlcjpmaSx1c2VSZWY6c2ksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZmkoZWkpfSxcbnVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1kaSgpO3JldHVybiBEaShiLE8ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWZpKGVpKVswXSxiPWRpKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpoaSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTppaSx1c2VJZDpGaSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LCRoPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpCaSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDpqaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnppLHVzZUluc2VydGlvbkVmZmVjdDp3aSx1c2VMYXlvdXRFZmZlY3Q6eGksdXNlTWVtbzpDaSx1c2VSZWR1Y2VyOmdpLHVzZVJlZjpzaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBnaShlaSl9LHVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1kaSgpO3JldHVybiBudWxsPT09XG5PP2IubWVtb2l6ZWRTdGF0ZT1hOkRpKGIsTy5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9Z2koZWkpWzBdLGI9ZGkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmhpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmlpLHVzZUlkOkZpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX07ZnVuY3Rpb24gS2koYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9UGEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmUsZGlnZXN0Om51bGx9fWZ1bmN0aW9uIExpKGEsYixjKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6bnVsbCxzdGFjazpudWxsIT1jP2M6bnVsbCxkaWdlc3Q6bnVsbCE9Yj9iOm51bGx9fVxuZnVuY3Rpb24gTWkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE5pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIE9pKGEsYixjKXtjPWNoKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1BpfHwoUGk9ITAsUWk9ZCk7TWkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBSaShhLGIsYyl7Yz1jaCgtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9O2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtNaShhLGIpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TWkoYSxiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1TaT9TaT1uZXcgU2V0KFt0aGlzXSk6U2kuYWRkKHRoaXMpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIFRpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtpZihudWxsPT09ZCl7ZD1hLnBpbmdDYWNoZT1uZXcgTmk7dmFyIGU9bmV3IFNldDtkLnNldChiLGUpfWVsc2UgZT1kLmdldChiKSx2b2lkIDA9PT1lJiYoZT1uZXcgU2V0LGQuc2V0KGIsZSkpO2UuaGFzKGMpfHwoZS5hZGQoYyksYT1VaS5iaW5kKG51bGwsYSxiLGMpLGIudGhlbihhLGEpKX1mdW5jdGlvbiBWaShhKXtkb3t2YXIgYjtpZihiPTEzPT09YS50YWcpYj1hLm1lbW9pemVkU3RhdGUsYj1udWxsIT09Yj9udWxsIT09Yi5kZWh5ZHJhdGVkPyEwOiExOiEwO2lmKGIpcmV0dXJuIGE7YT1hLnJldHVybn13aGlsZShudWxsIT09YSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBXaShhLGIsYyxkLGUpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiBhPT09Yj9hLmZsYWdzfD02NTUzNjooYS5mbGFnc3w9MTI4LGMuZmxhZ3N8PTEzMTA3MixjLmZsYWdzJj0tNTI4MDUsMT09PWMudGFnJiYobnVsbD09PWMuYWx0ZXJuYXRlP2MudGFnPTE3OihiPWNoKC0xLDEpLGIudGFnPTIsZGgoYyxiLDEpKSksYy5sYW5lc3w9MSksYTthLmZsYWdzfD02NTUzNjthLmxhbmVzPWU7cmV0dXJuIGF9dmFyIFhpPXVhLlJlYWN0Q3VycmVudE93bmVyLFVnPSExO2Z1bmN0aW9uIFlpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/Q2goYixudWxsLGMsZCk6QmgoYixhLmNoaWxkLGMsZCl9XG5mdW5jdGlvbiBaaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7VGcoYixlKTtkPVhoKGEsYixjLGQsZixlKTtjPWJpKCk7aWYobnVsbCE9PWEmJiFVZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLCRpKGEsYixlKTtJJiZjJiZ2ZyhiKTtiLmZsYWdzfD0xO1lpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWooYSxiLGMsZCxlKXtpZihudWxsPT09YSl7dmFyIGY9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYhYmooZikmJnZvaWQgMD09PWYuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWYsY2ooYSxiLGYsZCxlKTthPXloKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZSk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWY9YS5jaGlsZDtpZigwPT09KGEubGFuZXMmZSkpe3ZhciBnPWYubWVtb2l6ZWRQcm9wcztjPWMuY29tcGFyZTtjPW51bGwhPT1jP2M6SWU7aWYoYyhnLGQpJiZhLnJlZj09PWIucmVmKXJldHVybiAkaShhLGIsZSl9Yi5mbGFnc3w9MTthPXdoKGYsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2ooYSxiLGMsZCxlKXtpZihudWxsIT09YSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKEllKGYsZCkmJmEucmVmPT09Yi5yZWYpaWYoVWc9ITEsYi5wZW5kaW5nUHJvcHM9ZD1mLDAhPT0oYS5sYW5lcyZlKSkwIT09KGEuZmxhZ3MmMTMxMDcyKSYmKFVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsJGkoYSxiLGUpfXJldHVybiBkaihhLGIsYyxkLGUpfVxuZnVuY3Rpb24gZWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxHKGZqLGdqKSxnanw9YztlbHNle2lmKDA9PT0oYyYxMDczNzQxODI0KSlyZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LGIudXBkYXRlUXVldWU9bnVsbCxHKGZqLGdqKSxnanw9YSxudWxsO2IubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH07ZD1udWxsIT09Zj9mLmJhc2VMYW5lczpjO0coZmosZ2opO2dqfD1kfWVsc2UgbnVsbCE9PVxuZj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsRyhmaixnaiksZ2p8PWQ7WWkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gaGooYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTJ9ZnVuY3Rpb24gZGooYSxiLGMsZCxlKXt2YXIgZj1aZihjKT9YZjpILmN1cnJlbnQ7Zj1ZZihiLGYpO1RnKGIsZSk7Yz1YaChhLGIsYyxkLGYsZSk7ZD1iaSgpO2lmKG51bGwhPT1hJiYhVWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSwkaShhLGIsZSk7SSYmZCYmdmcoYik7Yi5mbGFnc3w9MTtZaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlqKGEsYixjLGQsZSl7aWYoWmYoYykpe3ZhciBmPSEwO2NnKGIpfWVsc2UgZj0hMTtUZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSlqaihhLGIpLHBoKGIsYyxkKSxyaChiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1WZyhsKToobD1aZihjKT9YZjpILmN1cnJlbnQsbD1ZZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxxPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oaCE9PWR8fGshPT1sKSYmcWgoYixnLGQsbCk7JGc9ITE7dmFyIHI9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtnaChiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8ciE9PWt8fFdmLmN1cnJlbnR8fCRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKGtoKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD0kZ3x8b2goYixjLGgsZCxyLGssbCkpPyhxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCkpOlxuKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7YmgoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpMZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO3E9Yi5wZW5kaW5nUHJvcHM7cj1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az1WZyhrKTooaz1aZihjKT9YZjpILmN1cnJlbnQsaz1ZZihiLGspKTt2YXIgeT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgeXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PXF8fHIhPT1rKSYmcWgoYixnLGQsayk7JGc9ITE7cj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO2doKGIsZCxnLGUpO3ZhciBuPWIubWVtb2l6ZWRTdGF0ZTtoIT09cXx8ciE9PW58fFdmLmN1cnJlbnR8fCRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgeSYmKGtoKGIsYyx5LGQpLG49Yi5tZW1vaXplZFN0YXRlKSwobD0kZ3x8b2goYixjLGwsZCxyLG4sayl8fCExKT8obXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTEwMjQpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9biksZy5wcm9wcz1kLGcuc3RhdGU9bixnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1cbmEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksZD0hMSl9cmV0dXJuIGtqKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIGtqKGEsYixjLGQsZSxmKXtoaihhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyYxMjgpO2lmKCFkJiYhZylyZXR1cm4gZSYmZGcoYixjLCExKSwkaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtYaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPUJoKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9QmgoYixudWxsLGgsZikpOllpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJmRnKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gbGooYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9hZyhhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZhZyhhLGIuY29udGV4dCwhMSk7SWgoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gbWooYSxiLGMsZCxlKXtJZygpO0pnKGUpO2IuZmxhZ3N8PTI1NjtZaShhLGIsYyxkKTtyZXR1cm4gYi5jaGlsZH12YXIgbmo9e2RlaHlkcmF0ZWQ6bnVsbCx0cmVlQ29udGV4dDpudWxsLHJldHJ5TGFuZTowfTtmdW5jdGlvbiBvaihhKXtyZXR1cm57YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH19XG5mdW5jdGlvbiBwaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1NLmN1cnJlbnQsZj0hMSxnPTAhPT0oYi5mbGFncyYxMjgpLGg7KGg9Zyl8fChoPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7aWYoaClmPSEwLGIuZmxhZ3MmPS0xMjk7ZWxzZSBpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSllfD0xO0coTSxlJjEpO2lmKG51bGw9PT1hKXtFZyhiKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmKGE9YS5kZWh5ZHJhdGVkLG51bGwhPT1hKSlyZXR1cm4gMD09PShiLm1vZGUmMSk/Yi5sYW5lcz0xOlwiJCFcIj09PWEuZGF0YT9iLmxhbmVzPTg6Yi5sYW5lcz0xMDczNzQxODI0LG51bGw7Zz1kLmNoaWxkcmVuO2E9ZC5mYWxsYmFjaztyZXR1cm4gZj8oZD1iLm1vZGUsZj1iLmNoaWxkLGc9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpnfSwwPT09KGQmMSkmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1cbmcpOmY9cWooZyxkLDAsbnVsbCksYT1BaChhLGQsYyxudWxsKSxmLnJldHVybj1iLGEucmV0dXJuPWIsZi5zaWJsaW5nPWEsYi5jaGlsZD1mLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT1vaihjKSxiLm1lbW9pemVkU3RhdGU9bmosYSk6cmooYixnKX1lPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSYmKGg9ZS5kZWh5ZHJhdGVkLG51bGwhPT1oKSlyZXR1cm4gc2ooYSxiLGcsZCxoLGUsYyk7aWYoZil7Zj1kLmZhbGxiYWNrO2c9Yi5tb2RlO2U9YS5jaGlsZDtoPWUuc2libGluZzt2YXIgaz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmQuY2hpbGRyZW59OzA9PT0oZyYxKSYmYi5jaGlsZCE9PWU/KGQ9Yi5jaGlsZCxkLmNoaWxkTGFuZXM9MCxkLnBlbmRpbmdQcm9wcz1rLGIuZGVsZXRpb25zPW51bGwpOihkPXdoKGUsayksZC5zdWJ0cmVlRmxhZ3M9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQpO251bGwhPT1oP2Y9d2goaCxmKTooZj1BaChmLGcsYyxudWxsKSxmLmZsYWdzfD0yKTtmLnJldHVybj1cbmI7ZC5yZXR1cm49YjtkLnNpYmxpbmc9ZjtiLmNoaWxkPWQ7ZD1mO2Y9Yi5jaGlsZDtnPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZTtnPW51bGw9PT1nP29qKGMpOntiYXNlTGFuZXM6Zy5iYXNlTGFuZXN8YyxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfTtmLm1lbW9pemVkU3RhdGU9ZztmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jO2IubWVtb2l6ZWRTdGF0ZT1uajtyZXR1cm4gZH1mPWEuY2hpbGQ7YT1mLnNpYmxpbmc7ZD13aChmLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59KTswPT09KGIubW9kZSYxKSYmKGQubGFuZXM9Yyk7ZC5yZXR1cm49YjtkLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGM9Yi5kZWxldGlvbnMsbnVsbD09PWM/KGIuZGVsZXRpb25zPVthXSxiLmZsYWdzfD0xNik6Yy5wdXNoKGEpKTtiLmNoaWxkPWQ7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGR9XG5mdW5jdGlvbiByaihhLGIpe2I9cWooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Yn0sYS5tb2RlLDAsbnVsbCk7Yi5yZXR1cm49YTtyZXR1cm4gYS5jaGlsZD1ifWZ1bmN0aW9uIHRqKGEsYixjLGQpe251bGwhPT1kJiZKZyhkKTtCaChiLGEuY2hpbGQsbnVsbCxjKTthPXJqKGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pO2EuZmxhZ3N8PTI7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGF9XG5mdW5jdGlvbiBzaihhLGIsYyxkLGUsZixnKXtpZihjKXtpZihiLmZsYWdzJjI1NilyZXR1cm4gYi5mbGFncyY9LTI1NyxkPUxpKEVycm9yKHAoNDIyKSkpLHRqKGEsYixnLGQpO2lmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpcmV0dXJuIGIuY2hpbGQ9YS5jaGlsZCxiLmZsYWdzfD0xMjgsbnVsbDtmPWQuZmFsbGJhY2s7ZT1iLm1vZGU7ZD1xaih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSxlLDAsbnVsbCk7Zj1BaChmLGUsZyxudWxsKTtmLmZsYWdzfD0yO2QucmV0dXJuPWI7Zi5yZXR1cm49YjtkLnNpYmxpbmc9ZjtiLmNoaWxkPWQ7MCE9PShiLm1vZGUmMSkmJkJoKGIsYS5jaGlsZCxudWxsLGcpO2IuY2hpbGQubWVtb2l6ZWRTdGF0ZT1vaihnKTtiLm1lbW9pemVkU3RhdGU9bmo7cmV0dXJuIGZ9aWYoMD09PShiLm1vZGUmMSkpcmV0dXJuIHRqKGEsYixnLG51bGwpO2lmKFwiJCFcIj09PWUuZGF0YSl7ZD1lLm5leHRTaWJsaW5nJiZlLm5leHRTaWJsaW5nLmRhdGFzZXQ7XG5pZihkKXZhciBoPWQuZGdzdDtkPWg7Zj1FcnJvcihwKDQxOSkpO2Q9TGkoZixkLHZvaWQgMCk7cmV0dXJuIHRqKGEsYixnLGQpfWg9MCE9PShnJmEuY2hpbGRMYW5lcyk7aWYoVWd8fGgpe2Q9UjtpZihudWxsIT09ZCl7c3dpdGNoKGcmLWcpe2Nhc2UgNDplPTI7YnJlYWs7Y2FzZSAxNjplPTg7YnJlYWs7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OmU9MzI7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6ZT0yNjg0MzU0NTY7YnJlYWs7ZGVmYXVsdDplPTB9ZT0wIT09KGUmKGQuc3VzcGVuZGVkTGFuZXN8ZykpPzA6ZTtcbjAhPT1lJiZlIT09Zi5yZXRyeUxhbmUmJihmLnJldHJ5TGFuZT1lLFpnKGEsZSksbWgoZCxhLGUsLTEpKX11aigpO2Q9TGkoRXJyb3IocCg0MjEpKSk7cmV0dXJuIHRqKGEsYixnLGQpfWlmKFwiJD9cIj09PWUuZGF0YSlyZXR1cm4gYi5mbGFnc3w9MTI4LGIuY2hpbGQ9YS5jaGlsZCxiPXZqLmJpbmQobnVsbCxhKSxlLl9yZWFjdFJldHJ5PWIsbnVsbDthPWYudHJlZUNvbnRleHQ7eWc9TGYoZS5uZXh0U2libGluZyk7eGc9YjtJPSEwO3pnPW51bGw7bnVsbCE9PWEmJihvZ1twZysrXT1yZyxvZ1twZysrXT1zZyxvZ1twZysrXT1xZyxyZz1hLmlkLHNnPWEub3ZlcmZsb3cscWc9Yik7Yj1yaihiLGQuY2hpbGRyZW4pO2IuZmxhZ3N8PTQwOTY7cmV0dXJuIGJ9ZnVuY3Rpb24gd2ooYSxiLGMpe2EubGFuZXN8PWI7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbCE9PWQmJihkLmxhbmVzfD1iKTtTZyhhLnJldHVybixiLGMpfVxuZnVuY3Rpb24geGooYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWY/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZX06KGYuaXNCYWNrd2FyZHM9YixmLnJlbmRlcmluZz1udWxsLGYucmVuZGVyaW5nU3RhcnRUaW1lPTAsZi5sYXN0PWQsZi50YWlsPWMsZi50YWlsTW9kZT1lKX1cbmZ1bmN0aW9uIHlqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7WWkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9MTI4O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmd2ooYSxjLGIpO2Vsc2UgaWYoMTk9PT1hLnRhZyl3aihhLGMsYik7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUcoTSxkKTtpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09TWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt4aihiLCExLGUsYyxmKTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PU1oKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX14aihiLCEwLGMsbnVsbCxmKTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp4aihiLCExLG51bGwsbnVsbCx2b2lkIDApO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBqaihhLGIpezA9PT0oYi5tb2RlJjEpJiZudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKX1mdW5jdGlvbiAkaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7aGh8PWIubGFuZXM7aWYoMD09PShjJmIuY2hpbGRMYW5lcykpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHAoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPXdoKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz13aChhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gemooYSxiLGMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOmxqKGIpO0lnKCk7YnJlYWs7Y2FzZSA1OktoKGIpO2JyZWFrO2Nhc2UgMTpaZihiLnR5cGUpJiZjZyhiKTticmVhaztjYXNlIDQ6SWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOnZhciBkPWIudHlwZS5fY29udGV4dCxlPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtHKE1nLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWU7YnJlYWs7Y2FzZSAxMzpkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCl7aWYobnVsbCE9PWQuZGVoeWRyYXRlZClyZXR1cm4gRyhNLE0uY3VycmVudCYxKSxiLmZsYWdzfD0xMjgsbnVsbDtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gcGooYSxiLGMpO0coTSxNLmN1cnJlbnQmMSk7YT0kaShhLGIsYyk7cmV0dXJuIG51bGwhPT1hP2Euc2libGluZzpudWxsfUcoTSxNLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZcbmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjEyOCkpe2lmKGQpcmV0dXJuIHlqKGEsYixjKTtiLmZsYWdzfD0xMjh9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtHKE0sTS5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiLmxhbmVzPTAsZWooYSxiLGMpfXJldHVybiAkaShhLGIsYyl9dmFyIEFqLEJqLENqLERqO1xuQWo9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0JqPWZ1bmN0aW9uKCl7fTtcbkNqPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtIaChFaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVlhKGEsZSk7ZD1ZYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9QSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX11YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PWwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiZcbihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHwoYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsXG5jKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRChcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixjKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07RGo9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07XG5mdW5jdGlvbiBFaihhLGIpe2lmKCFJKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBTKGEpe3ZhciBiPW51bGwhPT1hLmFsdGVybmF0ZSYmYS5hbHRlcm5hdGUuY2hpbGQ9PT1hLmNoaWxkLGM9MCxkPTA7aWYoYilmb3IodmFyIGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQsZHw9ZS5mbGFncyYxNDY4MDA2NCxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Vsc2UgZm9yKGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MsZHw9ZS5mbGFncyxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Euc3VidHJlZUZsYWdzfD1kO2EuY2hpbGRMYW5lcz1jO3JldHVybiBifVxuZnVuY3Rpb24gRmooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIFMoYiksbnVsbDtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMzpkPWIuc3RhdGVOb2RlO0poKCk7RShXZik7RShIKTtPaCgpO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClHZyhiKT9iLmZsYWdzfD00Om51bGw9PT1hfHxhLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYwPT09KGIuZmxhZ3MmMjU2KXx8KGIuZmxhZ3N8PTEwMjQsbnVsbCE9PXpnJiYoR2ooemcpLHpnPW51bGwpKTtCaihhLGIpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA1OkxoKGIpO3ZhciBlPUhoKEdoLmN1cnJlbnQpO1xuYz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKUNqKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtTKGIpO3JldHVybiBudWxsfWE9SGgoRWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7ZFtQZl09ZjthPTAhPT0oYi5tb2RlJjEpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGQpO0QoXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmQpO0QoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoZCxmKTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEQoXCJpbnZhbGlkXCIsZCl9dWIoYyxmKTtlPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQudGV4dENvbnRlbnQsaCxhKSxlPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQudGV4dENvbnRlbnQsXG5oLGEpLGU9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTplYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmXCJvblNjcm9sbFwiPT09ZyYmRChcInNjcm9sbFwiLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtkYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPUJmKX1kPWU7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YSYmKGE9a2IoYykpO1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XG5cInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVtPZl09YjthW1BmXT1kO0FqKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTthOntnPXZiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsYSk7RChcImNsb3NlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmEpO0QoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpaYShhLGQpO2U9WWEoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWQ7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGQpO2U9Z2IoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXViKGMsZSk7aD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3NiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZuYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09XG5jfHxcIlwiIT09aykmJm9iKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZvYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGVhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkQoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZ0YShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2RiKGEsZCwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoYSk7amIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1NhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZmIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmZiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLFxuITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1CZil9c3dpdGNoKGMpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ZD0hIWQuYXV0b0ZvY3VzO2JyZWFrIGE7Y2FzZSBcImltZ1wiOmQ9ITA7YnJlYWsgYTtkZWZhdWx0OmQ9ITF9fWQmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mil9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRGooYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7Yz1IaChHaC5jdXJyZW50KTtIaChFaC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2lmKGY9ZC5ub2RlVmFsdWUhPT1jKWlmKGE9XG54ZyxudWxsIT09YSlzd2l0Y2goYS50YWcpe2Nhc2UgMzpBZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKTticmVhaztjYXNlIDU6ITAhPT1hLm1lbW9pemVkUHJvcHMuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKX1mJiYoYi5mbGFnc3w9NCl9ZWxzZSBkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFtPZl09YixiLnN0YXRlTm9kZT1kfVMoYik7cmV0dXJuIG51bGw7Y2FzZSAxMzpFKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsIT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2lmKEkmJm51bGwhPT15ZyYmMCE9PShiLm1vZGUmMSkmJjA9PT0oYi5mbGFncyYxMjgpKUhnKCksSWcoKSxiLmZsYWdzfD05ODU2MCxmPSExO2Vsc2UgaWYoZj1HZyhiKSxudWxsIT09ZCYmbnVsbCE9PWQuZGVoeWRyYXRlZCl7aWYobnVsbD09PVxuYSl7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTgpKTtmPWIubWVtb2l6ZWRTdGF0ZTtmPW51bGwhPT1mP2YuZGVoeWRyYXRlZDpudWxsO2lmKCFmKXRocm93IEVycm9yKHAoMzE3KSk7ZltPZl09Yn1lbHNlIElnKCksMD09PShiLmZsYWdzJjEyOCkmJihiLm1lbW9pemVkU3RhdGU9bnVsbCksYi5mbGFnc3w9NDtTKGIpO2Y9ITF9ZWxzZSBudWxsIT09emcmJihHaih6Zyksemc9bnVsbCksZj0hMDtpZighZilyZXR1cm4gYi5mbGFncyY2NTUzNj9iOm51bGx9aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7ZCE9PShudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkmJmQmJihiLmNoaWxkLmZsYWdzfD04MTkyLDAhPT0oYi5tb2RlJjEpJiYobnVsbD09PWF8fDAhPT0oTS5jdXJyZW50JjEpPzA9PT1UJiYoVD0zKTp1aigpKSk7bnVsbCE9PWIudXBkYXRlUXVldWUmJihiLmZsYWdzfD00KTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gSmgoKSxcbkJqKGEsYiksbnVsbD09PWEmJnNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFMoYiksbnVsbDtjYXNlIDEwOnJldHVybiBSZyhiLnR5cGUuX2NvbnRleHQpLFMoYiksbnVsbDtjYXNlIDE3OnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDE5OkUoTSk7Zj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWYpcmV0dXJuIFMoYiksbnVsbDtkPTAhPT0oYi5mbGFncyYxMjgpO2c9Zi5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZClFaihmLCExKTtlbHNle2lmKDAhPT1UfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9TWgoYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTEyODtFaihmLCExKTtkPWcudXBkYXRlUXVldWU7bnVsbCE9PWQmJihiLnVwZGF0ZVF1ZXVlPWQsYi5mbGFnc3w9NCk7Yi5zdWJ0cmVlRmxhZ3M9MDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0xNDY4MDA2Nixcbmc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5zdWJ0cmVlRmxhZ3M9MCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYuc3VidHJlZUZsYWdzPTAsZi5kZWxldGlvbnM9bnVsbCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxmLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0coTSxNLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPVxuYS5zaWJsaW5nfW51bGwhPT1mLnRhaWwmJkIoKT5IaiYmKGIuZmxhZ3N8PTEyOCxkPSEwLEVqKGYsITEpLGIubGFuZXM9NDE5NDMwNCl9ZWxzZXtpZighZClpZihhPU1oKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD0xMjgsZD0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRWooZiwhMCksbnVsbD09PWYudGFpbCYmXCJoaWRkZW5cIj09PWYudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIUkpcmV0dXJuIFMoYiksbnVsbH1lbHNlIDIqQigpLWYucmVuZGVyaW5nU3RhcnRUaW1lPkhqJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PTEyOCxkPSEwLEVqKGYsITEpLGIubGFuZXM9NDE5NDMwNCk7Zi5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1mLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGYubGFzdD1nKX1pZihudWxsIT09Zi50YWlsKXJldHVybiBiPWYudGFpbCxmLnJlbmRlcmluZz1cbmIsZi50YWlsPWIuc2libGluZyxmLnJlbmRlcmluZ1N0YXJ0VGltZT1CKCksYi5zaWJsaW5nPW51bGwsYz1NLmN1cnJlbnQsRyhNLGQ/YyYxfDI6YyYxKSxiO1MoYik7cmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBJaigpLGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PWQmJihiLmZsYWdzfD04MTkyKSxkJiYwIT09KGIubW9kZSYxKT8wIT09KGdqJjEwNzM3NDE4MjQpJiYoUyhiKSxiLnN1YnRyZWVGbGFncyY2JiYoYi5mbGFnc3w9ODE5MikpOlMoYiksbnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2Nhc2UgMjU6cmV0dXJuIG51bGx9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBKaihhLGIpe3dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLGE9Yi5mbGFncyxhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMzpyZXR1cm4gSmgoKSxFKFdmKSxFKEgpLE9oKCksYT1iLmZsYWdzLDAhPT0oYSY2NTUzNikmJjA9PT0oYSYxMjgpPyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgNTpyZXR1cm4gTGgoYiksbnVsbDtjYXNlIDEzOkUoTSk7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1iLmFsdGVybmF0ZSl0aHJvdyBFcnJvcihwKDM0MCkpO0lnKCl9YT1iLmZsYWdzO3JldHVybiBhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEUoTSksbnVsbDtjYXNlIDQ6cmV0dXJuIEpoKCksbnVsbDtjYXNlIDEwOnJldHVybiBSZyhiLnR5cGUuX2NvbnRleHQpLG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBJaigpLFxubnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fXZhciBLaj0hMSxVPSExLExqPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0LFY9bnVsbDtmdW5jdGlvbiBNaihhLGIpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKGQpe1coYSxiLGQpfWVsc2UgYy5jdXJyZW50PW51bGx9ZnVuY3Rpb24gTmooYSxiLGMpe3RyeXtjKCl9Y2F0Y2goZCl7VyhhLGIsZCl9fXZhciBPaj0hMTtcbmZ1bmN0aW9uIFBqKGEsYil7Q2Y9ZGQ7YT1NZSgpO2lmKE5lKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBjPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntjPShjPWEub3duZXJEb2N1bWVudCkmJmMuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgZD1jLmdldFNlbGVjdGlvbiYmYy5nZXRTZWxlY3Rpb24oKTtpZihkJiYwIT09ZC5yYW5nZUNvdW50KXtjPWQuYW5jaG9yTm9kZTt2YXIgZT1kLmFuY2hvck9mZnNldCxmPWQuZm9jdXNOb2RlO2Q9ZC5mb2N1c09mZnNldDt0cnl7Yy5ub2RlVHlwZSxmLm5vZGVUeXBlfWNhdGNoKEYpe2M9bnVsbDticmVhayBhfXZhciBnPTAsaD0tMSxrPS0xLGw9MCxtPTAscT1hLHI9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB5Ozspe3EhPT1jfHwwIT09ZSYmMyE9PXEubm9kZVR5cGV8fChoPWcrZSk7cSE9PWZ8fDAhPT1kJiYzIT09cS5ub2RlVHlwZXx8KGs9ZytkKTszPT09cS5ub2RlVHlwZSYmKGcrPVxucS5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHk9cS5maXJzdENoaWxkKSlicmVhaztyPXE7cT15fWZvcig7Oyl7aWYocT09PWEpYnJlYWsgYjtyPT09YyYmKytsPT09ZSYmKGg9Zyk7cj09PWYmJisrbT09PWQmJihrPWcpO2lmKG51bGwhPT0oeT1xLm5leHRTaWJsaW5nKSlicmVhaztxPXI7cj1xLnBhcmVudE5vZGV9cT15fWM9LTE9PT1ofHwtMT09PWs/bnVsbDp7c3RhcnQ6aCxlbmQ6a319ZWxzZSBjPW51bGx9Yz1jfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBjPW51bGw7RGY9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Y307ZGQ9ITE7Zm9yKFY9YjtudWxsIT09VjspaWYoYj1WLGE9Yi5jaGlsZCwwIT09KGIuc3VidHJlZUZsYWdzJjEwMjgpJiZudWxsIT09YSlhLnJldHVybj1iLFY9YTtlbHNlIGZvcig7bnVsbCE9PVY7KXtiPVY7dHJ5e3ZhciBuPWIuYWx0ZXJuYXRlO2lmKDAhPT0oYi5mbGFncyYxMDI0KSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6YnJlYWs7XG5jYXNlIDE6aWYobnVsbCE9PW4pe3ZhciB0PW4ubWVtb2l6ZWRQcm9wcyxKPW4ubWVtb2l6ZWRTdGF0ZSx4PWIuc3RhdGVOb2RlLHc9eC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP3Q6TGcoYi50eXBlLHQpLEopO3guX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9d31icmVhaztjYXNlIDM6dmFyIHU9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzsxPT09dS5ub2RlVHlwZT91LnRleHRDb250ZW50PVwiXCI6OT09PXUubm9kZVR5cGUmJnUuZG9jdW1lbnRFbGVtZW50JiZ1LnJlbW92ZUNoaWxkKHUuZG9jdW1lbnRFbGVtZW50KTticmVhaztjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9fWNhdGNoKEYpe1coYixiLnJldHVybixGKX1hPWIuc2libGluZztpZihudWxsIT09YSl7YS5yZXR1cm49Yi5yZXR1cm47Vj1hO2JyZWFrfVY9Yi5yZXR1cm59bj1PajtPaj0hMTtyZXR1cm4gbn1cbmZ1bmN0aW9uIFFqKGEsYixjKXt2YXIgZD1iLnVwZGF0ZVF1ZXVlO2Q9bnVsbCE9PWQ/ZC5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWQpe3ZhciBlPWQ9ZC5uZXh0O2Rve2lmKChlLnRhZyZhKT09PWEpe3ZhciBmPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWYmJk5qKGIsYyxmKX1lPWUubmV4dH13aGlsZShlIT09ZCl9fWZ1bmN0aW9uIFJqKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1mdW5jdGlvbiBTaihhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09Yil7dmFyIGM9YS5zdGF0ZU5vZGU7c3dpdGNoKGEudGFnKXtjYXNlIDU6YT1jO2JyZWFrO2RlZmF1bHQ6YT1jfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yi5jdXJyZW50PWF9fVxuZnVuY3Rpb24gVGooYSl7dmFyIGI9YS5hbHRlcm5hdGU7bnVsbCE9PWImJihhLmFsdGVybmF0ZT1udWxsLFRqKGIpKTthLmNoaWxkPW51bGw7YS5kZWxldGlvbnM9bnVsbDthLnNpYmxpbmc9bnVsbDs1PT09YS50YWcmJihiPWEuc3RhdGVOb2RlLG51bGwhPT1iJiYoZGVsZXRlIGJbT2ZdLGRlbGV0ZSBiW1BmXSxkZWxldGUgYltvZl0sZGVsZXRlIGJbUWZdLGRlbGV0ZSBiW1JmXSkpO2Euc3RhdGVOb2RlPW51bGw7YS5yZXR1cm49bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5zdGF0ZU5vZGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gVWooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBWaihhKXthOmZvcig7Oyl7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxVaihhLnJldHVybikpcmV0dXJuIG51bGw7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2ZvcihhPWEuc2libGluZzs1IT09YS50YWcmJjYhPT1hLnRhZyYmMTghPT1hLnRhZzspe2lmKGEuZmxhZ3MmMiljb250aW51ZSBhO2lmKG51bGw9PT1hLmNoaWxkfHw0PT09YS50YWcpY29udGludWUgYTtlbHNlIGEuY2hpbGQucmV0dXJuPWEsYT1hLmNoaWxkfWlmKCEoYS5mbGFncyYyKSlyZXR1cm4gYS5zdGF0ZU5vZGV9fVxuZnVuY3Rpb24gV2ooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPUJmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspV2ooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gWGooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihYaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVhqKGEsYixjKSxhPWEuc2libGluZ312YXIgWD1udWxsLFlqPSExO2Z1bmN0aW9uIFpqKGEsYixjKXtmb3IoYz1jLmNoaWxkO251bGwhPT1jOylhayhhLGIsYyksYz1jLnNpYmxpbmd9XG5mdW5jdGlvbiBhayhhLGIsYyl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7bGMub25Db21taXRGaWJlclVubW91bnQoa2MsYyl9Y2F0Y2goaCl7fXN3aXRjaChjLnRhZyl7Y2FzZSA1OlV8fE1qKGMsYik7Y2FzZSA2OnZhciBkPVgsZT1ZajtYPW51bGw7WmooYSxiLGMpO1g9ZDtZaj1lO251bGwhPT1YJiYoWWo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjKTphLnJlbW92ZUNoaWxkKGMpKTpYLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSAxODpudWxsIT09WCYmKFlqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9LZihhLnBhcmVudE5vZGUsYyk6MT09PWEubm9kZVR5cGUmJktmKGEsYyksYmQoYSkpOktmKFgsYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDQ6ZD1YO2U9WWo7WD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO1xuWmooYSxiLGMpO1g9ZDtZaj1lO2JyZWFrO2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTppZighVSYmKGQ9Yy51cGRhdGVRdWV1ZSxudWxsIT09ZCYmKGQ9ZC5sYXN0RWZmZWN0LG51bGwhPT1kKSkpe2U9ZD1kLm5leHQ7ZG97dmFyIGY9ZSxnPWYuZGVzdHJveTtmPWYudGFnO3ZvaWQgMCE9PWcmJigwIT09KGYmMik/TmooYyxiLGcpOjAhPT0oZiY0KSYmTmooYyxiLGcpKTtlPWUubmV4dH13aGlsZShlIT09ZCl9WmooYSxiLGMpO2JyZWFrO2Nhc2UgMTppZighVSYmKE1qKGMsYiksZD1jLnN0YXRlTm9kZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsVW5tb3VudCkpdHJ5e2QucHJvcHM9Yy5tZW1vaXplZFByb3BzLGQuc3RhdGU9Yy5tZW1vaXplZFN0YXRlLGQuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChoKXtXKGMsYixoKX1aaihhLGIsYyk7YnJlYWs7Y2FzZSAyMTpaaihhLGIsYyk7YnJlYWs7Y2FzZSAyMjpjLm1vZGUmMT8oVT0oZD1VKXx8bnVsbCE9PVxuYy5tZW1vaXplZFN0YXRlLFpqKGEsYixjKSxVPWQpOlpqKGEsYixjKTticmVhaztkZWZhdWx0OlpqKGEsYixjKX19ZnVuY3Rpb24gYmsoYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgTGopO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1jay5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIGRrKGEsYil7dmFyIGM9Yi5kZWxldGlvbnM7aWYobnVsbCE9PWMpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07dHJ5e3ZhciBmPWEsZz1iLGg9ZzthOmZvcig7bnVsbCE9PWg7KXtzd2l0Y2goaC50YWcpe2Nhc2UgNTpYPWguc3RhdGVOb2RlO1lqPSExO2JyZWFrIGE7Y2FzZSAzOlg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDticmVhayBhO2Nhc2UgNDpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7YnJlYWsgYX1oPWgucmV0dXJufWlmKG51bGw9PT1YKXRocm93IEVycm9yKHAoMTYwKSk7YWsoZixnLGUpO1g9bnVsbDtZaj0hMTt2YXIgaz1lLmFsdGVybmF0ZTtudWxsIT09ayYmKGsucmV0dXJuPW51bGwpO2UucmV0dXJuPW51bGx9Y2F0Y2gobCl7VyhlLGIsbCl9fWlmKGIuc3VidHJlZUZsYWdzJjEyODU0KWZvcihiPWIuY2hpbGQ7bnVsbCE9PWI7KWVrKGIsYSksYj1iLnNpYmxpbmd9XG5mdW5jdGlvbiBlayhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlLGQ9YS5mbGFncztzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpkayhiLGEpO2ZrKGEpO2lmKGQmNCl7dHJ5e1FqKDMsYSxhLnJldHVybiksUmooMyxhKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9dHJ5e1FqKDUsYSxhLnJldHVybil9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDE6ZGsoYixhKTtmayhhKTtkJjUxMiYmbnVsbCE9PWMmJk1qKGMsYy5yZXR1cm4pO2JyZWFrO2Nhc2UgNTpkayhiLGEpO2ZrKGEpO2QmNTEyJiZudWxsIT09YyYmTWooYyxjLnJldHVybik7aWYoYS5mbGFncyYzMil7dmFyIGU9YS5zdGF0ZU5vZGU7dHJ5e29iKGUsXCJcIil9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1pZihkJjQmJihlPWEuc3RhdGVOb2RlLG51bGwhPWUpKXt2YXIgZj1hLm1lbW9pemVkUHJvcHMsZz1udWxsIT09Yz9jLm1lbW9pemVkUHJvcHM6ZixoPWEudHlwZSxrPWEudXBkYXRlUXVldWU7XG5hLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWspdHJ5e1wiaW5wdXRcIj09PWgmJlwicmFkaW9cIj09PWYudHlwZSYmbnVsbCE9Zi5uYW1lJiZhYihlLGYpO3ZiKGgsZyk7dmFyIGw9dmIoaCxmKTtmb3IoZz0wO2c8ay5sZW5ndGg7Zys9Mil7dmFyIG09a1tnXSxxPWtbZysxXTtcInN0eWxlXCI9PT1tP3NiKGUscSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bT9uYihlLHEpOlwiY2hpbGRyZW5cIj09PW0/b2IoZSxxKTp0YShlLG0scSxsKX1zd2l0Y2goaCl7Y2FzZSBcImlucHV0XCI6YmIoZSxmKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihlLGYpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjp2YXIgcj1lLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU7ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZi5tdWx0aXBsZTt2YXIgeT1mLnZhbHVlO251bGwhPXk/ZmIoZSwhIWYubXVsdGlwbGUseSwhMSk6ciE9PSEhZi5tdWx0aXBsZSYmKG51bGwhPWYuZGVmYXVsdFZhbHVlP2ZiKGUsISFmLm11bHRpcGxlLFxuZi5kZWZhdWx0VmFsdWUsITApOmZiKGUsISFmLm11bHRpcGxlLGYubXVsdGlwbGU/W106XCJcIiwhMSkpfWVbUGZdPWZ9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDY6ZGsoYixhKTtmayhhKTtpZihkJjQpe2lmKG51bGw9PT1hLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2MikpO2U9YS5zdGF0ZU5vZGU7Zj1hLm1lbW9pemVkUHJvcHM7dHJ5e2Uubm9kZVZhbHVlPWZ9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDM6ZGsoYixhKTtmayhhKTtpZihkJjQmJm51bGwhPT1jJiZjLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXRyeXtiZChiLmNvbnRhaW5lckluZm8pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX1icmVhaztjYXNlIDQ6ZGsoYixhKTtmayhhKTticmVhaztjYXNlIDEzOmRrKGIsYSk7ZmsoYSk7ZT1hLmNoaWxkO2UuZmxhZ3MmODE5MiYmKGY9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZSxlLnN0YXRlTm9kZS5pc0hpZGRlbj1mLCFmfHxcbm51bGwhPT1lLmFsdGVybmF0ZSYmbnVsbCE9PWUuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGV8fChnaz1CKCkpKTtkJjQmJmJrKGEpO2JyZWFrO2Nhc2UgMjI6bT1udWxsIT09YyYmbnVsbCE9PWMubWVtb2l6ZWRTdGF0ZTthLm1vZGUmMT8oVT0obD1VKXx8bSxkayhiLGEpLFU9bCk6ZGsoYixhKTtmayhhKTtpZihkJjgxOTIpe2w9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZigoYS5zdGF0ZU5vZGUuaXNIaWRkZW49bCkmJiFtJiYwIT09KGEubW9kZSYxKSlmb3IoVj1hLG09YS5jaGlsZDtudWxsIT09bTspe2ZvcihxPVY9bTtudWxsIT09Vjspe3I9Vjt5PXIuY2hpbGQ7c3dpdGNoKHIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6UWooNCxyLHIucmV0dXJuKTticmVhaztjYXNlIDE6TWoocixyLnJldHVybik7dmFyIG49ci5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50V2lsbFVubW91bnQpe2Q9cjtjPXIucmV0dXJuO3RyeXtiPWQsbi5wcm9wcz1cbmIubWVtb2l6ZWRQcm9wcyxuLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxuLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2godCl7VyhkLGMsdCl9fWJyZWFrO2Nhc2UgNTpNaihyLHIucmV0dXJuKTticmVhaztjYXNlIDIyOmlmKG51bGwhPT1yLm1lbW9pemVkU3RhdGUpe2hrKHEpO2NvbnRpbnVlfX1udWxsIT09eT8oeS5yZXR1cm49cixWPXkpOmhrKHEpfW09bS5zaWJsaW5nfWE6Zm9yKG09bnVsbCxxPWE7Oyl7aWYoNT09PXEudGFnKXtpZihudWxsPT09bSl7bT1xO3RyeXtlPXEuc3RhdGVOb2RlLGw/KGY9ZS5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGg9cS5zdGF0ZU5vZGUsaz1xLm1lbW9pemVkUHJvcHMuc3R5bGUsZz12b2lkIDAhPT1rJiZudWxsIT09ayYmay5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ay5kaXNwbGF5Om51bGwsaC5zdHlsZS5kaXNwbGF5PVxucmIoXCJkaXNwbGF5XCIsZykpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19fWVsc2UgaWYoNj09PXEudGFnKXtpZihudWxsPT09bSl0cnl7cS5zdGF0ZU5vZGUubm9kZVZhbHVlPWw/XCJcIjpxLm1lbW9pemVkUHJvcHN9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1lbHNlIGlmKCgyMiE9PXEudGFnJiYyMyE9PXEudGFnfHxudWxsPT09cS5tZW1vaXplZFN0YXRlfHxxPT09YSkmJm51bGwhPT1xLmNoaWxkKXtxLmNoaWxkLnJldHVybj1xO3E9cS5jaGlsZDtjb250aW51ZX1pZihxPT09YSlicmVhayBhO2Zvcig7bnVsbD09PXEuc2libGluZzspe2lmKG51bGw9PT1xLnJldHVybnx8cS5yZXR1cm49PT1hKWJyZWFrIGE7bT09PXEmJihtPW51bGwpO3E9cS5yZXR1cm59bT09PXEmJihtPW51bGwpO3Euc2libGluZy5yZXR1cm49cS5yZXR1cm47cT1xLnNpYmxpbmd9fWJyZWFrO2Nhc2UgMTk6ZGsoYixhKTtmayhhKTtkJjQmJmJrKGEpO2JyZWFrO2Nhc2UgMjE6YnJlYWs7ZGVmYXVsdDpkayhiLFxuYSksZmsoYSl9fWZ1bmN0aW9uIGZrKGEpe3ZhciBiPWEuZmxhZ3M7aWYoYiYyKXt0cnl7YTp7Zm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoVWooYykpe3ZhciBkPWM7YnJlYWsgYX1jPWMucmV0dXJufXRocm93IEVycm9yKHAoMTYwKSk7fXN3aXRjaChkLnRhZyl7Y2FzZSA1OnZhciBlPWQuc3RhdGVOb2RlO2QuZmxhZ3MmMzImJihvYihlLFwiXCIpLGQuZmxhZ3MmPS0zMyk7dmFyIGY9VmooYSk7WGooYSxmLGUpO2JyZWFrO2Nhc2UgMzpjYXNlIDQ6dmFyIGc9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxoPVZqKGEpO1dqKGEsaCxnKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYxKSk7fX1jYXRjaChrKXtXKGEsYS5yZXR1cm4sayl9YS5mbGFncyY9LTN9YiY0MDk2JiYoYS5mbGFncyY9LTQwOTcpfWZ1bmN0aW9uIGlrKGEsYixjKXtWPWE7amsoYSxiLGMpfVxuZnVuY3Rpb24gamsoYSxiLGMpe2Zvcih2YXIgZD0wIT09KGEubW9kZSYxKTtudWxsIT09Vjspe3ZhciBlPVYsZj1lLmNoaWxkO2lmKDIyPT09ZS50YWcmJmQpe3ZhciBnPW51bGwhPT1lLm1lbW9pemVkU3RhdGV8fEtqO2lmKCFnKXt2YXIgaD1lLmFsdGVybmF0ZSxrPW51bGwhPT1oJiZudWxsIT09aC5tZW1vaXplZFN0YXRlfHxVO2g9S2o7dmFyIGw9VTtLaj1nO2lmKChVPWspJiYhbClmb3IoVj1lO251bGwhPT1WOylnPVYsaz1nLmNoaWxkLDIyPT09Zy50YWcmJm51bGwhPT1nLm1lbW9pemVkU3RhdGU/a2soZSk6bnVsbCE9PWs/KGsucmV0dXJuPWcsVj1rKTprayhlKTtmb3IoO251bGwhPT1mOylWPWYsamsoZixiLGMpLGY9Zi5zaWJsaW5nO1Y9ZTtLaj1oO1U9bH1sayhhLGIsYyl9ZWxzZSAwIT09KGUuc3VidHJlZUZsYWdzJjg3NzIpJiZudWxsIT09Zj8oZi5yZXR1cm49ZSxWPWYpOmxrKGEsYixjKX19XG5mdW5jdGlvbiBsayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9VjtpZigwIT09KGIuZmxhZ3MmODc3Mikpe3ZhciBjPWIuYWx0ZXJuYXRlO3RyeXtpZigwIT09KGIuZmxhZ3MmODc3Mikpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlV8fFJqKDUsYik7YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKGIuZmxhZ3MmNCYmIVUpaWYobnVsbD09PWMpZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGU9Yi5lbGVtZW50VHlwZT09PWIudHlwZT9jLm1lbW9pemVkUHJvcHM6TGcoYi50eXBlLGMubWVtb2l6ZWRQcm9wcyk7ZC5jb21wb25lbnREaWRVcGRhdGUoZSxjLm1lbW9pemVkU3RhdGUsZC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIGY9Yi51cGRhdGVRdWV1ZTtudWxsIT09ZiYmaWgoYixmLGQpO2JyZWFrO2Nhc2UgMzp2YXIgZz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1nKXtjPW51bGw7aWYobnVsbCE9PWIuY2hpbGQpc3dpdGNoKGIuY2hpbGQudGFnKXtjYXNlIDU6Yz1cbmIuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpjPWIuY2hpbGQuc3RhdGVOb2RlfWloKGIsZyxjKX1icmVhaztjYXNlIDU6dmFyIGg9Yi5zdGF0ZU5vZGU7aWYobnVsbD09PWMmJmIuZmxhZ3MmNCl7Yz1oO3ZhciBrPWIubWVtb2l6ZWRQcm9wcztzd2l0Y2goYi50eXBlKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmsuYXV0b0ZvY3VzJiZjLmZvY3VzKCk7YnJlYWs7Y2FzZSBcImltZ1wiOmsuc3JjJiYoYy5zcmM9ay5zcmMpfX1icmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzppZihudWxsPT09Yi5tZW1vaXplZFN0YXRlKXt2YXIgbD1iLmFsdGVybmF0ZTtpZihudWxsIT09bCl7dmFyIG09bC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1tKXt2YXIgcT1tLmRlaHlkcmF0ZWQ7bnVsbCE9PXEmJmJkKHEpfX19YnJlYWs7Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjE6Y2FzZSAyMjpjYXNlIDIzOmNhc2UgMjU6YnJlYWs7XG5kZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fVV8fGIuZmxhZ3MmNTEyJiZTaihiKX1jYXRjaChyKXtXKGIsYi5yZXR1cm4scil9fWlmKGI9PT1hKXtWPW51bGw7YnJlYWt9Yz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1mdW5jdGlvbiBoayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9VjtpZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBjPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fVxuZnVuY3Rpb24ga2soYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7dHJ5e3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp2YXIgYz1iLnJldHVybjt0cnl7UmooNCxiKX1jYXRjaChrKXtXKGIsYyxrKX1icmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQpe3ZhciBlPWIucmV0dXJuO3RyeXtkLmNvbXBvbmVudERpZE1vdW50KCl9Y2F0Y2goayl7VyhiLGUsayl9fXZhciBmPWIucmV0dXJuO3RyeXtTaihiKX1jYXRjaChrKXtXKGIsZixrKX1icmVhaztjYXNlIDU6dmFyIGc9Yi5yZXR1cm47dHJ5e1NqKGIpfWNhdGNoKGspe1coYixnLGspfX19Y2F0Y2goayl7VyhiLGIucmV0dXJuLGspfWlmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGg9Yi5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1iLnJldHVybjtWPWg7YnJlYWt9Vj1iLnJldHVybn19XG52YXIgbWs9TWF0aC5jZWlsLG5rPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsb2s9dWEuUmVhY3RDdXJyZW50T3duZXIscGs9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsSz0wLFI9bnVsbCxZPW51bGwsWj0wLGdqPTAsZmo9VWYoMCksVD0wLHFrPW51bGwsaGg9MCxyaz0wLHNrPTAsdGs9bnVsbCx1az1udWxsLGdrPTAsSGo9SW5maW5pdHksdms9bnVsbCxQaT0hMSxRaT1udWxsLFNpPW51bGwsd2s9ITEseGs9bnVsbCx5az0wLHprPTAsQWs9bnVsbCxCaz0tMSxDaz0wO2Z1bmN0aW9uIEwoKXtyZXR1cm4gMCE9PShLJjYpP0IoKTotMSE9PUJrP0JrOkJrPUIoKX1cbmZ1bmN0aW9uIGxoKGEpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiAxO2lmKDAhPT0oSyYyKSYmMCE9PVopcmV0dXJuIFomLVo7aWYobnVsbCE9PUtnLnRyYW5zaXRpb24pcmV0dXJuIDA9PT1DayYmKENrPXljKCkpLENrO2E9QztpZigwIT09YSlyZXR1cm4gYTthPXdpbmRvdy5ldmVudDthPXZvaWQgMD09PWE/MTY6amQoYS50eXBlKTtyZXR1cm4gYX1mdW5jdGlvbiBtaChhLGIsYyxkKXtpZig1MDx6ayl0aHJvdyB6az0wLEFrPW51bGwsRXJyb3IocCgxODUpKTtBYyhhLGMsZCk7aWYoMD09PShLJjIpfHxhIT09UilhPT09UiYmKDA9PT0oSyYyKSYmKHJrfD1jKSw0PT09VCYmRGsoYSxaKSksRWsoYSxkKSwxPT09YyYmMD09PUsmJjA9PT0oYi5tb2RlJjEpJiYoSGo9QigpKzUwMCxmZyYmamcoKSl9XG5mdW5jdGlvbiBFayhhLGIpe3ZhciBjPWEuY2FsbGJhY2tOb2RlO3djKGEsYik7dmFyIGQ9dWMoYSxhPT09Uj9aOjApO2lmKDA9PT1kKW51bGwhPT1jJiZiYyhjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wO2Vsc2UgaWYoYj1kJi1kLGEuY2FsbGJhY2tQcmlvcml0eSE9PWIpe251bGwhPWMmJmJjKGMpO2lmKDE9PT1iKTA9PT1hLnRhZz9pZyhGay5iaW5kKG51bGwsYSkpOmhnKEZrLmJpbmQobnVsbCxhKSksSmYoZnVuY3Rpb24oKXswPT09KEsmNikmJmpnKCl9KSxjPW51bGw7ZWxzZXtzd2l0Y2goRGMoZCkpe2Nhc2UgMTpjPWZjO2JyZWFrO2Nhc2UgNDpjPWdjO2JyZWFrO2Nhc2UgMTY6Yz1oYzticmVhaztjYXNlIDUzNjg3MDkxMjpjPWpjO2JyZWFrO2RlZmF1bHQ6Yz1oY31jPUdrKGMsSGsuYmluZChudWxsLGEpKX1hLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIEhrKGEsYil7Qms9LTE7Q2s9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTt2YXIgYz1hLmNhbGxiYWNrTm9kZTtpZihJaygpJiZhLmNhbGxiYWNrTm9kZSE9PWMpcmV0dXJuIG51bGw7dmFyIGQ9dWMoYSxhPT09Uj9aOjApO2lmKDA9PT1kKXJldHVybiBudWxsO2lmKDAhPT0oZCYzMCl8fDAhPT0oZCZhLmV4cGlyZWRMYW5lcyl8fGIpYj1KayhhLGQpO2Vsc2V7Yj1kO3ZhciBlPUs7S3w9Mjt2YXIgZj1LaygpO2lmKFIhPT1hfHxaIT09Yil2az1udWxsLEhqPUIoKSs1MDAsTGsoYSxiKTtkbyB0cnl7TWsoKTticmVha31jYXRjaChoKXtOayhhLGgpfXdoaWxlKDEpO1FnKCk7bmsuY3VycmVudD1mO0s9ZTtudWxsIT09WT9iPTA6KFI9bnVsbCxaPTAsYj1UKX1pZigwIT09Yil7Mj09PWImJihlPXhjKGEpLDAhPT1lJiYoZD1lLGI9T2soYSxlKSkpO2lmKDE9PT1iKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGQpLEVrKGEsQigpKSxjO2lmKDY9PT1iKURrKGEsZCk7XG5lbHNle2U9YS5jdXJyZW50LmFsdGVybmF0ZTtpZigwPT09KGQmMzApJiYhUGsoZSkmJihiPUprKGEsZCksMj09PWImJihmPXhjKGEpLDAhPT1mJiYoZD1mLGI9T2soYSxmKSkpLDE9PT1iKSl0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxkKSxFayhhLEIoKSksYzthLmZpbmlzaGVkV29yaz1lO2EuZmluaXNoZWRMYW5lcz1kO3N3aXRjaChiKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHAoMzQ1KSk7Y2FzZSAyOlFrKGEsdWssdmspO2JyZWFrO2Nhc2UgMzpEayhhLGQpO2lmKChkJjEzMDAyMzQyNCk9PT1kJiYoYj1nays1MDAtQigpLDEwPGIpKXtpZigwIT09dWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmZCkhPT1kKXtMKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1GZihRay5iaW5kKG51bGwsYSx1ayx2ayksYik7YnJlYWt9UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSA0OkRrKGEsZCk7aWYoKGQmNDE5NDI0MCk9PT1cbmQpYnJlYWs7Yj1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxkOyl7dmFyIGc9MzEtb2MoZCk7Zj0xPDxnO2c9YltnXTtnPmUmJihlPWcpO2QmPX5mfWQ9ZTtkPUIoKS1kO2Q9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqbWsoZC8xOTYwKSktZDtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9RmYoUWsuYmluZChudWxsLGEsdWssdmspLGQpO2JyZWFrfVFrKGEsdWssdmspO2JyZWFrO2Nhc2UgNTpRayhhLHVrLHZrKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzI5KSk7fX19RWsoYSxCKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWM/SGsuYmluZChudWxsLGEpOm51bGx9XG5mdW5jdGlvbiBPayhhLGIpe3ZhciBjPXRrO2EuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmKExrKGEsYikuZmxhZ3N8PTI1Nik7YT1KayhhLGIpOzIhPT1hJiYoYj11ayx1az1jLG51bGwhPT1iJiZHaihiKSk7cmV0dXJuIGF9ZnVuY3Rpb24gR2ooYSl7bnVsbD09PXVrP3VrPWE6dWsucHVzaC5hcHBseSh1ayxhKX1cbmZ1bmN0aW9uIFBrKGEpe2Zvcih2YXIgYj1hOzspe2lmKGIuZmxhZ3MmMTYzODQpe3ZhciBjPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWMmJihjPWMuc3RvcmVzLG51bGwhPT1jKSlmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXSxmPWUuZ2V0U25hcHNob3Q7ZT1lLnZhbHVlO3RyeXtpZighSGUoZigpLGUpKXJldHVybiExfWNhdGNoKGcpe3JldHVybiExfX19Yz1iLmNoaWxkO2lmKGIuc3VidHJlZUZsYWdzJjE2Mzg0JiZudWxsIT09YyljLnJldHVybj1iLGI9YztlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiEwO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuITB9XG5mdW5jdGlvbiBEayhhLGIpe2ImPX5zaztiJj1+cms7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1vYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19ZnVuY3Rpb24gRmsoYSl7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7SWsoKTt2YXIgYj11YyhhLDApO2lmKDA9PT0oYiYxKSlyZXR1cm4gRWsoYSxCKCkpLG51bGw7dmFyIGM9SmsoYSxiKTtpZigwIT09YS50YWcmJjI9PT1jKXt2YXIgZD14YyhhKTswIT09ZCYmKGI9ZCxjPU9rKGEsZCkpfWlmKDE9PT1jKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGIpLEVrKGEsQigpKSxjO2lmKDY9PT1jKXRocm93IEVycm9yKHAoMzQ1KSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtRayhhLHVrLHZrKTtFayhhLEIoKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBSayhhLGIpe3ZhciBjPUs7S3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtLPWMsMD09PUsmJihIaj1CKCkrNTAwLGZnJiZqZygpKX19ZnVuY3Rpb24gU2soYSl7bnVsbCE9PXhrJiYwPT09eGsudGFnJiYwPT09KEsmNikmJklrKCk7dmFyIGI9SztLfD0xO3ZhciBjPXBrLnRyYW5zaXRpb24sZD1DO3RyeXtpZihway50cmFuc2l0aW9uPW51bGwsQz0xLGEpcmV0dXJuIGEoKX1maW5hbGx5e0M9ZCxway50cmFuc2l0aW9uPWMsSz1iLDA9PT0oSyY2KSYmamcoKX19ZnVuY3Rpb24gSWooKXtnaj1mai5jdXJyZW50O0UoZmopfVxuZnVuY3Rpb24gTGsoYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsR2YoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yzt3ZyhkKTtzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmJGYoKTticmVhaztjYXNlIDM6SmgoKTtFKFdmKTtFKEgpO09oKCk7YnJlYWs7Y2FzZSA1OkxoKGQpO2JyZWFrO2Nhc2UgNDpKaCgpO2JyZWFrO2Nhc2UgMTM6RShNKTticmVhaztjYXNlIDE5OkUoTSk7YnJlYWs7Y2FzZSAxMDpSZyhkLnR5cGUuX2NvbnRleHQpO2JyZWFrO2Nhc2UgMjI6Y2FzZSAyMzpJaigpfWM9Yy5yZXR1cm59Uj1hO1k9YT13aChhLmN1cnJlbnQsbnVsbCk7Wj1naj1iO1Q9MDtxaz1udWxsO3NrPXJrPWhoPTA7dWs9dGs9bnVsbDtpZihudWxsIT09V2cpe2ZvcihiPVxuMDtiPFdnLmxlbmd0aDtiKyspaWYoYz1XZ1tiXSxkPWMuaW50ZXJsZWF2ZWQsbnVsbCE9PWQpe2MuaW50ZXJsZWF2ZWQ9bnVsbDt2YXIgZT1kLm5leHQsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe3ZhciBnPWYubmV4dDtmLm5leHQ9ZTtkLm5leHQ9Z31jLnBlbmRpbmc9ZH1XZz1udWxsfXJldHVybiBhfVxuZnVuY3Rpb24gTmsoYSxiKXtkb3t2YXIgYz1ZO3RyeXtRZygpO1BoLmN1cnJlbnQ9YWk7aWYoU2gpe2Zvcih2YXIgZD1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fVNoPSExfVJoPTA7UD1PPU49bnVsbDtUaD0hMTtVaD0wO29rLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtUPTE7cWs9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1aO2guZmxhZ3N8PTMyNzY4O2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWssbT1oLHE9bS50YWc7aWYoMD09PShtLm1vZGUmMSkmJigwPT09cXx8MTE9PT1xfHwxNT09PXEpKXt2YXIgcj1tLmFsdGVybmF0ZTtyPyhtLnVwZGF0ZVF1ZXVlPXIudXBkYXRlUXVldWUsbS5tZW1vaXplZFN0YXRlPXIubWVtb2l6ZWRTdGF0ZSxcbm0ubGFuZXM9ci5sYW5lcyk6KG0udXBkYXRlUXVldWU9bnVsbCxtLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIHk9VmkoZyk7aWYobnVsbCE9PXkpe3kuZmxhZ3MmPS0yNTc7V2koeSxnLGgsZixiKTt5Lm1vZGUmMSYmVGkoZixsLGIpO2I9eTtrPWw7dmFyIG49Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09bil7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtiLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBuLmFkZChrKTticmVhayBhfWVsc2V7aWYoMD09PShiJjEpKXtUaShmLGwsYik7dWooKTticmVhayBhfWs9RXJyb3IocCg0MjYpKX19ZWxzZSBpZihJJiZoLm1vZGUmMSl7dmFyIEo9VmkoZyk7aWYobnVsbCE9PUopezA9PT0oSi5mbGFncyY2NTUzNikmJihKLmZsYWdzfD0yNTYpO1dpKEosZyxoLGYsYik7SmcoS2koayxoKSk7YnJlYWsgYX19Zj1rPUtpKGssaCk7NCE9PVQmJihUPTIpO251bGw9PT10az90az1bZl06dGsucHVzaChmKTtmPWc7ZG97c3dpdGNoKGYudGFnKXtjYXNlIDM6Zi5mbGFnc3w9NjU1MzY7XG5iJj0tYjtmLmxhbmVzfD1iO3ZhciB4PU9pKGYsayxiKTtmaChmLHgpO2JyZWFrIGE7Y2FzZSAxOmg9azt2YXIgdz1mLnR5cGUsdT1mLnN0YXRlTm9kZTtpZigwPT09KGYuZmxhZ3MmMTI4KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1LmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVNpfHwhU2kuaGFzKHUpKSkpe2YuZmxhZ3N8PTY1NTM2O2ImPS1iO2YubGFuZXN8PWI7dmFyIEY9UmkoZixoLGIpO2ZoKGYsRik7YnJlYWsgYX19Zj1mLnJldHVybn13aGlsZShudWxsIT09Zil9VGsoYyl9Y2F0Y2gobmEpe2I9bmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1mdW5jdGlvbiBLaygpe3ZhciBhPW5rLmN1cnJlbnQ7bmsuY3VycmVudD1haTtyZXR1cm4gbnVsbD09PWE/YWk6YX1cbmZ1bmN0aW9uIHVqKCl7aWYoMD09PVR8fDM9PT1UfHwyPT09VClUPTQ7bnVsbD09PVJ8fDA9PT0oaGgmMjY4NDM1NDU1KSYmMD09PShyayYyNjg0MzU0NTUpfHxEayhSLFopfWZ1bmN0aW9uIEprKGEsYil7dmFyIGM9SztLfD0yO3ZhciBkPUtrKCk7aWYoUiE9PWF8fFohPT1iKXZrPW51bGwsTGsoYSxiKTtkbyB0cnl7VWsoKTticmVha31jYXRjaChlKXtOayhhLGUpfXdoaWxlKDEpO1FnKCk7Sz1jO25rLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcihwKDI2MSkpO1I9bnVsbDtaPTA7cmV0dXJuIFR9ZnVuY3Rpb24gVWsoKXtmb3IoO251bGwhPT1ZOylWayhZKX1mdW5jdGlvbiBNaygpe2Zvcig7bnVsbCE9PVkmJiFjYygpOylWayhZKX1mdW5jdGlvbiBWayhhKXt2YXIgYj1XayhhLmFsdGVybmF0ZSxhLGdqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/VGsoYSk6WT1iO29rLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFRrKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMzI3NjgpKXtpZihjPUZqKGMsYixnaiksbnVsbCE9PWMpe1k9YztyZXR1cm59fWVsc2V7Yz1KaihjLGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0zMjc2NztZPWM7cmV0dXJufWlmKG51bGwhPT1hKWEuZmxhZ3N8PTMyNzY4LGEuc3VidHJlZUZsYWdzPTAsYS5kZWxldGlvbnM9bnVsbDtlbHNle1Q9NjtZPW51bGw7cmV0dXJufX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVQmJihUPTUpfWZ1bmN0aW9uIFFrKGEsYixjKXt2YXIgZD1DLGU9cGsudHJhbnNpdGlvbjt0cnl7cGsudHJhbnNpdGlvbj1udWxsLEM9MSxYayhhLGIsYyxkKX1maW5hbGx5e3BrLnRyYW5zaXRpb249ZSxDPWR9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBYayhhLGIsYyxkKXtkbyBJaygpO3doaWxlKG51bGwhPT14ayk7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7Yz1hLmZpbmlzaGVkV29yazt2YXIgZT1hLmZpbmlzaGVkTGFuZXM7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHAoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrUHJpb3JpdHk9MDt2YXIgZj1jLmxhbmVzfGMuY2hpbGRMYW5lcztCYyhhLGYpO2E9PT1SJiYoWT1SPW51bGwsWj0wKTswPT09KGMuc3VidHJlZUZsYWdzJjIwNjQpJiYwPT09KGMuZmxhZ3MmMjA2NCl8fHdrfHwod2s9ITAsR2soaGMsZnVuY3Rpb24oKXtJaygpO3JldHVybiBudWxsfSkpO2Y9MCE9PShjLmZsYWdzJjE1OTkwKTtpZigwIT09KGMuc3VidHJlZUZsYWdzJjE1OTkwKXx8Zil7Zj1way50cmFuc2l0aW9uO3BrLnRyYW5zaXRpb249bnVsbDtcbnZhciBnPUM7Qz0xO3ZhciBoPUs7S3w9NDtvay5jdXJyZW50PW51bGw7UGooYSxjKTtlayhjLGEpO09lKERmKTtkZD0hIUNmO0RmPUNmPW51bGw7YS5jdXJyZW50PWM7aWsoYyxhLGUpO2RjKCk7Sz1oO0M9Zztway50cmFuc2l0aW9uPWZ9ZWxzZSBhLmN1cnJlbnQ9Yzt3ayYmKHdrPSExLHhrPWEseWs9ZSk7Zj1hLnBlbmRpbmdMYW5lczswPT09ZiYmKFNpPW51bGwpO21jKGMuc3RhdGVOb2RlLGQpO0VrKGEsQigpKTtpZihudWxsIT09Yilmb3IoZD1hLm9uUmVjb3ZlcmFibGVFcnJvcixjPTA7YzxiLmxlbmd0aDtjKyspZT1iW2NdLGQoZS52YWx1ZSx7Y29tcG9uZW50U3RhY2s6ZS5zdGFjayxkaWdlc3Q6ZS5kaWdlc3R9KTtpZihQaSl0aHJvdyBQaT0hMSxhPVFpLFFpPW51bGwsYTswIT09KHlrJjEpJiYwIT09YS50YWcmJklrKCk7Zj1hLnBlbmRpbmdMYW5lczswIT09KGYmMSk/YT09PUFrP3prKys6KHprPTAsQWs9YSk6ems9MDtqZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gSWsoKXtpZihudWxsIT09eGspe3ZhciBhPURjKHlrKSxiPXBrLnRyYW5zaXRpb24sYz1DO3RyeXtway50cmFuc2l0aW9uPW51bGw7Qz0xNj5hPzE2OmE7aWYobnVsbD09PXhrKXZhciBkPSExO2Vsc2V7YT14azt4az1udWxsO3lrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzMxKSk7dmFyIGU9SztLfD00O2ZvcihWPWEuY3VycmVudDtudWxsIT09Vjspe3ZhciBmPVYsZz1mLmNoaWxkO2lmKDAhPT0oVi5mbGFncyYxNikpe3ZhciBoPWYuZGVsZXRpb25zO2lmKG51bGwhPT1oKXtmb3IodmFyIGs9MDtrPGgubGVuZ3RoO2srKyl7dmFyIGw9aFtrXTtmb3IoVj1sO251bGwhPT1WOyl7dmFyIG09Vjtzd2l0Y2gobS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UWooOCxtLGYpfXZhciBxPW0uY2hpbGQ7aWYobnVsbCE9PXEpcS5yZXR1cm49bSxWPXE7ZWxzZSBmb3IoO251bGwhPT1WOyl7bT1WO3ZhciByPW0uc2libGluZyx5PW0ucmV0dXJuO1RqKG0pO2lmKG09PT1cbmwpe1Y9bnVsbDticmVha31pZihudWxsIT09cil7ci5yZXR1cm49eTtWPXI7YnJlYWt9Vj15fX19dmFyIG49Zi5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe3ZhciB0PW4uY2hpbGQ7aWYobnVsbCE9PXQpe24uY2hpbGQ9bnVsbDtkb3t2YXIgSj10LnNpYmxpbmc7dC5zaWJsaW5nPW51bGw7dD1KfXdoaWxlKG51bGwhPT10KX19Vj1mfX1pZigwIT09KGYuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09ZylnLnJldHVybj1mLFY9ZztlbHNlIGI6Zm9yKDtudWxsIT09Vjspe2Y9VjtpZigwIT09KGYuZmxhZ3MmMjA0OCkpc3dpdGNoKGYudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDksZixmLnJldHVybil9dmFyIHg9Zi5zaWJsaW5nO2lmKG51bGwhPT14KXt4LnJldHVybj1mLnJldHVybjtWPXg7YnJlYWsgYn1WPWYucmV0dXJufX12YXIgdz1hLmN1cnJlbnQ7Zm9yKFY9dztudWxsIT09Vjspe2c9Vjt2YXIgdT1nLmNoaWxkO2lmKDAhPT0oZy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1cbnUpdS5yZXR1cm49ZyxWPXU7ZWxzZSBiOmZvcihnPXc7bnVsbCE9PVY7KXtoPVY7aWYoMCE9PShoLmZsYWdzJjIwNDgpKXRyeXtzd2l0Y2goaC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UmooOSxoKX19Y2F0Y2gobmEpe1coaCxoLnJldHVybixuYSl9aWYoaD09PWcpe1Y9bnVsbDticmVhayBifXZhciBGPWguc2libGluZztpZihudWxsIT09Ril7Ri5yZXR1cm49aC5yZXR1cm47Vj1GO2JyZWFrIGJ9Vj1oLnJldHVybn19Sz1lO2pnKCk7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vblBvc3RDb21taXRGaWJlclJvb3QpdHJ5e2xjLm9uUG9zdENvbW1pdEZpYmVyUm9vdChrYyxhKX1jYXRjaChuYSl7fWQ9ITB9cmV0dXJuIGR9ZmluYWxseXtDPWMscGsudHJhbnNpdGlvbj1ifX1yZXR1cm4hMX1mdW5jdGlvbiBZayhhLGIsYyl7Yj1LaShjLGIpO2I9T2koYSxiLDEpO2E9ZGgoYSxiLDEpO2I9TCgpO251bGwhPT1hJiYoQWMoYSwxLGIpLEVrKGEsYikpfVxuZnVuY3Rpb24gVyhhLGIsYyl7aWYoMz09PWEudGFnKVlrKGEsYSxjKTtlbHNlIGZvcig7bnVsbCE9PWI7KXtpZigzPT09Yi50YWcpe1lrKGIsYSxjKTticmVha31lbHNlIGlmKDE9PT1iLnRhZyl7dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVNpfHwhU2kuaGFzKGQpKSl7YT1LaShjLGEpO2E9UmkoYixhLDEpO2I9ZGgoYixhLDEpO2E9TCgpO251bGwhPT1iJiYoQWMoYiwxLGEpLEVrKGIsYSkpO2JyZWFrfX1iPWIucmV0dXJufX1cbmZ1bmN0aW9uIFVpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1MKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1I9PT1hJiYoWiZjKT09PWMmJig0PT09VHx8Mz09PVQmJihaJjEzMDAyMzQyNCk9PT1aJiY1MDA+QigpLWdrP0xrKGEsMCk6c2t8PWMpO0VrKGEsYil9ZnVuY3Rpb24gWmsoYSxiKXswPT09YiYmKDA9PT0oYS5tb2RlJjEpP2I9MTooYj1zYyxzYzw8PTEsMD09PShzYyYxMzAwMjM0MjQpJiYoc2M9NDE5NDMwNCkpKTt2YXIgYz1MKCk7YT1aZyhhLGIpO251bGwhPT1hJiYoQWMoYSxiLGMpLEVrKGEsYykpfWZ1bmN0aW9uIHZqKGEpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZSxjPTA7bnVsbCE9PWImJihjPWIucmV0cnlMYW5lKTtaayhhLGMpfVxuZnVuY3Rpb24gY2soYSxiKXt2YXIgYz0wO3N3aXRjaChhLnRhZyl7Y2FzZSAxMzp2YXIgZD1hLnN0YXRlTm9kZTt2YXIgZT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihjPWUucmV0cnlMYW5lKTticmVhaztjYXNlIDE5OmQ9YS5zdGF0ZU5vZGU7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMxNCkpO31udWxsIT09ZCYmZC5kZWxldGUoYik7WmsoYSxjKX12YXIgV2s7XG5Xaz1mdW5jdGlvbihhLGIsYyl7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fFdmLmN1cnJlbnQpVWc9ITA7ZWxzZXtpZigwPT09KGEubGFuZXMmYykmJjA9PT0oYi5mbGFncyYxMjgpKXJldHVybiBVZz0hMSx6aihhLGIsYyk7VWc9MCE9PShhLmZsYWdzJjEzMTA3Mik/ITA6ITF9ZWxzZSBVZz0hMSxJJiYwIT09KGIuZmxhZ3MmMTA0ODU3NikmJnVnKGIsbmcsYi5pbmRleCk7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOnZhciBkPWIudHlwZTtqaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9WWYoYixILmN1cnJlbnQpO1RnKGIsYyk7ZT1YaChudWxsLGIsZCxhLGUsYyk7dmFyIGY9YmkoKTtiLmZsYWdzfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZj8oYi50YWc9MSxiLm1lbW9pemVkU3RhdGU9bnVsbCxiLnVwZGF0ZVF1ZXVlPVxubnVsbCxaZihkKT8oZj0hMCxjZyhiKSk6Zj0hMSxiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsLGFoKGIpLGUudXBkYXRlcj1uaCxiLnN0YXRlTm9kZT1lLGUuX3JlYWN0SW50ZXJuYWxzPWIscmgoYixkLGEsYyksYj1raihudWxsLGIsZCwhMCxmLGMpKTooYi50YWc9MCxJJiZmJiZ2ZyhiKSxZaShudWxsLGIsZSxjKSxiPWIuY2hpbGQpO3JldHVybiBiO2Nhc2UgMTY6ZD1iLmVsZW1lbnRUeXBlO2E6e2pqKGEsYik7YT1iLnBlbmRpbmdQcm9wcztlPWQuX2luaXQ7ZD1lKGQuX3BheWxvYWQpO2IudHlwZT1kO2U9Yi50YWc9JGsoZCk7YT1MZyhkLGEpO3N3aXRjaChlKXtjYXNlIDA6Yj1kaihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9aWoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1aaShudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWFqKG51bGwsYixkLExnKGQudHlwZSxhKSxjKTticmVhayBhfXRocm93IEVycm9yKHAoMzA2LFxuZCxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxkaihhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxpaihhLGIsZCxlLGMpO2Nhc2UgMzphOntsaihiKTtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDM4NykpO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkU3RhdGU7ZT1mLmVsZW1lbnQ7YmgoYSxiKTtnaChiLGQsbnVsbCxjKTt2YXIgZz1iLm1lbW9pemVkU3RhdGU7ZD1nLmVsZW1lbnQ7aWYoZi5pc0RlaHlkcmF0ZWQpaWYoZj17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDohMSxjYWNoZTpnLmNhY2hlLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6Zy5wZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9LGIudXBkYXRlUXVldWUuYmFzZVN0YXRlPVxuZixiLm1lbW9pemVkU3RhdGU9ZixiLmZsYWdzJjI1Nil7ZT1LaShFcnJvcihwKDQyMykpLGIpO2I9bWooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgaWYoZCE9PWUpe2U9S2koRXJyb3IocCg0MjQpKSxiKTtiPW1qKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGZvcih5Zz1MZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLHhnPWIsST0hMCx6Zz1udWxsLGM9Q2goYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3w0MDk2LGM9Yy5zaWJsaW5nO2Vsc2V7SWcoKTtpZihkPT09ZSl7Yj0kaShhLGIsYyk7YnJlYWsgYX1ZaShhLGIsZCxjKX1iPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBLaChiKSxudWxsPT09YSYmRWcoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixFZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmRWYoZCxmKSYmKGIuZmxhZ3N8PTMyKSxcbmhqKGEsYiksWWkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZFZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHBqKGEsYixjKTtjYXNlIDQ6cmV0dXJuIEloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPUJoKGIsbnVsbCxkLGMpOllpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxaaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkUHJvcHM7XG5nPWUudmFsdWU7RyhNZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1nO2lmKG51bGwhPT1mKWlmKEhlKGYudmFsdWUsZykpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhV2YuY3VycmVudCl7Yj0kaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoZj1iLmNoaWxkLG51bGwhPT1mJiYoZi5yZXR1cm49Yik7bnVsbCE9PWY7KXt2YXIgaD1mLmRlcGVuZGVuY2llcztpZihudWxsIT09aCl7Zz1mLmNoaWxkO2Zvcih2YXIgaz1oLmZpcnN0Q29udGV4dDtudWxsIT09azspe2lmKGsuY29udGV4dD09PWQpe2lmKDE9PT1mLnRhZyl7az1jaCgtMSxjJi1jKTtrLnRhZz0yO3ZhciBsPWYudXBkYXRlUXVldWU7aWYobnVsbCE9PWwpe2w9bC5zaGFyZWQ7dmFyIG09bC5wZW5kaW5nO251bGw9PT1tP2submV4dD1rOihrLm5leHQ9bS5uZXh0LG0ubmV4dD1rKTtsLnBlbmRpbmc9a319Zi5sYW5lc3w9YztrPWYuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5sYW5lc3w9Yyk7U2coZi5yZXR1cm4sXG5jLGIpO2gubGFuZXN8PWM7YnJlYWt9az1rLm5leHR9fWVsc2UgaWYoMTA9PT1mLnRhZylnPWYudHlwZT09PWIudHlwZT9udWxsOmYuY2hpbGQ7ZWxzZSBpZigxOD09PWYudGFnKXtnPWYucmV0dXJuO2lmKG51bGw9PT1nKXRocm93IEVycm9yKHAoMzQxKSk7Zy5sYW5lc3w9YztoPWcuYWx0ZXJuYXRlO251bGwhPT1oJiYoaC5sYW5lc3w9Yyk7U2coZyxjLGIpO2c9Zi5zaWJsaW5nfWVsc2UgZz1mLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWY7ZWxzZSBmb3IoZz1mO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31mPWcuc2libGluZztpZihudWxsIT09Zil7Zi5yZXR1cm49Zy5yZXR1cm47Zz1mO2JyZWFrfWc9Zy5yZXR1cm59Zj1nfVlpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGQ9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sVGcoYixjKSxlPVZnKGUpLGQ9ZChlKSxiLmZsYWdzfD0xLFlpKGEsYixkLGMpLFxuYi5jaGlsZDtjYXNlIDE0OnJldHVybiBkPWIudHlwZSxlPUxnKGQsYi5wZW5kaW5nUHJvcHMpLGU9TGcoZC50eXBlLGUpLGFqKGEsYixkLGUsYyk7Y2FzZSAxNTpyZXR1cm4gY2ooYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGpqKGEsYiksYi50YWc9MSxaZihkKT8oYT0hMCxjZyhiKSk6YT0hMSxUZyhiLGMpLHBoKGIsZCxlKSxyaChiLGQsZSxjKSxraihudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIHlqKGEsYixjKTtjYXNlIDIyOnJldHVybiBlaihhLGIsYyl9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9O2Z1bmN0aW9uIEdrKGEsYil7cmV0dXJuIGFjKGEsYil9XG5mdW5jdGlvbiBhbChhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuc3VidHJlZUZsYWdzPXRoaXMuZmxhZ3M9MDt0aGlzLmRlbGV0aW9ucz1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBCZyhhLGIsYyxkKXtyZXR1cm4gbmV3IGFsKGEsYixjLGQpfWZ1bmN0aW9uIGJqKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiAkayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYmooYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PURhKXJldHVybiAxMTtpZihhPT09R2EpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gd2goYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1CZyhhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLnN1YnRyZWVGbGFncz0wLGMuZGVsZXRpb25zPW51bGwpO2MuZmxhZ3M9YS5mbGFncyYxNDY4MDA2NDtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24geWgoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWJqKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHlhOnJldHVybiBBaChjLmNoaWxkcmVuLGUsZixiKTtjYXNlIHphOmc9ODtlfD04O2JyZWFrO2Nhc2UgQWE6cmV0dXJuIGE9QmcoMTIsYyxiLGV8MiksYS5lbGVtZW50VHlwZT1BYSxhLmxhbmVzPWYsYTtjYXNlIEVhOnJldHVybiBhPUJnKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPUVhLGEubGFuZXM9ZixhO2Nhc2UgRmE6cmV0dXJuIGE9QmcoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9RmEsYS5sYW5lcz1mLGE7Y2FzZSBJYTpyZXR1cm4gcWooYyxlLGYsYik7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIEJhOmc9MTA7YnJlYWsgYTtjYXNlIENhOmc9OTticmVhayBhO2Nhc2UgRGE6Zz0xMTtcbmJyZWFrIGE7Y2FzZSBHYTpnPTE0O2JyZWFrIGE7Y2FzZSBIYTpnPTE2O2Q9bnVsbDticmVhayBhfXRocm93IEVycm9yKHAoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9QmcoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBBaChhLGIsYyxkKXthPUJnKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBxaihhLGIsYyxkKXthPUJnKDIyLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YzthLnN0YXRlTm9kZT17aXNIaWRkZW46ITF9O3JldHVybiBhfWZ1bmN0aW9uIHhoKGEsYixjKXthPUJnKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIHpoKGEsYixjKXtiPUJnKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYmwoYSxiLGMsZCxlKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLmNhbGxiYWNrTm9kZT10aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz16YygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz16YygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz16YygwKTt0aGlzLmlkZW50aWZpZXJQcmVmaXg9ZDt0aGlzLm9uUmVjb3ZlcmFibGVFcnJvcj1lO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1cbm51bGx9ZnVuY3Rpb24gY2woYSxiLGMsZCxlLGYsZyxoLGspe2E9bmV3IGJsKGEsYixjLGgsayk7MT09PWI/KGI9MSwhMD09PWYmJihifD04KSk6Yj0wO2Y9QmcoMyxudWxsLG51bGwsYik7YS5jdXJyZW50PWY7Zi5zdGF0ZU5vZGU9YTtmLm1lbW9pemVkU3RhdGU9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6YyxjYWNoZTpudWxsLHRyYW5zaXRpb25zOm51bGwscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpudWxsfTthaChmKTtyZXR1cm4gYX1mdW5jdGlvbiBkbChhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOndhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gZWwoYSl7aWYoIWEpcmV0dXJuIFZmO2E9YS5fcmVhY3RJbnRlcm5hbHM7YTp7aWYoVmIoYSkhPT1hfHwxIT09YS50YWcpdGhyb3cgRXJyb3IocCgxNzApKTt2YXIgYj1hO2Rve3N3aXRjaChiLnRhZyl7Y2FzZSAzOmI9Yi5zdGF0ZU5vZGUuY29udGV4dDticmVhayBhO2Nhc2UgMTppZihaZihiLnR5cGUpKXtiPWIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGF9fWI9Yi5yZXR1cm59d2hpbGUobnVsbCE9PWIpO3Rocm93IEVycm9yKHAoMTcxKSk7fWlmKDE9PT1hLnRhZyl7dmFyIGM9YS50eXBlO2lmKFpmKGMpKXJldHVybiBiZyhhLGMsYil9cmV0dXJuIGJ9XG5mdW5jdGlvbiBmbChhLGIsYyxkLGUsZixnLGgsayl7YT1jbChjLGQsITAsYSxlLGYsZyxoLGspO2EuY29udGV4dD1lbChudWxsKTtjPWEuY3VycmVudDtkPUwoKTtlPWxoKGMpO2Y9Y2goZCxlKTtmLmNhbGxiYWNrPXZvaWQgMCE9PWImJm51bGwhPT1iP2I6bnVsbDtkaChjLGYsZSk7YS5jdXJyZW50LmxhbmVzPWU7QWMoYSxlLGQpO0VrKGEsZCk7cmV0dXJuIGF9ZnVuY3Rpb24gZ2woYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9TCgpLGc9bGgoZSk7Yz1lbChjKTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWNoKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO2E9ZGgoZSxiLGcpO251bGwhPT1hJiYobWgoYSxlLGcsZiksZWgoYSxlLGcpKTtyZXR1cm4gZ31cbmZ1bmN0aW9uIGhsKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gaWwoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIGpsKGEsYil7aWwoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmlsKGEsYil9ZnVuY3Rpb24ga2woKXtyZXR1cm4gbnVsbH12YXIgbGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcG9ydEVycm9yP3JlcG9ydEVycm9yOmZ1bmN0aW9uKGEpe2NvbnNvbGUuZXJyb3IoYSl9O2Z1bmN0aW9uIG1sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubmwucHJvdG90eXBlLnJlbmRlcj1tbC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDQwOSkpO2dsKGEsYixudWxsLG51bGwpfTtubC5wcm90b3R5cGUudW5tb3VudD1tbC5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsIT09YSl7dGhpcy5faW50ZXJuYWxSb290PW51bGw7dmFyIGI9YS5jb250YWluZXJJbmZvO1NrKGZ1bmN0aW9uKCl7Z2wobnVsbCxhLG51bGwsbnVsbCl9KTtiW3VmXT1udWxsfX07ZnVuY3Rpb24gbmwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5ubC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb249ZnVuY3Rpb24oYSl7aWYoYSl7dmFyIGI9SGMoKTthPXtibG9ja2VkT246bnVsbCx0YXJnZXQ6YSxwcmlvcml0eTpifTtmb3IodmFyIGM9MDtjPFFjLmxlbmd0aCYmMCE9PWImJmI8UWNbY10ucHJpb3JpdHk7YysrKTtRYy5zcGxpY2UoYywwLGEpOzA9PT1jJiZWYyhhKX19O2Z1bmN0aW9uIG9sKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlKX1mdW5jdGlvbiBwbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gcWwoKXt9XG5mdW5jdGlvbiBybChhLGIsYyxkLGUpe2lmKGUpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZj1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1obChnKTtmLmNhbGwoYSl9fXZhciBnPWZsKGIsZCxhLDAsbnVsbCwhMSwhMSxcIlwiLHFsKTthLl9yZWFjdFJvb3RDb250YWluZXI9ZzthW3VmXT1nLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1NrKCk7cmV0dXJuIGd9Zm9yKDtlPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGUpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgaD1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1obChrKTtoLmNhbGwoYSl9fXZhciBrPWNsKGEsMCwhMSxudWxsLG51bGwsITEsITEsXCJcIixxbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWs7YVt1Zl09ay5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtTayhmdW5jdGlvbigpe2dsKGIsayxjLGQpfSk7cmV0dXJuIGt9XG5mdW5jdGlvbiBzbChhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1obChnKTtoLmNhbGwoYSl9fWdsKGIsZyxhLGUpfWVsc2UgZz1ybChjLGIsYSxlLGQpO3JldHVybiBobChnKX1FYz1mdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMzp2YXIgYj1hLnN0YXRlTm9kZTtpZihiLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe3ZhciBjPXRjKGIucGVuZGluZ0xhbmVzKTswIT09YyYmKENjKGIsY3wxKSxFayhiLEIoKSksMD09PShLJjYpJiYoSGo9QigpKzUwMCxqZygpKSl9YnJlYWs7Y2FzZSAxMzpTayhmdW5jdGlvbigpe3ZhciBiPVpnKGEsMSk7aWYobnVsbCE9PWIpe3ZhciBjPUwoKTttaChiLGEsMSxjKX19KSxqbChhLDEpfX07XG5GYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1aZyhhLDEzNDIxNzcyOCk7aWYobnVsbCE9PWIpe3ZhciBjPUwoKTttaChiLGEsMTM0MjE3NzI4LGMpfWpsKGEsMTM0MjE3NzI4KX19O0djPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWxoKGEpLGM9WmcoYSxiKTtpZihudWxsIT09Yyl7dmFyIGQ9TCgpO21oKGMsYSxiLGQpfWpsKGEsYil9fTtIYz1mdW5jdGlvbigpe3JldHVybiBDfTtJYz1mdW5jdGlvbihhLGIpe3ZhciBjPUM7dHJ5e3JldHVybiBDPWEsYigpfWZpbmFsbHl7Qz1jfX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmJiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcihwKDkwKSk7V2EoZCk7YmIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVJrO0hiPVNrO1xudmFyIHRsPXt1c2luZ0NsaWVudEVudHJ5UG9pbnQ6ITEsRXZlbnRzOltDYix1ZSxEYixFYixGYixSa119LHVsPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpXYyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE4LjIuMFwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgdmw9e2J1bmRsZVR5cGU6dWwuYnVuZGxlVHlwZSx2ZXJzaW9uOnVsLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTp1bC5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOnVsLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRFcnJvckhhbmRsZXI6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1aYihhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6dWwuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxua2wsZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbCxyZWNvbmNpbGVyVmVyc2lvbjpcIjE4LjIuMC1uZXh0LTllM2I3NzJiOC0yMDIyMDYwOFwifTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHdsPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZighd2wuaXNEaXNhYmxlZCYmd2wuc3VwcG9ydHNGaWJlcil0cnl7a2M9d2wuaW5qZWN0KHZsKSxsYz13bH1jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9dGw7XG5leHBvcnRzLmNyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFvbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBkbChhLGIsbnVsbCxjKX07ZXhwb3J0cy5jcmVhdGVSb290PWZ1bmN0aW9uKGEsYil7aWYoIW9sKGEpKXRocm93IEVycm9yKHAoMjk5KSk7dmFyIGM9ITEsZD1cIlwiLGU9bGw7bnVsbCE9PWImJnZvaWQgMCE9PWImJighMD09PWIudW5zdGFibGVfc3RyaWN0TW9kZSYmKGM9ITApLHZvaWQgMCE9PWIuaWRlbnRpZmllclByZWZpeCYmKGQ9Yi5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1iLm9uUmVjb3ZlcmFibGVFcnJvciYmKGU9Yi5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWNsKGEsMSwhMSxudWxsLG51bGwsYywhMSxkLGUpO2FbdWZdPWIuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7cmV0dXJuIG5ldyBtbChiKX07XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHAoMTg4KSk7YT1PYmplY3Qua2V5cyhhKS5qb2luKFwiLFwiKTt0aHJvdyBFcnJvcihwKDI2OCxhKSk7fWE9WmIoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhKXtyZXR1cm4gU2soYSl9O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIXBsKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHNsKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMuaHlkcmF0ZVJvb3Q9ZnVuY3Rpb24oYSxiLGMpe2lmKCFvbChhKSl0aHJvdyBFcnJvcihwKDQwNSkpO3ZhciBkPW51bGwhPWMmJmMuaHlkcmF0ZWRTb3VyY2VzfHxudWxsLGU9ITEsZj1cIlwiLGc9bGw7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJighMD09PWMudW5zdGFibGVfc3RyaWN0TW9kZSYmKGU9ITApLHZvaWQgMCE9PWMuaWRlbnRpZmllclByZWZpeCYmKGY9Yy5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1jLm9uUmVjb3ZlcmFibGVFcnJvciYmKGc9Yy5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWZsKGIsbnVsbCxhLDEsbnVsbCE9Yz9jOm51bGwsZSwhMSxmLGcpO2FbdWZdPWIuY3VycmVudDtzZihhKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspYz1kW2FdLGU9Yy5fZ2V0VmVyc2lvbixlPWUoYy5fc291cmNlKSxudWxsPT1iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtjLGVdOmIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGMsXG5lKTtyZXR1cm4gbmV3IG5sKGIpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXBsKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHNsKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXBsKGEpKXRocm93IEVycm9yKHAoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhTayhmdW5jdGlvbigpe3NsKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVt1Zl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVJrO1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcGwoYykpdGhyb3cgRXJyb3IocCgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcihwKDM4KSk7cmV0dXJuIHNsKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxOC4yLjAtbmV4dC05ZTNiNzcyYjgtMjAyMjA2MDhcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG0gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IG0uY3JlYXRlUm9vdDtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IG0uaHlkcmF0ZVJvb3Q7XG59IGVsc2Uge1xuICB2YXIgaSA9IG0uX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmNyZWF0ZVJvb3QoYywgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gZnVuY3Rpb24oYywgaCwgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uaHlkcmF0ZVJvb3QoYywgaCwgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAcmVtaXgtcnVuL3JvdXRlciB2MS4wLjNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFR5cGVzIGFuZCBDb25zdGFudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQWN0aW9ucyByZXByZXNlbnQgdGhlIHR5cGUgb2YgY2hhbmdlIHRvIGEgbG9jYXRpb24gdmFsdWUuXG4gKi9cbnZhciBBY3Rpb247XG5cbihmdW5jdGlvbiAoQWN0aW9uKSB7XG4gIC8qKlxuICAgKiBBIFBPUCBpbmRpY2F0ZXMgYSBjaGFuZ2UgdG8gYW4gYXJiaXRyYXJ5IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXG4gICAqIG5hdmlnYXRpb24sIG9ubHkgdGhhdCB0aGUgY3VycmVudCBpbmRleCBjaGFuZ2VkLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXG4gICAqL1xuICBBY3Rpb25bXCJQb3BcIl0gPSBcIlBPUFwiO1xuICAvKipcbiAgICogQSBQVVNIIGluZGljYXRlcyBhIG5ldyBlbnRyeSBiZWluZyBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaCBhcyB3aGVuXG4gICAqIGEgbGluayBpcyBjbGlja2VkIGFuZCBhIG5ldyBwYWdlIGxvYWRzLiBXaGVuIHRoaXMgaGFwcGVucywgYWxsIHN1YnNlcXVlbnRcbiAgICogZW50cmllcyBpbiB0aGUgc3RhY2sgYXJlIGxvc3QuXG4gICAqL1xuXG4gIEFjdGlvbltcIlB1c2hcIl0gPSBcIlBVU0hcIjtcbiAgLyoqXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXG4gICAqIGJlaW5nIHJlcGxhY2VkIGJ5IGEgbmV3IG9uZS5cbiAgICovXG5cbiAgQWN0aW9uW1wiUmVwbGFjZVwiXSA9IFwiUkVQTEFDRVwiO1xufSkoQWN0aW9uIHx8IChBY3Rpb24gPSB7fSkpO1xuXG5jb25zdCBQb3BTdGF0ZUV2ZW50VHlwZSA9IFwicG9wc3RhdGVcIjtcbi8qKlxuICogTWVtb3J5IGhpc3Rvcnkgc3RvcmVzIHRoZSBjdXJyZW50IGxvY2F0aW9uIGluIG1lbW9yeS4gSXQgaXMgZGVzaWduZWQgZm9yIHVzZVxuICogaW4gc3RhdGVmdWwgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzIGxpa2UgdGVzdHMgYW5kIFJlYWN0IE5hdGl2ZS5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGxldCB7XG4gICAgaW5pdGlhbEVudHJpZXMgPSBbXCIvXCJdLFxuICAgIGluaXRpYWxJbmRleCxcbiAgICB2NUNvbXBhdCA9IGZhbHNlXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgZW50cmllczsgLy8gRGVjbGFyZSBzbyB3ZSBjYW4gYWNjZXNzIGZyb20gY3JlYXRlTWVtb3J5TG9jYXRpb25cblxuICBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKChlbnRyeSwgaW5kZXgpID0+IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKGVudHJ5LCB0eXBlb2YgZW50cnkgPT09IFwic3RyaW5nXCIgPyBudWxsIDogZW50cnkuc3RhdGUsIGluZGV4ID09PSAwID8gXCJkZWZhdWx0XCIgOiB1bmRlZmluZWQpKTtcbiAgbGV0IGluZGV4ID0gY2xhbXBJbmRleChpbml0aWFsSW5kZXggPT0gbnVsbCA/IGVudHJpZXMubGVuZ3RoIC0gMSA6IGluaXRpYWxJbmRleCk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXIgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGNsYW1wSW5kZXgobikge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZW50cmllcy5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbigpIHtcbiAgICByZXR1cm4gZW50cmllc1tpbmRleF07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUsIGtleSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oZW50cmllcyA/IGdldEN1cnJlbnRMb2NhdGlvbigpLnBhdGhuYW1lIDogXCIvXCIsIHRvLCBzdGF0ZSwga2V5KTtcbiAgICB3YXJuaW5nJDEobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSBcIi9cIiwgXCJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gbWVtb3J5IGhpc3Rvcnk6IFwiICsgSlNPTi5zdHJpbmdpZnkodG8pKTtcbiAgICByZXR1cm4gbG9jYXRpb247XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgaW5kZXgoKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfSxcblxuICAgIGdldCBhY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0Q3VycmVudExvY2F0aW9uKCk7XG4gICAgfSxcblxuICAgIGNyZWF0ZUhyZWYodG8pIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICAgIH0sXG5cbiAgICBlbmNvZGVMb2NhdGlvbihsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuICAgIH0sXG5cbiAgICBwdXNoKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGluZGV4ICs9IDE7XG4gICAgICBlbnRyaWVzLnNwbGljZShpbmRleCwgZW50cmllcy5sZW5ndGgsIG5leHRMb2NhdGlvbik7XG5cbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgZW50cmllc1tpbmRleF0gPSBuZXh0TG9jYXRpb247XG5cbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGdvKGRlbHRhKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgICAgaW5kZXggPSBjbGFtcEluZGV4KGluZGV4ICsgZGVsdGEpO1xuXG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogZ2V0Q3VycmVudExvY2F0aW9uKClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGxpc3Rlbihmbikge1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfVxuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuLyoqXG4gKiBCcm93c2VyIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiByZWd1bGFyIFVSTHMuIFRoaXMgaXMgdGhlIHN0YW5kYXJkIGZvclxuICogbW9zdCB3ZWIgYXBwcywgYnV0IGl0IHJlcXVpcmVzIHNvbWUgY29uZmlndXJhdGlvbiBvbiB0aGUgc2VydmVyIHRvIGVuc3VyZSB5b3VcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlYnJvd3Nlcmhpc3RvcnlcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VyTG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KSB7XG4gICAgbGV0IHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0gPSB3aW5kb3cubG9jYXRpb247XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKFwiXCIsIHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0sIC8vIHN0YXRlIGRlZmF1bHRzIHRvIGBudWxsYCBiZWNhdXNlIGB3aW5kb3cuaGlzdG9yeS5zdGF0ZWAgZG9lc1xuICAgIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS51c3IgfHwgbnVsbCwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLmtleSB8fCBcImRlZmF1bHRcIik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VySHJlZih3aW5kb3csIHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cblxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUJyb3dzZXJMb2NhdGlvbiwgY3JlYXRlQnJvd3NlckhyZWYsIG51bGwsIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxuICogZm9yIHNpdHVhdGlvbnMgd2hlcmUgeW91IGRvbid0IHdhbnQgdG8gc2VuZCB0aGUgbG9jYXRpb24gdG8gdGhlIHNlcnZlciBmb3JcbiAqIHNvbWUgcmVhc29uLCBlaXRoZXIgYmVjYXVzZSB5b3UgZG8gY2Fubm90IGNvbmZpZ3VyZSBpdCBvciB0aGUgVVJMIHNwYWNlIGlzXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVoYXNoaGlzdG9yeVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgICBoYXNoID0gXCJcIlxuICAgIH0gPSBwYXJzZVBhdGgod2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXCJcIiwge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSwgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzciB8fCBudWxsLCBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5IHx8IFwiZGVmYXVsdFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hIcmVmKHdpbmRvdywgdG8pIHtcbiAgICBsZXQgYmFzZSA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYmFzZVwiKTtcbiAgICBsZXQgaHJlZiA9IFwiXCI7XG5cbiAgICBpZiAoYmFzZSAmJiBiYXNlLmdldEF0dHJpYnV0ZShcImhyZWZcIikpIHtcbiAgICAgIGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgIGxldCBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG4gICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgXCIjXCIgKyAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKSk7XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZGF0ZUhhc2hMb2NhdGlvbihsb2NhdGlvbiwgdG8pIHtcbiAgICB3YXJuaW5nJDEobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSBcIi9cIiwgXCJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gaGFzaCBoaXN0b3J5LnB1c2goXCIgKyBKU09OLnN0cmluZ2lmeSh0bykgKyBcIilcIik7XG4gIH1cblxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUhhc2hMb2NhdGlvbiwgY3JlYXRlSGFzaEhyZWYsIHZhbGlkYXRlSGFzaExvY2F0aW9uLCBvcHRpb25zKTtcbn0gLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFVUSUxTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5mdW5jdGlvbiB3YXJuaW5nJDEoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIGhpc3RvcnkhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOCk7XG59XG4vKipcbiAqIEZvciBicm93c2VyLWJhc2VkIGhpc3Rvcmllcywgd2UgY29tYmluZSB0aGUgc3RhdGUgYW5kIGtleSBpbnRvIGFuIG9iamVjdFxuICovXG5cblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uKSB7XG4gIHJldHVybiB7XG4gICAgdXNyOiBsb2NhdGlvbi5zdGF0ZSxcbiAgICBrZXk6IGxvY2F0aW9uLmtleVxuICB9O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgTG9jYXRpb24gb2JqZWN0IHdpdGggYSB1bmlxdWUga2V5IGZyb20gdGhlIGdpdmVuIFBhdGhcbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKGN1cnJlbnQsIHRvLCBzdGF0ZSwga2V5KSB7XG4gIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgc3RhdGUgPSBudWxsO1xuICB9XG5cbiAgbGV0IGxvY2F0aW9uID0gX2V4dGVuZHMoe1xuICAgIHBhdGhuYW1lOiB0eXBlb2YgY3VycmVudCA9PT0gXCJzdHJpbmdcIiA/IGN1cnJlbnQgOiBjdXJyZW50LnBhdGhuYW1lLFxuICAgIHNlYXJjaDogXCJcIixcbiAgICBoYXNoOiBcIlwiXG4gIH0sIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bywge1xuICAgIHN0YXRlLFxuICAgIC8vIFRPRE86IFRoaXMgY291bGQgYmUgY2xlYW5lZCB1cC4gIHB1c2gvcmVwbGFjZSBzaG91bGQgcHJvYmFibHkganVzdCB0YWtlXG4gICAgLy8gZnVsbCBMb2NhdGlvbnMgbm93IGFuZCBhdm9pZCB0aGUgbmVlZCB0byBydW4gdGhyb3VnaCB0aGlzIGZsb3cgYXQgYWxsXG4gICAgLy8gQnV0IHRoYXQncyBhIHByZXR0eSBiaWcgcmVmYWN0b3IgdG8gdGhlIGN1cnJlbnQgdGVzdCBzdWl0ZSBzbyBnb2luZyB0b1xuICAgIC8vIGtlZXAgYXMgaXMgZm9yIHRoZSB0aW1lIGJlaW5nIGFuZCBqdXN0IGxldCBhbnkgaW5jb21pbmcga2V5cyB0YWtlIHByZWNlZGVuY2VcbiAgICBrZXk6IHRvICYmIHRvLmtleSB8fCBrZXkgfHwgY3JlYXRlS2V5KClcbiAgfSk7XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgc3RyaW5nIFVSTCBwYXRoIGZyb20gdGhlIGdpdmVuIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUGF0aChfcmVmKSB7XG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSBfcmVmO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gXCI/XCIpIHBhdGhuYW1lICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09IFwiP1wiID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09IFwiI1wiKSBwYXRobmFtZSArPSBoYXNoLmNoYXJBdCgwKSA9PT0gXCIjXCIgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aG5hbWU7XG59XG4vKipcbiAqIFBhcnNlcyBhIHN0cmluZyBVUkwgcGF0aCBpbnRvIGl0cyBzZXBhcmF0ZSBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxuICovXG5cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIGxldCBwYXJzZWRQYXRoID0ge307XG5cbiAgaWYgKHBhdGgpIHtcbiAgICBsZXQgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiI1wiKTtcblxuICAgIGlmIChoYXNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5oYXNoID0gcGF0aC5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICAgIH1cblxuICAgIGxldCBzZWFyY2hJbmRleCA9IHBhdGguaW5kZXhPZihcIj9cIik7XG5cbiAgICBpZiAoc2VhcmNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5zZWFyY2ggPSBwYXRoLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChwYXRoKSB7XG4gICAgICBwYXJzZWRQYXRoLnBhdGhuYW1lID0gcGF0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFyc2VkUGF0aDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICAvLyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIGlzIFwibnVsbFwiICh0aGUgbGl0ZXJhbCBzdHJpbmcgdmFsdWUpIGluIEZpcmVmb3hcbiAgLy8gdW5kZXIgY2VydGFpbiBjb25kaXRpb25zLCBub3RhYmx5IHdoZW4gc2VydmluZyBmcm9tIGEgbG9jYWwgSFRNTCBmaWxlXG4gIC8vIFNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04NzgyOTdcbiAgbGV0IGJhc2UgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cubG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uLm9yaWdpbiAhPT0gXCJudWxsXCIgPyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIDogXCJ1bmtub3duOi8vdW5rbm93blwiO1xuICBsZXQgaHJlZiA9IHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIHJldHVybiBuZXcgVVJMKGhyZWYsIGJhc2UpO1xufVxuXG5mdW5jdGlvbiBnZXRVcmxCYXNlZEhpc3RvcnkoZ2V0TG9jYXRpb24sIGNyZWF0ZUhyZWYsIHZhbGlkYXRlTG9jYXRpb24sIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGxldCB7XG4gICAgd2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lciA9IG51bGw7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKCkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHVzaCh0bywgc3RhdGUpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uLCB0bywgc3RhdGUpO1xuICAgIGlmICh2YWxpZGF0ZUxvY2F0aW9uKSB2YWxpZGF0ZUxvY2F0aW9uKGxvY2F0aW9uLCB0byk7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbik7XG4gICAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7IC8vIHRyeS4uLmNhdGNoIGJlY2F1c2UgaU9TIGxpbWl0cyB1cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzIDovXG5cbiAgICB0cnkge1xuICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBUaGV5IGFyZSBnb2luZyB0byBsb3NlIHN0YXRlIGhlcmUsIGJ1dCB0aGVyZSBpcyBubyByZWFsXG4gICAgICAvLyB3YXkgdG8gd2FybiB0aGVtIGFib3V0IGl0IHNpbmNlIHRoZSBwYWdlIHdpbGwgcmVmcmVzaC4uLlxuICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgIH1cblxuICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGhpc3RvcnkubG9jYXRpb24sIHRvLCBzdGF0ZSk7XG4gICAgaWYgKHZhbGlkYXRlTG9jYXRpb24pIHZhbGlkYXRlTG9jYXRpb24obG9jYXRpb24sIHRvKTtcbiAgICBsZXQgaGlzdG9yeVN0YXRlID0gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uKTtcbiAgICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsIFwiXCIsIHVybCk7XG5cbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSB7XG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpO1xuICAgIH0sXG5cbiAgICBsaXN0ZW4oZm4pIHtcbiAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGhpc3Rvcnkgb25seSBhY2NlcHRzIG9uZSBhY3RpdmUgbGlzdGVuZXJcIik7XG4gICAgICB9XG5cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApO1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApO1xuICAgICAgICBsaXN0ZW5lciA9IG51bGw7XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBjcmVhdGVIcmVmKHRvKSB7XG4gICAgICByZXR1cm4gY3JlYXRlSHJlZih3aW5kb3csIHRvKTtcbiAgICB9LFxuXG4gICAgZW5jb2RlTG9jYXRpb24obG9jYXRpb24pIHtcbiAgICAgIC8vIEVuY29kZSBhIExvY2F0aW9uIHRoZSBzYW1lIHdheSB3aW5kb3cubG9jYXRpb24gd291bGRcbiAgICAgIGxldCB1cmwgPSBjcmVhdGVVUkwoY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICBwYXRobmFtZTogdXJsLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2g6IHVybC5zZWFyY2gsXG4gICAgICAgIGhhc2g6IHVybC5oYXNoXG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgcHVzaCxcbiAgICByZXBsYWNlLFxuXG4gICAgZ28obikge1xuICAgICAgcmV0dXJuIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gICAgfVxuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufSAvLyNlbmRyZWdpb25cblxudmFyIFJlc3VsdFR5cGU7XG5cbihmdW5jdGlvbiAoUmVzdWx0VHlwZSkge1xuICBSZXN1bHRUeXBlW1wiZGF0YVwiXSA9IFwiZGF0YVwiO1xuICBSZXN1bHRUeXBlW1wiZGVmZXJyZWRcIl0gPSBcImRlZmVycmVkXCI7XG4gIFJlc3VsdFR5cGVbXCJyZWRpcmVjdFwiXSA9IFwicmVkaXJlY3RcIjtcbiAgUmVzdWx0VHlwZVtcImVycm9yXCJdID0gXCJlcnJvclwiO1xufSkoUmVzdWx0VHlwZSB8fCAoUmVzdWx0VHlwZSA9IHt9KSk7XG5cbmZ1bmN0aW9uIGlzSW5kZXhSb3V0ZShyb3V0ZSkge1xuICByZXR1cm4gcm91dGUuaW5kZXggPT09IHRydWU7XG59IC8vIFdhbGsgdGhlIHJvdXRlIHRyZWUgZ2VuZXJhdGluZyB1bmlxdWUgSURzIHdoZXJlIG5lY2Vzc2FyeSBzbyB3ZSBhcmUgd29ya2luZ1xuLy8gc29sZWx5IHdpdGggQWdub3N0aWNEYXRhUm91dGVPYmplY3QncyB3aXRoaW4gdGhlIFJvdXRlclxuXG5cbmZ1bmN0aW9uIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGVzLCBwYXJlbnRQYXRoLCBhbGxJZHMpIHtcbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBbXTtcbiAgfVxuXG4gIGlmIChhbGxJZHMgPT09IHZvaWQgMCkge1xuICAgIGFsbElkcyA9IG5ldyBTZXQoKTtcbiAgfVxuXG4gIHJldHVybiByb3V0ZXMubWFwKChyb3V0ZSwgaW5kZXgpID0+IHtcbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgaW5kZXhdO1xuICAgIGxldCBpZCA9IHR5cGVvZiByb3V0ZS5pZCA9PT0gXCJzdHJpbmdcIiA/IHJvdXRlLmlkIDogdHJlZVBhdGguam9pbihcIi1cIik7XG4gICAgaW52YXJpYW50KHJvdXRlLmluZGV4ICE9PSB0cnVlIHx8ICFyb3V0ZS5jaGlsZHJlbiwgXCJDYW5ub3Qgc3BlY2lmeSBjaGlsZHJlbiBvbiBhbiBpbmRleCByb3V0ZVwiKTtcbiAgICBpbnZhcmlhbnQoIWFsbElkcy5oYXMoaWQpLCBcIkZvdW5kIGEgcm91dGUgaWQgY29sbGlzaW9uIG9uIGlkIFxcXCJcIiArIGlkICsgXCJcXFwiLiAgUm91dGUgXCIgKyBcImlkJ3MgbXVzdCBiZSBnbG9iYWxseSB1bmlxdWUgd2l0aGluIERhdGEgUm91dGVyIHVzYWdlc1wiKTtcbiAgICBhbGxJZHMuYWRkKGlkKTtcblxuICAgIGlmIChpc0luZGV4Um91dGUocm91dGUpKSB7XG4gICAgICBsZXQgaW5kZXhSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwge1xuICAgICAgICBpZFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBpbmRleFJvdXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcGF0aE9yTGF5b3V0Um91dGUgPSBfZXh0ZW5kcyh7fSwgcm91dGUsIHtcbiAgICAgICAgaWQsXG4gICAgICAgIGNoaWxkcmVuOiByb3V0ZS5jaGlsZHJlbiA/IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGUuY2hpbGRyZW4sIHRyZWVQYXRoLCBhbGxJZHMpIDogdW5kZWZpbmVkXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHBhdGhPckxheW91dFJvdXRlO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIE1hdGNoZXMgdGhlIGdpdmVuIHJvdXRlcyB0byBhIGxvY2F0aW9uIGFuZCByZXR1cm5zIHRoZSBtYXRjaCBkYXRhLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni91dGlscy9tYXRjaC1yb3V0ZXNcbiAqL1xuXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IHZvaWQgMCkge1xuICAgIGJhc2VuYW1lID0gXCIvXCI7XG4gIH1cblxuICBsZXQgbG9jYXRpb24gPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gIGxldCBwYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCIsIGJhc2VuYW1lKTtcblxuICBpZiAocGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGV0IGJyYW5jaGVzID0gZmxhdHRlblJvdXRlcyhyb3V0ZXMpO1xuICByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcyk7XG4gIGxldCBtYXRjaGVzID0gbnVsbDtcblxuICBmb3IgKGxldCBpID0gMDsgbWF0Y2hlcyA9PSBudWxsICYmIGkgPCBicmFuY2hlcy5sZW5ndGg7ICsraSkge1xuICAgIG1hdGNoZXMgPSBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaGVzW2ldLCAvLyBJbmNvbWluZyBwYXRobmFtZXMgYXJlIGdlbmVyYWxseSBlbmNvZGVkIGZyb20gZWl0aGVyIHdpbmRvdy5sb2NhdGlvblxuICAgIC8vIG9yIGZyb20gcm91dGVyLm5hdmlnYXRlLCBidXQgd2Ugd2FudCB0byBtYXRjaCBhZ2FpbnN0IHRoZSB1bmVuY29kZWRcbiAgICAvLyBwYXRocyBpbiB0aGUgcm91dGUgZGVmaW5pdGlvbnMuICBNZW1vcnkgcm91dGVyIGxvY2F0aW9ucyB3b24ndCBiZVxuICAgIC8vIGVuY29kZWQgaGVyZSBidXQgdGhlcmUgYWxzbyBzaG91bGRuJ3QgYmUgYW55dGhpbmcgdG8gZGVjb2RlIHNvIHRoaXNcbiAgICAvLyBzaG91bGQgYmUgYSBzYWZlIG9wZXJhdGlvbi4gIFRoaXMgYXZvaWRzIG5lZWRpbmcgbWF0Y2hSb3V0ZXMgdG8gYmVcbiAgICAvLyBoaXN0b3J5LWF3YXJlLlxuICAgIHNhZmVseURlY29kZVVSSShwYXRobmFtZSkpO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5Sb3V0ZXMocm91dGVzLCBicmFuY2hlcywgcGFyZW50c01ldGEsIHBhcmVudFBhdGgpIHtcbiAgaWYgKGJyYW5jaGVzID09PSB2b2lkIDApIHtcbiAgICBicmFuY2hlcyA9IFtdO1xuICB9XG5cbiAgaWYgKHBhcmVudHNNZXRhID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRzTWV0YSA9IFtdO1xuICB9XG5cbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBcIlwiO1xuICB9XG5cbiAgcm91dGVzLmZvckVhY2goKHJvdXRlLCBpbmRleCkgPT4ge1xuICAgIGxldCBtZXRhID0ge1xuICAgICAgcmVsYXRpdmVQYXRoOiByb3V0ZS5wYXRoIHx8IFwiXCIsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiByb3V0ZS5jYXNlU2Vuc2l0aXZlID09PSB0cnVlLFxuICAgICAgY2hpbGRyZW5JbmRleDogaW5kZXgsXG4gICAgICByb3V0ZVxuICAgIH07XG5cbiAgICBpZiAobWV0YS5yZWxhdGl2ZVBhdGguc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgIGludmFyaWFudChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKHBhcmVudFBhdGgpLCBcIkFic29sdXRlIHJvdXRlIHBhdGggXFxcIlwiICsgbWV0YS5yZWxhdGl2ZVBhdGggKyBcIlxcXCIgbmVzdGVkIHVuZGVyIHBhdGggXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiIGlzIG5vdCB2YWxpZC4gQW4gYWJzb2x1dGUgY2hpbGQgcm91dGUgcGF0aCBcIikgKyBcIm11c3Qgc3RhcnQgd2l0aCB0aGUgY29tYmluZWQgcGF0aCBvZiBhbGwgaXRzIHBhcmVudCByb3V0ZXMuXCIpO1xuICAgICAgbWV0YS5yZWxhdGl2ZVBhdGggPSBtZXRhLnJlbGF0aXZlUGF0aC5zbGljZShwYXJlbnRQYXRoLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgbGV0IHBhdGggPSBqb2luUGF0aHMoW3BhcmVudFBhdGgsIG1ldGEucmVsYXRpdmVQYXRoXSk7XG4gICAgbGV0IHJvdXRlc01ldGEgPSBwYXJlbnRzTWV0YS5jb25jYXQobWV0YSk7IC8vIEFkZCB0aGUgY2hpbGRyZW4gYmVmb3JlIGFkZGluZyB0aGlzIHJvdXRlIHRvIHRoZSBhcnJheSBzbyB3ZSB0cmF2ZXJzZSB0aGVcbiAgICAvLyByb3V0ZSB0cmVlIGRlcHRoLWZpcnN0IGFuZCBjaGlsZCByb3V0ZXMgYXBwZWFyIGJlZm9yZSB0aGVpciBwYXJlbnRzIGluXG4gICAgLy8gdGhlIFwiZmxhdHRlbmVkXCIgdmVyc2lvbi5cblxuICAgIGlmIChyb3V0ZS5jaGlsZHJlbiAmJiByb3V0ZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICBpbnZhcmlhbnQoIC8vIE91ciB0eXBlcyBrbm93IGJldHRlciwgYnV0IHJ1bnRpbWUgSlMgbWF5IG5vdCFcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgIHJvdXRlLmluZGV4ICE9PSB0cnVlLCBcIkluZGV4IHJvdXRlcyBtdXN0IG5vdCBoYXZlIGNoaWxkIHJvdXRlcy4gUGxlYXNlIHJlbW92ZSBcIiArIChcImFsbCBjaGlsZCByb3V0ZXMgZnJvbSByb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIuXCIpKTtcbiAgICAgIGZsYXR0ZW5Sb3V0ZXMocm91dGUuY2hpbGRyZW4sIGJyYW5jaGVzLCByb3V0ZXNNZXRhLCBwYXRoKTtcbiAgICB9IC8vIFJvdXRlcyB3aXRob3V0IGEgcGF0aCBzaG91bGRuJ3QgZXZlciBtYXRjaCBieSB0aGVtc2VsdmVzIHVubGVzcyB0aGV5IGFyZVxuICAgIC8vIGluZGV4IHJvdXRlcywgc28gZG9uJ3QgYWRkIHRoZW0gdG8gdGhlIGxpc3Qgb2YgcG9zc2libGUgYnJhbmNoZXMuXG5cblxuICAgIGlmIChyb3V0ZS5wYXRoID09IG51bGwgJiYgIXJvdXRlLmluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYnJhbmNoZXMucHVzaCh7XG4gICAgICBwYXRoLFxuICAgICAgc2NvcmU6IGNvbXB1dGVTY29yZShwYXRoLCByb3V0ZS5pbmRleCksXG4gICAgICByb3V0ZXNNZXRhXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gYnJhbmNoZXM7XG59XG5cbmZ1bmN0aW9uIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKSB7XG4gIGJyYW5jaGVzLnNvcnQoKGEsIGIpID0+IGEuc2NvcmUgIT09IGIuc2NvcmUgPyBiLnNjb3JlIC0gYS5zY29yZSAvLyBIaWdoZXIgc2NvcmUgZmlyc3RcbiAgOiBjb21wYXJlSW5kZXhlcyhhLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSwgYi5yb3V0ZXNNZXRhLm1hcChtZXRhID0+IG1ldGEuY2hpbGRyZW5JbmRleCkpKTtcbn1cblxuY29uc3QgcGFyYW1SZSA9IC9eOlxcdyskLztcbmNvbnN0IGR5bmFtaWNTZWdtZW50VmFsdWUgPSAzO1xuY29uc3QgaW5kZXhSb3V0ZVZhbHVlID0gMjtcbmNvbnN0IGVtcHR5U2VnbWVudFZhbHVlID0gMTtcbmNvbnN0IHN0YXRpY1NlZ21lbnRWYWx1ZSA9IDEwO1xuY29uc3Qgc3BsYXRQZW5hbHR5ID0gLTI7XG5cbmNvbnN0IGlzU3BsYXQgPSBzID0+IHMgPT09IFwiKlwiO1xuXG5mdW5jdGlvbiBjb21wdXRlU2NvcmUocGF0aCwgaW5kZXgpIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGxldCBpbml0aWFsU2NvcmUgPSBzZWdtZW50cy5sZW5ndGg7XG5cbiAgaWYgKHNlZ21lbnRzLnNvbWUoaXNTcGxhdCkpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gc3BsYXRQZW5hbHR5O1xuICB9XG5cbiAgaWYgKGluZGV4KSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IGluZGV4Um91dGVWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBzZWdtZW50cy5maWx0ZXIocyA9PiAhaXNTcGxhdChzKSkucmVkdWNlKChzY29yZSwgc2VnbWVudCkgPT4gc2NvcmUgKyAocGFyYW1SZS50ZXN0KHNlZ21lbnQpID8gZHluYW1pY1NlZ21lbnRWYWx1ZSA6IHNlZ21lbnQgPT09IFwiXCIgPyBlbXB0eVNlZ21lbnRWYWx1ZSA6IHN0YXRpY1NlZ21lbnRWYWx1ZSksIGluaXRpYWxTY29yZSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVJbmRleGVzKGEsIGIpIHtcbiAgbGV0IHNpYmxpbmdzID0gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuc2xpY2UoMCwgLTEpLmV2ZXJ5KChuLCBpKSA9PiBuID09PSBiW2ldKTtcbiAgcmV0dXJuIHNpYmxpbmdzID8gLy8gSWYgdHdvIHJvdXRlcyBhcmUgc2libGluZ3MsIHdlIHNob3VsZCB0cnkgdG8gbWF0Y2ggdGhlIGVhcmxpZXIgc2libGluZ1xuICAvLyBmaXJzdC4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIGhhdmUgZmluZS1ncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgbWF0Y2hpbmdcbiAgLy8gYmVoYXZpb3IgYnkgc2ltcGx5IHB1dHRpbmcgcm91dGVzIHdpdGggaWRlbnRpY2FsIHBhdGhzIGluIHRoZSBvcmRlciB0aGV5XG4gIC8vIHdhbnQgdGhlbSB0cmllZC5cbiAgYVthLmxlbmd0aCAtIDFdIC0gYltiLmxlbmd0aCAtIDFdIDogLy8gT3RoZXJ3aXNlLCBpdCBkb2Vzbid0IHJlYWxseSBtYWtlIHNlbnNlIHRvIHJhbmsgbm9uLXNpYmxpbmdzIGJ5IGluZGV4LFxuICAvLyBzbyB0aGV5IHNvcnQgZXF1YWxseS5cbiAgMDtcbn1cblxuZnVuY3Rpb24gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2gsIHBhdGhuYW1lKSB7XG4gIGxldCB7XG4gICAgcm91dGVzTWV0YVxuICB9ID0gYnJhbmNoO1xuICBsZXQgbWF0Y2hlZFBhcmFtcyA9IHt9O1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZXNNZXRhLmxlbmd0aDsgKytpKSB7XG4gICAgbGV0IG1ldGEgPSByb3V0ZXNNZXRhW2ldO1xuICAgIGxldCBlbmQgPSBpID09PSByb3V0ZXNNZXRhLmxlbmd0aCAtIDE7XG4gICAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gbWF0Y2hlZFBhdGhuYW1lID09PSBcIi9cIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UobWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCkgfHwgXCIvXCI7XG4gICAgbGV0IG1hdGNoID0gbWF0Y2hQYXRoKHtcbiAgICAgIHBhdGg6IG1ldGEucmVsYXRpdmVQYXRoLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogbWV0YS5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZW5kXG4gICAgfSwgcmVtYWluaW5nUGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIE9iamVjdC5hc3NpZ24obWF0Y2hlZFBhcmFtcywgbWF0Y2gucGFyYW1zKTtcbiAgICBsZXQgcm91dGUgPSBtZXRhLnJvdXRlO1xuICAgIG1hdGNoZXMucHVzaCh7XG4gICAgICAvLyBUT0RPOiBDYW4gdGhpcyBhcyBiZSBhdm9pZGVkP1xuICAgICAgcGFyYW1zOiBtYXRjaGVkUGFyYW1zLFxuICAgICAgcGF0aG5hbWU6IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZV0pLFxuICAgICAgcGF0aG5hbWVCYXNlOiBub3JtYWxpemVQYXRobmFtZShqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSkpLFxuICAgICAgcm91dGVcbiAgICB9KTtcblxuICAgIGlmIChtYXRjaC5wYXRobmFtZUJhc2UgIT09IFwiL1wiKSB7XG4gICAgICBtYXRjaGVkUGF0aG5hbWUgPSBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG4vKipcbiAqIFJldHVybnMgYSBwYXRoIHdpdGggcGFyYW1zIGludGVycG9sYXRlZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvdXRpbHMvZ2VuZXJhdGUtcGF0aFxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKHBhdGgsIHBhcmFtcykge1xuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBwYXRoLnJlcGxhY2UoLzooXFx3KykvZywgKF8sIGtleSkgPT4ge1xuICAgIGludmFyaWFudChwYXJhbXNba2V5XSAhPSBudWxsLCBcIk1pc3NpbmcgXFxcIjpcIiArIGtleSArIFwiXFxcIiBwYXJhbVwiKTtcbiAgICByZXR1cm4gcGFyYW1zW2tleV07XG4gIH0pLnJlcGxhY2UoLyhcXC8/KVxcKi8sIChfLCBwcmVmaXgsIF9fLCBzdHIpID0+IHtcbiAgICBjb25zdCBzdGFyID0gXCIqXCI7XG5cbiAgICBpZiAocGFyYW1zW3N0YXJdID09IG51bGwpIHtcbiAgICAgIC8vIElmIG5vIHNwbGF0IHdhcyBwcm92aWRlZCwgdHJpbSB0aGUgdHJhaWxpbmcgc2xhc2ggX3VubGVzc18gaXQnc1xuICAgICAgLy8gdGhlIGVudGlyZSBwYXRoXG4gICAgICByZXR1cm4gc3RyID09PSBcIi8qXCIgPyBcIi9cIiA6IFwiXCI7XG4gICAgfSAvLyBBcHBseSB0aGUgc3BsYXRcblxuXG4gICAgcmV0dXJuIFwiXCIgKyBwcmVmaXggKyBwYXJhbXNbc3Rhcl07XG4gIH0pO1xufVxuLyoqXG4gKiBQZXJmb3JtcyBwYXR0ZXJuIG1hdGNoaW5nIG9uIGEgVVJMIHBhdGhuYW1lIGFuZCByZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0XG4gKiB0aGUgbWF0Y2guXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L3V0aWxzL21hdGNoLXBhdGhcbiAqL1xuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSBcInN0cmluZ1wiKSB7XG4gICAgcGF0dGVybiA9IHtcbiAgICAgIHBhdGg6IHBhdHRlcm4sXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBmYWxzZSxcbiAgICAgIGVuZDogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBsZXQgW21hdGNoZXIsIHBhcmFtTmFtZXNdID0gY29tcGlsZVBhdGgocGF0dGVybi5wYXRoLCBwYXR0ZXJuLmNhc2VTZW5zaXRpdmUsIHBhdHRlcm4uZW5kKTtcbiAgbGV0IG1hdGNoID0gcGF0aG5hbWUubWF0Y2gobWF0Y2hlcik7XG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gbWF0Y2hbMF07XG4gIGxldCBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICBsZXQgY2FwdHVyZUdyb3VwcyA9IG1hdGNoLnNsaWNlKDEpO1xuICBsZXQgcGFyYW1zID0gcGFyYW1OYW1lcy5yZWR1Y2UoKG1lbW8sIHBhcmFtTmFtZSwgaW5kZXgpID0+IHtcbiAgICAvLyBXZSBuZWVkIHRvIGNvbXB1dGUgdGhlIHBhdGhuYW1lQmFzZSBoZXJlIHVzaW5nIHRoZSByYXcgc3BsYXQgdmFsdWVcbiAgICAvLyBpbnN0ZWFkIG9mIHVzaW5nIHBhcmFtc1tcIipcIl0gbGF0ZXIgYmVjYXVzZSBpdCB3aWxsIGJlIGRlY29kZWQgdGhlblxuICAgIGlmIChwYXJhbU5hbWUgPT09IFwiKlwiKSB7XG4gICAgICBsZXQgc3BsYXRWYWx1ZSA9IGNhcHR1cmVHcm91cHNbaW5kZXhdIHx8IFwiXCI7XG4gICAgICBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUuc2xpY2UoMCwgbWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCAtIHNwbGF0VmFsdWUubGVuZ3RoKS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gICAgfVxuXG4gICAgbWVtb1twYXJhbU5hbWVdID0gc2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50KGNhcHR1cmVHcm91cHNbaW5kZXhdIHx8IFwiXCIsIHBhcmFtTmFtZSk7XG4gICAgcmV0dXJuIG1lbW87XG4gIH0sIHt9KTtcbiAgcmV0dXJuIHtcbiAgICBwYXJhbXMsXG4gICAgcGF0aG5hbWU6IG1hdGNoZWRQYXRobmFtZSxcbiAgICBwYXRobmFtZUJhc2UsXG4gICAgcGF0dGVyblxuICB9O1xufVxuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoLCBjYXNlU2Vuc2l0aXZlLCBlbmQpIHtcbiAgaWYgKGNhc2VTZW5zaXRpdmUgPT09IHZvaWQgMCkge1xuICAgIGNhc2VTZW5zaXRpdmUgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChlbmQgPT09IHZvaWQgMCkge1xuICAgIGVuZCA9IHRydWU7XG4gIH1cblxuICB3YXJuaW5nKHBhdGggPT09IFwiKlwiIHx8ICFwYXRoLmVuZHNXaXRoKFwiKlwiKSB8fCBwYXRoLmVuZHNXaXRoKFwiLypcIiksIFwiUm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIFwiICsgKFwiXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIiBiZWNhdXNlIHRoZSBgKmAgY2hhcmFjdGVyIG11c3QgXCIpICsgXCJhbHdheXMgZm9sbG93IGEgYC9gIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgXCIgKyAoXCJwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIuXCIpKTtcbiAgbGV0IHBhcmFtTmFtZXMgPSBbXTtcbiAgbGV0IHJlZ2V4cFNvdXJjZSA9IFwiXlwiICsgcGF0aC5yZXBsYWNlKC9cXC8qXFwqPyQvLCBcIlwiKSAvLyBJZ25vcmUgdHJhaWxpbmcgLyBhbmQgLyosIHdlJ2xsIGhhbmRsZSBpdCBiZWxvd1xuICAucmVwbGFjZSgvXlxcLyovLCBcIi9cIikgLy8gTWFrZSBzdXJlIGl0IGhhcyBhIGxlYWRpbmcgL1xuICAucmVwbGFjZSgvW1xcXFwuKiteJD97fXwoKVtcXF1dL2csIFwiXFxcXCQmXCIpIC8vIEVzY2FwZSBzcGVjaWFsIHJlZ2V4IGNoYXJzXG4gIC5yZXBsYWNlKC86KFxcdyspL2csIChfLCBwYXJhbU5hbWUpID0+IHtcbiAgICBwYXJhbU5hbWVzLnB1c2gocGFyYW1OYW1lKTtcbiAgICByZXR1cm4gXCIoW15cXFxcL10rKVwiO1xuICB9KTtcblxuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikpIHtcbiAgICBwYXJhbU5hbWVzLnB1c2goXCIqXCIpO1xuICAgIHJlZ2V4cFNvdXJjZSArPSBwYXRoID09PSBcIipcIiB8fCBwYXRoID09PSBcIi8qXCIgPyBcIiguKikkXCIgLy8gQWxyZWFkeSBtYXRjaGVkIHRoZSBpbml0aWFsIC8sIGp1c3QgbWF0Y2ggdGhlIHJlc3RcbiAgICA6IFwiKD86XFxcXC8oLispfFxcXFwvKikkXCI7IC8vIERvbid0IGluY2x1ZGUgdGhlIC8gaW4gcGFyYW1zW1wiKlwiXVxuICB9IGVsc2UgaWYgKGVuZCkge1xuICAgIC8vIFdoZW4gbWF0Y2hpbmcgdG8gdGhlIGVuZCwgaWdub3JlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICByZWdleHBTb3VyY2UgKz0gXCJcXFxcLyokXCI7XG4gIH0gZWxzZSBpZiAocGF0aCAhPT0gXCJcIiAmJiBwYXRoICE9PSBcIi9cIikge1xuICAgIC8vIElmIG91ciBwYXRoIGlzIG5vbi1lbXB0eSBhbmQgY29udGFpbnMgYW55dGhpbmcgYmV5b25kIGFuIGluaXRpYWwgc2xhc2gsXG4gICAgLy8gdGhlbiB3ZSBoYXZlIF9zb21lXyBmb3JtIG9mIHBhdGggaW4gb3VyIHJlZ2V4IHNvIHdlIHNob3VsZCBleHBlY3QgdG9cbiAgICAvLyBtYXRjaCBvbmx5IGlmIHdlIGZpbmQgdGhlIGVuZCBvZiB0aGlzIHBhdGggc2VnbWVudC4gIExvb2sgZm9yIGFuIG9wdGlvbmFsXG4gICAgLy8gbm9uLWNhcHR1cmVkIHRyYWlsaW5nIHNsYXNoICh0byBtYXRjaCBhIHBvcnRpb24gb2YgdGhlIFVSTCkgb3IgdGhlIGVuZFxuICAgIC8vIG9mIHRoZSBwYXRoIChpZiB3ZSd2ZSBtYXRjaGVkIHRvIHRoZSBlbmQpLiAgV2UgdXNlZCB0byBkbyB0aGlzIHdpdGggYVxuICAgIC8vIHdvcmQgYm91bmRhcnkgYnV0IHRoYXQgZ2l2ZXMgZmFsc2UgcG9zaXRpdmVzIG9uIHJvdXRlcyBsaWtlXG4gICAgLy8gL3VzZXItcHJlZmVyZW5jZXMgc2luY2UgYC1gIGNvdW50cyBhcyBhIHdvcmQgYm91bmRhcnkuXG4gICAgcmVnZXhwU291cmNlICs9IFwiKD86KD89XFxcXC98JCkpXCI7XG4gIH0gZWxzZSA7XG5cbiAgbGV0IG1hdGNoZXIgPSBuZXcgUmVnRXhwKHJlZ2V4cFNvdXJjZSwgY2FzZVNlbnNpdGl2ZSA/IHVuZGVmaW5lZCA6IFwiaVwiKTtcbiAgcmV0dXJuIFttYXRjaGVyLCBwYXJhbU5hbWVzXTtcbn1cblxuZnVuY3Rpb24gc2FmZWx5RGVjb2RlVVJJKHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSSh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2FybmluZyhmYWxzZSwgXCJUaGUgVVJMIHBhdGggXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgY291bGQgbm90IGJlIGRlY29kZWQgYmVjYXVzZSBpdCBpcyBpcyBhIFwiICsgXCJtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHkgZHVlIHRvIGEgYmFkIHBlcmNlbnQgXCIgKyAoXCJlbmNvZGluZyAoXCIgKyBlcnJvciArIFwiKS5cIikpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQodmFsdWUsIHBhcmFtTmFtZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiVGhlIHZhbHVlIGZvciB0aGUgVVJMIHBhcmFtIFxcXCJcIiArIHBhcmFtTmFtZSArIFwiXFxcIiB3aWxsIG5vdCBiZSBkZWNvZGVkIGJlY2F1c2VcIiArIChcIiB0aGUgc3RyaW5nIFxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGlzIGEgbWFsZm9ybWVkIFVSTCBzZWdtZW50LiBUaGlzIGlzIHByb2JhYmx5XCIpICsgKFwiIGR1ZSB0byBhIGJhZCBwZXJjZW50IGVuY29kaW5nIChcIiArIGVycm9yICsgXCIpLlwiKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSByZXR1cm4gcGF0aG5hbWU7XG5cbiAgaWYgKCFwYXRobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYmFzZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBXZSB3YW50IHRvIGxlYXZlIHRyYWlsaW5nIHNsYXNoIGJlaGF2aW9yIGluIHRoZSB1c2VyJ3MgY29udHJvbCwgc28gaWYgdGhleVxuICAvLyBzcGVjaWZ5IGEgYmFzZW5hbWUgd2l0aCBhIHRyYWlsaW5nIHNsYXNoLCB3ZSBzaG91bGQgc3VwcG9ydCBpdFxuXG5cbiAgbGV0IHN0YXJ0SW5kZXggPSBiYXNlbmFtZS5lbmRzV2l0aChcIi9cIikgPyBiYXNlbmFtZS5sZW5ndGggLSAxIDogYmFzZW5hbWUubGVuZ3RoO1xuICBsZXQgbmV4dENoYXIgPSBwYXRobmFtZS5jaGFyQXQoc3RhcnRJbmRleCk7XG5cbiAgaWYgKG5leHRDaGFyICYmIG5leHRDaGFyICE9PSBcIi9cIikge1xuICAgIC8vIHBhdGhuYW1lIGRvZXMgbm90IHN0YXJ0IHdpdGggYmFzZW5hbWUvXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcGF0aG5hbWUuc2xpY2Uoc3RhcnRJbmRleCkgfHwgXCIvXCI7XG59XG5mdW5jdGlvbiBpbnZhcmlhbnQodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH1cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiB3YXJuaW5nKGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCBSb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGEgcmVzb2x2ZWQgcGF0aCBvYmplY3QgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIHBhdGhuYW1lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni91dGlscy9yZXNvbHZlLXBhdGhcbiAqL1xuXG5mdW5jdGlvbiByZXNvbHZlUGF0aCh0bywgZnJvbVBhdGhuYW1lKSB7XG4gIGlmIChmcm9tUGF0aG5hbWUgPT09IHZvaWQgMCkge1xuICAgIGZyb21QYXRobmFtZSA9IFwiL1wiO1xuICB9XG5cbiAgbGV0IHtcbiAgICBwYXRobmFtZTogdG9QYXRobmFtZSxcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gIGxldCBwYXRobmFtZSA9IHRvUGF0aG5hbWUgPyB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIvXCIpID8gdG9QYXRobmFtZSA6IHJlc29sdmVQYXRobmFtZSh0b1BhdGhuYW1lLCBmcm9tUGF0aG5hbWUpIDogZnJvbVBhdGhuYW1lO1xuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoKHNlYXJjaCksXG4gICAgaGFzaDogbm9ybWFsaXplSGFzaChoYXNoKVxuICB9O1xufVxuXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUocmVsYXRpdmVQYXRoLCBmcm9tUGF0aG5hbWUpIHtcbiAgbGV0IHNlZ21lbnRzID0gZnJvbVBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICBsZXQgcmVsYXRpdmVTZWdtZW50cyA9IHJlbGF0aXZlUGF0aC5zcGxpdChcIi9cIik7XG4gIHJlbGF0aXZlU2VnbWVudHMuZm9yRWFjaChzZWdtZW50ID0+IHtcbiAgICBpZiAoc2VnbWVudCA9PT0gXCIuLlwiKSB7XG4gICAgICAvLyBLZWVwIHRoZSByb290IFwiXCIgc2VnbWVudCBzbyB0aGUgcGF0aG5hbWUgc3RhcnRzIGF0IC9cbiAgICAgIGlmIChzZWdtZW50cy5sZW5ndGggPiAxKSBzZWdtZW50cy5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09IFwiLlwiKSB7XG4gICAgICBzZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWdtZW50cy5sZW5ndGggPiAxID8gc2VnbWVudHMuam9pbihcIi9cIikgOiBcIi9cIjtcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFBhdGhFcnJvcihjaGFyLCBmaWVsZCwgZGVzdCwgcGF0aCkge1xuICByZXR1cm4gXCJDYW5ub3QgaW5jbHVkZSBhICdcIiArIGNoYXIgKyBcIicgY2hhcmFjdGVyIGluIGEgbWFudWFsbHkgc3BlY2lmaWVkIFwiICsgKFwiYHRvLlwiICsgZmllbGQgKyBcImAgZmllbGQgW1wiICsgSlNPTi5zdHJpbmdpZnkocGF0aCkgKyBcIl0uICBQbGVhc2Ugc2VwYXJhdGUgaXQgb3V0IHRvIHRoZSBcIikgKyAoXCJgdG8uXCIgKyBkZXN0ICsgXCJgIGZpZWxkLiBBbHRlcm5hdGl2ZWx5IHlvdSBtYXkgcHJvdmlkZSB0aGUgZnVsbCBwYXRoIGFzIFwiKSArIFwiYSBzdHJpbmcgaW4gPExpbmsgdG89XFxcIi4uLlxcXCI+IGFuZCB0aGUgcm91dGVyIHdpbGwgcGFyc2UgaXQgZm9yIHlvdS5cIjtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBXaGVuIHByb2Nlc3NpbmcgcmVsYXRpdmUgbmF2aWdhdGlvbiB3ZSB3YW50IHRvIGlnbm9yZSBhbmNlc3RvciByb3V0ZXMgdGhhdFxuICogZG8gbm90IGNvbnRyaWJ1dGUgdG8gdGhlIHBhdGgsIHN1Y2ggdGhhdCBpbmRleC9wYXRobGVzcyBsYXlvdXQgcm91dGVzIGRvbid0XG4gKiBpbnRlcmZlcmUuXG4gKlxuICogRm9yIGV4YW1wbGUsIHdoZW4gbW92aW5nIGEgcm91dGUgZWxlbWVudCBpbnRvIGFuIGluZGV4IHJvdXRlIGFuZC9vciBhXG4gKiBwYXRobGVzcyBsYXlvdXQgcm91dGUsIHJlbGF0aXZlIGxpbmsgYmVoYXZpb3IgY29udGFpbmVkIHdpdGhpbiBzaG91bGQgc3RheVxuICogdGhlIHNhbWUuICBCb3RoIG9mIHRoZSBmb2xsb3dpbmcgZXhhbXBsZXMgc2hvdWxkIGxpbmsgYmFjayB0byB0aGUgcm9vdDpcbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL1wiPlxuICogICAgIDxSb3V0ZSBwYXRoPVwiYWNjb3VudHNcIiBlbGVtZW50PXs8TGluayB0bz1cIi4uXCJ9PlxuICogICA8L1JvdXRlPlxuICpcbiAqICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gKiAgICAgPFJvdXRlIHBhdGg9XCJhY2NvdW50c1wiPlxuICogICAgICAgPFJvdXRlIGVsZW1lbnQ9ezxBY2NvdW50c0xheW91dCAvPn0+ICAgICAgIC8vIDwtLSBEb2VzIG5vdCBjb250cmlidXRlXG4gKiAgICAgICAgIDxSb3V0ZSBpbmRleCBlbGVtZW50PXs8TGluayB0bz1cIi4uXCJ9IC8+ICAvLyA8LS0gRG9lcyBub3QgY29udHJpYnV0ZVxuICogICAgICAgPC9Sb3V0ZVxuICogICAgIDwvUm91dGU+XG4gKiAgIDwvUm91dGU+XG4gKi9cblxuXG5mdW5jdGlvbiBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIHJldHVybiBtYXRjaGVzLmZpbHRlcigobWF0Y2gsIGluZGV4KSA9PiBpbmRleCA9PT0gMCB8fCBtYXRjaC5yb3V0ZS5wYXRoICYmIG1hdGNoLnJvdXRlLnBhdGgubGVuZ3RoID4gMCk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVRvKHRvQXJnLCByb3V0ZVBhdGhuYW1lcywgbG9jYXRpb25QYXRobmFtZSwgaXNQYXRoUmVsYXRpdmUpIHtcbiAgaWYgKGlzUGF0aFJlbGF0aXZlID09PSB2b2lkIDApIHtcbiAgICBpc1BhdGhSZWxhdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgbGV0IHRvO1xuXG4gIGlmICh0eXBlb2YgdG9BcmcgPT09IFwic3RyaW5nXCIpIHtcbiAgICB0byA9IHBhcnNlUGF0aCh0b0FyZyk7XG4gIH0gZWxzZSB7XG4gICAgdG8gPSBfZXh0ZW5kcyh7fSwgdG9BcmcpO1xuICAgIGludmFyaWFudCghdG8ucGF0aG5hbWUgfHwgIXRvLnBhdGhuYW1lLmluY2x1ZGVzKFwiP1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIj9cIiwgXCJwYXRobmFtZVwiLCBcInNlYXJjaFwiLCB0bykpO1xuICAgIGludmFyaWFudCghdG8ucGF0aG5hbWUgfHwgIXRvLnBhdGhuYW1lLmluY2x1ZGVzKFwiI1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIiNcIiwgXCJwYXRobmFtZVwiLCBcImhhc2hcIiwgdG8pKTtcbiAgICBpbnZhcmlhbnQoIXRvLnNlYXJjaCB8fCAhdG8uc2VhcmNoLmluY2x1ZGVzKFwiI1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIiNcIiwgXCJzZWFyY2hcIiwgXCJoYXNoXCIsIHRvKSk7XG4gIH1cblxuICBsZXQgaXNFbXB0eVBhdGggPSB0b0FyZyA9PT0gXCJcIiB8fCB0by5wYXRobmFtZSA9PT0gXCJcIjtcbiAgbGV0IHRvUGF0aG5hbWUgPSBpc0VtcHR5UGF0aCA/IFwiL1wiIDogdG8ucGF0aG5hbWU7XG4gIGxldCBmcm9tOyAvLyBSb3V0aW5nIGlzIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IHBhdGhuYW1lIGlmIGV4cGxpY2l0bHkgcmVxdWVzdGVkLlxuICAvL1xuICAvLyBJZiBhIHBhdGhuYW1lIGlzIGV4cGxpY2l0bHkgcHJvdmlkZWQgaW4gYHRvYCwgaXQgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZVxuICAvLyByb3V0ZSBjb250ZXh0LiBUaGlzIGlzIGV4cGxhaW5lZCBpbiBgTm90ZSBvbiBgPExpbmsgdG8+YCB2YWx1ZXNgIGluIG91clxuICAvLyBtaWdyYXRpb24gZ3VpZGUgZnJvbSB2NSBhcyBhIG1lYW5zIG9mIGRpc2FtYmlndWF0aW9uIGJldHdlZW4gYHRvYCB2YWx1ZXNcbiAgLy8gdGhhdCBiZWdpbiB3aXRoIGAvYCBhbmQgdGhvc2UgdGhhdCBkbyBub3QuIEhvd2V2ZXIsIHRoaXMgaXMgcHJvYmxlbWF0aWMgZm9yXG4gIC8vIGB0b2AgdmFsdWVzIHRoYXQgZG8gbm90IHByb3ZpZGUgYSBwYXRobmFtZS4gYHRvYCBjYW4gc2ltcGx5IGJlIGEgc2VhcmNoIG9yXG4gIC8vIGhhc2ggc3RyaW5nLCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBhc3N1bWUgdGhhdCB0aGUgbmF2aWdhdGlvbiBpcyByZWxhdGl2ZVxuICAvLyB0byB0aGUgY3VycmVudCBsb2NhdGlvbidzIHBhdGhuYW1lIGFuZCAqbm90KiB0aGUgcm91dGUgcGF0aG5hbWUuXG5cbiAgaWYgKGlzUGF0aFJlbGF0aXZlIHx8IHRvUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIGZyb20gPSBsb2NhdGlvblBhdGhuYW1lO1xuICB9IGVsc2Uge1xuICAgIGxldCByb3V0ZVBhdGhuYW1lSW5kZXggPSByb3V0ZVBhdGhuYW1lcy5sZW5ndGggLSAxO1xuXG4gICAgaWYgKHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi4uXCIpKSB7XG4gICAgICBsZXQgdG9TZWdtZW50cyA9IHRvUGF0aG5hbWUuc3BsaXQoXCIvXCIpOyAvLyBFYWNoIGxlYWRpbmcgLi4gc2VnbWVudCBtZWFucyBcImdvIHVwIG9uZSByb3V0ZVwiIGluc3RlYWQgb2YgXCJnbyB1cCBvbmVcbiAgICAgIC8vIFVSTCBzZWdtZW50XCIuICBUaGlzIGlzIGEga2V5IGRpZmZlcmVuY2UgZnJvbSBob3cgPGEgaHJlZj4gd29ya3MgYW5kIGFcbiAgICAgIC8vIG1ham9yIHJlYXNvbiB3ZSBjYWxsIHRoaXMgYSBcInRvXCIgdmFsdWUgaW5zdGVhZCBvZiBhIFwiaHJlZlwiLlxuXG4gICAgICB3aGlsZSAodG9TZWdtZW50c1swXSA9PT0gXCIuLlwiKSB7XG4gICAgICAgIHRvU2VnbWVudHMuc2hpZnQoKTtcbiAgICAgICAgcm91dGVQYXRobmFtZUluZGV4IC09IDE7XG4gICAgICB9XG5cbiAgICAgIHRvLnBhdGhuYW1lID0gdG9TZWdtZW50cy5qb2luKFwiL1wiKTtcbiAgICB9IC8vIElmIHRoZXJlIGFyZSBtb3JlIFwiLi5cIiBzZWdtZW50cyB0aGFuIHBhcmVudCByb3V0ZXMsIHJlc29sdmUgcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgcm9vdCAvIFVSTC5cblxuXG4gICAgZnJvbSA9IHJvdXRlUGF0aG5hbWVJbmRleCA+PSAwID8gcm91dGVQYXRobmFtZXNbcm91dGVQYXRobmFtZUluZGV4XSA6IFwiL1wiO1xuICB9XG5cbiAgbGV0IHBhdGggPSByZXNvbHZlUGF0aCh0bywgZnJvbSk7IC8vIEVuc3VyZSB0aGUgcGF0aG5hbWUgaGFzIGEgdHJhaWxpbmcgc2xhc2ggaWYgdGhlIG9yaWdpbmFsIFwidG9cIiBoYWQgb25lXG5cbiAgbGV0IGhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCA9IHRvUGF0aG5hbWUgJiYgdG9QYXRobmFtZSAhPT0gXCIvXCIgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7IC8vIE9yIGlmIHRoaXMgd2FzIGEgbGluayB0byB0aGUgY3VycmVudCBwYXRoIHdoaWNoIGhhcyBhIHRyYWlsaW5nIHNsYXNoXG5cbiAgbGV0IGhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoID0gKGlzRW1wdHlQYXRoIHx8IHRvUGF0aG5hbWUgPT09IFwiLlwiKSAmJiBsb2NhdGlvblBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKTtcblxuICBpZiAoIXBhdGgucGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpICYmIChoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggfHwgaGFzQ3VycmVudFRyYWlsaW5nU2xhc2gpKSB7XG4gICAgcGF0aC5wYXRobmFtZSArPSBcIi9cIjtcbiAgfVxuXG4gIHJldHVybiBwYXRoO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldFRvUGF0aG5hbWUodG8pIHtcbiAgLy8gRW1wdHkgc3RyaW5ncyBzaG91bGQgYmUgdHJlYXRlZCB0aGUgc2FtZSBhcyAvIHBhdGhzXG4gIHJldHVybiB0byA9PT0gXCJcIiB8fCB0by5wYXRobmFtZSA9PT0gXCJcIiA/IFwiL1wiIDogdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKS5wYXRobmFtZSA6IHRvLnBhdGhuYW1lO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmNvbnN0IGpvaW5QYXRocyA9IHBhdGhzID0+IHBhdGhzLmpvaW4oXCIvXCIpLnJlcGxhY2UoL1xcL1xcLysvZywgXCIvXCIpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmNvbnN0IG5vcm1hbGl6ZVBhdGhuYW1lID0gcGF0aG5hbWUgPT4gcGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5jb25zdCBub3JtYWxpemVTZWFyY2ggPSBzZWFyY2ggPT4gIXNlYXJjaCB8fCBzZWFyY2ggPT09IFwiP1wiID8gXCJcIiA6IHNlYXJjaC5zdGFydHNXaXRoKFwiP1wiKSA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmNvbnN0IG5vcm1hbGl6ZUhhc2ggPSBoYXNoID0+ICFoYXNoIHx8IGhhc2ggPT09IFwiI1wiID8gXCJcIiA6IGhhc2guc3RhcnRzV2l0aChcIiNcIikgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuLyoqXG4gKiBUaGlzIGlzIGEgc2hvcnRjdXQgZm9yIGNyZWF0aW5nIGBhcHBsaWNhdGlvbi9qc29uYCByZXNwb25zZXMuIENvbnZlcnRzIGBkYXRhYFxuICogdG8gSlNPTiBhbmQgc2V0cyB0aGUgYENvbnRlbnQtVHlwZWAgaGVhZGVyLlxuICovXG5cbmNvbnN0IGpzb24gPSBmdW5jdGlvbiBqc29uKGRhdGEsIGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSB7fTtcbiAgfVxuXG4gIGxldCByZXNwb25zZUluaXQgPSB0eXBlb2YgaW5pdCA9PT0gXCJudW1iZXJcIiA/IHtcbiAgICBzdGF0dXM6IGluaXRcbiAgfSA6IGluaXQ7XG4gIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMocmVzcG9uc2VJbml0LmhlYWRlcnMpO1xuXG4gIGlmICghaGVhZGVycy5oYXMoXCJDb250ZW50LVR5cGVcIikpIHtcbiAgICBoZWFkZXJzLnNldChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIik7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpLCBfZXh0ZW5kcyh7fSwgcmVzcG9uc2VJbml0LCB7XG4gICAgaGVhZGVyc1xuICB9KSk7XG59O1xuY2xhc3MgQWJvcnRlZERlZmVycmVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuY2xhc3MgRGVmZXJyZWREYXRhIHtcbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIHRoaXMucGVuZGluZ0tleXMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5zdWJzY3JpYmVyID0gdW5kZWZpbmVkO1xuICAgIGludmFyaWFudChkYXRhICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGRhdGEpLCBcImRlZmVyKCkgb25seSBhY2NlcHRzIHBsYWluIG9iamVjdHNcIik7IC8vIFNldCB1cCBhbiBBYm9ydENvbnRyb2xsZXIgKyBQcm9taXNlIHdlIGNhbiByYWNlIGFnYWluc3QgdG8gZXhpdCBlYXJseVxuICAgIC8vIGNhbmNlbGxhdGlvblxuXG4gICAgbGV0IHJlamVjdDtcbiAgICB0aGlzLmFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgICBsZXQgb25BYm9ydCA9ICgpID0+IHJlamVjdChuZXcgQWJvcnRlZERlZmVycmVkRXJyb3IoXCJEZWZlcnJlZCBkYXRhIGFib3J0ZWRcIikpO1xuXG4gICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsID0gKCkgPT4gdGhpcy5jb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG5cbiAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmRhdGEgPSBPYmplY3QuZW50cmllcyhkYXRhKS5yZWR1Y2UoKGFjYywgX3JlZikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWY7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgW2tleV06IHRoaXMudHJhY2tQcm9taXNlKGtleSwgdmFsdWUpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG4gIH1cblxuICB0cmFja1Byb21pc2Uoa2V5LCB2YWx1ZSkge1xuICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLnBlbmRpbmdLZXlzLmFkZChrZXkpOyAvLyBXZSBzdG9yZSBhIGxpdHRsZSB3cmFwcGVyIHByb21pc2UgdGhhdCB3aWxsIGJlIGV4dGVuZGVkIHdpdGhcbiAgICAvLyBfZGF0YS9fZXJyb3IgcHJvcHMgdXBvbiByZXNvbHZlL3JlamVjdFxuXG4gICAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJhY2UoW3ZhbHVlLCB0aGlzLmFib3J0UHJvbWlzZV0pLnRoZW4oZGF0YSA9PiB0aGlzLm9uU2V0dGxlKHByb21pc2UsIGtleSwgbnVsbCwgZGF0YSksIGVycm9yID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvcikpOyAvLyBSZWdpc3RlciByZWplY3Rpb24gbGlzdGVuZXJzIHRvIGF2b2lkIHVuY2F1Z2h0IHByb21pc2UgcmVqZWN0aW9ucyBvblxuICAgIC8vIGVycm9ycyBvciBhYm9ydGVkIGRlZmVycmVkIHZhbHVlc1xuXG4gICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBvblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yLCBkYXRhKSB7XG4gICAgaWYgKHRoaXMuY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCAmJiBlcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICB0aGlzLnBlbmRpbmdLZXlzLmRlbGV0ZShrZXkpO1xuXG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gTm90aGluZyBsZWZ0IHRvIGFib3J0IVxuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3Vic2NyaWJlciA9IHRoaXMuc3Vic2NyaWJlcjtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBlcnJvclxuICAgICAgfSk7XG4gICAgICBzdWJzY3JpYmVyICYmIHN1YnNjcmliZXIoZmFsc2UpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZGF0YVwiLCB7XG4gICAgICBnZXQ6ICgpID0+IGRhdGFcbiAgICB9KTtcbiAgICBzdWJzY3JpYmVyICYmIHN1YnNjcmliZXIoZmFsc2UpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgc3Vic2NyaWJlKGZuKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVyID0gZm47XG4gIH1cblxuICBjYW5jZWwoKSB7XG4gICAgdGhpcy5jb250cm9sbGVyLmFib3J0KCk7XG4gICAgdGhpcy5wZW5kaW5nS2V5cy5mb3JFYWNoKCh2LCBrKSA9PiB0aGlzLnBlbmRpbmdLZXlzLmRlbGV0ZShrKSk7XG4gICAgbGV0IHN1YnNjcmliZXIgPSB0aGlzLnN1YnNjcmliZXI7XG4gICAgc3Vic2NyaWJlciAmJiBzdWJzY3JpYmVyKHRydWUpO1xuICB9XG5cbiAgYXN5bmMgcmVzb2x2ZURhdGEoc2lnbmFsKSB7XG4gICAgbGV0IGFib3J0ZWQgPSBmYWxzZTtcblxuICAgIGlmICghdGhpcy5kb25lKSB7XG4gICAgICBsZXQgb25BYm9ydCA9ICgpID0+IHRoaXMuY2FuY2VsKCk7XG5cbiAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgICBhYm9ydGVkID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlKGFib3J0ZWQgPT4ge1xuICAgICAgICAgIHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG5cbiAgICAgICAgICBpZiAoYWJvcnRlZCB8fCB0aGlzLmRvbmUpIHtcbiAgICAgICAgICAgIHJlc29sdmUoYWJvcnRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhYm9ydGVkO1xuICB9XG5cbiAgZ2V0IGRvbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVuZGluZ0tleXMuc2l6ZSA9PT0gMDtcbiAgfVxuXG4gIGdldCB1bndyYXBwZWREYXRhKCkge1xuICAgIGludmFyaWFudCh0aGlzLmRhdGEgIT09IG51bGwgJiYgdGhpcy5kb25lLCBcIkNhbiBvbmx5IHVud3JhcCBkYXRhIG9uIGluaXRpYWxpemVkIGFuZCBzZXR0bGVkIGRlZmVycmVkc1wiKTtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy5kYXRhKS5yZWR1Y2UoKGFjYywgX3JlZjIpID0+IHtcbiAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBfcmVmMjtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFjYywge1xuICAgICAgICBba2V5XTogdW53cmFwVHJhY2tlZFByb21pc2UodmFsdWUpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG4gIH1cblxufVxuXG5mdW5jdGlvbiBpc1RyYWNrZWRQcm9taXNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UgJiYgdmFsdWUuX3RyYWNrZWQgPT09IHRydWU7XG59XG5cbmZ1bmN0aW9uIHVud3JhcFRyYWNrZWRQcm9taXNlKHZhbHVlKSB7XG4gIGlmICghaXNUcmFja2VkUHJvbWlzZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBpZiAodmFsdWUuX2Vycm9yKSB7XG4gICAgdGhyb3cgdmFsdWUuX2Vycm9yO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlLl9kYXRhO1xufVxuXG5mdW5jdGlvbiBkZWZlcihkYXRhKSB7XG4gIHJldHVybiBuZXcgRGVmZXJyZWREYXRhKGRhdGEpO1xufVxuLyoqXG4gKiBBIHJlZGlyZWN0IHJlc3BvbnNlLiBTZXRzIHRoZSBzdGF0dXMgY29kZSBhbmQgdGhlIGBMb2NhdGlvbmAgaGVhZGVyLlxuICogRGVmYXVsdHMgdG8gXCIzMDIgRm91bmRcIi5cbiAqL1xuXG5jb25zdCByZWRpcmVjdCA9IGZ1bmN0aW9uIHJlZGlyZWN0KHVybCwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IDMwMjtcbiAgfVxuXG4gIGxldCByZXNwb25zZUluaXQgPSBpbml0O1xuXG4gIGlmICh0eXBlb2YgcmVzcG9uc2VJbml0ID09PSBcIm51bWJlclwiKSB7XG4gICAgcmVzcG9uc2VJbml0ID0ge1xuICAgICAgc3RhdHVzOiByZXNwb25zZUluaXRcbiAgICB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiByZXNwb25zZUluaXQuc3RhdHVzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmVzcG9uc2VJbml0LnN0YXR1cyA9IDMwMjtcbiAgfVxuXG4gIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMocmVzcG9uc2VJbml0LmhlYWRlcnMpO1xuICBoZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIHVybCk7XG4gIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwgX2V4dGVuZHMoe30sIHJlc3BvbnNlSW5pdCwge1xuICAgIGhlYWRlcnNcbiAgfSkpO1xufTtcbi8qKlxuICogQHByaXZhdGVcbiAqIFV0aWxpdHkgY2xhc3Mgd2UgdXNlIHRvIGhvbGQgYXV0by11bndyYXBwZWQgNHh4LzV4eCBSZXNwb25zZSBib2RpZXNcbiAqL1xuXG5jbGFzcyBFcnJvclJlc3BvbnNlIHtcbiAgY29uc3RydWN0b3Ioc3RhdHVzLCBzdGF0dXNUZXh0LCBkYXRhKSB7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dCB8fCBcIlwiO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gIH1cblxufVxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZXJyb3IgaXMgYW4gRXJyb3JSZXNwb25zZSBnZW5lcmF0ZWQgZnJvbSBhIDR4eC81eHhcbiAqIFJlc3BvbnNlIHRocm93IGZyb20gYW4gYWN0aW9uL2xvYWRlclxuICovXG5cbmZ1bmN0aW9uIGlzUm91dGVFcnJvclJlc3BvbnNlKGUpIHtcbiAgcmV0dXJuIGUgaW5zdGFuY2VvZiBFcnJvclJlc3BvbnNlO1xufVxuXG5jb25zdCBJRExFX05BVklHQVRJT04gPSB7XG4gIHN0YXRlOiBcImlkbGVcIixcbiAgbG9jYXRpb246IHVuZGVmaW5lZCxcbiAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gIGZvcm1EYXRhOiB1bmRlZmluZWRcbn07XG5jb25zdCBJRExFX0ZFVENIRVIgPSB7XG4gIHN0YXRlOiBcImlkbGVcIixcbiAgZGF0YTogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZFxufTtcbmNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5jb25zdCBpc1NlcnZlciA9ICFpc0Jyb3dzZXI7IC8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBjcmVhdGVSb3V0ZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQ3JlYXRlIGEgcm91dGVyIGFuZCBsaXN0ZW4gdG8gaGlzdG9yeSBQT1AgbmF2aWdhdGlvbnNcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXIoaW5pdCkge1xuICBpbnZhcmlhbnQoaW5pdC5yb3V0ZXMubGVuZ3RoID4gMCwgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byBjcmVhdGVSb3V0ZXJcIik7XG4gIGxldCBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhpbml0LnJvdXRlcyk7IC8vIENsZWFudXAgZnVuY3Rpb24gZm9yIGhpc3RvcnlcblxuICBsZXQgdW5saXN0ZW5IaXN0b3J5ID0gbnVsbDsgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbnMgdG8gY2FsbCBvbiBhbGwgc3RhdGUgY2hhbmdlc1xuXG4gIGxldCBzdWJzY3JpYmVycyA9IG5ldyBTZXQoKTsgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBvYmplY3QgdG8gaG9sZCBzY3JvbGwgcmVzdG9yYXRpb24gbG9jYXRpb25zIGR1cmluZyByb3V0aW5nXG5cbiAgbGV0IHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gbnVsbDsgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbiB0byBnZXQgc2Nyb2xsIHJlc3RvcmF0aW9uIGtleXNcblxuICBsZXQgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBudWxsOyAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxuXG4gIGxldCBnZXRTY3JvbGxQb3NpdGlvbiA9IG51bGw7IC8vIE9uZS10aW1lIGZsYWcgdG8gY29udHJvbCB0aGUgaW5pdGlhbCBoeWRyYXRpb24gc2Nyb2xsIHJlc3RvcmF0aW9uLiAgQmVjYXVzZVxuICAvLyB3ZSBkb24ndCBnZXQgdGhlIHNhdmVkIHBvc2l0aW9ucyBmcm9tIDxTY3JvbGxSZXN0b3JhdGlvbiAvPiB1bnRpbCBfYWZ0ZXJfXG4gIC8vIHRoZSBpbml0aWFsIHJlbmRlciwgd2UgbmVlZCB0byBtYW51YWxseSB0cmlnZ2VyIGEgc2VwYXJhdGUgdXBkYXRlU3RhdGUgdG9cbiAgLy8gc2VuZCBhbG9uZyB0aGUgcmVzdG9yZVNjcm9sbFBvc2l0aW9uXG5cbiAgbGV0IGluaXRpYWxTY3JvbGxSZXN0b3JlZCA9IGZhbHNlO1xuICBsZXQgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBpbml0Lmhpc3RvcnkubG9jYXRpb24sIGluaXQuYmFzZW5hbWUpO1xuICBsZXQgaW5pdGlhbEVycm9ycyA9IG51bGw7XG5cbiAgaWYgKGluaXRpYWxNYXRjaGVzID09IG51bGwpIHtcbiAgICAvLyBJZiB3ZSBkbyBub3QgbWF0Y2ggYSB1c2VyLXByb3ZpZGVkLXJvdXRlLCBmYWxsIGJhY2sgdG8gdGhlIHJvb3RcbiAgICAvLyB0byBhbGxvdyB0aGUgZXJyb3IgYm91bmRhcnkgdG8gdGFrZSBvdmVyXG4gICAgbGV0IHtcbiAgICAgIG1hdGNoZXMsXG4gICAgICByb3V0ZSxcbiAgICAgIGVycm9yXG4gICAgfSA9IGdldE5vdEZvdW5kTWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICBpbml0aWFsTWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgaW5pdGlhbEVycm9ycyA9IHtcbiAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgfTtcbiAgfVxuXG4gIGxldCBpbml0aWFsaXplZCA9ICFpbml0aWFsTWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5sb2FkZXIpIHx8IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsO1xuICBsZXQgcm91dGVyO1xuICBsZXQgc3RhdGUgPSB7XG4gICAgaGlzdG9yeUFjdGlvbjogaW5pdC5oaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaW5pdC5oaXN0b3J5LmxvY2F0aW9uLFxuICAgIG1hdGNoZXM6IGluaXRpYWxNYXRjaGVzLFxuICAgIGluaXRpYWxpemVkLFxuICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IG51bGwsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0OiBmYWxzZSxcbiAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgIGxvYWRlckRhdGE6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSB8fCB7fSxcbiAgICBhY3Rpb25EYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmFjdGlvbkRhdGEgfHwgbnVsbCxcbiAgICBlcnJvcnM6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuZXJyb3JzIHx8IGluaXRpYWxFcnJvcnMsXG4gICAgZmV0Y2hlcnM6IG5ldyBNYXAoKVxuICB9OyAvLyAtLSBTdGF0ZWZ1bCBpbnRlcm5hbCB2YXJpYWJsZXMgdG8gbWFuYWdlIG5hdmlnYXRpb25zIC0tXG4gIC8vIEN1cnJlbnQgbmF2aWdhdGlvbiBpbiBwcm9ncmVzcyAodG8gYmUgY29tbWl0dGVkIGluIGNvbXBsZXRlTmF2aWdhdGlvbilcblxuICBsZXQgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5Qb3A7IC8vIFNob3VsZCB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIHByZXZlbnQgdGhlIHNjcm9sbCByZXNldCBpZiBzY3JvbGwgY2Fubm90XG4gIC8vIGJlIHJlc3RvcmVkP1xuXG4gIGxldCBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gZmFsc2U7IC8vIEFib3J0Q29udHJvbGxlciBmb3IgdGhlIGFjdGl2ZSBuYXZpZ2F0aW9uXG5cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcjsgLy8gV2UgdXNlIHRoaXMgdG8gYXZvaWQgdG91Y2hpbmcgaGlzdG9yeSBpbiBjb21wbGV0ZU5hdmlnYXRpb24gaWYgYVxuICAvLyByZXZhbGlkYXRpb24gaXMgZW50aXJlbHkgdW5pbnRlcnJ1cHRlZFxuXG4gIGxldCBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTsgLy8gVXNlIHRoaXMgaW50ZXJuYWwgZmxhZyB0byBmb3JjZSByZXZhbGlkYXRpb24gb2YgYWxsIGxvYWRlcnM6XG4gIC8vICAtIHN1Ym1pc3Npb25zIChjb21wbGV0ZWQgb3IgaW50ZXJydXB0ZWQpXG4gIC8vICAtIHVzZVJldmFsaWRhdGUoKVxuICAvLyAgLSBYLVJlbWl4LVJldmFsaWRhdGUgKGZyb20gcmVkaXJlY3QpXG5cbiAgbGV0IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTsgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSByb3V0ZXMgdGhhdCByZXF1aXJlIHJldmFsaWRhdGlvbiBkdWVcbiAgLy8gdG8gYSBjYW5jZWxsZWQgZGVmZXJyZWQgb24gYWN0aW9uIHN1Ym1pc3Npb25cblxuICBsZXQgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTsgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSBmZXRjaGVyIGxvYWRzIHRoYXQgd2VyZSBjYW5jZWxsZWQgYnkgYW5cbiAgLy8gYWN0aW9uIG5hdmlnYXRpb24gYW5kIHJlcXVpcmUgcmV2YWxpZGF0aW9uXG5cbiAgbGV0IGNhbmNlbGxlZEZldGNoZXJMb2FkcyA9IFtdOyAvLyBBYm9ydENvbnRyb2xsZXJzIGZvciBhbnkgaW4tZmxpZ2h0IGZldGNoZXJzXG5cbiAgbGV0IGZldGNoQ29udHJvbGxlcnMgPSBuZXcgTWFwKCk7IC8vIFRyYWNrIGxvYWRzIGJhc2VkIG9uIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IHN0YXJ0ZWRcblxuICBsZXQgaW5jcmVtZW50aW5nTG9hZElkID0gMDsgLy8gVHJhY2sgdGhlIG91dHN0YW5kaW5nIHBlbmRpbmcgbmF2aWdhdGlvbiBkYXRhIGxvYWQgdG8gYmUgY29tcGFyZWQgYWdhaW5zdFxuICAvLyB0aGUgZ2xvYmFsbHkgaW5jcmVtZW50aW5nIGxvYWQgd2hlbiBhIGZldGNoZXIgbG9hZCBsYW5kcyBhZnRlciBhIGNvbXBsZXRlZFxuICAvLyBuYXZpZ2F0aW9uXG5cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID0gLTE7IC8vIEZldGNoZXJzIHRoYXQgdHJpZ2dlcmVkIGRhdGEgcmVsb2FkcyBhcyBhIHJlc3VsdCBvZiB0aGVpciBhY3Rpb25zXG5cbiAgbGV0IGZldGNoUmVsb2FkSWRzID0gbmV3IE1hcCgpOyAvLyBGZXRjaGVycyB0aGF0IHRyaWdnZXJlZCByZWRpcmVjdCBuYXZpZ2F0aW9ucyBmcm9tIHRoZWlyIGFjdGlvbnNcblxuICBsZXQgZmV0Y2hSZWRpcmVjdElkcyA9IG5ldyBTZXQoKTsgLy8gTW9zdCByZWNlbnQgaHJlZi9tYXRjaCBmb3IgZmV0Y2hlci5sb2FkIGNhbGxzIGZvciBmZXRjaGVyc1xuXG4gIGxldCBmZXRjaExvYWRNYXRjaGVzID0gbmV3IE1hcCgpOyAvLyBTdG9yZSBEZWZlcnJlZERhdGEgaW5zdGFuY2VzIGZvciBhY3RpdmUgcm91dGUgbWF0Y2hlcy4gIFdoZW4gYVxuICAvLyByb3V0ZSBsb2FkZXIgcmV0dXJucyBkZWZlcigpIHdlIHN0aWNrIG9uZSBpbiBoZXJlLiAgVGhlbiwgd2hlbiBhIG5lc3RlZFxuICAvLyBwcm9taXNlIHJlc29sdmVzIHdlIHVwZGF0ZSBsb2FkZXJEYXRhLiAgSWYgYSBuZXcgbmF2aWdhdGlvbiBzdGFydHMgd2VcbiAgLy8gY2FuY2VsIGFjdGl2ZSBkZWZlcnJlZHMgZm9yIGVsaW1pbmF0ZWQgcm91dGVzLlxuXG4gIGxldCBhY3RpdmVEZWZlcnJlZHMgPSBuZXcgTWFwKCk7IC8vIEluaXRpYWxpemUgdGhlIHJvdXRlciwgYWxsIHNpZGUgZWZmZWN0cyBzaG91bGQgYmUga2lja2VkIG9mZiBmcm9tIGhlcmUuXG4gIC8vIEltcGxlbWVudGVkIGFzIGEgRmx1ZW50IEFQSSBmb3IgZWFzZSBvZjpcbiAgLy8gICBsZXQgcm91dGVyID0gY3JlYXRlUm91dGVyKGluaXQpLmluaXRpYWxpemUoKTtcblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIC8vIElmIGhpc3RvcnkgaW5mb3JtcyB1cyBvZiBhIFBPUCBuYXZpZ2F0aW9uLCBzdGFydCB0aGUgbmF2aWdhdGlvbiBidXQgZG8gbm90IHVwZGF0ZVxuICAgIC8vIHN0YXRlLiAgV2UnbGwgdXBkYXRlIG91ciBvd24gc3RhdGUgb25jZSB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXNcbiAgICB1bmxpc3Rlbkhpc3RvcnkgPSBpbml0Lmhpc3RvcnkubGlzdGVuKF9yZWYgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgYWN0aW9uOiBoaXN0b3J5QWN0aW9uLFxuICAgICAgICBsb2NhdGlvblxuICAgICAgfSA9IF9yZWY7XG4gICAgICByZXR1cm4gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uKTtcbiAgICB9KTsgLy8gS2ljayBvZmYgaW5pdGlhbCBkYXRhIGxvYWQgaWYgbmVlZGVkLiAgVXNlIFBvcCB0byBhdm9pZCBtb2RpZnlpbmcgaGlzdG9yeVxuXG4gICAgaWYgKCFzdGF0ZS5pbml0aWFsaXplZCkge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKEFjdGlvbi5Qb3AsIHN0YXRlLmxvY2F0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm91dGVyO1xuICB9IC8vIENsZWFuIHVwIGEgcm91dGVyIGFuZCBpdCdzIHNpZGUgZWZmZWN0c1xuXG5cbiAgZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodW5saXN0ZW5IaXN0b3J5KSB7XG4gICAgICB1bmxpc3Rlbkhpc3RvcnkoKTtcbiAgICB9XG5cbiAgICBzdWJzY3JpYmVycy5jbGVhcigpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5mb3JFYWNoKChfLCBrZXkpID0+IGRlbGV0ZUZldGNoZXIoa2V5KSk7XG4gIH0gLy8gU3Vic2NyaWJlIHRvIHN0YXRlIHVwZGF0ZXMgZm9yIHRoZSByb3V0ZXJcblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShmbikge1xuICAgIHN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHN1YnNjcmliZXJzLmRlbGV0ZShmbik7XG4gIH0gLy8gVXBkYXRlIG91ciBzdGF0ZSBhbmQgbm90aWZ5IHRoZSBjYWxsaW5nIGNvbnRleHQgb2YgdGhlIGNoYW5nZVxuXG5cbiAgZnVuY3Rpb24gdXBkYXRlU3RhdGUobmV3U3RhdGUpIHtcbiAgICBzdGF0ZSA9IF9leHRlbmRzKHt9LCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgIHN1YnNjcmliZXJzLmZvckVhY2goc3Vic2NyaWJlciA9PiBzdWJzY3JpYmVyKHN0YXRlKSk7XG4gIH0gLy8gQ29tcGxldGUgYSBuYXZpZ2F0aW9uIHJldHVybmluZyB0aGUgc3RhdGUubmF2aWdhdGlvbiBiYWNrIHRvIHRoZSBJRExFX05BVklHQVRJT05cbiAgLy8gYW5kIHNldHRpbmcgc3RhdGUuW2hpc3RvcnlBY3Rpb24vbG9jYXRpb24vbWF0Y2hlc10gdG8gdGhlIG5ldyByb3V0ZS5cbiAgLy8gLSBMb2NhdGlvbiBpcyBhIHJlcXVpcmVkIHBhcmFtXG4gIC8vIC0gTmF2aWdhdGlvbiB3aWxsIGFsd2F5cyBiZSBzZXQgdG8gSURMRV9OQVZJR0FUSU9OXG4gIC8vIC0gQ2FuIHBhc3MgYW55IG90aGVyIHN0YXRlIGluIG5ld1N0YXRlXG5cblxuICBmdW5jdGlvbiBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIG5ld1N0YXRlKSB7XG4gICAgdmFyIF9zdGF0ZSRuYXZpZ2F0aW9uJGZvcjtcblxuICAgIC8vIERlZHVjZSBpZiB3ZSdyZSBpbiBhIGxvYWRpbmcvYWN0aW9uUmVsb2FkIHN0YXRlOlxuICAgIC8vIC0gV2UgaGF2ZSBjb21taXR0ZWQgYWN0aW9uRGF0YSBpbiB0aGUgc3RvcmVcbiAgICAvLyAtIFRoZSBjdXJyZW50IG5hdmlnYXRpb24gd2FzIGEgc3VibWlzc2lvblxuICAgIC8vIC0gV2UncmUgcGFzdCB0aGUgc3VibWl0dGluZyBzdGF0ZSBhbmQgaW50byB0aGUgbG9hZGluZyBzdGF0ZVxuICAgIC8vIC0gVGhlIGxvY2F0aW9uIHdlJ3ZlIGZpbmlzaGVkIGxvYWRpbmcgaXMgZGlmZmVyZW50IGZyb20gdGhlIHN1Ym1pc3Npb25cbiAgICAvLyAgIGxvY2F0aW9uLCBpbmRpY2F0aW5nIHdlIHJlZGlyZWN0ZWQgZnJvbSB0aGUgYWN0aW9uIChhdm9pZHMgZmFsc2VcbiAgICAvLyAgIHBvc2l0aXZlcyBmb3IgbG9hZGluZy9zdWJtaXNzaW9uUmVkaXJlY3Qgd2hlbiBhY3Rpb25EYXRhIHJldHVybmVkXG4gICAgLy8gICBvbiBhIHByaW9yIHN1Ym1pc3Npb24pXG4gICAgbGV0IGlzQWN0aW9uUmVsb2FkID0gc3RhdGUuYWN0aW9uRGF0YSAhPSBudWxsICYmIHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCAhPSBudWxsICYmIHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwibG9hZGluZ1wiICYmICgoX3N0YXRlJG5hdmlnYXRpb24kZm9yID0gc3RhdGUubmF2aWdhdGlvbi5mb3JtQWN0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJG5hdmlnYXRpb24kZm9yLnNwbGl0KFwiP1wiKVswXSkgPT09IGxvY2F0aW9uLnBhdGhuYW1lOyAvLyBBbHdheXMgcHJlc2VydmUgYW55IGV4aXN0aW5nIGxvYWRlckRhdGEgZnJvbSByZS11c2VkIHJvdXRlc1xuXG4gICAgbGV0IG5ld0xvYWRlckRhdGEgPSBuZXdTdGF0ZS5sb2FkZXJEYXRhID8ge1xuICAgICAgbG9hZGVyRGF0YTogbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLm1hdGNoZXMgfHwgW10pXG4gICAgfSA6IHt9O1xuICAgIHVwZGF0ZVN0YXRlKF9leHRlbmRzKHt9LCBpc0FjdGlvblJlbG9hZCA/IHt9IDoge1xuICAgICAgYWN0aW9uRGF0YTogbnVsbFxuICAgIH0sIG5ld1N0YXRlLCBuZXdMb2FkZXJEYXRhLCB7XG4gICAgICBoaXN0b3J5QWN0aW9uOiBwZW5kaW5nQWN0aW9uLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBpbml0aWFsaXplZDogdHJ1ZSxcbiAgICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICAgIHJldmFsaWRhdGlvbjogXCJpZGxlXCIsXG4gICAgICAvLyBEb24ndCByZXN0b3JlIG9uIHN1Ym1pc3Npb24gbmF2aWdhdGlvbnNcbiAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogc3RhdGUubmF2aWdhdGlvbi5mb3JtRGF0YSA/IGZhbHNlIDogZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbmV3U3RhdGUubWF0Y2hlcyB8fCBzdGF0ZS5tYXRjaGVzKSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldFxuICAgIH0pKTtcblxuICAgIGlmIChpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24pIDsgZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlBvcCkgOyBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUHVzaCkge1xuICAgICAgaW5pdC5oaXN0b3J5LnB1c2gobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5SZXBsYWNlKSB7XG4gICAgICBpbml0Lmhpc3RvcnkucmVwbGFjZShsb2NhdGlvbiwgbG9jYXRpb24uc3RhdGUpO1xuICAgIH0gLy8gUmVzZXQgc3RhdGVmdWwgbmF2aWdhdGlvbiB2YXJzXG5cblxuICAgIHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTtcbiAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTtcbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gZmFsc2U7XG4gICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTtcbiAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBbXTtcbiAgfSAvLyBUcmlnZ2VyIGEgbmF2aWdhdGlvbiBldmVudCwgd2hpY2ggY2FuIGVpdGhlciBiZSBhIG51bWVyaWNhbCBQT1Agb3IgYSBQVVNIXG4gIC8vIHJlcGxhY2Ugd2l0aCBhbiBvcHRpb25hbCBzdWJtaXNzaW9uXG5cblxuICBhc3luYyBmdW5jdGlvbiBuYXZpZ2F0ZSh0bywgb3B0cykge1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgZXJyb3JcbiAgICB9ID0gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKHRvLCBvcHRzKTtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihzdGF0ZS5sb2NhdGlvbiwgcGF0aCwgb3B0cyAmJiBvcHRzLnN0YXRlKTsgLy8gV2hlbiB1c2luZyBuYXZpZ2F0ZSBhcyBhIFBVU0gvUkVQTEFDRSB3ZSBhcmVuJ3QgcmVhZGluZyBhbiBhbHJlYWR5LWVuY29kZWRcbiAgICAvLyBVUkwgZnJvbSB3aW5kb3cubG9jYXRpb24sIHNvIHdlIG5lZWQgdG8gZW5jb2RlIGl0IGhlcmUgc28gdGhlIGJlaGF2aW9yXG4gICAgLy8gcmVtYWlucyB0aGUgc2FtZSBhcyBQT1AgYW5kIG5vbi1kYXRhLXJvdXRlciB1c2FnZXMuICBuZXcgVVJMKCkgZG9lcyBhbGxcbiAgICAvLyB0aGUgc2FtZSBlbmNvZGluZyB3ZSdkIGdldCBmcm9tIGEgaGlzdG9yeS5wdXNoU3RhdGUvd2luZG93LmxvY2F0aW9uIHJlYWRcbiAgICAvLyB3aXRob3V0IGhhdmluZyB0byB0b3VjaCBoaXN0b3J5XG5cbiAgICBsb2NhdGlvbiA9IGluaXQuaGlzdG9yeS5lbmNvZGVMb2NhdGlvbihsb2NhdGlvbik7XG4gICAgbGV0IGhpc3RvcnlBY3Rpb24gPSAob3B0cyAmJiBvcHRzLnJlcGxhY2UpID09PSB0cnVlIHx8IHN1Ym1pc3Npb24gIT0gbnVsbCA/IEFjdGlvbi5SZXBsYWNlIDogQWN0aW9uLlB1c2g7XG4gICAgbGV0IHByZXZlbnRTY3JvbGxSZXNldCA9IG9wdHMgJiYgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIiBpbiBvcHRzID8gb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBsb2NhdGlvbiwge1xuICAgICAgc3VibWlzc2lvbixcbiAgICAgIC8vIFNlbmQgdGhyb3VnaCB0aGUgZm9ybURhdGEgc2VyaWFsaXphdGlvbiBlcnJvciBpZiB3ZSBoYXZlIG9uZSBzbyB3ZSBjYW5cbiAgICAgIC8vIHJlbmRlciBhdCB0aGUgcmlnaHQgZXJyb3IgYm91bmRhcnkgYWZ0ZXIgd2UgbWF0Y2ggcm91dGVzXG4gICAgICBwZW5kaW5nRXJyb3I6IGVycm9yLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgcmVwbGFjZTogb3B0cyAmJiBvcHRzLnJlcGxhY2VcbiAgICB9KTtcbiAgfSAvLyBSZXZhbGlkYXRlIGFsbCBjdXJyZW50IGxvYWRlcnMuICBJZiBhIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3Mgb3IgaWYgdGhpc1xuICAvLyBpcyBpbnRlcnJ1cHRlZCBieSBhIG5hdmlnYXRpb24sIGFsbG93IHRoaXMgdG8gXCJzdWNjZWVkXCIgYnkgY2FsbGluZyBhbGxcbiAgLy8gbG9hZGVycyBkdXJpbmcgdGhlIG5leHQgbG9hZGVyIHJvdW5kXG5cblxuICBmdW5jdGlvbiByZXZhbGlkYXRlKCkge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgcmV2YWxpZGF0aW9uOiBcImxvYWRpbmdcIlxuICAgIH0pOyAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgc3VibWl0dGluZyBhbiBhY3Rpb24sIHdlIGRvbid0IG5lZWQgdG8gc3RhcnQgYSBuZXdcbiAgICAvLyBuYXZpZ2F0aW9uLCB3ZSdsbCBqdXN0IGxldCB0aGUgZm9sbG93IHVwIGxvYWRlciBleGVjdXRpb24gY2FsbCBhbGwgbG9hZGVyc1xuXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwic3VibWl0dGluZ1wiKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgaW4gYW4gaWRsZSBzdGF0ZSwgc3RhcnQgYSBuZXcgbmF2aWdhdGlvbiBmb3IgdGhlIGN1cnJlbnRcbiAgICAvLyBhY3Rpb24vbG9jYXRpb24gYW5kIG1hcmsgaXQgYXMgdW5pbnRlcnJ1cHRlZCwgd2hpY2ggd2lsbCBza2lwIHRoZSBoaXN0b3J5XG4gICAgLy8gdXBkYXRlIGluIGNvbXBsZXRlTmF2aWdhdGlvblxuXG5cbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIHN0YXJ0TmF2aWdhdGlvbihzdGF0ZS5oaXN0b3J5QWN0aW9uLCBzdGF0ZS5sb2NhdGlvbiwge1xuICAgICAgICBzdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb246IHRydWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gT3RoZXJ3aXNlLCBpZiB3ZSdyZSBjdXJyZW50bHkgaW4gYSBsb2FkaW5nIHN0YXRlLCBqdXN0IHN0YXJ0IGEgbmV3XG4gICAgLy8gbmF2aWdhdGlvbiB0byB0aGUgbmF2aWdhdGlvbi5sb2NhdGlvbiBidXQgZG8gbm90IHRyaWdnZXIgYW4gdW5pbnRlcnJ1cHRlZFxuICAgIC8vIHJldmFsaWRhdGlvbiBzbyB0aGF0IGhpc3RvcnkgY29ycmVjdGx5IHVwZGF0ZXMgb25jZSB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXNcblxuXG4gICAgc3RhcnROYXZpZ2F0aW9uKHBlbmRpbmdBY3Rpb24gfHwgc3RhdGUuaGlzdG9yeUFjdGlvbiwgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwge1xuICAgICAgb3ZlcnJpZGVOYXZpZ2F0aW9uOiBzdGF0ZS5uYXZpZ2F0aW9uXG4gICAgfSk7XG4gIH0gLy8gU3RhcnQgYSBuYXZpZ2F0aW9uIHRvIHRoZSBnaXZlbiBhY3Rpb24vbG9jYXRpb24uICBDYW4gb3B0aW9uYWxseSBwcm92aWRlIGFcbiAgLy8gb3ZlcnJpZGVOYXZpZ2F0aW9uIHdoaWNoIHdpbGwgb3ZlcnJpZGUgdGhlIG5vcm1hbExvYWQgaW4gdGhlIGNhc2Ugb2YgYSByZWRpcmVjdFxuICAvLyBuYXZpZ2F0aW9uXG5cblxuICBhc3luYyBmdW5jdGlvbiBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24sIG9wdHMpIHtcbiAgICAvLyBBYm9ydCBhbnkgaW4tcHJvZ3Jlc3MgbmF2aWdhdGlvbnMgYW5kIHN0YXJ0IGEgbmV3IG9uZS4gVW5zZXQgYW55IG9uZ29pbmdcbiAgICAvLyB1bmludGVycnVwdGVkIHJldmFsaWRhdGlvbnMgdW5sZXNzIHRvbGQgb3RoZXJ3aXNlLCBzaW5jZSB3ZSB3YW50IHRoaXNcbiAgICAvLyBuZXcgbmF2aWdhdGlvbiB0byB1cGRhdGUgaGlzdG9yeSBub3JtYWxseVxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIHBlbmRpbmdBY3Rpb24gPSBoaXN0b3J5QWN0aW9uO1xuICAgIGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IChvcHRzICYmIG9wdHMuc3RhcnRVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSA9PT0gdHJ1ZTsgLy8gU2F2ZSB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gZXZlcnkgdGltZSB3ZSBzdGFydCBhIG5ldyBuYXZpZ2F0aW9uLFxuICAgIC8vIGFuZCB0cmFjayB3aGV0aGVyIHdlIHNob3VsZCByZXNldCBzY3JvbGwgb24gY29tcGxldGlvblxuXG4gICAgc2F2ZVNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG9wdHMgJiYgb3B0cy5vdmVycmlkZU5hdmlnYXRpb247XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgaW5pdC5iYXNlbmFtZSk7IC8vIFNob3J0IGNpcmN1aXQgd2l0aCBhIDQwNCBvbiB0aGUgcm9vdCBlcnJvciBib3VuZGFyeSBpZiB3ZSBtYXRjaCBub3RoaW5nXG5cbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgcm91dGUsXG4gICAgICAgIGVycm9yXG4gICAgICB9ID0gZ2V0Tm90Rm91bmRNYXRjaGVzKGRhdGFSb3V0ZXMpOyAvLyBDYW5jZWwgYWxsIHBlbmRpbmcgZGVmZXJyZWQgb24gNDA0cyBzaW5jZSB3ZSBkb24ndCBrZWVwIGFueSByb3V0ZXNcblxuICAgICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBTaG9ydCBjaXJjdWl0IGlmIGl0J3Mgb25seSBhIGhhc2ggY2hhbmdlXG5cblxuICAgIGlmIChpc0hhc2hDaGFuZ2VPbmx5KHN0YXRlLmxvY2F0aW9uLCBsb2NhdGlvbikpIHtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENyZWF0ZSBhIGNvbnRyb2xsZXIvUmVxdWVzdCBmb3IgdGhpcyBuYXZpZ2F0aW9uXG5cblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgcmVxdWVzdCA9IGNyZWF0ZVJlcXVlc3QobG9jYXRpb24sIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwsIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uKTtcbiAgICBsZXQgcGVuZGluZ0FjdGlvbkRhdGE7XG4gICAgbGV0IHBlbmRpbmdFcnJvcjtcblxuICAgIGlmIChvcHRzICYmIG9wdHMucGVuZGluZ0Vycm9yKSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZ0Vycm9yLCBpdCBtZWFucyB0aGUgdXNlciBhdHRlbXB0ZWQgYSBHRVQgc3VibWlzc2lvblxuICAgICAgLy8gd2l0aCBiaW5hcnkgRm9ybURhdGEgc28gYXNzaWduIGhlcmUgYW5kIHNraXAgdG8gaGFuZGxlTG9hZGVycy4gIFRoYXRcbiAgICAgIC8vIHdheSB3ZSBoYW5kbGUgY2FsbGluZyBsb2FkZXJzIGFib3ZlIHRoZSBib3VuZGFyeSBldGMuICBJdCdzIG5vdCByZWFsbHlcbiAgICAgIC8vIGRpZmZlcmVudCBmcm9tIGFuIGFjdGlvbkVycm9yIGluIHRoYXQgc2Vuc2UuXG4gICAgICBwZW5kaW5nRXJyb3IgPSB7XG4gICAgICAgIFtmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMpLnJvdXRlLmlkXTogb3B0cy5wZW5kaW5nRXJyb3JcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChvcHRzICYmIG9wdHMuc3VibWlzc2lvbikge1xuICAgICAgLy8gQ2FsbCBhY3Rpb24gaWYgd2UgcmVjZWl2ZWQgYW4gYWN0aW9uIHN1Ym1pc3Npb25cbiAgICAgIGxldCBhY3Rpb25PdXRwdXQgPSBhd2FpdCBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIG9wdHMuc3VibWlzc2lvbiwgbWF0Y2hlcywge1xuICAgICAgICByZXBsYWNlOiBvcHRzLnJlcGxhY2VcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYWN0aW9uT3V0cHV0LnNob3J0Q2lyY3VpdGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcGVuZGluZ0FjdGlvbkRhdGEgPSBhY3Rpb25PdXRwdXQucGVuZGluZ0FjdGlvbkRhdGE7XG4gICAgICBwZW5kaW5nRXJyb3IgPSBhY3Rpb25PdXRwdXQucGVuZGluZ0FjdGlvbkVycm9yO1xuXG4gICAgICBsZXQgbmF2aWdhdGlvbiA9IF9leHRlbmRzKHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICBsb2NhdGlvblxuICAgICAgfSwgb3B0cy5zdWJtaXNzaW9uKTtcblxuICAgICAgbG9hZGluZ05hdmlnYXRpb24gPSBuYXZpZ2F0aW9uO1xuICAgIH0gLy8gQ2FsbCBsb2FkZXJzXG5cblxuICAgIGxldCB7XG4gICAgICBzaG9ydENpcmN1aXRlZCxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gYXdhaXQgaGFuZGxlTG9hZGVycyhyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgbG9hZGluZ05hdmlnYXRpb24sIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uLCBvcHRzICYmIG9wdHMucmVwbGFjZSwgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvcik7XG5cbiAgICBpZiAoc2hvcnRDaXJjdWl0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENsZWFuIHVwIG5vdyB0aGF0IHRoZSBhY3Rpb24vbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmXG4gICAgLy8gd2Ugc2hvcnQgY2lyY3VpdGVkIGJlY2F1c2UgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyIHdpbGwgaGF2ZSBhbHJlYWR5XG4gICAgLy8gYmVlbiBhc3NpZ25lZCB0byBhIG5ldyBjb250cm9sbGVyIGZvciB0aGUgbmV4dCBuYXZpZ2F0aW9uXG5cblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0pO1xuICB9IC8vIENhbGwgdGhlIGFjdGlvbiBtYXRjaGVkIGJ5IHRoZSBsZWFmIHJvdXRlIGZvciB0aGlzIG5hdmlnYXRpb24gYW5kIGhhbmRsZVxuICAvLyByZWRpcmVjdHMvZXJyb3JzXG5cblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIHN1Ym1pc3Npb24sIG1hdGNoZXMsIG9wdHMpIHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpOyAvLyBQdXQgdXMgaW4gYSBzdWJtaXR0aW5nIHN0YXRlXG5cbiAgICBsZXQgbmF2aWdhdGlvbiA9IF9leHRlbmRzKHtcbiAgICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICAgIGxvY2F0aW9uXG4gICAgfSwgc3VibWlzc2lvbik7XG5cbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBuYXZpZ2F0aW9uXG4gICAgfSk7IC8vIENhbGwgb3VyIGFjdGlvbiBhbmQgZ2V0IHRoZSByZXN1bHRcblxuICAgIGxldCByZXN1bHQ7XG4gICAgbGV0IGFjdGlvbk1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuXG4gICAgaWYgKCFhY3Rpb25NYXRjaC5yb3V0ZS5hY3Rpb24pIHtcbiAgICAgIHJlc3VsdCA9IGdldE1ldGhvZE5vdEFsbG93ZWRSZXN1bHQobG9jYXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgcmVxdWVzdCwgYWN0aW9uTWF0Y2gsIG1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSk7XG5cbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgcmVkaXJlY3ROYXZpZ2F0aW9uID0gX2V4dGVuZHMoe1xuICAgICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICAgIGxvY2F0aW9uOiBjcmVhdGVMb2NhdGlvbihzdGF0ZS5sb2NhdGlvbiwgcmVzdWx0LmxvY2F0aW9uKVxuICAgICAgfSwgc3VibWlzc2lvbik7XG5cbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHJlc3VsdCwgcmVkaXJlY3ROYXZpZ2F0aW9uLCBvcHRzICYmIG9wdHMucmVwbGFjZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTdG9yZSBvZmYgdGhlIHBlbmRpbmcgZXJyb3IgLSB3ZSB1c2UgaXQgdG8gZGV0ZXJtaW5lIHdoaWNoIGxvYWRlcnNcbiAgICAgIC8vIHRvIGNhbGwgYW5kIHdpbGwgY29tbWl0IGl0IHdoZW4gd2UgY29tcGxldGUgdGhlIG5hdmlnYXRpb25cbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBhY3Rpb25NYXRjaC5yb3V0ZS5pZCk7IC8vIEJ5IGRlZmF1bHQsIGFsbCBzdWJtaXNzaW9ucyBhcmUgUkVQTEFDRSBuYXZpZ2F0aW9ucywgYnV0IGlmIHRoZVxuICAgICAgLy8gYWN0aW9uIHRocmV3IGFuIGVycm9yIHRoYXQnbGwgYmUgcmVuZGVyZWQgaW4gYW4gZXJyb3JFbGVtZW50LCB3ZSBmYWxsXG4gICAgICAvLyBiYWNrIHRvIFBVU0ggc28gdGhhdCB0aGUgdXNlciBjYW4gdXNlIHRoZSBiYWNrIGJ1dHRvbiB0byBnZXQgYmFjayB0b1xuICAgICAgLy8gdGhlIHByZS1zdWJtaXNzaW9uIGZvcm0gbG9jYXRpb24gdG8gdHJ5IGFnYWluXG5cbiAgICAgIGlmICgob3B0cyAmJiBvcHRzLnJlcGxhY2UpICE9PSB0cnVlKSB7XG4gICAgICAgIHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGVuZGluZ0FjdGlvbkVycm9yOiB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3JcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkZWZlcigpIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYWN0aW9uc1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGVuZGluZ0FjdGlvbkRhdGE6IHtcbiAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGFcbiAgICAgIH1cbiAgICB9O1xuICB9IC8vIENhbGwgYWxsIGFwcGxpY2FibGUgbG9hZGVycyBmb3IgdGhlIGdpdmVuIG1hdGNoZXMsIGhhbmRsaW5nIHJlZGlyZWN0cyxcbiAgLy8gZXJyb3JzLCBldGMuXG5cblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2FkZXJzKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBvdmVycmlkZU5hdmlnYXRpb24sIHN1Ym1pc3Npb24sIHJlcGxhY2UsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpIHtcbiAgICAvLyBGaWd1cmUgb3V0IHRoZSByaWdodCBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gdXNlIGZvciBkYXRhIGxvYWRpbmdcbiAgICBsZXQgbG9hZGluZ05hdmlnYXRpb24gPSBvdmVycmlkZU5hdmlnYXRpb247XG5cbiAgICBpZiAoIWxvYWRpbmdOYXZpZ2F0aW9uKSB7XG4gICAgICBsZXQgbmF2aWdhdGlvbiA9IHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWRcbiAgICAgIH07XG4gICAgICBsb2FkaW5nTmF2aWdhdGlvbiA9IG5hdmlnYXRpb247XG4gICAgfVxuXG4gICAgbGV0IFttYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVyc10gPSBnZXRNYXRjaGVzVG9Mb2FkKHN0YXRlLCBtYXRjaGVzLCBzdWJtaXNzaW9uLCBsb2NhdGlvbiwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMsIGNhbmNlbGxlZEZldGNoZXJMb2FkcywgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvciwgZmV0Y2hMb2FkTWF0Y2hlcyk7IC8vIENhbmNlbCBwZW5kaW5nIGRlZmVycmVkcyBmb3Igbm8tbG9uZ2VyLW1hdGNoZWQgcm91dGVzIG9yIHJvdXRlcyB3ZSdyZVxuICAgIC8vIGFib3V0IHRvIHJlbG9hZC4gIE5vdGUgdGhhdCBpZiB0aGlzIGlzIGFuIGFjdGlvbiByZWxvYWQgd2Ugd291bGQgaGF2ZVxuICAgIC8vIGFscmVhZHkgY2FuY2VsbGVkIGFsbCBwZW5kaW5nIGRlZmVycmVkcyBzbyB0aGlzIHdvdWxkIGJlIGEgbm8tb3BcblxuICAgIGNhbmNlbEFjdGl2ZURlZmVycmVkcyhyb3V0ZUlkID0+ICEobWF0Y2hlcyAmJiBtYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSkgfHwgbWF0Y2hlc1RvTG9hZCAmJiBtYXRjaGVzVG9Mb2FkLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSk7IC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1blxuXG4gICAgaWYgKG1hdGNoZXNUb0xvYWQubGVuZ3RoID09PSAwICYmIHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IG1lcmdlTG9hZGVyRGF0YShzdGF0ZS5sb2FkZXJEYXRhLCB7fSwgbWF0Y2hlcyksXG4gICAgICAgIC8vIENvbW1pdCBwZW5kaW5nIGVycm9yIGlmIHdlJ3JlIHNob3J0IGNpcmN1aXRpbmdcbiAgICAgICAgZXJyb3JzOiBwZW5kaW5nRXJyb3IgfHwgbnVsbCxcbiAgICAgICAgYWN0aW9uRGF0YTogcGVuZGluZ0FjdGlvbkRhdGEgfHwgbnVsbFxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9IC8vIElmIHRoaXMgaXMgYW4gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb24sIHdlIHJlbWFpbiBpbiBvdXIgY3VycmVudCBpZGxlXG4gICAgLy8gc3RhdGUuICBJZiBub3QsIHdlIG5lZWQgdG8gc3dpdGNoIHRvIG91ciBsb2FkaW5nIHN0YXRlIGFuZCBsb2FkIGRhdGEsXG4gICAgLy8gcHJlc2VydmluZyBhbnkgbmV3IGFjdGlvbiBkYXRhIG9yIGV4aXN0aW5nIGFjdGlvbiBkYXRhIChpbiB0aGUgY2FzZSBvZlxuICAgIC8vIGEgcmV2YWxpZGF0aW9uIGludGVycnVwdGluZyBhbiBhY3Rpb25SZWxvYWQpXG5cblxuICAgIGlmICghaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKF9yZWYyID0+IHtcbiAgICAgICAgbGV0IFtrZXldID0gX3JlZjI7XG4gICAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICAgIGxldCByZXZhbGlkYXRpbmdGZXRjaGVyID0ge1xuICAgICAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgICAgICBkYXRhOiBmZXRjaGVyICYmIGZldGNoZXIuZGF0YSxcbiAgICAgICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICAgIH0pO1xuICAgICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe1xuICAgICAgICBuYXZpZ2F0aW9uOiBsb2FkaW5nTmF2aWdhdGlvbixcbiAgICAgICAgYWN0aW9uRGF0YTogcGVuZGluZ0FjdGlvbkRhdGEgfHwgc3RhdGUuYWN0aW9uRGF0YSB8fCBudWxsXG4gICAgICB9LCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwID8ge1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0gOiB7fSkpO1xuICAgIH1cblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID0gKytpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChfcmVmMyA9PiB7XG4gICAgICBsZXQgW2tleV0gPSBfcmVmMztcbiAgICAgIHJldHVybiBmZXRjaENvbnRyb2xsZXJzLnNldChrZXksIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcik7XG4gICAgfSk7XG4gICAgbGV0IHtcbiAgICAgIHJlc3VsdHMsXG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9ID0gYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKHN0YXRlLm1hdGNoZXMsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCByZXF1ZXN0KTtcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9IC8vIENsZWFuIHVwIF9hZnRlcl8gbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmIHdlIHNob3J0XG4gICAgLy8gY2lyY3VpdGVkIGJlY2F1c2UgZmV0Y2hDb250cm9sbGVycyB3b3VsZCBoYXZlIGJlZW4gYWJvcnRlZCBhbmRcbiAgICAvLyByZWFzc2lnbmVkIHRvIG5ldyBjb250cm9sbGVycyBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuXG5cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKF9yZWY0ID0+IHtcbiAgICAgIGxldCBba2V5XSA9IF9yZWY0O1xuICAgICAgcmV0dXJuIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgfSk7IC8vIElmIGFueSBsb2FkZXJzIHJldHVybmVkIGEgcmVkaXJlY3QgUmVzcG9uc2UsIHN0YXJ0IGEgbmV3IFJFUExBQ0UgbmF2aWdhdGlvblxuXG4gICAgbGV0IHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KHJlc3VsdHMpO1xuXG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICBsZXQgcmVkaXJlY3ROYXZpZ2F0aW9uID0gZ2V0TG9hZGVyUmVkaXJlY3Qoc3RhdGUsIHJlZGlyZWN0KTtcbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHJlZGlyZWN0LCByZWRpcmVjdE5hdmlnYXRpb24sIHJlcGxhY2UpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfSAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuXG5cbiAgICBsZXQge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgcGVuZGluZ0Vycm9yLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcyk7IC8vIFdpcmUgdXAgc3Vic2NyaWJlcnMgdG8gdXBkYXRlIGxvYWRlckRhdGEgYXMgcHJvbWlzZXMgc2V0dGxlXG5cbiAgICBhY3RpdmVEZWZlcnJlZHMuZm9yRWFjaCgoZGVmZXJyZWREYXRhLCByb3V0ZUlkKSA9PiB7XG4gICAgICBkZWZlcnJlZERhdGEuc3Vic2NyaWJlKGFib3J0ZWQgPT4ge1xuICAgICAgICAvLyBOb3RlOiBObyBuZWVkIHRvIHVwZGF0ZVN0YXRlIGhlcmUgc2luY2UgdGhlIFRyYWNrZWRQcm9taXNlIG9uXG4gICAgICAgIC8vIGxvYWRlckRhdGEgaXMgc3RhYmxlIGFjcm9zcyByZXNvbHZlL3JlamVjdFxuICAgICAgICAvLyBSZW1vdmUgdGhpcyBpbnN0YW5jZSBpZiB3ZSB3ZXJlIGFib3J0ZWQgb3IgaWYgcHJvbWlzZXMgaGF2ZSBzZXR0bGVkXG4gICAgICAgIGlmIChhYm9ydGVkIHx8IGRlZmVycmVkRGF0YS5kb25lKSB7XG4gICAgICAgICAgYWN0aXZlRGVmZXJyZWRzLmRlbGV0ZShyb3V0ZUlkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpO1xuICAgIGxldCBkaWRBYm9ydEZldGNoTG9hZHMgPSBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9LCBkaWRBYm9ydEZldGNoTG9hZHMgfHwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID4gMCA/IHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0gOiB7fSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRGZXRjaGVyKGtleSkge1xuICAgIHJldHVybiBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KSB8fCBJRExFX0ZFVENIRVI7XG4gIH0gLy8gVHJpZ2dlciBhIGZldGNoZXIgbG9hZC9zdWJtaXQgZm9yIHRoZSBnaXZlbiBmZXRjaGVyIGtleVxuXG5cbiAgZnVuY3Rpb24gZmV0Y2goa2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKSB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyb3V0ZXIuZmV0Y2goKSB3YXMgY2FsbGVkIGR1cmluZyB0aGUgc2VydmVyIHJlbmRlciwgYnV0IGl0IHNob3VsZG4ndCBiZS4gXCIgKyBcIllvdSBhcmUgbGlrZWx5IGNhbGxpbmcgYSB1c2VGZXRjaGVyKCkgbWV0aG9kIGluIHRoZSBib2R5IG9mIHlvdXIgY29tcG9uZW50LiBcIiArIFwiVHJ5IG1vdmluZyBpdCB0byBhIHVzZUVmZmVjdCBvciBhIGNhbGxiYWNrLlwiKTtcbiAgICB9XG5cbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBocmVmLCBpbml0LmJhc2VuYW1lKTtcblxuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgbmV3IEVycm9yUmVzcG9uc2UoNDA0LCBcIk5vdCBGb3VuZFwiLCBudWxsKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uXG4gICAgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhocmVmLCBvcHRzLCB0cnVlKTtcbiAgICBsZXQgbWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBwYXRoKTtcblxuICAgIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgICBoYW5kbGVGZXRjaGVyQWN0aW9uKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIHN1Ym1pc3Npb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU3RvcmUgb2ZmIHRoZSBtYXRjaCBzbyB3ZSBjYW4gY2FsbCBpdCdzIHNob3VsZFJldmFsaWRhdGUgb24gc3Vic2VxdWVudFxuICAgIC8vIHJldmFsaWRhdGlvbnNcblxuXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5zZXQoa2V5LCBbcGF0aCwgbWF0Y2gsIG1hdGNoZXNdKTtcbiAgICBoYW5kbGVGZXRjaGVyTG9hZGVyKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMpO1xuICB9IC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIG1hdGNoZWQgZmV0Y2hlci5zdWJtaXQoKSwgYW5kIHRoZW4gaGFuZGxlIHJlZGlyZWN0cyxcbiAgLy8gZXJyb3JzLCBhbmQgcmV2YWxpZGF0aW9uXG5cblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVGZXRjaGVyQWN0aW9uKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIHJlcXVlc3RNYXRjaGVzLCBzdWJtaXNzaW9uKSB7XG4gICAgaW50ZXJydXB0QWN0aXZlTG9hZHMoKTtcbiAgICBmZXRjaExvYWRNYXRjaGVzLmRlbGV0ZShrZXkpO1xuXG4gICAgaWYgKCFtYXRjaC5yb3V0ZS5hY3Rpb24pIHtcbiAgICAgIGxldCB7XG4gICAgICAgIGVycm9yXG4gICAgICB9ID0gZ2V0TWV0aG9kTm90QWxsb3dlZFJlc3VsdChwYXRoKTtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFB1dCB0aGlzIGZldGNoZXIgaW50byBpdCdzIHN1Ym1pdHRpbmcgc3RhdGVcblxuXG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuXG4gICAgbGV0IGZldGNoZXIgPSBfZXh0ZW5kcyh7XG4gICAgICBzdGF0ZTogXCJzdWJtaXR0aW5nXCJcbiAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICBkYXRhOiBleGlzdGluZ0ZldGNoZXIgJiYgZXhpc3RpbmdGZXRjaGVyLmRhdGFcbiAgICB9KTtcblxuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGZldGNoZXIpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0pOyAvLyBDYWxsIHRoZSBhY3Rpb24gZm9yIHRoZSBmZXRjaGVyXG5cbiAgICBsZXQgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBmZXRjaFJlcXVlc3QgPSBjcmVhdGVSZXF1ZXN0KHBhdGgsIGFib3J0Q29udHJvbGxlci5zaWduYWwsIHN1Ym1pc3Npb24pO1xuICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICBsZXQgYWN0aW9uUmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwiYWN0aW9uXCIsIGZldGNoUmVxdWVzdCwgbWF0Y2gsIHJlcXVlc3RNYXRjaGVzLCByb3V0ZXIuYmFzZW5hbWUpO1xuXG4gICAgaWYgKGZldGNoUmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91IG91ciBvd24gZmV0Y2hlclxuICAgICAgLy8gcmUtc3VibWl0IHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSkgPT09IGFib3J0Q29udHJvbGxlcikge1xuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGtleSk7XG5cbiAgICAgIGxldCBsb2FkaW5nRmV0Y2hlciA9IF9leHRlbmRzKHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiXG4gICAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICAgIGRhdGE6IHVuZGVmaW5lZFxuICAgICAgfSk7XG5cbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGxvYWRpbmdGZXRjaGVyKTtcbiAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9KTtcblxuICAgICAgbGV0IHJlZGlyZWN0TmF2aWdhdGlvbiA9IF9leHRlbmRzKHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICBsb2NhdGlvbjogY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIGFjdGlvblJlc3VsdC5sb2NhdGlvbilcbiAgICAgIH0sIHN1Ym1pc3Npb24pO1xuXG4gICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihhY3Rpb25SZXN1bHQsIHJlZGlyZWN0TmF2aWdhdGlvbik7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBQcm9jZXNzIGFueSBub24tcmVkaXJlY3QgZXJyb3JzIHRocm93blxuXG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBhY3Rpb25SZXN1bHQuZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgIGludmFyaWFudChmYWxzZSwgXCJkZWZlcigpIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYWN0aW9uc1wiKTtcbiAgICB9IC8vIFN0YXJ0IHRoZSBkYXRhIGxvYWQgZm9yIGN1cnJlbnQgbWF0Y2hlcywgb3IgdGhlIG5leHQgbG9jYXRpb24gaWYgd2UncmVcbiAgICAvLyBpbiB0aGUgbWlkZGxlIG9mIGEgbmF2aWdhdGlvblxuXG5cbiAgICBsZXQgbmV4dExvY2F0aW9uID0gc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiB8fCBzdGF0ZS5sb2NhdGlvbjtcbiAgICBsZXQgcmV2YWxpZGF0aW9uUmVxdWVzdCA9IGNyZWF0ZVJlcXVlc3QobmV4dExvY2F0aW9uLCBhYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcbiAgICBsZXQgbWF0Y2hlcyA9IHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgIT09IFwiaWRsZVwiID8gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwgaW5pdC5iYXNlbmFtZSkgOiBzdGF0ZS5tYXRjaGVzO1xuICAgIGludmFyaWFudChtYXRjaGVzLCBcIkRpZG4ndCBmaW5kIGFueSBtYXRjaGVzIGFmdGVyIGZldGNoZXIgYWN0aW9uXCIpO1xuICAgIGxldCBsb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICBmZXRjaFJlbG9hZElkcy5zZXQoa2V5LCBsb2FkSWQpO1xuXG4gICAgbGV0IGxvYWRGZXRjaGVyID0gX2V4dGVuZHMoe1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZGF0YTogYWN0aW9uUmVzdWx0LmRhdGFcbiAgICB9LCBzdWJtaXNzaW9uKTtcblxuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGxvYWRGZXRjaGVyKTtcbiAgICBsZXQgW21hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzXSA9IGdldE1hdGNoZXNUb0xvYWQoc3RhdGUsIG1hdGNoZXMsIHN1Ym1pc3Npb24sIG5leHRMb2NhdGlvbiwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMsIGNhbmNlbGxlZEZldGNoZXJMb2Fkcywge1xuICAgICAgW21hdGNoLnJvdXRlLmlkXTogYWN0aW9uUmVzdWx0LmRhdGFcbiAgICB9LCB1bmRlZmluZWQsIC8vIE5vIG5lZWQgdG8gc2VuZCB0aHJvdWdoIGVycm9ycyBzaW5jZSB3ZSBzaG9ydCBjaXJjdWl0IGFib3ZlXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcyk7IC8vIFB1dCBhbGwgcmV2YWxpZGF0aW5nIGZldGNoZXJzIGludG8gdGhlIGxvYWRpbmcgc3RhdGUsIGV4Y2VwdCBmb3IgdGhlXG4gICAgLy8gY3VycmVudCBmZXRjaGVyIHdoaWNoIHdlIHdhbnQgdG8ga2VlcCBpbiBpdCdzIGN1cnJlbnQgbG9hZGluZyBzdGF0ZSB3aGljaFxuICAgIC8vIGNvbnRhaW5zIGl0J3MgYWN0aW9uIHN1Ym1pc3Npb24gaW5mbyArIGFjdGlvbiBkYXRhXG5cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5maWx0ZXIoX3JlZjUgPT4ge1xuICAgICAgbGV0IFtzdGFsZUtleV0gPSBfcmVmNTtcbiAgICAgIHJldHVybiBzdGFsZUtleSAhPT0ga2V5O1xuICAgIH0pLmZvckVhY2goX3JlZjYgPT4ge1xuICAgICAgbGV0IFtzdGFsZUtleV0gPSBfcmVmNjtcbiAgICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoc3RhbGVLZXkpO1xuICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSB7XG4gICAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgICAgZGF0YTogZXhpc3RpbmdGZXRjaGVyICYmIGV4aXN0aW5nRmV0Y2hlci5kYXRhLFxuICAgICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChzdGFsZUtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLnNldChzdGFsZUtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICB9KTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgICBsZXQge1xuICAgICAgcmVzdWx0cyxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH0gPSBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUubWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJldmFsaWRhdGlvblJlcXVlc3QpO1xuXG4gICAgaWYgKGFib3J0Q29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChfcmVmNyA9PiB7XG4gICAgICBsZXQgW3N0YWxlS2V5XSA9IF9yZWY3O1xuICAgICAgcmV0dXJuIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHN0YWxlS2V5KTtcbiAgICB9KTtcbiAgICBsZXQgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QocmVzdWx0cyk7XG5cbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIGxldCByZWRpcmVjdE5hdmlnYXRpb24gPSBnZXRMb2FkZXJSZWRpcmVjdChzdGF0ZSwgcmVkaXJlY3QpO1xuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24ocmVkaXJlY3QsIHJlZGlyZWN0TmF2aWdhdGlvbik7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuXG5cbiAgICBsZXQge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgc3RhdGUubWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgdW5kZWZpbmVkLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcyk7XG4gICAgbGV0IGRvbmVGZXRjaGVyID0ge1xuICAgICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgICAgZGF0YTogYWN0aW9uUmVzdWx0LmRhdGEsXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIGxldCBkaWRBYm9ydEZldGNoTG9hZHMgPSBhYm9ydFN0YWxlRmV0Y2hMb2Fkcyhsb2FkSWQpOyAvLyBJZiB3ZSBhcmUgY3VycmVudGx5IGluIGEgbmF2aWdhdGlvbiBsb2FkaW5nIHN0YXRlIGFuZCB0aGlzIGZldGNoZXIgaXNcbiAgICAvLyBtb3JlIHJlY2VudCB0aGFuIHRoZSBuYXZpZ2F0aW9uLCB3ZSB3YW50IHRoZSBuZXdlciBkYXRhIHNvIGFib3J0IHRoZVxuICAgIC8vIG5hdmlnYXRpb24gYW5kIGNvbXBsZXRlIGl0IHdpdGggdGhlIGZldGNoZXIgZGF0YVxuXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwibG9hZGluZ1wiICYmIGxvYWRJZCA+IHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkKSB7XG4gICAgICBpbnZhcmlhbnQocGVuZGluZ0FjdGlvbiwgXCJFeHBlY3RlZCBwZW5kaW5nIGFjdGlvblwiKTtcbiAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGEsXG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gb3RoZXJ3aXNlIGp1c3QgdXBkYXRlIHdpdGggdGhlIGZldGNoZXIgZGF0YSwgcHJlc2VydmluZyBhbnkgZXhpc3RpbmdcbiAgICAgIC8vIGxvYWRlckRhdGEgZm9yIGxvYWRlcnMgdGhhdCBkaWQgbm90IG5lZWQgdG8gcmVsb2FkLiAgV2UgaGF2ZSB0b1xuICAgICAgLy8gbWFudWFsbHkgbWVyZ2UgaGVyZSBzaW5jZSB3ZSBhcmVuJ3QgZ29pbmcgdGhyb3VnaCBjb21wbGV0ZU5hdmlnYXRpb25cbiAgICAgIHVwZGF0ZVN0YXRlKF9leHRlbmRzKHtcbiAgICAgICAgZXJyb3JzLFxuICAgICAgICBsb2FkZXJEYXRhOiBtZXJnZUxvYWRlckRhdGEoc3RhdGUubG9hZGVyRGF0YSwgbG9hZGVyRGF0YSwgbWF0Y2hlcylcbiAgICAgIH0sIGRpZEFib3J0RmV0Y2hMb2FkcyA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pKTtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0gLy8gQ2FsbCB0aGUgbWF0Y2hlZCBsb2FkZXIgZm9yIGZldGNoZXIubG9hZCgpLCBoYW5kbGluZyByZWRpcmVjdHMsIGVycm9ycywgZXRjLlxuXG5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRmV0Y2hlckxvYWRlcihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzKSB7XG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpOyAvLyBQdXQgdGhpcyBmZXRjaGVyIGludG8gaXQncyBsb2FkaW5nIHN0YXRlXG5cbiAgICBsZXQgbG9hZGluZ0ZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGRhdGE6IGV4aXN0aW5nRmV0Y2hlciAmJiBleGlzdGluZ0ZldGNoZXIuZGF0YVxuICAgIH07XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgbG9hZGluZ0ZldGNoZXIpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0pOyAvLyBDYWxsIHRoZSBsb2FkZXIgZm9yIHRoaXMgZmV0Y2hlciByb3V0ZSBtYXRjaFxuXG4gICAgbGV0IGFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgZmV0Y2hSZXF1ZXN0ID0gY3JlYXRlUmVxdWVzdChwYXRoLCBhYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLnNldChrZXksIGFib3J0Q29udHJvbGxlcik7XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCBmZXRjaFJlcXVlc3QsIG1hdGNoLCBtYXRjaGVzLCByb3V0ZXIuYmFzZW5hbWUpOyAvLyBEZWZlcnJlZCBpc24ndCBzdXBwb3J0ZWQgb3IgZmV0Y2hlciBsb2FkcywgYXdhaXQgZXZlcnl0aGluZyBhbmQgdHJlYXQgaXRcbiAgICAvLyBhcyBhIG5vcm1hbCBsb2FkLiAgcmVzb2x2ZURlZmVycmVkRGF0YSB3aWxsIHJldHVybiB1bmRlZmluZWQgaWYgdGhpc1xuICAgIC8vIGZldGNoZXIgZ2V0cyBhYm9ydGVkLCBzbyB3ZSBqdXN0IGxlYXZlIHJlc3VsdCB1bnRvdWNoZWQgYW5kIHNob3J0IGNpcmN1aXRcbiAgICAvLyBiZWxvdyBpZiB0aGF0IGhhcHBlbnNcblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdCA9IChhd2FpdCByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgZmV0Y2hSZXF1ZXN0LnNpZ25hbCwgdHJ1ZSkpIHx8IHJlc3VsdDtcbiAgICB9IC8vIFdlIGNhbiBkZWxldGUgdGhpcyBzbyBsb25nIGFzIHdlIHdlcmVuJ3QgYWJvcnRlZCBieSBvdSBvdXIgb3duIGZldGNoZXJcbiAgICAvLyByZS1sb2FkIHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuXG5cbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIH1cblxuICAgIGlmIChmZXRjaFJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElmIHRoZSBsb2FkZXIgdGhyZXcgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG5cblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCByZWRpcmVjdE5hdmlnYXRpb24gPSBnZXRMb2FkZXJSZWRpcmVjdChzdGF0ZSwgcmVzdWx0KTtcbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHJlc3VsdCwgcmVkaXJlY3ROYXZpZ2F0aW9uKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFByb2Nlc3MgYW55IG5vbi1yZWRpcmVjdCBlcnJvcnMgdGhyb3duXG5cblxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCByb3V0ZUlkKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpOyAvLyBUT0RPOiBJbiByZW1peCwgdGhpcyB3b3VsZCByZXNldCB0byBJRExFX05BVklHQVRJT04gaWYgaXQgd2FzIGEgY2F0Y2ggLVxuICAgICAgLy8gZG8gd2UgbmVlZCB0byBiZWhhdmUgYW55IGRpZmZlcmVudGx5IHdpdGggb3VyIG5vbi1yZWRpcmVjdCBlcnJvcnM/XG4gICAgICAvLyBXaGF0IGlmIGl0IHdhcyBhIG5vbi1yZWRpcmVjdCBSZXNwb25zZT9cblxuICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycyksXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludmFyaWFudCghaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7IC8vIFB1dCB0aGUgZmV0Y2hlciBiYWNrIGludG8gYW4gaWRsZSBzdGF0ZVxuXG4gICAgbGV0IGRvbmVGZXRjaGVyID0ge1xuICAgICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgICAgZGF0YTogcmVzdWx0LmRhdGEsXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGhhbmRsZSByZWRpcmVjdHMgcmV0dXJuZWQgZnJvbSBhbiBhY3Rpb24gb3IgbG9hZGVyLlxuICAgKiBOb3JtYWxseSwgYSByZWRpcmVjdCBcInJlcGxhY2VzXCIgdGhlIG5hdmlnYXRpb24gdGhhdCB0cmlnZ2VyZWQgaXQuICBTbywgZm9yXG4gICAqIGV4YW1wbGU6XG4gICAqXG4gICAqICAtIHVzZXIgaXMgb24gL2FcbiAgICogIC0gdXNlciBjbGlja3MgYSBsaW5rIHRvIC9iXG4gICAqICAtIGxvYWRlciBmb3IgL2IgcmVkaXJlY3RzIHRvIC9jXG4gICAqXG4gICAqIEluIGEgbm9uLUpTIGFwcCB0aGUgYnJvd3NlciB3b3VsZCB0cmFjayB0aGUgaW4tZmxpZ2h0IG5hdmlnYXRpb24gdG8gL2IgYW5kXG4gICAqIHRoZW4gcmVwbGFjZSBpdCB3aXRoIC9jIHdoZW4gaXQgZW5jb3VudGVyZWQgdGhlIHJlZGlyZWN0IHJlc3BvbnNlLiAgSW5cbiAgICogdGhlIGVuZCBpdCB3b3VsZCBvbmx5IGV2ZXIgdXBkYXRlIHRoZSBVUkwgYmFyIHdpdGggL2MuXG4gICAqXG4gICAqIEluIGNsaWVudC1zaWRlIHJvdXRpbmcgdXNpbmcgcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZSwgd2UgYWltIHRvIGVtdWxhdGVcbiAgICogdGhpcyBiZWhhdmlvciBhbmQgd2UgYWxzbyBkbyBub3QgdXBkYXRlIGhpc3RvcnkgdW50aWwgdGhlIGVuZCBvZiB0aGVcbiAgICogbmF2aWdhdGlvbiAoaW5jbHVkaW5nIHByb2Nlc3NlZCByZWRpcmVjdHMpLiAgVGhpcyBtZWFucyB0aGF0IHdlIG5ldmVyXG4gICAqIGFjdHVhbGx5IHRvdWNoIGhpc3RvcnkgdW50aWwgd2UndmUgcHJvY2Vzc2VkIHJlZGlyZWN0cywgc28gd2UganVzdCB1c2VcbiAgICogdGhlIGhpc3RvcnkgYWN0aW9uIGZyb20gdGhlIG9yaWdpbmFsIG5hdmlnYXRpb24gKFBVU0ggb3IgUkVQTEFDRSkuXG4gICAqL1xuXG5cbiAgYXN5bmMgZnVuY3Rpb24gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24ocmVkaXJlY3QsIG5hdmlnYXRpb24sIHJlcGxhY2UpIHtcbiAgICBpZiAocmVkaXJlY3QucmV2YWxpZGF0ZSkge1xuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaW52YXJpYW50KG5hdmlnYXRpb24ubG9jYXRpb24sIFwiRXhwZWN0ZWQgYSBsb2NhdGlvbiBvbiB0aGUgcmVkaXJlY3QgbmF2aWdhdGlvblwiKTsgLy8gVGhlcmUncyBubyBuZWVkIHRvIGFib3J0IG9uIHJlZGlyZWN0cywgc2luY2Ugd2UgZG9uJ3QgZGV0ZWN0IHRoZVxuICAgIC8vIHJlZGlyZWN0IHVudGlsIHRoZSBhY3Rpb24vbG9hZGVycyBoYXZlIHNldHRsZWRcblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgbGV0IHJlZGlyZWN0SGlzdG9yeUFjdGlvbiA9IHJlcGxhY2UgPT09IHRydWUgPyBBY3Rpb24uUmVwbGFjZSA6IEFjdGlvbi5QdXNoO1xuICAgIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihyZWRpcmVjdEhpc3RvcnlBY3Rpb24sIG5hdmlnYXRpb24ubG9jYXRpb24sIHtcbiAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbjogbmF2aWdhdGlvblxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBmZXRjaGVyc1RvTG9hZCwgcmVxdWVzdCkge1xuICAgIC8vIENhbGwgYWxsIG5hdmlnYXRpb24gbG9hZGVycyBhbmQgcmV2YWxpZGF0aW5nIGZldGNoZXIgbG9hZGVycyBpbiBwYXJhbGxlbCxcbiAgICAvLyB0aGVuIHNsaWNlIG9mZiB0aGUgcmVzdWx0cyBpbnRvIHNlcGFyYXRlIGFycmF5cyBzbyB3ZSBjYW4gaGFuZGxlIHRoZW1cbiAgICAvLyBhY2NvcmRpbmdseVxuICAgIGxldCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoWy4uLm1hdGNoZXNUb0xvYWQubWFwKG1hdGNoID0+IGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgcm91dGVyLmJhc2VuYW1lKSksIC4uLmZldGNoZXJzVG9Mb2FkLm1hcChfcmVmOCA9PiB7XG4gICAgICBsZXQgWywgaHJlZiwgbWF0Y2gsIGZldGNoTWF0Y2hlc10gPSBfcmVmODtcbiAgICAgIHJldHVybiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgY3JlYXRlUmVxdWVzdChocmVmLCByZXF1ZXN0LnNpZ25hbCksIG1hdGNoLCBmZXRjaE1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSk7XG4gICAgfSldKTtcbiAgICBsZXQgbG9hZGVyUmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UoMCwgbWF0Y2hlc1RvTG9hZC5sZW5ndGgpO1xuICAgIGxldCBmZXRjaGVyUmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UobWF0Y2hlc1RvTG9hZC5sZW5ndGgpO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFtyZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCByZXF1ZXN0LnNpZ25hbCwgZmFsc2UsIHN0YXRlLmxvYWRlckRhdGEpLCByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBmZXRjaGVyc1RvTG9hZC5tYXAoX3JlZjkgPT4ge1xuICAgICAgbGV0IFssLCBtYXRjaF0gPSBfcmVmOTtcbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KSwgZmV0Y2hlclJlc3VsdHMsIHJlcXVlc3Quc2lnbmFsLCB0cnVlKV0pO1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHRzLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycnVwdEFjdGl2ZUxvYWRzKCkge1xuICAgIC8vIEV2ZXJ5IGludGVycnVwdGlvbiB0cmlnZ2VycyBhIHJldmFsaWRhdGlvblxuICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSB0cnVlOyAvLyBDYW5jZWwgcGVuZGluZyByb3V0ZS1sZXZlbCBkZWZlcnJlZHMgYW5kIG1hcmsgY2FuY2VsbGVkIHJvdXRlcyBmb3JcbiAgICAvLyByZXZhbGlkYXRpb25cblxuICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLnB1c2goLi4uY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCkpOyAvLyBBYm9ydCBpbi1mbGlnaHQgZmV0Y2hlciBsb2Fkc1xuXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChfLCBrZXkpID0+IHtcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgIGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5wdXNoKGtleSk7XG4gICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZXJyb3IpIHtcbiAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgcm91dGVJZCk7XG4gICAgZGVsZXRlRmV0Y2hlcihrZXkpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGVycm9yczoge1xuICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IGVycm9yXG4gICAgICB9LFxuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWxldGVGZXRjaGVyKGtleSkge1xuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICBmZXRjaExvYWRNYXRjaGVzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBhYm9ydEZldGNoZXIoa2V5KSB7XG4gICAgbGV0IGNvbnRyb2xsZXIgPSBmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpO1xuICAgIGludmFyaWFudChjb250cm9sbGVyLCBcIkV4cGVjdGVkIGZldGNoIGNvbnRyb2xsZXI6IFwiICsga2V5KTtcbiAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcmtGZXRjaGVyc0RvbmUoa2V5cykge1xuICAgIGZvciAobGV0IGtleSBvZiBrZXlzKSB7XG4gICAgICBsZXQgZmV0Y2hlciA9IGdldEZldGNoZXIoa2V5KTtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IHtcbiAgICAgICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgICAgICBkYXRhOiBmZXRjaGVyLmRhdGEsXG4gICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkXG4gICAgICB9O1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKSB7XG4gICAgbGV0IGRvbmVLZXlzID0gW107XG5cbiAgICBmb3IgKGxldCBrZXkgb2YgZmV0Y2hSZWRpcmVjdElkcykge1xuICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgIGludmFyaWFudChmZXRjaGVyLCBcIkV4cGVjdGVkIGZldGNoZXI6IFwiICsga2V5KTtcblxuICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7XG4gICAgICAgIGRvbmVLZXlzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtYXJrRmV0Y2hlcnNEb25lKGRvbmVLZXlzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFib3J0U3RhbGVGZXRjaExvYWRzKGxhbmRlZElkKSB7XG4gICAgbGV0IHllZXRlZEtleXMgPSBbXTtcblxuICAgIGZvciAobGV0IFtrZXksIGlkXSBvZiBmZXRjaFJlbG9hZElkcykge1xuICAgICAgaWYgKGlkIDwgbGFuZGVkSWQpIHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgICAgaW52YXJpYW50KGZldGNoZXIsIFwiRXhwZWN0ZWQgZmV0Y2hlcjogXCIgKyBrZXkpO1xuXG4gICAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIikge1xuICAgICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgIHllZXRlZEtleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWFya0ZldGNoZXJzRG9uZSh5ZWV0ZWRLZXlzKTtcbiAgICByZXR1cm4geWVldGVkS2V5cy5sZW5ndGggPiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsQWN0aXZlRGVmZXJyZWRzKHByZWRpY2F0ZSkge1xuICAgIGxldCBjYW5jZWxsZWRSb3V0ZUlkcyA9IFtdO1xuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZmQsIHJvdXRlSWQpID0+IHtcbiAgICAgIGlmICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZShyb3V0ZUlkKSkge1xuICAgICAgICAvLyBDYW5jZWwgdGhlIGRlZmVycmVkIC0gYnV0IGRvIG5vdCByZW1vdmUgZnJvbSBhY3RpdmVEZWZlcnJlZHMgaGVyZSAtXG4gICAgICAgIC8vIHdlIHJlbHkgb24gdGhlIHN1YnNjcmliZXJzIHRvIGRvIHRoYXQgc28gb3VyIHRlc3RzIGNhbiBhc3NlcnQgcHJvcGVyXG4gICAgICAgIC8vIGNsZWFudXAgdmlhIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkc1xuICAgICAgICBkZmQuY2FuY2VsKCk7XG4gICAgICAgIGNhbmNlbGxlZFJvdXRlSWRzLnB1c2gocm91dGVJZCk7XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNhbmNlbGxlZFJvdXRlSWRzO1xuICB9IC8vIE9wdCBpbiB0byBjYXB0dXJpbmcgYW5kIHJlcG9ydGluZyBzY3JvbGwgcG9zaXRpb25zIGR1cmluZyBuYXZpZ2F0aW9ucyxcbiAgLy8gdXNlZCBieSB0aGUgPFNjcm9sbFJlc3RvcmF0aW9uPiBjb21wb25lbnRcblxuXG4gIGZ1bmN0aW9uIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKHBvc2l0aW9ucywgZ2V0UG9zaXRpb24sIGdldEtleSkge1xuICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gcG9zaXRpb25zO1xuICAgIGdldFNjcm9sbFBvc2l0aW9uID0gZ2V0UG9zaXRpb247XG5cbiAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IGdldEtleSB8fCAobG9jYXRpb24gPT4gbG9jYXRpb24ua2V5KTsgLy8gUGVyZm9ybSBpbml0aWFsIGh5ZHJhdGlvbiBzY3JvbGwgcmVzdG9yYXRpb24sIHNpbmNlIHdlIG1pc3MgdGhlIGJvYXQgb25cbiAgICAvLyB0aGUgaW5pdGlhbCB1cGRhdGVTdGF0ZSgpIGJlY2F1c2Ugd2UndmUgbm90IHlldCByZW5kZXJlZCA8U2Nyb2xsUmVzdG9yYXRpb24vPlxuICAgIC8vIGFuZCB0aGVyZWZvcmUgaGF2ZSBubyBzYXZlZFNjcm9sbFBvc2l0aW9ucyBhdmFpbGFibGVcblxuXG4gICAgaWYgKCFpbml0aWFsU2Nyb2xsUmVzdG9yZWQgJiYgc3RhdGUubmF2aWdhdGlvbiA9PT0gSURMRV9OQVZJR0FUSU9OKSB7XG4gICAgICBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSB0cnVlO1xuICAgICAgbGV0IHkgPSBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcblxuICAgICAgaWYgKHkgIT0gbnVsbCkge1xuICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiB5XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IG51bGw7XG4gICAgICBnZXRTY3JvbGxQb3NpdGlvbiA9IG51bGw7XG4gICAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNhdmVTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChzYXZlZFNjcm9sbFBvc2l0aW9ucyAmJiBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSAmJiBnZXRTY3JvbGxQb3NpdGlvbikge1xuICAgICAgbGV0IHVzZXJNYXRjaGVzID0gbWF0Y2hlcy5tYXAobSA9PiBjcmVhdGVVc2VNYXRjaGVzTWF0Y2gobSwgc3RhdGUubG9hZGVyRGF0YSkpO1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KGxvY2F0aW9uLCB1c2VyTWF0Y2hlcykgfHwgbG9jYXRpb24ua2V5O1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XSA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChzYXZlZFNjcm9sbFBvc2l0aW9ucyAmJiBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSAmJiBnZXRTY3JvbGxQb3NpdGlvbikge1xuICAgICAgbGV0IHVzZXJNYXRjaGVzID0gbWF0Y2hlcy5tYXAobSA9PiBjcmVhdGVVc2VNYXRjaGVzTWF0Y2gobSwgc3RhdGUubG9hZGVyRGF0YSkpO1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KGxvY2F0aW9uLCB1c2VyTWF0Y2hlcykgfHwgbG9jYXRpb24ua2V5O1xuICAgICAgbGV0IHkgPSBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldO1xuXG4gICAgICBpZiAodHlwZW9mIHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByb3V0ZXIgPSB7XG4gICAgZ2V0IGJhc2VuYW1lKCkge1xuICAgICAgcmV0dXJuIGluaXQuYmFzZW5hbWU7XG4gICAgfSxcblxuICAgIGdldCBzdGF0ZSgpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9LFxuXG4gICAgZ2V0IHJvdXRlcygpIHtcbiAgICAgIHJldHVybiBkYXRhUm91dGVzO1xuICAgIH0sXG5cbiAgICBpbml0aWFsaXplLFxuICAgIHN1YnNjcmliZSxcbiAgICBlbmFibGVTY3JvbGxSZXN0b3JhdGlvbixcbiAgICBuYXZpZ2F0ZSxcbiAgICBmZXRjaCxcbiAgICByZXZhbGlkYXRlLFxuICAgIC8vIFBhc3N0aHJvdWdoIHRvIGhpc3RvcnktYXdhcmUgY3JlYXRlSHJlZiB1c2VkIGJ5IHVzZUhyZWYgc28gd2UgZ2V0IHByb3BlclxuICAgIC8vIGhhc2gtYXdhcmUgVVJMcyBpbiBET00gcGF0aHNcbiAgICBjcmVhdGVIcmVmOiB0byA9PiBpbml0Lmhpc3RvcnkuY3JlYXRlSHJlZih0byksXG4gICAgZ2V0RmV0Y2hlcixcbiAgICBkZWxldGVGZXRjaGVyLFxuICAgIGRpc3Bvc2UsXG4gICAgX2ludGVybmFsRmV0Y2hDb250cm9sbGVyczogZmV0Y2hDb250cm9sbGVycyxcbiAgICBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkc1xuICB9O1xuICByZXR1cm4gcm91dGVyO1xufSAvLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlU3RhdGljSGFuZGxlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuY29uc3QgdmFsaWRBY3Rpb25NZXRob2RzID0gbmV3IFNldChbXCJQT1NUXCIsIFwiUFVUXCIsIFwiUEFUQ0hcIiwgXCJERUxFVEVcIl0pO1xuY29uc3QgdmFsaWRSZXF1ZXN0TWV0aG9kcyA9IG5ldyBTZXQoW1wiR0VUXCIsIFwiSEVBRFwiLCAuLi52YWxpZEFjdGlvbk1ldGhvZHNdKTtcbmZ1bmN0aW9uIHVuc3RhYmxlX2NyZWF0ZVN0YXRpY0hhbmRsZXIocm91dGVzKSB7XG4gIGludmFyaWFudChyb3V0ZXMubGVuZ3RoID4gMCwgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byB1bnN0YWJsZV9jcmVhdGVTdGF0aWNIYW5kbGVyXCIpO1xuICBsZXQgZGF0YVJvdXRlcyA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGVzKTtcbiAgLyoqXG4gICAqIFRoZSBxdWVyeSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZG9jdW1lbnQgcmVxdWVzdHMsIGluIHdoaWNoIHdlIHdhbnQgdG9cbiAgICogY2FsbCBhbiBvcHRpb25hbCBhY3Rpb24gYW5kIHBvdGVudGlhbGx5IG11bHRpcGxlIGxvYWRlcnMgZm9yIGFsbCBuZXN0ZWRcbiAgICogcm91dGVzLiAgSXQgcmV0dXJucyBhIFN0YXRpY0hhbmRsZXJDb250ZXh0IG9iamVjdCwgd2hpY2ggaXMgdmVyeSBzaW1pbGFyXG4gICAqIHRvIHRoZSByb3V0ZXIgc3RhdGUgKGxvY2F0aW9uLCBsb2FkZXJEYXRhLCBhY3Rpb25EYXRhLCBlcnJvcnMsIGV0Yy4pIGFuZFxuICAgKiBhbHNvIGFkZHMgU1NSLXNwZWNpZmljIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIHN0YXR1c0NvZGUgYW5kIGhlYWRlcnNcbiAgICogZnJvbSBhY3Rpb24vbG9hZGVycyBSZXNwb25zZXMuXG4gICAqXG4gICAqIEl0IF9zaG91bGRfIG5ldmVyIHRocm93IGFuZCBzaG91bGQgcmVwb3J0IGFsbCBlcnJvcnMgdGhyb3VnaCB0aGVcbiAgICogcmV0dXJuZWQgY29udGV4dC5lcnJvcnMgb2JqZWN0LCBwcm9wZXJseSBhc3NvY2lhdGluZyBlcnJvcnMgdG8gdGhlaXIgZXJyb3JcbiAgICogYm91bmRhcnkuICBBZGRpdGlvbmFsbHksIGl0IHRyYWNrcyBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB3aGljaCBjYW4gYmVcbiAgICogdXNlZCB0byBlbXVsYXRlIFJlYWN0IGVycm9yIGJvdW5kYXJpZXMgZHVyaW5nIFNTciBieSBwZXJmb3JtaW5nIGEgc2Vjb25kXG4gICAqIHBhc3Mgb25seSBkb3duIHRvIHRoZSBib3VuZGFyeUlkLlxuICAgKlxuICAgKiBUaGUgb25lIGV4Y2VwdGlvbiB3aGVyZSB3ZSBkbyBub3QgcmV0dXJuIGEgU3RhdGljSGFuZGxlckNvbnRleHQgaXMgd2hlbiBhXG4gICAqIHJlZGlyZWN0IHJlc3BvbnNlIGlzIHJldHVybmVkIG9yIHRocm93biBmcm9tIGFueSBhY3Rpb24vbG9hZGVyLiAgV2VcbiAgICogcHJvcGFnYXRlIHRoYXQgb3V0IGFuZCByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBzbyB0aGUgSFRUUCBzZXJ2ZXIgY2FuXG4gICAqIHJldHVybiBpdCBkaXJlY3RseS5cbiAgICovXG5cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnkocmVxdWVzdCkge1xuICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uKTtcblxuICAgIGlmICghdmFsaWRSZXF1ZXN0TWV0aG9kcy5oYXMocmVxdWVzdC5tZXRob2QpKSB7XG4gICAgICBsZXQge1xuICAgICAgICBtYXRjaGVzOiBtZXRob2ROb3RBbGxvd2VkTWF0Y2hlcyxcbiAgICAgICAgcm91dGUsXG4gICAgICAgIGVycm9yXG4gICAgICB9ID0gZ2V0TWV0aG9kTm90QWxsb3dlZE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBsZXQge1xuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlLFxuICAgICAgICBlcnJvclxuICAgICAgfSA9IGdldE5vdEZvdW5kTWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzKTtcblxuICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBSZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IC8vIFdoZW4gcmV0dXJuaW5nIFN0YXRpY0hhbmRsZXJDb250ZXh0LCB3ZSBwYXRjaCBiYWNrIGluIHRoZSBsb2NhdGlvbiBoZXJlXG4gICAgLy8gc2luY2Ugd2UgbmVlZCBpdCBmb3IgUmVhY3QgQ29udGV4dC4gIEJ1dCB0aGlzIGhlbHBzIGtlZXAgb3VyIHN1Ym1pdCBhbmRcbiAgICAvLyBsb2FkUm91dGVEYXRhIG9wZXJhdGluZyBvbiBhIFJlcXVlc3QgaW5zdGVhZCBvZiBhIExvY2F0aW9uXG5cblxuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBsb2NhdGlvblxuICAgIH0sIHJlc3VsdCk7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBxdWVyeVJvdXRlKCkgbWV0aG9kIGlzIGludGVuZGVkIGZvciB0YXJnZXRlZCByb3V0ZSByZXF1ZXN0cywgZWl0aGVyXG4gICAqIGZvciBmZXRjaCA/X2RhdGEgcmVxdWVzdHMgb3IgcmVzb3VyY2Ugcm91dGUgcmVxdWVzdHMuICBJbiB0aGlzIGNhc2UsIHdlXG4gICAqIGFyZSBvbmx5IGV2ZXIgY2FsbGluZyBhIHNpbmdsZSBhY3Rpb24gb3IgbG9hZGVyLCBhbmQgd2UgYXJlIHJldHVybmluZyB0aGVcbiAgICogcmV0dXJuZWQgdmFsdWUgZGlyZWN0bHkuICBJbiBtb3N0IGNhc2VzLCB0aGlzIHdpbGwgYmUgYSBSZXNwb25zZSByZXR1cm5lZFxuICAgKiBmcm9tIHRoZSBhY3Rpb24vbG9hZGVyLCBidXQgaXQgbWF5IGJlIGEgcHJpbWl0aXZlIG9yIG90aGVyIHZhbHVlIGFzIHdlbGwgLVxuICAgKiBhbmQgaW4gc3VjaCBjYXNlcyB0aGUgY2FsbGluZyBjb250ZXh0IHNob3VsZCBoYW5kbGUgdGhhdCBhY2NvcmRpbmdseS5cbiAgICpcbiAgICogV2UgZG8gcmVzcGVjdCB0aGUgdGhyb3cvcmV0dXJuIGRpZmZlcmVudGlhdGlvbiwgc28gaWYgYW4gYWN0aW9uL2xvYWRlclxuICAgKiB0aHJvd3MsIHRoZW4gdGhpcyBtZXRob2Qgd2lsbCB0aHJvdyB0aGUgdmFsdWUuICBUaGlzIGlzIGltcG9ydGFudCBzbyB3ZVxuICAgKiBjYW4gZG8gcHJvcGVyIGJvdW5kYXJ5IGlkZW50aWZpY2F0aW9uIGluIFJlbWl4IHdoZXJlIGEgdGhyb3duIFJlc3BvbnNlXG4gICAqIG11c3QgZ28gdG8gdGhlIENhdGNoIEJvdW5kYXJ5IGJ1dCBhIHJldHVybmVkIFJlc3BvbnNlIGlzIGhhcHB5LXBhdGguXG4gICAqXG4gICAqIE9uZSB0aGluZyB0byBub3RlIGlzIHRoYXQgYW55IFJvdXRlci1pbml0aWF0ZWQgdGhyb3duIFJlc3BvbnNlIChzdWNoIGFzIGFcbiAgICogNDA0IG9yIDQwNSkgd2lsbCBoYXZlIGEgY3VzdG9tIFgtUmVtaXgtUm91dGVyLUVycm9yOiBcInllc1wiIGhlYWRlciBvbiBpdFxuICAgKiBpbiBvcmRlciB0byBkaWZmZXJlbnRpYXRlIGZyb20gcmVzcG9uc2VzIHRocm93biBmcm9tIHVzZXIgYWN0aW9ucy9sb2FkZXJzLlxuICAgKi9cblxuXG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5Um91dGUocmVxdWVzdCwgcm91dGVJZCkge1xuICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uKTtcblxuICAgIGlmICghdmFsaWRSZXF1ZXN0TWV0aG9kcy5oYXMocmVxdWVzdC5tZXRob2QpKSB7XG4gICAgICB0aHJvdyBjcmVhdGVSb3V0ZXJFcnJvclJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiA0MDUsXG4gICAgICAgIHN0YXR1c1RleHQ6IFwiTWV0aG9kIE5vdCBBbGxvd2VkXCJcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHRocm93IGNyZWF0ZVJvdXRlckVycm9yUmVzcG9uc2UobnVsbCwge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgc3RhdHVzVGV4dDogXCJOb3QgRm91bmRcIlxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IG1hdGNoID0gcm91dGVJZCA/IG1hdGNoZXMuZmluZChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpIDogZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuXG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgdGhyb3cgY3JlYXRlUm91dGVyRXJyb3JSZXNwb25zZShudWxsLCB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBzdGF0dXNUZXh0OiBcIk5vdCBGb3VuZFwiXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBtYXRjaCk7XG5cbiAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9ycyA/IE9iamVjdC52YWx1ZXMocmVzdWx0LmVycm9ycylbMF0gOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gSWYgd2UgZ290IGJhY2sgcmVzdWx0LmVycm9ycywgdGhhdCBtZWFucyB0aGUgbG9hZGVyL2FjdGlvbiB0aHJld1xuICAgICAgLy8gX3NvbWV0aGluZ18gdGhhdCB3YXNuJ3QgYSBSZXNwb25zZSwgYnV0IGl0J3Mgbm90IGd1YXJhbnRlZWQvcmVxdWlyZWRcbiAgICAgIC8vIHRvIGJlIGFuIGBpbnN0YW5jZW9mIEVycm9yYCBlaXRoZXIsIHNvIHdlIGhhdmUgdG8gdXNlIHRocm93IGhlcmUgdG9cbiAgICAgIC8vIHByZXNlcnZlIHRoZSBcImVycm9yXCIgc3RhdGUgb3V0c2lkZSBvZiBxdWVyeUltcGwuXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9IC8vIFBpY2sgb2ZmIHRoZSByaWdodCBzdGF0ZSB2YWx1ZSB0byByZXR1cm5cblxuXG4gICAgbGV0IHJvdXRlRGF0YSA9IFtyZXN1bHQuYWN0aW9uRGF0YSwgcmVzdWx0LmxvYWRlckRhdGFdLmZpbmQodiA9PiB2KTtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyb3V0ZURhdGEgfHwge30pWzBdO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCByb3V0ZU1hdGNoKSB7XG4gICAgaW52YXJpYW50KHJlcXVlc3Quc2lnbmFsLCBcInF1ZXJ5KCkvcXVlcnlSb3V0ZSgpIHJlcXVlc3RzIG11c3QgY29udGFpbiBhbiBBYm9ydENvbnRyb2xsZXIgc2lnbmFsXCIpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmICh2YWxpZEFjdGlvbk1ldGhvZHMuaGFzKHJlcXVlc3QubWV0aG9kKSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgc3VibWl0KHJlcXVlc3QsIG1hdGNoZXMsIHJvdXRlTWF0Y2ggfHwgZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pLCByb3V0ZU1hdGNoICE9IG51bGwpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByb3V0ZU1hdGNoKTtcbiAgICAgIHJldHVybiByZXN1bHQgaW5zdGFuY2VvZiBSZXNwb25zZSA/IHJlc3VsdCA6IF9leHRlbmRzKHt9LCByZXN1bHQsIHtcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge31cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHRocmV3L3JldHVybmVkIGEgUmVzcG9uc2UgaW4gY2FsbExvYWRlck9yQWN0aW9uLCB3ZSB0aHJvd1xuICAgICAgLy8gaXQgdG8gYmFpbCBvdXQgYW5kIHRoZW4gcmV0dXJuIG9yIHRocm93IGhlcmUgYmFzZWQgb24gd2hldGhlciB0aGUgdXNlclxuICAgICAgLy8gcmV0dXJuZWQgb3IgdGhyZXdcbiAgICAgIGlmIChpc1F1ZXJ5Um91dGVSZXNwb25zZShlKSkge1xuICAgICAgICBpZiAoZS50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yICYmICFpc1JlZGlyZWN0UmVzcG9uc2UoZS5yZXNwb25zZSkpIHtcbiAgICAgICAgICB0aHJvdyBlLnJlc3BvbnNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGUucmVzcG9uc2U7XG4gICAgICB9IC8vIFJlZGlyZWN0cyBhcmUgYWx3YXlzIHJldHVybmVkIHNpbmNlIHRoZXkgZG9uJ3QgcHJvcGFnYXRlIHRvIGNhdGNoXG4gICAgICAvLyBib3VuZGFyaWVzXG5cblxuICAgICAgaWYgKGlzUmVkaXJlY3RSZXNwb25zZShlKSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBzdWJtaXQocmVxdWVzdCwgbWF0Y2hlcywgYWN0aW9uTWF0Y2gsIGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgbGV0IHJlc3VsdDtcblxuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uKSB7XG4gICAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgY3JlYXRlUm91dGVyRXJyb3JSZXNwb25zZShudWxsLCB7XG4gICAgICAgICAgc3RhdHVzOiA0MDUsXG4gICAgICAgICAgc3RhdHVzVGV4dDogXCJNZXRob2QgTm90IEFsbG93ZWRcIlxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0ID0gZ2V0TWV0aG9kTm90QWxsb3dlZFJlc3VsdChyZXF1ZXN0LnVybCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IGNhbGxMb2FkZXJPckFjdGlvbihcImFjdGlvblwiLCByZXF1ZXN0LCBhY3Rpb25NYXRjaCwgbWF0Y2hlcywgdW5kZWZpbmVkLCAvLyBCYXNlbmFtZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBpbiBzdGF0aWMgaGFuZGxlcnNcbiAgICAgIHRydWUsIGlzUm91dGVSZXF1ZXN0KTtcblxuICAgICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgbGV0IG1ldGhvZCA9IGlzUm91dGVSZXF1ZXN0ID8gXCJxdWVyeVJvdXRlXCIgOiBcInF1ZXJ5XCI7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXRob2QgKyBcIigpIGNhbGwgYWJvcnRlZFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBVaGhoaCAtIHRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbiwgd2Ugc2hvdWxkIGFsd2F5cyB0aHJvdyB0aGVzZSBmcm9tXG4gICAgICAvLyBjYWxsTG9hZGVyT3JBY3Rpb24sIGJ1dCB0aGUgdHlwZSBuYXJyb3dpbmcgaGVyZSBrZWVwcyBUUyBoYXBweSBhbmQgd2VcbiAgICAgIC8vIGNhbiBnZXQgYmFjayBvbiB0aGUgXCJ0aHJvdyBhbGwgcmVkaXJlY3QgcmVzcG9uc2VzXCIgdHJhaW4gaGVyZSBzaG91bGRcbiAgICAgIC8vIHRoaXMgZXZlciBoYXBwZW4gOi9cbiAgICAgIHRocm93IG5ldyBSZXNwb25zZShudWxsLCB7XG4gICAgICAgIHN0YXR1czogcmVzdWx0LnN0YXR1cyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIExvY2F0aW9uOiByZXN1bHQubG9jYXRpb25cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGVmZXIoKSBpcyBub3Qgc3VwcG9ydGVkIGluIGFjdGlvbnNcIik7XG4gICAgfVxuXG4gICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAvLyBOb3RlOiBUaGlzIHNob3VsZCBvbmx5IGJlIG5vbi1SZXNwb25zZSB2YWx1ZXMgaWYgd2UgZ2V0IGhlcmUsIHNpbmNlXG4gICAgICAvLyBpc1JvdXRlUmVxdWVzdCBzaG91bGQgdGhyb3cgYW55IFJlc3BvbnNlIHJlY2VpdmVkIGluIGNhbGxMb2FkZXJPckFjdGlvblxuICAgICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1hdGNoZXM6IFthY3Rpb25NYXRjaF0sXG4gICAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICAgICAgfSxcbiAgICAgICAgICAvLyBOb3RlOiBzdGF0dXNDb2RlICsgaGVhZGVycyBhcmUgdW51c2VkIGhlcmUgc2luY2UgcXVlcnlSb3V0ZSB3aWxsXG4gICAgICAgICAgLy8gcmV0dXJuIHRoZSByYXcgUmVzcG9uc2Ugb3IgdmFsdWVcbiAgICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgICAgYWN0aW9uSGVhZGVyczoge31cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlczogW2FjdGlvbk1hdGNoXSxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IHtcbiAgICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcnM6IG51bGwsXG4gICAgICAgIC8vIE5vdGU6IHN0YXR1c0NvZGUgKyBoZWFkZXJzIGFyZSB1bnVzZWQgaGVyZSBzaW5jZSBxdWVyeVJvdXRlIHdpbGxcbiAgICAgICAgLy8gcmV0dXJuIHRoZSByYXcgUmVzcG9uc2Ugb3IgdmFsdWVcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge31cbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU3RvcmUgb2ZmIHRoZSBwZW5kaW5nIGVycm9yIC0gd2UgdXNlIGl0IHRvIGRldGVybWluZSB3aGljaCBsb2FkZXJzXG4gICAgICAvLyB0byBjYWxsIGFuZCB3aWxsIGNvbW1pdCBpdCB3aGVuIHdlIGNvbXBsZXRlIHRoZSBuYXZpZ2F0aW9uXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpO1xuICAgICAgbGV0IGNvbnRleHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKHJlcXVlc3QsIG1hdGNoZXMsIHVuZGVmaW5lZCwge1xuICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgfSk7IC8vIGFjdGlvbiBzdGF0dXMgY29kZXMgdGFrZSBwcmVjZWRlbmNlIG92ZXIgbG9hZGVyIHN0YXR1cyBjb2Rlc1xuXG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICAgICAgc3RhdHVzQ29kZTogaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKSA/IHJlc3VsdC5lcnJvci5zdGF0dXMgOiA1MDAsXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IF9leHRlbmRzKHt9LCByZXN1bHQuaGVhZGVycyA/IHtcbiAgICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgICB9IDoge30pXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgY29udGV4dCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcyk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCByZXN1bHQuc3RhdHVzQ29kZSA/IHtcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXNDb2RlXG4gICAgfSA6IHt9LCB7XG4gICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICB9LFxuICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfSA6IHt9KVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByb3V0ZU1hdGNoLCBwZW5kaW5nQWN0aW9uRXJyb3IpIHtcbiAgICBsZXQgaXNSb3V0ZVJlcXVlc3QgPSByb3V0ZU1hdGNoICE9IG51bGw7XG4gICAgbGV0IHJlcXVlc3RNYXRjaGVzID0gcm91dGVNYXRjaCA/IFtyb3V0ZU1hdGNoXSA6IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIE9iamVjdC5rZXlzKHBlbmRpbmdBY3Rpb25FcnJvciB8fCB7fSlbMF0pO1xuICAgIGxldCBtYXRjaGVzVG9Mb2FkID0gcmVxdWVzdE1hdGNoZXMuZmlsdGVyKG0gPT4gbS5yb3V0ZS5sb2FkZXIpOyAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW5cblxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGVycm9yczogcGVuZGluZ0FjdGlvbkVycm9yIHx8IG51bGwsXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge31cbiAgICAgIH07XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChbLi4ubWF0Y2hlc1RvTG9hZC5tYXAobWF0Y2ggPT4gY2FsbExvYWRlck9yQWN0aW9uKFwibG9hZGVyXCIsIHJlcXVlc3QsIG1hdGNoLCBtYXRjaGVzLCB1bmRlZmluZWQsIC8vIEJhc2VuYW1lIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGluIHN0YXRpYyBoYW5kbGVyc1xuICAgIHRydWUsIGlzUm91dGVSZXF1ZXN0KSldKTtcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICBsZXQgbWV0aG9kID0gaXNSb3V0ZVJlcXVlc3QgPyBcInF1ZXJ5Um91dGVcIiA6IFwicXVlcnlcIjtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXRob2QgKyBcIigpIGNhbGwgYWJvcnRlZFwiKTtcbiAgICB9IC8vIENhbid0IGRvIGFueXRoaW5nIHdpdGggdGhlc2Ugd2l0aG91dCB0aGUgUmVtaXggc2lkZSBvZiB0aGluZ3MsIHNvIGp1c3RcbiAgICAvLyBjYW5jZWwgdGhlbSBmb3Igbm93XG5cblxuICAgIHJlc3VsdHMuZm9yRWFjaChyZXN1bHQgPT4ge1xuICAgICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICByZXN1bHQuZGVmZXJyZWREYXRhLmNhbmNlbCgpO1xuICAgICAgfVxuICAgIH0pOyAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuXG4gICAgbGV0IGNvbnRleHQgPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdBY3Rpb25FcnJvcik7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgICBtYXRjaGVzXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSb3V0ZXJFcnJvclJlc3BvbnNlKGJvZHksIGluaXQpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKGJvZHksIF9leHRlbmRzKHt9LCBpbml0LCB7XG4gICAgICBoZWFkZXJzOiBfZXh0ZW5kcyh7fSwgaW5pdC5oZWFkZXJzLCB7XG4gICAgICAgIFwiWC1SZW1peC1Sb3V0ZXItRXJyb3JcIjogXCJ5ZXNcIlxuICAgICAgfSlcbiAgICB9KSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRhdGFSb3V0ZXMsXG4gICAgcXVlcnksXG4gICAgcXVlcnlSb3V0ZVxuICB9O1xufSAvLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSGVscGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBHaXZlbiBhbiBleGlzdGluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCBhbmQgYW4gZXJyb3IgdGhyb3duIGF0IHJlbmRlciB0aW1lLFxuICogcHJvdmlkZSBhbiB1cGRhdGVkIFN0YXRpY0hhbmRsZXJDb250ZXh0IHN1aXRhYmxlIGZvciBhIHNlY29uZCBTU1IgcmVuZGVyXG4gKi9cblxuZnVuY3Rpb24gZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvcihyb3V0ZXMsIGNvbnRleHQsIGVycm9yKSB7XG4gIGxldCBuZXdDb250ZXh0ID0gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgZXJyb3JzOiB7XG4gICAgICBbY29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB8fCByb3V0ZXNbMF0uaWRdOiBlcnJvclxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG5ld0NvbnRleHQ7XG59IC8vIE5vcm1hbGl6ZSBuYXZpZ2F0aW9uIG9wdGlvbnMgYnkgY29udmVydGluZyBmb3JtTWV0aG9kPUdFVCBmb3JtRGF0YSBvYmplY3RzIHRvXG4vLyBVUkxTZWFyY2hQYXJhbXMgc28gdGhleSBiZWhhdmUgaWRlbnRpY2FsbHkgdG8gbGlua3Mgd2l0aCBxdWVyeSBwYXJhbXNcblxuZnVuY3Rpb24gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKHRvLCBvcHRzLCBpc0ZldGNoZXIpIHtcbiAgaWYgKGlzRmV0Y2hlciA9PT0gdm9pZCAwKSB7XG4gICAgaXNGZXRjaGVyID0gZmFsc2U7XG4gIH1cblxuICBsZXQgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7IC8vIFJldHVybiBsb2NhdGlvbiB2ZXJiYXRpbSBvbiBub24tc3VibWlzc2lvbiBuYXZpZ2F0aW9uc1xuXG4gIGlmICghb3B0cyB8fCAhKFwiZm9ybU1ldGhvZFwiIGluIG9wdHMpICYmICEoXCJmb3JtRGF0YVwiIGluIG9wdHMpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGhcbiAgICB9O1xuICB9IC8vIENyZWF0ZSBhIFN1Ym1pc3Npb24gb24gbm9uLUdFVCBuYXZpZ2F0aW9uc1xuXG5cbiAgaWYgKG9wdHMuZm9ybU1ldGhvZCAhPSBudWxsICYmIG9wdHMuZm9ybU1ldGhvZCAhPT0gXCJnZXRcIikge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoLFxuICAgICAgc3VibWlzc2lvbjoge1xuICAgICAgICBmb3JtTWV0aG9kOiBvcHRzLmZvcm1NZXRob2QsXG4gICAgICAgIGZvcm1BY3Rpb246IHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpLFxuICAgICAgICBmb3JtRW5jVHlwZTogb3B0cyAmJiBvcHRzLmZvcm1FbmNUeXBlIHx8IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICAgIGZvcm1EYXRhOiBvcHRzLmZvcm1EYXRhXG4gICAgICB9XG4gICAgfTtcbiAgfSAvLyBObyBmb3JtRGF0YSB0byBmbGF0dGVuIGZvciBHRVQgc3VibWlzc2lvblxuXG5cbiAgaWYgKCFvcHRzLmZvcm1EYXRhKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGhcbiAgICB9O1xuICB9IC8vIEZsYXR0ZW4gc3VibWlzc2lvbiBvbnRvIFVSTFNlYXJjaFBhcmFtcyBmb3IgR0VUIHN1Ym1pc3Npb25zXG5cblxuICBsZXQgcGFyc2VkUGF0aCA9IHBhcnNlUGF0aChwYXRoKTtcblxuICB0cnkge1xuICAgIGxldCBzZWFyY2hQYXJhbXMgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhvcHRzLmZvcm1EYXRhKTsgLy8gU2luY2UgZmV0Y2hlciBHRVQgc3VibWlzc2lvbnMgb25seSBydW4gYSBzaW5nbGUgbG9hZGVyIChhcyBvcHBvc2VkIHRvXG4gICAgLy8gbmF2aWdhdGlvbiBHRVQgc3VibWlzc2lvbnMgd2hpY2ggcnVuIGFsbCBsb2FkZXJzKSwgd2UgbmVlZCB0byBwcmVzZXJ2ZVxuICAgIC8vIGFueSBpbmNvbWluZyA/aW5kZXggcGFyYW1zXG5cbiAgICBpZiAoaXNGZXRjaGVyICYmIHBhcnNlZFBhdGguc2VhcmNoICYmIGhhc05ha2VkSW5kZXhRdWVyeShwYXJzZWRQYXRoLnNlYXJjaCkpIHtcbiAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoXCJpbmRleFwiLCBcIlwiKTtcbiAgICB9XG5cbiAgICBwYXJzZWRQYXRoLnNlYXJjaCA9IFwiP1wiICsgc2VhcmNoUGFyYW1zO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBlcnJvcjogbmV3IEVycm9yUmVzcG9uc2UoNDAwLCBcIkJhZCBSZXF1ZXN0XCIsIFwiQ2Fubm90IHN1Ym1pdCBiaW5hcnkgZm9ybSBkYXRhIHVzaW5nIEdFVFwiKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGg6IGNyZWF0ZVBhdGgocGFyc2VkUGF0aClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0TG9hZGVyUmVkaXJlY3Qoc3RhdGUsIHJlZGlyZWN0KSB7XG4gIGxldCB7XG4gICAgZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhXG4gIH0gPSBzdGF0ZS5uYXZpZ2F0aW9uO1xuICBsZXQgbmF2aWdhdGlvbiA9IHtcbiAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgbG9jYXRpb246IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCByZWRpcmVjdC5sb2NhdGlvbiksXG4gICAgZm9ybU1ldGhvZDogZm9ybU1ldGhvZCB8fCB1bmRlZmluZWQsXG4gICAgZm9ybUFjdGlvbjogZm9ybUFjdGlvbiB8fCB1bmRlZmluZWQsXG4gICAgZm9ybUVuY1R5cGU6IGZvcm1FbmNUeXBlIHx8IHVuZGVmaW5lZCxcbiAgICBmb3JtRGF0YTogZm9ybURhdGEgfHwgdW5kZWZpbmVkXG4gIH07XG4gIHJldHVybiBuYXZpZ2F0aW9uO1xufSAvLyBGaWx0ZXIgb3V0IGFsbCByb3V0ZXMgYmVsb3cgYW55IGNhdWdodCBlcnJvciBhcyB0aGV5IGFyZW4ndCBnb2luZyB0b1xuLy8gcmVuZGVyIHNvIHdlIGRvbid0IG5lZWQgdG8gbG9hZCB0aGVtXG5cblxuZnVuY3Rpb24gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgYm91bmRhcnlJZCkge1xuICBsZXQgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcztcblxuICBpZiAoYm91bmRhcnlJZCkge1xuICAgIGxldCBpbmRleCA9IG1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCA9PT0gYm91bmRhcnlJZCk7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCBpbmRleCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kYXJ5TWF0Y2hlcztcbn1cblxuZnVuY3Rpb24gZ2V0TWF0Y2hlc1RvTG9hZChzdGF0ZSwgbWF0Y2hlcywgc3VibWlzc2lvbiwgbG9jYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IsIGZldGNoTG9hZE1hdGNoZXMpIHtcbiAgbGV0IGFjdGlvblJlc3VsdCA9IHBlbmRpbmdFcnJvciA/IE9iamVjdC52YWx1ZXMocGVuZGluZ0Vycm9yKVswXSA6IHBlbmRpbmdBY3Rpb25EYXRhID8gT2JqZWN0LnZhbHVlcyhwZW5kaW5nQWN0aW9uRGF0YSlbMF0gOiBudWxsOyAvLyBQaWNrIG5hdmlnYXRpb24gbWF0Y2hlcyB0aGF0IGFyZSBuZXQtbmV3IG9yIHF1YWxpZnkgZm9yIHJldmFsaWRhdGlvblxuXG4gIGxldCBib3VuZGFyeUlkID0gcGVuZGluZ0Vycm9yID8gT2JqZWN0LmtleXMocGVuZGluZ0Vycm9yKVswXSA6IHVuZGVmaW5lZDtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpO1xuICBsZXQgbmF2aWdhdGlvbk1hdGNoZXMgPSBib3VuZGFyeU1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IG1hdGNoLnJvdXRlLmxvYWRlciAhPSBudWxsICYmIChpc05ld0xvYWRlcihzdGF0ZS5sb2FkZXJEYXRhLCBzdGF0ZS5tYXRjaGVzW2luZGV4XSwgbWF0Y2gpIHx8IC8vIElmIHRoaXMgcm91dGUgaGFkIGEgcGVuZGluZyBkZWZlcnJlZCBjYW5jZWxsZWQgaXQgbXVzdCBiZSByZXZhbGlkYXRlZFxuICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5zb21lKGlkID0+IGlkID09PSBtYXRjaC5yb3V0ZS5pZCkgfHwgc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlc1tpbmRleF0sIHN1Ym1pc3Npb24sIGxvY2F0aW9uLCBtYXRjaCwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgYWN0aW9uUmVzdWx0KSkpOyAvLyBQaWNrIGZldGNoZXIubG9hZHMgdGhhdCBuZWVkIHRvIGJlIHJldmFsaWRhdGVkXG5cbiAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXJzID0gW107XG4gIGZldGNoTG9hZE1hdGNoZXMgJiYgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChfcmVmMTAsIGtleSkgPT4ge1xuICAgIGxldCBbaHJlZiwgbWF0Y2gsIGZldGNoTWF0Y2hlc10gPSBfcmVmMTA7XG5cbiAgICAvLyBUaGlzIGZldGNoZXIgd2FzIGNhbmNlbGxlZCBmcm9tIGEgcHJpb3IgYWN0aW9uIHN1Ym1pc3Npb24gLSBmb3JjZSByZWxvYWRcbiAgICBpZiAoY2FuY2VsbGVkRmV0Y2hlckxvYWRzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goW2tleSwgaHJlZiwgbWF0Y2gsIGZldGNoTWF0Y2hlc10pO1xuICAgIH0gZWxzZSBpZiAoaXNSZXZhbGlkYXRpb25SZXF1aXJlZCkge1xuICAgICAgbGV0IHNob3VsZFJldmFsaWRhdGUgPSBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGhyZWYsIG1hdGNoLCBzdWJtaXNzaW9uLCBocmVmLCBtYXRjaCwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgYWN0aW9uUmVzdWx0KTtcblxuICAgICAgaWYgKHNob3VsZFJldmFsaWRhdGUpIHtcbiAgICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMucHVzaChba2V5LCBocmVmLCBtYXRjaCwgZmV0Y2hNYXRjaGVzXSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtuYXZpZ2F0aW9uTWF0Y2hlcywgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdO1xufVxuXG5mdW5jdGlvbiBpc05ld0xvYWRlcihjdXJyZW50TG9hZGVyRGF0YSwgY3VycmVudE1hdGNoLCBtYXRjaCkge1xuICBsZXQgaXNOZXcgPSAvLyBbYV0gLT4gW2EsIGJdXG4gICFjdXJyZW50TWF0Y2ggfHwgLy8gW2EsIGJdIC0+IFthLCBjXVxuICBtYXRjaC5yb3V0ZS5pZCAhPT0gY3VycmVudE1hdGNoLnJvdXRlLmlkOyAvLyBIYW5kbGUgdGhlIGNhc2UgdGhhdCB3ZSBkb24ndCBoYXZlIGRhdGEgZm9yIGEgcmUtdXNlZCByb3V0ZSwgcG90ZW50aWFsbHlcbiAgLy8gZnJvbSBhIHByaW9yIGVycm9yIG9yIGZyb20gYSBjYW5jZWxsZWQgcGVuZGluZyBkZWZlcnJlZFxuXG4gIGxldCBpc01pc3NpbmdEYXRhID0gY3VycmVudExvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID09PSB1bmRlZmluZWQ7IC8vIEFsd2F5cyBsb2FkIGlmIHRoaXMgaXMgYSBuZXQtbmV3IHJvdXRlIG9yIHdlIGRvbid0IHlldCBoYXZlIGRhdGFcblxuICByZXR1cm4gaXNOZXcgfHwgaXNNaXNzaW5nRGF0YTtcbn1cblxuZnVuY3Rpb24gaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGN1cnJlbnRQYXRoID0gY3VycmVudE1hdGNoLnJvdXRlLnBhdGg7XG4gIHJldHVybiAoLy8gcGFyYW0gY2hhbmdlIGZvciB0aGlzIG1hdGNoLCAvdXNlcnMvMTIzIC0+IC91c2Vycy80NTZcbiAgICBjdXJyZW50TWF0Y2gucGF0aG5hbWUgIT09IG1hdGNoLnBhdGhuYW1lIHx8IC8vIHNwbGF0IHBhcmFtIGNoYW5nZWQsIHdoaWNoIGlzIG5vdCBwcmVzZW50IGluIG1hdGNoLnBhdGhcbiAgICAvLyBlLmcuIC9maWxlcy9pbWFnZXMvYXZhdGFyLmpwZyAtPiBmaWxlcy9maW5hbmNlcy54bHNcbiAgICBjdXJyZW50UGF0aCAmJiBjdXJyZW50UGF0aC5lbmRzV2l0aChcIipcIikgJiYgY3VycmVudE1hdGNoLnBhcmFtc1tcIipcIl0gIT09IG1hdGNoLnBhcmFtc1tcIipcIl1cbiAgKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihjdXJyZW50TG9jYXRpb24sIGN1cnJlbnRNYXRjaCwgc3VibWlzc2lvbiwgbG9jYXRpb24sIG1hdGNoLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBhY3Rpb25SZXN1bHQpIHtcbiAgbGV0IGN1cnJlbnRVcmwgPSBjcmVhdGVVUkwoY3VycmVudExvY2F0aW9uKTtcbiAgbGV0IGN1cnJlbnRQYXJhbXMgPSBjdXJyZW50TWF0Y2gucGFyYW1zO1xuICBsZXQgbmV4dFVybCA9IGNyZWF0ZVVSTChsb2NhdGlvbik7XG4gIGxldCBuZXh0UGFyYW1zID0gbWF0Y2gucGFyYW1zOyAvLyBUaGlzIGlzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGFzIHRvIHdoZW4gd2UgcmV2YWxpZGF0ZS4gIElmIHRoZSByb3V0ZVxuICAvLyBwcm92aWRlcyBpdCdzIG93biBpbXBsZW1lbnRhdGlvbiwgdGhlbiB3ZSBnaXZlIHRoZW0gZnVsbCBjb250cm9sIGJ1dFxuICAvLyBwcm92aWRlIHRoaXMgdmFsdWUgc28gdGhleSBjYW4gbGV2ZXJhZ2UgaXQgaWYgbmVlZGVkIGFmdGVyIHRoZXkgY2hlY2tcbiAgLy8gdGhlaXIgb3duIHNwZWNpZmljIHVzZSBjYXNlc1xuICAvLyBOb3RlIHRoYXQgZmV0Y2hlcnMgYWx3YXlzIHByb3ZpZGUgdGhlIHNhbWUgY3VycmVudC9uZXh0IGxvY2F0aW9ucyBzbyB0aGVcbiAgLy8gVVJMLWJhc2VkIGNoZWNrcyBoZXJlIGRvbid0IGFwcGx5IHRvIGZldGNoZXIgc2hvdWxkUmV2YWxpZGF0ZSBjYWxsc1xuXG4gIGxldCBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZSA9IGlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50TWF0Y2gsIG1hdGNoKSB8fCAvLyBDbGlja2VkIHRoZSBzYW1lIGxpbmssIHJlc3VibWl0dGVkIGEgR0VUIGZvcm1cbiAgY3VycmVudFVybC50b1N0cmluZygpID09PSBuZXh0VXJsLnRvU3RyaW5nKCkgfHwgLy8gU2VhcmNoIHBhcmFtcyBhZmZlY3QgYWxsIGxvYWRlcnNcbiAgY3VycmVudFVybC5zZWFyY2ggIT09IG5leHRVcmwuc2VhcmNoIHx8IC8vIEZvcmNlZCByZXZhbGlkYXRpb24gZHVlIHRvIHN1Ym1pc3Npb24sIHVzZVJldmFsaWRhdGUsIG9yIFgtUmVtaXgtUmV2YWxpZGF0ZVxuICBpc1JldmFsaWRhdGlvblJlcXVpcmVkO1xuXG4gIGlmIChtYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgbGV0IHJvdXRlQ2hvaWNlID0gbWF0Y2gucm91dGUuc2hvdWxkUmV2YWxpZGF0ZShfZXh0ZW5kcyh7XG4gICAgICBjdXJyZW50VXJsLFxuICAgICAgY3VycmVudFBhcmFtcyxcbiAgICAgIG5leHRVcmwsXG4gICAgICBuZXh0UGFyYW1zXG4gICAgfSwgc3VibWlzc2lvbiwge1xuICAgICAgYWN0aW9uUmVzdWx0LFxuICAgICAgZGVmYXVsdFNob3VsZFJldmFsaWRhdGVcbiAgICB9KSk7XG5cbiAgICBpZiAodHlwZW9mIHJvdXRlQ2hvaWNlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgcmV0dXJuIHJvdXRlQ2hvaWNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlck9yQWN0aW9uKHR5cGUsIHJlcXVlc3QsIG1hdGNoLCBtYXRjaGVzLCBiYXNlbmFtZSwgaXNTdGF0aWNSZXF1ZXN0LCBpc1JvdXRlUmVxdWVzdCkge1xuICBpZiAoaXNTdGF0aWNSZXF1ZXN0ID09PSB2b2lkIDApIHtcbiAgICBpc1N0YXRpY1JlcXVlc3QgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc1JvdXRlUmVxdWVzdCA9PT0gdm9pZCAwKSB7XG4gICAgaXNSb3V0ZVJlcXVlc3QgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCByZXN1bHRUeXBlO1xuICBsZXQgcmVzdWx0OyAvLyBTZXR1cCBhIHByb21pc2Ugd2UgY2FuIHJhY2UgYWdhaW5zdCBzbyB0aGF0IGFib3J0IHNpZ25hbHMgc2hvcnQgY2lyY3VpdFxuXG4gIGxldCByZWplY3Q7XG4gIGxldCBhYm9ydFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcikgPT4gcmVqZWN0ID0gcik7XG5cbiAgbGV0IG9uUmVqZWN0ID0gKCkgPT4gcmVqZWN0KCk7XG5cbiAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcblxuICB0cnkge1xuICAgIGxldCBoYW5kbGVyID0gbWF0Y2gucm91dGVbdHlwZV07XG4gICAgaW52YXJpYW50KGhhbmRsZXIsIFwiQ291bGQgbm90IGZpbmQgdGhlIFwiICsgdHlwZSArIFwiIHRvIHJ1biBvbiB0aGUgXFxcIlwiICsgbWF0Y2gucm91dGUuaWQgKyBcIlxcXCIgcm91dGVcIik7XG4gICAgcmVzdWx0ID0gYXdhaXQgUHJvbWlzZS5yYWNlKFtoYW5kbGVyKHtcbiAgICAgIHJlcXVlc3QsXG4gICAgICBwYXJhbXM6IG1hdGNoLnBhcmFtc1xuICAgIH0pLCBhYm9ydFByb21pc2VdKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlc3VsdFR5cGUgPSBSZXN1bHRUeXBlLmVycm9yO1xuICAgIHJlc3VsdCA9IGU7XG4gIH0gZmluYWxseSB7XG4gICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcbiAgfVxuXG4gIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBSZXNwb25zZSkge1xuICAgIGxldCBzdGF0dXMgPSByZXN1bHQuc3RhdHVzOyAvLyBQcm9jZXNzIHJlZGlyZWN0c1xuXG4gICAgaWYgKHN0YXR1cyA+PSAzMDAgJiYgc3RhdHVzIDw9IDM5OSkge1xuICAgICAgbGV0IGxvY2F0aW9uID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gICAgICBpbnZhcmlhbnQobG9jYXRpb24sIFwiUmVkaXJlY3RzIHJldHVybmVkL3Rocm93biBmcm9tIGxvYWRlcnMvYWN0aW9ucyBtdXN0IGhhdmUgYSBMb2NhdGlvbiBoZWFkZXJcIik7IC8vIFN1cHBvcnQgcmVsYXRpdmUgcm91dGluZyBpbiByZWRpcmVjdHNcblxuICAgICAgbGV0IGFjdGl2ZU1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKDAsIG1hdGNoZXMuaW5kZXhPZihtYXRjaCkgKyAxKTtcbiAgICAgIGxldCByb3V0ZVBhdGhuYW1lcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKGFjdGl2ZU1hdGNoZXMpLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpO1xuICAgICAgbGV0IHJlcXVlc3RQYXRoID0gY3JlYXRlVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZTtcbiAgICAgIGxldCByZXNvbHZlZExvY2F0aW9uID0gcmVzb2x2ZVRvKGxvY2F0aW9uLCByb3V0ZVBhdGhuYW1lcywgcmVxdWVzdFBhdGgpO1xuICAgICAgaW52YXJpYW50KGNyZWF0ZVBhdGgocmVzb2x2ZWRMb2NhdGlvbiksIFwiVW5hYmxlIHRvIHJlc29sdmUgcmVkaXJlY3QgbG9jYXRpb246IFwiICsgcmVzdWx0LmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIikpOyAvLyBQcmVwZW5kIHRoZSBiYXNlbmFtZSB0byB0aGUgcmVkaXJlY3QgbG9jYXRpb24gaWYgd2UgaGF2ZSBvbmVcblxuICAgICAgaWYgKGJhc2VuYW1lKSB7XG4gICAgICAgIGxldCBwYXRoID0gcmVzb2x2ZWRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICAgICAgcmVzb2x2ZWRMb2NhdGlvbi5wYXRobmFtZSA9IHBhdGggPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoXSk7XG4gICAgICB9XG5cbiAgICAgIGxvY2F0aW9uID0gY3JlYXRlUGF0aChyZXNvbHZlZExvY2F0aW9uKTsgLy8gRG9uJ3QgcHJvY2VzcyByZWRpcmVjdHMgaW4gdGhlIHJvdXRlciBkdXJpbmcgc3RhdGljIHJlcXVlc3RzIHJlcXVlc3RzLlxuICAgICAgLy8gSW5zdGVhZCwgdGhyb3cgdGhlIFJlc3BvbnNlIGFuZCBsZXQgdGhlIHNlcnZlciBoYW5kbGUgaXQgd2l0aCBhbiBIVFRQXG4gICAgICAvLyByZWRpcmVjdC4gIFdlIGFsc28gdXBkYXRlIHRoZSBMb2NhdGlvbiBoZWFkZXIgaW4gcGxhY2UgaW4gdGhpcyBmbG93IHNvXG4gICAgICAvLyBiYXNlbmFtZSBhbmQgcmVsYXRpdmUgcm91dGluZyBpcyB0YWtlbiBpbnRvIGFjY291bnRcblxuICAgICAgaWYgKGlzU3RhdGljUmVxdWVzdCkge1xuICAgICAgICByZXN1bHQuaGVhZGVycy5zZXQoXCJMb2NhdGlvblwiLCBsb2NhdGlvbik7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5yZWRpcmVjdCxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgcmV2YWxpZGF0ZTogcmVzdWx0LmhlYWRlcnMuZ2V0KFwiWC1SZW1peC1SZXZhbGlkYXRlXCIpICE9PSBudWxsXG4gICAgICB9O1xuICAgIH0gLy8gRm9yIFNTUiBzaW5nbGUtcm91dGUgcmVxdWVzdHMsIHdlIHdhbnQgdG8gaGFuZCBSZXNwb25zZXMgYmFjayBkaXJlY3RseVxuICAgIC8vIHdpdGhvdXQgdW53cmFwcGluZy4gIFdlIGRvIHRoaXMgd2l0aCB0aGUgUXVlcnlSb3V0ZVJlc3BvbnNlIHdyYXBwZXJcbiAgICAvLyBpbnRlcmZhY2Ugc28gd2UgY2FuIGtub3cgd2hldGhlciBpdCB3YXMgcmV0dXJuZWQgb3IgdGhyb3duXG5cblxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgICAgIHRocm93IHtcbiAgICAgICAgdHlwZTogcmVzdWx0VHlwZSB8fCBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIHJlc3BvbnNlOiByZXN1bHRcbiAgICAgIH07XG4gICAgfVxuXG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGNvbnRlbnRUeXBlID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpO1xuXG4gICAgaWYgKGNvbnRlbnRUeXBlICYmIGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoXCJhcHBsaWNhdGlvbi9qc29uXCIpKSB7XG4gICAgICBkYXRhID0gYXdhaXQgcmVzdWx0Lmpzb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC50ZXh0KCk7XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdFR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHJlc3VsdFR5cGUsXG4gICAgICAgIGVycm9yOiBuZXcgRXJyb3JSZXNwb25zZShzdGF0dXMsIHJlc3VsdC5zdGF0dXNUZXh0LCBkYXRhKSxcbiAgICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgIGRhdGEsXG4gICAgICBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzLFxuICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICB9O1xuICB9XG5cbiAgaWYgKHJlc3VsdFR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogcmVzdWx0VHlwZSxcbiAgICAgIGVycm9yOiByZXN1bHRcbiAgICB9O1xuICB9XG5cbiAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIERlZmVycmVkRGF0YSkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmRlZmVycmVkLFxuICAgICAgZGVmZXJyZWREYXRhOiByZXN1bHRcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlcXVlc3QobG9jYXRpb24sIHNpZ25hbCwgc3VibWlzc2lvbikge1xuICBsZXQgdXJsID0gY3JlYXRlVVJMKHN0cmlwSGFzaEZyb21QYXRoKGxvY2F0aW9uKSkudG9TdHJpbmcoKTtcbiAgbGV0IGluaXQgPSB7XG4gICAgc2lnbmFsXG4gIH07XG5cbiAgaWYgKHN1Ym1pc3Npb24pIHtcbiAgICBsZXQge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGFcbiAgICB9ID0gc3VibWlzc2lvbjtcbiAgICBpbml0Lm1ldGhvZCA9IGZvcm1NZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICBpbml0LmJvZHkgPSBmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiA/IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKGZvcm1EYXRhKSA6IGZvcm1EYXRhO1xuICB9IC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuXG5cbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHVybCwgaW5pdCk7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKGZvcm1EYXRhKSB7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG5cbiAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIGZvcm1EYXRhLmVudHJpZXMoKSkge1xuICAgIGludmFyaWFudCh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIsICdGaWxlIGlucHV0cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIGVuY1R5cGUgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiwgJyArICdwbGVhc2UgdXNlIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiIGluc3RlYWQuJyk7XG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCBhY3RpdmVEZWZlcnJlZHMpIHtcbiAgLy8gRmlsbCBpbiBsb2FkZXJEYXRhL2Vycm9ycyBmcm9tIG91ciBsb2FkZXJzXG4gIGxldCBsb2FkZXJEYXRhID0ge307XG4gIGxldCBlcnJvcnMgPSBudWxsO1xuICBsZXQgc3RhdHVzQ29kZTtcbiAgbGV0IGZvdW5kRXJyb3IgPSBmYWxzZTtcbiAgbGV0IGxvYWRlckhlYWRlcnMgPSB7fTsgLy8gUHJvY2VzcyBsb2FkZXIgcmVzdWx0cyBpbnRvIHN0YXRlLmxvYWRlckRhdGEvc3RhdGUuZXJyb3JzXG5cbiAgcmVzdWx0cy5mb3JFYWNoKChyZXN1bHQsIGluZGV4KSA9PiB7XG4gICAgbGV0IGlkID0gbWF0Y2hlc1RvTG9hZFtpbmRleF0ucm91dGUuaWQ7XG4gICAgaW52YXJpYW50KCFpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCksIFwiQ2Fubm90IGhhbmRsZSByZWRpcmVjdCByZXN1bHRzIGluIHByb2Nlc3NMb2FkZXJEYXRhXCIpO1xuXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gTG9vayB1cHdhcmRzIGZyb20gdGhlIG1hdGNoZWQgcm91dGUgZm9yIHRoZSBjbG9zZXN0IGFuY2VzdG9yXG4gICAgICAvLyBlcnJvciBib3VuZGFyeSwgZGVmYXVsdGluZyB0byB0aGUgcm9vdCBtYXRjaFxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGlkKTtcbiAgICAgIGxldCBlcnJvciA9IHJlc3VsdC5lcnJvcjsgLy8gSWYgd2UgaGF2ZSBhIHBlbmRpbmcgYWN0aW9uIGVycm9yLCB3ZSByZXBvcnQgaXQgYXQgdGhlIGhpZ2hlc3Qtcm91dGVcbiAgICAgIC8vIHRoYXQgdGhyb3dzIGEgbG9hZGVyIGVycm9yLCBhbmQgdGhlbiBjbGVhciBpdCBvdXQgdG8gaW5kaWNhdGUgdGhhdFxuICAgICAgLy8gaXQgd2FzIGNvbnN1bWVkXG5cbiAgICAgIGlmIChwZW5kaW5nRXJyb3IpIHtcbiAgICAgICAgZXJyb3IgPSBPYmplY3QudmFsdWVzKHBlbmRpbmdFcnJvcilbMF07XG4gICAgICAgIHBlbmRpbmdFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgZXJyb3JzID0gT2JqZWN0LmFzc2lnbihlcnJvcnMgfHwge30sIHtcbiAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiBlcnJvclxuICAgICAgfSk7IC8vIE9uY2Ugd2UgZmluZCBvdXIgZmlyc3QgKGhpZ2hlc3QpIGVycm9yLCB3ZSBzZXQgdGhlIHN0YXR1cyBjb2RlIGFuZFxuICAgICAgLy8gcHJldmVudCBkZWVwZXIgc3RhdHVzIGNvZGVzIGZyb20gb3ZlcnJpZGluZ1xuXG4gICAgICBpZiAoIWZvdW5kRXJyb3IpIHtcbiAgICAgICAgZm91bmRFcnJvciA9IHRydWU7XG4gICAgICAgIHN0YXR1c0NvZGUgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpID8gcmVzdWx0LmVycm9yLnN0YXR1cyA6IDUwMDtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGFjdGl2ZURlZmVycmVkcyAmJiBhY3RpdmVEZWZlcnJlZHMuc2V0KGlkLCByZXN1bHQuZGVmZXJyZWREYXRhKTtcbiAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhOyAvLyBUT0RPOiBBZGQgc3RhdHVzQ29kZS9oZWFkZXJzIG9uY2Ugd2Ugd2lyZSB1cCBzdHJlYW1pbmcgaW4gUmVtaXhcbiAgICB9IGVsc2Uge1xuICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGF0YTsgLy8gRXJyb3Igc3RhdHVzIGNvZGVzIGFsd2F5cyBvdmVycmlkZSBzdWNjZXNzIHN0YXR1cyBjb2RlcywgYnV0IGlmIGFsbFxuICAgICAgLy8gbG9hZGVycyBhcmUgc3VjY2Vzc2Z1bCB3ZSB0YWtlIHRoZSBkZWVwZXN0IHN0YXR1cyBjb2RlLlxuXG4gICAgICBpZiAocmVzdWx0LnN0YXR1c0NvZGUgIT0gbnVsbCAmJiByZXN1bHQuc3RhdHVzQ29kZSAhPT0gMjAwICYmICFmb3VuZEVycm9yKSB7XG4gICAgICAgIHN0YXR1c0NvZGUgPSByZXN1bHQuc3RhdHVzQ29kZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfVxuICB9KTsgLy8gSWYgd2UgZGlkbid0IGNvbnN1bWUgdGhlIHBlbmRpbmcgYWN0aW9uIGVycm9yIChpLmUuLCBhbGwgbG9hZGVyc1xuICAvLyByZXNvbHZlZCksIHRoZW4gY29uc3VtZSBpdCBoZXJlXG5cbiAgaWYgKHBlbmRpbmdFcnJvcikge1xuICAgIGVycm9ycyA9IHBlbmRpbmdFcnJvcjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnMsXG4gICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSB8fCAyMDAsXG4gICAgbG9hZGVySGVhZGVyc1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcykge1xuICBsZXQge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH0gPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdFcnJvciwgYWN0aXZlRGVmZXJyZWRzKTsgLy8gUHJvY2VzcyByZXN1bHRzIGZyb20gb3VyIHJldmFsaWRhdGluZyBmZXRjaGVyc1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBsZXQgW2tleSwsIG1hdGNoXSA9IHJldmFsaWRhdGluZ0ZldGNoZXJzW2luZGV4XTtcbiAgICBpbnZhcmlhbnQoZmV0Y2hlclJlc3VsdHMgIT09IHVuZGVmaW5lZCAmJiBmZXRjaGVyUmVzdWx0c1tpbmRleF0gIT09IHVuZGVmaW5lZCwgXCJEaWQgbm90IGZpbmQgY29ycmVzcG9uZGluZyBmZXRjaGVyIHJlc3VsdFwiKTtcbiAgICBsZXQgcmVzdWx0ID0gZmV0Y2hlclJlc3VsdHNbaW5kZXhdOyAvLyBQcm9jZXNzIGZldGNoZXIgbm9uLXJlZGlyZWN0IGVycm9yc1xuXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KHN0YXRlLm1hdGNoZXMsIG1hdGNoLnJvdXRlLmlkKTtcblxuICAgICAgaWYgKCEoZXJyb3JzICYmIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSkpIHtcbiAgICAgICAgZXJyb3JzID0gX2V4dGVuZHMoe30sIGVycm9ycywge1xuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICB9IGVsc2UgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCByZWRpcmVjdHMgc2hvdWxkIGdldCBwcm9jZXNzZWQgYWJvdmUsIGJ1dCB3ZVxuICAgICAgLy8ga2VlcCB0aGlzIHRvIHR5cGUgbmFycm93IHRvIGEgc3VjY2VzcyByZXN1bHQgaW4gdGhlIGVsc2VcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuaGFuZGxlZCBmZXRjaGVyIHJldmFsaWRhdGlvbiByZWRpcmVjdFwiKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCBkZWZlcnJlZCBkYXRhIHNob3VsZCBiZSBhd2FpdGVkIGZvciBmZXRjaGVyc1xuICAgICAgLy8gaW4gcmVzb2x2ZURlZmVycmVkUmVzdWx0c1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5oYW5kbGVkIGZldGNoZXIgZGVmZXJyZWQgZGF0YVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0ge1xuICAgICAgICBzdGF0ZTogXCJpZGxlXCIsXG4gICAgICAgIGRhdGE6IHJlc3VsdC5kYXRhLFxuICAgICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlTG9hZGVyRGF0YShsb2FkZXJEYXRhLCBuZXdMb2FkZXJEYXRhLCBtYXRjaGVzKSB7XG4gIGxldCBtZXJnZWRMb2FkZXJEYXRhID0gX2V4dGVuZHMoe30sIG5ld0xvYWRlckRhdGEpO1xuXG4gIG1hdGNoZXMuZm9yRWFjaChtYXRjaCA9PiB7XG4gICAgbGV0IGlkID0gbWF0Y2gucm91dGUuaWQ7XG5cbiAgICBpZiAobmV3TG9hZGVyRGF0YVtpZF0gPT09IHVuZGVmaW5lZCAmJiBsb2FkZXJEYXRhW2lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBtZXJnZWRMb2FkZXJEYXRhW2lkXSA9IGxvYWRlckRhdGFbaWRdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBtZXJnZWRMb2FkZXJEYXRhO1xufSAvLyBGaW5kIHRoZSBuZWFyZXN0IGVycm9yIGJvdW5kYXJ5LCBsb29raW5nIHVwd2FyZHMgZnJvbSB0aGUgbGVhZiByb3V0ZSAob3IgdGhlXG4vLyByb3V0ZSBzcGVjaWZpZWQgYnkgcm91dGVJZCkgZm9yIHRoZSBjbG9zZXN0IGFuY2VzdG9yIGVycm9yIGJvdW5kYXJ5LFxuLy8gZGVmYXVsdGluZyB0byB0aGUgcm9vdCBtYXRjaFxuXG5cbmZ1bmN0aW9uIGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgcm91dGVJZCkge1xuICBsZXQgZWxpZ2libGVNYXRjaGVzID0gcm91dGVJZCA/IG1hdGNoZXMuc2xpY2UoMCwgbWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSArIDEpIDogWy4uLm1hdGNoZXNdO1xuICByZXR1cm4gZWxpZ2libGVNYXRjaGVzLnJldmVyc2UoKS5maW5kKG0gPT4gbS5yb3V0ZS5oYXNFcnJvckJvdW5kYXJ5ID09PSB0cnVlKSB8fCBtYXRjaGVzWzBdO1xufVxuXG5mdW5jdGlvbiBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlcywgc3RhdHVzLCBzdGF0dXNUZXh0KSB7XG4gIC8vIFByZWZlciBhIHJvb3QgbGF5b3V0IHJvdXRlIGlmIHByZXNlbnQsIG90aGVyd2lzZSBzaGltIGluIGEgcm91dGUgb2JqZWN0XG4gIGxldCByb3V0ZSA9IHJvdXRlcy5maW5kKHIgPT4gci5pbmRleCB8fCAhci5wYXRoIHx8IHIucGF0aCA9PT0gXCIvXCIpIHx8IHtcbiAgICBpZDogXCJfX3NoaW0tXCIgKyBzdGF0dXMgKyBcIi1yb3V0ZV9fXCJcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBtYXRjaGVzOiBbe1xuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIHBhdGhuYW1lOiBcIlwiLFxuICAgICAgcGF0aG5hbWVCYXNlOiBcIlwiLFxuICAgICAgcm91dGVcbiAgICB9XSxcbiAgICByb3V0ZSxcbiAgICBlcnJvcjogbmV3IEVycm9yUmVzcG9uc2Uoc3RhdHVzLCBzdGF0dXNUZXh0LCBudWxsKVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXROb3RGb3VuZE1hdGNoZXMocm91dGVzKSB7XG4gIHJldHVybiBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlcywgNDA0LCBcIk5vdCBGb3VuZFwiKTtcbn1cblxuZnVuY3Rpb24gZ2V0TWV0aG9kTm90QWxsb3dlZE1hdGNoZXMocm91dGVzKSB7XG4gIHJldHVybiBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlcywgNDA1LCBcIk1ldGhvZCBOb3QgQWxsb3dlZFwiKTtcbn1cblxuZnVuY3Rpb24gZ2V0TWV0aG9kTm90QWxsb3dlZFJlc3VsdChwYXRoKSB7XG4gIGxldCBocmVmID0gdHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIgPyBwYXRoIDogY3JlYXRlUGF0aChwYXRoKTtcbiAgY29uc29sZS53YXJuKFwiWW91J3JlIHRyeWluZyB0byBzdWJtaXQgdG8gYSByb3V0ZSB0aGF0IGRvZXMgbm90IGhhdmUgYW4gYWN0aW9uLiAgVG8gXCIgKyBcImZpeCB0aGlzLCBwbGVhc2UgYWRkIGFuIGBhY3Rpb25gIGZ1bmN0aW9uIHRvIHRoZSByb3V0ZSBmb3IgXCIgKyAoXCJbXCIgKyBocmVmICsgXCJdXCIpKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgIGVycm9yOiBuZXcgRXJyb3JSZXNwb25zZSg0MDUsIFwiTWV0aG9kIE5vdCBBbGxvd2VkXCIsIFwiXCIpXG4gIH07XG59IC8vIEZpbmQgYW55IHJldHVybmVkIHJlZGlyZWN0IGVycm9ycywgc3RhcnRpbmcgZnJvbSB0aGUgbG93ZXN0IG1hdGNoXG5cblxuZnVuY3Rpb24gZmluZFJlZGlyZWN0KHJlc3VsdHMpIHtcbiAgZm9yIChsZXQgaSA9IHJlc3VsdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBsZXQgcmVzdWx0ID0gcmVzdWx0c1tpXTtcblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpIHtcbiAgbGV0IHBhcnNlZFBhdGggPSB0eXBlb2YgcGF0aCA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChwYXRoKSA6IHBhdGg7XG4gIHJldHVybiBjcmVhdGVQYXRoKF9leHRlbmRzKHt9LCBwYXJzZWRQYXRoLCB7XG4gICAgaGFzaDogXCJcIlxuICB9KSk7XG59XG5cbmZ1bmN0aW9uIGlzSGFzaENoYW5nZU9ubHkoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoICE9PSBiLmhhc2g7XG59XG5cbmZ1bmN0aW9uIGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5kZWZlcnJlZDtcbn1cblxuZnVuY3Rpb24gaXNFcnJvclJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yO1xufVxuXG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gKHJlc3VsdCAmJiByZXN1bHQudHlwZSkgPT09IFJlc3VsdFR5cGUucmVkaXJlY3Q7XG59XG5cbmZ1bmN0aW9uIGlzUmVkaXJlY3RSZXNwb25zZShyZXN1bHQpIHtcbiAgaWYgKCEocmVzdWx0IGluc3RhbmNlb2YgUmVzcG9uc2UpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbGV0IHN0YXR1cyA9IHJlc3VsdC5zdGF0dXM7XG4gIGxldCBsb2NhdGlvbiA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICByZXR1cm4gc3RhdHVzID49IDMwMCAmJiBzdGF0dXMgPD0gMzk5ICYmIGxvY2F0aW9uICE9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzUXVlcnlSb3V0ZVJlc3BvbnNlKG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5yZXNwb25zZSBpbnN0YW5jZW9mIFJlc3BvbnNlICYmIChvYmoudHlwZSA9PT0gUmVzdWx0VHlwZS5kYXRhIHx8IFJlc3VsdFR5cGUuZXJyb3IpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBzaWduYWwsIGlzRmV0Y2hlciwgY3VycmVudExvYWRlckRhdGEpIHtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJlc3VsdHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaW5kZXhdO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdO1xuICAgIGxldCBjdXJyZW50TWF0Y2ggPSBjdXJyZW50TWF0Y2hlcy5maW5kKG0gPT4gbS5yb3V0ZS5pZCA9PT0gbWF0Y2gucm91dGUuaWQpO1xuICAgIGxldCBpc1JldmFsaWRhdGluZ0xvYWRlciA9IGN1cnJlbnRNYXRjaCAhPSBudWxsICYmICFpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudE1hdGNoLCBtYXRjaCkgJiYgKGN1cnJlbnRMb2FkZXJEYXRhICYmIGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSkgIT09IHVuZGVmaW5lZDtcblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkgJiYgKGlzRmV0Y2hlciB8fCBpc1JldmFsaWRhdGluZ0xvYWRlcikpIHtcbiAgICAgIC8vIE5vdGU6IHdlIGRvIG5vdCBoYXZlIHRvIHRvdWNoIGFjdGl2ZURlZmVycmVkcyBoZXJlIHNpbmNlIHdlIHJhY2UgdGhlbVxuICAgICAgLy8gYWdhaW5zdCB0aGUgc2lnbmFsIGluIHJlc29sdmVEZWZlcnJlZERhdGEgYW5kIHRoZXknbGwgZ2V0IGFib3J0ZWRcbiAgICAgIC8vIHRoZXJlIGlmIG5lZWRlZFxuICAgICAgYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIHNpZ25hbCwgaXNGZXRjaGVyKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdCB8fCByZXN1bHRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBzaWduYWwsIHVud3JhcCkge1xuICBpZiAodW53cmFwID09PSB2b2lkIDApIHtcbiAgICB1bndyYXAgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCBhYm9ydGVkID0gYXdhaXQgcmVzdWx0LmRlZmVycmVkRGF0YS5yZXNvbHZlRGF0YShzaWduYWwpO1xuXG4gIGlmIChhYm9ydGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHVud3JhcCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEudW53cmFwcGVkRGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBIYW5kbGUgYW55IFRyYWNrZWRQcm9taXNlLl9lcnJvciB2YWx1ZXMgZW5jb3VudGVyZWQgd2hpbGUgdW53cmFwcGluZ1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGVcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhXG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2gpIHtcbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VhcmNoKS5nZXRBbGwoXCJpbmRleFwiKS5zb21lKHYgPT4gdiA9PT0gXCJcIik7XG59IC8vIE5vdGU6IFRoaXMgc2hvdWxkIG1hdGNoIHRoZSBmb3JtYXQgZXhwb3J0ZWQgYnkgdXNlTWF0Y2hlcywgc28gaWYgeW91IGNoYW5nZVxuLy8gdGhpcyBwbGVhc2UgYWxzbyBjaGFuZ2UgdGhhdCA6KSAgRXZlbnR1YWxseSB3ZSdsbCBEUlkgdGhpcyB1cFxuXG5cbmZ1bmN0aW9uIGNyZWF0ZVVzZU1hdGNoZXNNYXRjaChtYXRjaCwgbG9hZGVyRGF0YSkge1xuICBsZXQge1xuICAgIHJvdXRlLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtc1xuICB9ID0gbWF0Y2g7XG4gIHJldHVybiB7XG4gICAgaWQ6IHJvdXRlLmlkLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtcyxcbiAgICBkYXRhOiBsb2FkZXJEYXRhW3JvdXRlLmlkXSxcbiAgICBoYW5kbGU6IHJvdXRlLmhhbmRsZVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbikge1xuICBsZXQgc2VhcmNoID0gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uKS5zZWFyY2ggOiBsb2NhdGlvbi5zZWFyY2g7XG5cbiAgaWYgKG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5pbmRleCAmJiBoYXNOYWtlZEluZGV4UXVlcnkoc2VhcmNoIHx8IFwiXCIpKSB7XG4gICAgLy8gUmV0dXJuIHRoZSBsZWFmIGluZGV4IHJvdXRlIHdoZW4gaW5kZXggaXMgcHJlc2VudFxuICAgIHJldHVybiBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIH0gLy8gT3RoZXJ3aXNlIGdyYWIgdGhlIGRlZXBlc3QgXCJwYXRoIGNvbnRyaWJ1dGluZ1wiIG1hdGNoIChpZ25vcmluZyBpbmRleCBhbmRcbiAgLy8gcGF0aGxlc3MgbGF5b3V0IHJvdXRlcylcblxuXG4gIGxldCBwYXRoTWF0Y2hlcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpO1xuICByZXR1cm4gcGF0aE1hdGNoZXNbcGF0aE1hdGNoZXMubGVuZ3RoIC0gMV07XG59IC8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQWN0aW9uLCBFcnJvclJlc3BvbnNlLCBJRExFX0ZFVENIRVIsIElETEVfTkFWSUdBVElPTiwgY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyBhcyBVTlNBRkVfY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcywgZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMgYXMgVU5TQUZFX2dldFBhdGhDb250cmlidXRpbmdNYXRjaGVzLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlciwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvciwgZ2V0VG9QYXRobmFtZSwgaW52YXJpYW50LCBpc1JvdXRlRXJyb3JSZXNwb25zZSwgam9pblBhdGhzLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBub3JtYWxpemVQYXRobmFtZSwgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVzb2x2ZVBhdGgsIHJlc29sdmVUbywgc3RyaXBCYXNlbmFtZSwgdW5zdGFibGVfY3JlYXRlU3RhdGljSGFuZGxlciwgd2FybmluZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGVyLmpzLm1hcFxuIiwiLyoqXG4gKiBSZWFjdCBSb3V0ZXIgdjYuNC4zXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCB7IGludmFyaWFudCwgam9pblBhdGhzLCBtYXRjaFBhdGgsIFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcywgd2FybmluZywgcmVzb2x2ZVRvLCBwYXJzZVBhdGgsIG1hdGNoUm91dGVzLCBBY3Rpb24sIGlzUm91dGVFcnJvclJlc3BvbnNlLCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBzdHJpcEJhc2VuYW1lLCBBYm9ydGVkRGVmZXJyZWRFcnJvciwgY3JlYXRlUm91dGVyIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiBhcyBOYXZpZ2F0aW9uVHlwZSwgY3JlYXRlUGF0aCwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlc29sdmVQYXRoIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cblxuZnVuY3Rpb24gaXNQb2x5ZmlsbCh4LCB5KSB7XG4gIHJldHVybiB4ID09PSB5ICYmICh4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSkgfHwgeCAhPT0geCAmJiB5ICE9PSB5IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIDtcbn1cblxuY29uc3QgaXMgPSB0eXBlb2YgT2JqZWN0LmlzID09PSBcImZ1bmN0aW9uXCIgPyBPYmplY3QuaXMgOiBpc1BvbHlmaWxsOyAvLyBJbnRlbnRpb25hbGx5IG5vdCB1c2luZyBuYW1lZCBpbXBvcnRzIGJlY2F1c2UgUm9sbHVwIHVzZXMgZHluYW1pY1xuLy8gZGlzcGF0Y2ggZm9yIENvbW1vbkpTIGludGVyb3AgbmFtZWQgaW1wb3J0cy5cblxuY29uc3Qge1xuICB1c2VTdGF0ZSxcbiAgdXNlRWZmZWN0LFxuICB1c2VMYXlvdXRFZmZlY3QsXG4gIHVzZURlYnVnVmFsdWVcbn0gPSBSZWFjdDtcbmxldCBkaWRXYXJuT2xkMThBbHBoYSA9IGZhbHNlO1xubGV0IGRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90ID0gZmFsc2U7IC8vIERpc2NsYWltZXI6IFRoaXMgc2hpbSBicmVha3MgbWFueSBvZiB0aGUgcnVsZXMgb2YgUmVhY3QsIGFuZCBvbmx5IHdvcmtzXG4vLyBiZWNhdXNlIG9mIGEgdmVyeSBwYXJ0aWN1bGFyIHNldCBvZiBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGFuZCBhc3N1bXB0aW9uc1xuLy8gLS0gY2hhbmdlIGFueSBvbmUgb2YgdGhlbSBhbmQgaXQgd2lsbCBicmVhay4gVGhlIG1vc3QgaW1wb3J0YW50IGFzc3VtcHRpb25cbi8vIGlzIHRoYXQgdXBkYXRlcyBhcmUgYWx3YXlzIHN5bmNocm9ub3VzLCBiZWNhdXNlIGNvbmN1cnJlbnQgcmVuZGVyaW5nIGlzXG4vLyBvbmx5IGF2YWlsYWJsZSBpbiB2ZXJzaW9ucyBvZiBSZWFjdCB0aGF0IGFsc28gaGF2ZSBhIGJ1aWx0LWluXG4vLyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSBBUEkuIEFuZCB3ZSBvbmx5IHVzZSB0aGlzIHNoaW0gd2hlbiB0aGUgYnVpbHQtaW4gQVBJXG4vLyBkb2VzIG5vdCBleGlzdC5cbi8vXG4vLyBEbyBub3QgYXNzdW1lIHRoYXQgdGhlIGNsZXZlciBoYWNrcyB1c2VkIGJ5IHRoaXMgaG9vayBhbHNvIHdvcmsgaW4gZ2VuZXJhbC5cbi8vIFRoZSBwb2ludCBvZiB0aGlzIHNoaW0gaXMgdG8gcmVwbGFjZSB0aGUgbmVlZCBmb3IgaGFja3MgYnkgb3RoZXIgbGlicmFyaWVzLlxuXG5mdW5jdGlvbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSQyKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIC8vIE5vdGU6IFRoZSBzaGltIGRvZXMgbm90IHVzZSBnZXRTZXJ2ZXJTbmFwc2hvdCwgYmVjYXVzZSBwcmUtMTggdmVyc2lvbnMgb2Zcbi8vIFJlYWN0IGRvIG5vdCBleHBvc2UgYSB3YXkgdG8gY2hlY2sgaWYgd2UncmUgaHlkcmF0aW5nLiBTbyB1c2VycyBvZiB0aGUgc2hpbVxuLy8gd2lsbCBuZWVkIHRvIHRyYWNrIHRoYXQgdGhlbXNlbHZlcyBhbmQgcmV0dXJuIHRoZSBjb3JyZWN0IHZhbHVlXG4vLyBmcm9tIGBnZXRTbmFwc2hvdGAuXG5nZXRTZXJ2ZXJTbmFwc2hvdCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKCFkaWRXYXJuT2xkMThBbHBoYSkge1xuICAgICAgaWYgKFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QpIHtcbiAgICAgICAgZGlkV2Fybk9sZDE4QWxwaGEgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91IGFyZSB1c2luZyBhbiBvdXRkYXRlZCwgcHJlLXJlbGVhc2UgYWxwaGEgb2YgUmVhY3QgMTggdGhhdCBcIiArIFwiZG9lcyBub3Qgc3VwcG9ydCB1c2VTeW5jRXh0ZXJuYWxTdG9yZS4gVGhlIFwiICsgXCJ1c2Utc3luYy1leHRlcm5hbC1zdG9yZSBzaGltIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5LiBVcGdyYWRlIFwiICsgXCJ0byBhIG5ld2VyIHByZS1yZWxlYXNlLlwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gUmVhZCB0aGUgY3VycmVudCBzbmFwc2hvdCBmcm9tIHRoZSBzdG9yZSBvbiBldmVyeSByZW5kZXIuIEFnYWluLCB0aGlzXG4gIC8vIGJyZWFrcyB0aGUgcnVsZXMgb2YgUmVhY3QsIGFuZCBvbmx5IHdvcmtzIGhlcmUgYmVjYXVzZSBvZiBzcGVjaWZpY1xuICAvLyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzLCBtb3N0IGltcG9ydGFudGx5IHRoYXQgdXBkYXRlcyBhcmVcbiAgLy8gYWx3YXlzIHN5bmNocm9ub3VzLlxuXG5cbiAgY29uc3QgdmFsdWUgPSBnZXRTbmFwc2hvdCgpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoIWRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90KSB7XG4gICAgICBjb25zdCBjYWNoZWRWYWx1ZSA9IGdldFNuYXBzaG90KCk7XG5cbiAgICAgIGlmICghaXModmFsdWUsIGNhY2hlZFZhbHVlKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlIHJlc3VsdCBvZiBnZXRTbmFwc2hvdCBzaG91bGQgYmUgY2FjaGVkIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3BcIik7XG4gICAgICAgIGRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gQmVjYXVzZSB1cGRhdGVzIGFyZSBzeW5jaHJvbm91cywgd2UgZG9uJ3QgcXVldWUgdGhlbS4gSW5zdGVhZCB3ZSBmb3JjZSBhXG4gIC8vIHJlLXJlbmRlciB3aGVuZXZlciB0aGUgc3Vic2NyaWJlZCBzdGF0ZSBjaGFuZ2VzIGJ5IHVwZGF0aW5nIGFuIHNvbWVcbiAgLy8gYXJiaXRyYXJ5IHVzZVN0YXRlIGhvb2suIFRoZW4sIGR1cmluZyByZW5kZXIsIHdlIGNhbGwgZ2V0U25hcHNob3QgdG8gcmVhZFxuICAvLyB0aGUgY3VycmVudCB2YWx1ZS5cbiAgLy9cbiAgLy8gQmVjYXVzZSB3ZSBkb24ndCBhY3R1YWxseSB1c2UgdGhlIHN0YXRlIHJldHVybmVkIGJ5IHRoZSB1c2VTdGF0ZSBob29rLCB3ZVxuICAvLyBjYW4gc2F2ZSBhIGJpdCBvZiBtZW1vcnkgYnkgc3RvcmluZyBvdGhlciBzdHVmZiBpbiB0aGF0IHNsb3QuXG4gIC8vXG4gIC8vIFRvIGltcGxlbWVudCB0aGUgZWFybHkgYmFpbG91dCwgd2UgbmVlZCB0byB0cmFjayBzb21lIHRoaW5ncyBvbiBhIG11dGFibGVcbiAgLy8gb2JqZWN0LiBVc3VhbGx5LCB3ZSB3b3VsZCBwdXQgdGhhdCBpbiBhIHVzZVJlZiBob29rLCBidXQgd2UgY2FuIHN0YXNoIGl0IGluXG4gIC8vIG91ciB1c2VTdGF0ZSBob29rIGluc3RlYWQuXG4gIC8vXG4gIC8vIFRvIGZvcmNlIGEgcmUtcmVuZGVyLCB3ZSBjYWxsIGZvcmNlVXBkYXRlKHtpbnN0fSkuIFRoYXQgd29ya3MgYmVjYXVzZSB0aGVcbiAgLy8gbmV3IG9iamVjdCBhbHdheXMgZmFpbHMgYW4gZXF1YWxpdHkgY2hlY2suXG5cblxuICBjb25zdCBbe1xuICAgIGluc3RcbiAgfSwgZm9yY2VVcGRhdGVdID0gdXNlU3RhdGUoe1xuICAgIGluc3Q6IHtcbiAgICAgIHZhbHVlLFxuICAgICAgZ2V0U25hcHNob3RcbiAgICB9XG4gIH0pOyAvLyBUcmFjayB0aGUgbGF0ZXN0IGdldFNuYXBzaG90IGZ1bmN0aW9uIHdpdGggYSByZWYuIFRoaXMgbmVlZHMgdG8gYmUgdXBkYXRlZFxuICAvLyBpbiB0aGUgbGF5b3V0IHBoYXNlIHNvIHdlIGNhbiBhY2Nlc3MgaXQgZHVyaW5nIHRoZSB0ZWFyaW5nIGNoZWNrIHRoYXRcbiAgLy8gaGFwcGVucyBvbiBzdWJzY3JpYmUuXG5cbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBpbnN0LnZhbHVlID0gdmFsdWU7XG4gICAgaW5zdC5nZXRTbmFwc2hvdCA9IGdldFNuYXBzaG90OyAvLyBXaGVuZXZlciBnZXRTbmFwc2hvdCBvciBzdWJzY3JpYmUgY2hhbmdlcywgd2UgbmVlZCB0byBjaGVjayBpbiB0aGVcbiAgICAvLyBjb21taXQgcGhhc2UgaWYgdGhlcmUgd2FzIGFuIGludGVybGVhdmVkIG11dGF0aW9uLiBJbiBjb25jdXJyZW50IG1vZGVcbiAgICAvLyB0aGlzIGNhbiBoYXBwZW4gYWxsIHRoZSB0aW1lLCBidXQgZXZlbiBpbiBzeW5jaHJvbm91cyBtb2RlLCBhbiBlYXJsaWVyXG4gICAgLy8gZWZmZWN0IG1heSBoYXZlIG11dGF0ZWQgdGhlIHN0b3JlLlxuXG4gICAgaWYgKGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkpIHtcbiAgICAgIC8vIEZvcmNlIGEgcmUtcmVuZGVyLlxuICAgICAgZm9yY2VVcGRhdGUoe1xuICAgICAgICBpbnN0XG4gICAgICB9KTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcblxuICB9LCBbc3Vic2NyaWJlLCB2YWx1ZSwgZ2V0U25hcHNob3RdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBDaGVjayBmb3IgY2hhbmdlcyByaWdodCBiZWZvcmUgc3Vic2NyaWJpbmcuIFN1YnNlcXVlbnQgY2hhbmdlcyB3aWxsIGJlXG4gICAgLy8gZGV0ZWN0ZWQgaW4gdGhlIHN1YnNjcmlwdGlvbiBoYW5kbGVyLlxuICAgIGlmIChjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpKSB7XG4gICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlci5cbiAgICAgIGZvcmNlVXBkYXRlKHtcbiAgICAgICAgaW5zdFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlU3RvcmVDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAvLyBUT0RPOiBCZWNhdXNlIHRoZXJlIGlzIG5vIGNyb3NzLXJlbmRlcmVyIEFQSSBmb3IgYmF0Y2hpbmcgdXBkYXRlcywgaXQnc1xuICAgICAgLy8gdXAgdG8gdGhlIGNvbnN1bWVyIG9mIHRoaXMgbGlicmFyeSB0byB3cmFwIHRoZWlyIHN1YnNjcmlwdGlvbiBldmVudFxuICAgICAgLy8gd2l0aCB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcy4gU2hvdWxkIHdlIHRyeSB0byBkZXRlY3Qgd2hlbiB0aGlzIGlzbid0XG4gICAgICAvLyB0aGUgY2FzZSBhbmQgcHJpbnQgYSB3YXJuaW5nIGluIGRldmVsb3BtZW50P1xuICAgICAgLy8gVGhlIHN0b3JlIGNoYW5nZWQuIENoZWNrIGlmIHRoZSBzbmFwc2hvdCBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgd2VcbiAgICAgIC8vIHJlYWQgZnJvbSB0aGUgc3RvcmUuXG4gICAgICBpZiAoY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSkge1xuICAgICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlci5cbiAgICAgICAgZm9yY2VVcGRhdGUoe1xuICAgICAgICAgIGluc3RcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTsgLy8gU3Vic2NyaWJlIHRvIHRoZSBzdG9yZSBhbmQgcmV0dXJuIGEgY2xlYW4tdXAgZnVuY3Rpb24uXG5cblxuICAgIHJldHVybiBzdWJzY3JpYmUoaGFuZGxlU3RvcmVDaGFuZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtzdWJzY3JpYmVdKTtcbiAgdXNlRGVidWdWYWx1ZSh2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSB7XG4gIGNvbnN0IGxhdGVzdEdldFNuYXBzaG90ID0gaW5zdC5nZXRTbmFwc2hvdDtcbiAgY29uc3QgcHJldlZhbHVlID0gaW5zdC52YWx1ZTtcblxuICB0cnkge1xuICAgIGNvbnN0IG5leHRWYWx1ZSA9IGxhdGVzdEdldFNuYXBzaG90KCk7XG4gICAgcmV0dXJuICFpcyhwcmV2VmFsdWUsIG5leHRWYWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5mdW5jdGlvbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSQxKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KSB7XG4gIC8vIE5vdGU6IFRoZSBzaGltIGRvZXMgbm90IHVzZSBnZXRTZXJ2ZXJTbmFwc2hvdCwgYmVjYXVzZSBwcmUtMTggdmVyc2lvbnMgb2ZcbiAgLy8gUmVhY3QgZG8gbm90IGV4cG9zZSBhIHdheSB0byBjaGVjayBpZiB3ZSdyZSBoeWRyYXRpbmcuIFNvIHVzZXJzIG9mIHRoZSBzaGltXG4gIC8vIHdpbGwgbmVlZCB0byB0cmFjayB0aGF0IHRoZW1zZWx2ZXMgYW5kIHJldHVybiB0aGUgY29ycmVjdCB2YWx1ZVxuICAvLyBmcm9tIGBnZXRTbmFwc2hvdGAuXG4gIHJldHVybiBnZXRTbmFwc2hvdCgpO1xufVxuXG4vKipcbiAqIElubGluZWQgaW50byB0aGUgcmVhY3Qtcm91dGVyIHJlcG8gc2luY2UgdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUgZG9lcyBub3RcbiAqIHByb3ZpZGUgYSBVTUQtY29tcGF0aWJsZSBwYWNrYWdlLCBzbyB3ZSBuZWVkIHRoaXMgdG8gYmUgYWJsZSB0byBkaXN0cmlidXRlXG4gKiBVTUQgcmVhY3Qtcm91dGVyIGJ1bmRsZXNcbiAqL1xuY29uc3QgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIik7XG5jb25zdCBpc1NlcnZlckVudmlyb25tZW50ID0gIWNhblVzZURPTTtcbmNvbnN0IHNoaW0gPSBpc1NlcnZlckVudmlyb25tZW50ID8gdXNlU3luY0V4dGVybmFsU3RvcmUkMSA6IHVzZVN5bmNFeHRlcm5hbFN0b3JlJDI7XG5jb25zdCB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IFwidXNlU3luY0V4dGVybmFsU3RvcmVcIiBpbiBSZWFjdCA/IChtb2R1bGUgPT4gbW9kdWxlLnVzZVN5bmNFeHRlcm5hbFN0b3JlKShSZWFjdCkgOiBzaGltO1xuXG4vLyBDb250ZXh0cyBmb3IgZGF0YSByb3V0ZXJzXG5jb25zdCBEYXRhU3RhdGljUm91dGVyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFTdGF0aWNSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhU3RhdGljUm91dGVyQ29udGV4dFwiO1xufVxuXG5jb25zdCBEYXRhUm91dGVyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyXCI7XG59XG5cbmNvbnN0IERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBEYXRhUm91dGVyU3RhdGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyU3RhdGVcIjtcbn1cblxuY29uc3QgQXdhaXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQXdhaXRDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJBd2FpdFwiO1xufVxuXG5jb25zdCBOYXZpZ2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdmlnYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJOYXZpZ2F0aW9uXCI7XG59XG5cbmNvbnN0IExvY2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExvY2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTG9jYXRpb25cIjtcbn1cblxuY29uc3QgUm91dGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBvdXRsZXQ6IG51bGwsXG4gIG1hdGNoZXM6IFtdXG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlXCI7XG59XG5cbmNvbnN0IFJvdXRlRXJyb3JDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVFcnJvckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlRXJyb3JcIjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmdWxsIGhyZWYgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIGZvciBidWlsZGluZ1xuICogY3VzdG9tIGxpbmtzIHRoYXQgYXJlIGFsc28gYWNjZXNzaWJsZSBhbmQgcHJlc2VydmUgcmlnaHQtY2xpY2sgYmVoYXZpb3IuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2hvb2tzL3VzZS1ocmVmXG4gKi9cblxuZnVuY3Rpb24gdXNlSHJlZih0bywgX3RlbXApIHtcbiAgbGV0IHtcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VIcmVmKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgaGFzaCxcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2hcbiAgfSA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZTsgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgaHJlZi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhd1xuICAvLyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlXG4gIC8vIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rc1xuXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aG5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuYXZpZ2F0b3IuY3JlYXRlSHJlZih7XG4gICAgcGF0aG5hbWU6IGpvaW5lZFBhdGhuYW1lLFxuICAgIHNlYXJjaCxcbiAgICBoYXNoXG4gIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGEgPFJvdXRlcj4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2hvb2tzL3VzZS1pbi1yb3V0ZXItY29udGV4dFxuICovXG5cbmZ1bmN0aW9uIHVzZUluUm91dGVyQ29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KSAhPSBudWxsO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IGxvY2F0aW9uIG9iamVjdCwgd2hpY2ggcmVwcmVzZW50cyB0aGUgY3VycmVudCBVUkwgaW4gd2ViXG4gKiBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBJZiB5b3UncmUgdXNpbmcgdGhpcyBpdCBtYXkgbWVhbiB5b3UncmUgZG9pbmcgc29tZSBvZiB5b3VyIG93blxuICogXCJyb3V0aW5nXCIgaW4geW91ciBhcHAsIGFuZCB3ZSdkIGxpa2UgdG8ga25vdyB3aGF0IHlvdXIgdXNlIGNhc2UgaXMuIFdlIG1heVxuICogYmUgYWJsZSB0byBwcm92aWRlIHNvbWV0aGluZyBoaWdoZXItbGV2ZWwgdG8gYmV0dGVyIHN1aXQgeW91ciBuZWVkcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLWxvY2F0aW9uXG4gKi9cblxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VMb2NhdGlvbigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KS5sb2NhdGlvbjtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIGFjdGlvbiB3aGljaCBkZXNjcmliZXMgaG93IHRoZSByb3V0ZXIgY2FtZSB0b1xuICogdGhlIGN1cnJlbnQgbG9jYXRpb24sIGVpdGhlciBieSBhIHBvcCwgcHVzaCwgb3IgcmVwbGFjZSBvbiB0aGUgaGlzdG9yeSBzdGFjay5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLW5hdmlnYXRpb24tdHlwZVxuICovXG5cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb25UeXBlKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLm5hdmlnYXRpb25UeXBlO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIFVSTCBmb3IgdGhlIGdpdmVuIFwidG9cIiB2YWx1ZSBtYXRjaGVzIHRoZSBjdXJyZW50IFVSTC5cbiAqIFRoaXMgaXMgdXNlZnVsIGZvciBjb21wb25lbnRzIHRoYXQgbmVlZCB0byBrbm93IFwiYWN0aXZlXCIgc3RhdGUsIGUuZy5cbiAqIDxOYXZMaW5rPi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLW1hdGNoXG4gKi9cblxuZnVuY3Rpb24gdXNlTWF0Y2gocGF0dGVybikge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTWF0Y2goKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgcGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSksIFtwYXRobmFtZSwgcGF0dGVybl0pO1xufVxuLyoqXG4gKiBUaGUgaW50ZXJmYWNlIGZvciB0aGUgbmF2aWdhdGUoKSBmdW5jdGlvbiByZXR1cm5lZCBmcm9tIHVzZU5hdmlnYXRlKCkuXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGltcGVyYXRpdmUgbWV0aG9kIGZvciBjaGFuZ2luZyB0aGUgbG9jYXRpb24uIFVzZWQgYnkgPExpbms+cywgYnV0XG4gKiBtYXkgYWxzbyBiZSB1c2VkIGJ5IG90aGVyIGVsZW1lbnRzIHRvIGNoYW5nZSB0aGUgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2hvb2tzL3VzZS1uYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZSgpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU5hdmlnYXRlKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoVU5TQUZFX2dldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpKTtcbiAgbGV0IGFjdGl2ZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgYWN0aXZlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9KTtcbiAgbGV0IG5hdmlnYXRlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRvLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoYWN0aXZlUmVmLmN1cnJlbnQsIFwiWW91IHNob3VsZCBjYWxsIG5hdmlnYXRlKCkgaW4gYSBSZWFjdC51c2VFZmZlY3QoKSwgbm90IHdoZW4gXCIgKyBcInlvdXIgY29tcG9uZW50IGlzIGZpcnN0IHJlbmRlcmVkLlwiKSA6IHZvaWQgMDtcbiAgICBpZiAoIWFjdGl2ZVJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICBuYXZpZ2F0b3IuZ28odG8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUsIG9wdGlvbnMucmVsYXRpdmUgPT09IFwicGF0aFwiKTsgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAgIC8vIHRvIGhhbmRpbmcgb2ZmIHRvIGhpc3RvcnkuICBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIHdlXG4gICAgLy8gbmF2aWdhdGUgdG8gdGhlIHJhdyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbFxuICAgIC8vIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGxpbmtzXG5cbiAgICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgICB9XG5cbiAgICAoISFvcHRpb25zLnJlcGxhY2UgPyBuYXZpZ2F0b3IucmVwbGFjZSA6IG5hdmlnYXRvci5wdXNoKShwYXRoLCBvcHRpb25zLnN0YXRlLCBvcHRpb25zKTtcbiAgfSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZV0pO1xuICByZXR1cm4gbmF2aWdhdGU7XG59XG5jb25zdCBPdXRsZXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG4vKipcbiAqIFJldHVybnMgdGhlIGNvbnRleHQgKGlmIHByb3ZpZGVkKSBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLW91dGxldC1jb250ZXh0XG4gKi9cblxuZnVuY3Rpb24gdXNlT3V0bGV0Q29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoT3V0bGV0Q29udGV4dCk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgZm9yIHRoZSBjaGlsZCByb3V0ZSBhdCB0aGlzIGxldmVsIG9mIHRoZSByb3V0ZVxuICogaGllcmFyY2h5LiBVc2VkIGludGVybmFsbHkgYnkgPE91dGxldD4gdG8gcmVuZGVyIGNoaWxkIHJvdXRlcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLW91dGxldFxuICovXG5cbmZ1bmN0aW9uIHVzZU91dGxldChjb250ZXh0KSB7XG4gIGxldCBvdXRsZXQgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCkub3V0bGV0O1xuXG4gIGlmIChvdXRsZXQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoT3V0bGV0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRcbiAgICB9LCBvdXRsZXQpO1xuICB9XG5cbiAgcmV0dXJuIG91dGxldDtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2Yga2V5L3ZhbHVlIHBhaXJzIG9mIHRoZSBkeW5hbWljIHBhcmFtcyBmcm9tIHRoZSBjdXJyZW50XG4gKiBVUkwgdGhhdCB3ZXJlIG1hdGNoZWQgYnkgdGhlIHJvdXRlIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2hvb2tzL3VzZS1wYXJhbXNcbiAqL1xuXG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xufVxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgcGF0aG5hbWUgb2YgdGhlIGdpdmVuIGB0b2AgdmFsdWUgYWdhaW5zdCB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLXJlc29sdmVkLXBhdGhcbiAqL1xuXG5mdW5jdGlvbiB1c2VSZXNvbHZlZFBhdGgodG8sIF90ZW1wMikge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKS5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gXCJwYXRoXCIpLCBbdG8sIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmVdKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgcm91dGUgdGhhdCBtYXRjaGVkIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBwcmVwYXJlZFxuICogd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0IHRvIHJlbmRlciB0aGUgcmVtYWluZGVyIG9mIHRoZSByb3V0ZSB0cmVlLiBSb3V0ZVxuICogZWxlbWVudHMgaW4gdGhlIHRyZWUgbXVzdCByZW5kZXIgYW4gPE91dGxldD4gdG8gcmVuZGVyIHRoZWlyIGNoaWxkIHJvdXRlJ3NcbiAqIGVsZW1lbnQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2hvb2tzL3VzZS1yb3V0ZXNcbiAqL1xuXG5mdW5jdGlvbiB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZykge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlUm91dGVzKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgZGF0YVJvdXRlclN0YXRlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlczogcGFyZW50TWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IHBhcmVudE1hdGNoZXNbcGFyZW50TWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgbGV0IHBhcmVudFBhcmFtcyA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xuICBsZXQgcGFyZW50UGF0aG5hbWUgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50UGF0aG5hbWVCYXNlID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWVCYXNlIDogXCIvXCI7XG4gIGxldCBwYXJlbnRSb3V0ZSA9IHJvdXRlTWF0Y2ggJiYgcm91dGVNYXRjaC5yb3V0ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gWW91IHdvbid0IGdldCBhIHdhcm5pbmcgYWJvdXQgMiBkaWZmZXJlbnQgPFJvdXRlcz4gdW5kZXIgYSA8Um91dGU+XG4gICAgLy8gd2l0aG91dCBhIHRyYWlsaW5nICosIGJ1dCB0aGlzIGlzIGEgYmVzdC1lZmZvcnQgd2FybmluZyBhbnl3YXkgc2luY2Ugd2VcbiAgICAvLyBjYW5ub3QgZXZlbiBnaXZlIHRoZSB3YXJuaW5nIHVubGVzcyB0aGV5IGxhbmQgYXQgdGhlIHBhcmVudCByb3V0ZS5cbiAgICAvL1xuICAgIC8vIEV4YW1wbGU6XG4gICAgLy9cbiAgICAvLyA8Um91dGVzPlxuICAgIC8vICAgey8qIFRoaXMgcm91dGUgcGF0aCBNVVNUIGVuZCB3aXRoIC8qIGJlY2F1c2Ugb3RoZXJ3aXNlXG4gICAgLy8gICAgICAgaXQgd2lsbCBuZXZlciBtYXRjaCAvYmxvZy9wb3N0LzEyMyAqL31cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZ1wiIGVsZW1lbnQ9ezxCbG9nIC8+fSAvPlxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nL2ZlZWRcIiBlbGVtZW50PXs8QmxvZ0ZlZWQgLz59IC8+XG4gICAgLy8gPC9Sb3V0ZXM+XG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiBCbG9nKCkge1xuICAgIC8vICAgcmV0dXJuIChcbiAgICAvLyAgICAgPFJvdXRlcz5cbiAgICAvLyAgICAgICA8Um91dGUgcGF0aD1cInBvc3QvOmlkXCIgZWxlbWVudD17PFBvc3QgLz59IC8+XG4gICAgLy8gICAgIDwvUm91dGVzPlxuICAgIC8vICAgKTtcbiAgICAvLyB9XG4gICAgbGV0IHBhcmVudFBhdGggPSBwYXJlbnRSb3V0ZSAmJiBwYXJlbnRSb3V0ZS5wYXRoIHx8IFwiXCI7XG4gICAgd2FybmluZ09uY2UocGFyZW50UGF0aG5hbWUsICFwYXJlbnRSb3V0ZSB8fCBwYXJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSwgXCJZb3UgcmVuZGVyZWQgZGVzY2VuZGFudCA8Um91dGVzPiAob3IgY2FsbGVkIGB1c2VSb3V0ZXMoKWApIGF0IFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aG5hbWUgKyBcIlxcXCIgKHVuZGVyIDxSb3V0ZSBwYXRoPVxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCI+KSBidXQgdGhlIFwiKSArIFwicGFyZW50IHJvdXRlIHBhdGggaGFzIG5vIHRyYWlsaW5nIFxcXCIqXFxcIi4gVGhpcyBtZWFucyBpZiB5b3UgbmF2aWdhdGUgXCIgKyBcImRlZXBlciwgdGhlIHBhcmVudCB3b24ndCBtYXRjaCBhbnltb3JlIGFuZCB0aGVyZWZvcmUgdGhlIGNoaWxkIFwiICsgXCJyb3V0ZXMgd2lsbCBuZXZlciByZW5kZXIuXFxuXFxuXCIgKyAoXCJQbGVhc2UgY2hhbmdlIHRoZSBwYXJlbnQgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4gdG8gPFJvdXRlIFwiKSArIChcInBhdGg9XFxcIlwiICsgKHBhcmVudFBhdGggPT09IFwiL1wiID8gXCIqXCIgOiBwYXJlbnRQYXRoICsgXCIvKlwiKSArIFwiXFxcIj4uXCIpKTtcbiAgfVxuXG4gIGxldCBsb2NhdGlvbkZyb21Db250ZXh0ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IGxvY2F0aW9uO1xuXG4gIGlmIChsb2NhdGlvbkFyZykge1xuICAgIHZhciBfcGFyc2VkTG9jYXRpb25BcmckcGE7XG5cbiAgICBsZXQgcGFyc2VkTG9jYXRpb25BcmcgPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gICAgIShwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiIHx8ICgoX3BhcnNlZExvY2F0aW9uQXJnJHBhID0gcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUpID09IG51bGwgPyB2b2lkIDAgOiBfcGFyc2VkTG9jYXRpb25BcmckcGEuc3RhcnRzV2l0aChwYXJlbnRQYXRobmFtZUJhc2UpKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBgPFJvdXRlcyBsb2NhdGlvbj5gIG9yIGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilgLCBcIiArIFwidGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIFwiICsgKFwibWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcXFwiXCIgKyBwYXJlbnRQYXRobmFtZUJhc2UgKyBcIlxcXCIgXCIpICsgKFwiYnV0IHBhdGhuYW1lIFxcXCJcIiArIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lICsgXCJcXFwiIHdhcyBnaXZlbiBpbiB0aGUgYGxvY2F0aW9uYCBwcm9wLlwiKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxvY2F0aW9uID0gcGFyc2VkTG9jYXRpb25Bcmc7XG4gIH0gZWxzZSB7XG4gICAgbG9jYXRpb24gPSBsb2NhdGlvbkZyb21Db250ZXh0O1xuICB9XG5cbiAgbGV0IHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCI7XG4gIGxldCByZW1haW5pbmdQYXRobmFtZSA9IHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKHBhcmVudFBhdGhuYW1lQmFzZS5sZW5ndGgpIHx8IFwiL1wiO1xuICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlcywge1xuICAgIHBhdGhuYW1lOiByZW1haW5pbmdQYXRobmFtZVxuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwYXJlbnRSb3V0ZSB8fCBtYXRjaGVzICE9IG51bGwsIFwiTm8gcm91dGVzIG1hdGNoZWQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG1hdGNoZXMgPT0gbnVsbCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkLCBcIk1hdGNoZWQgbGVhZiByb3V0ZSBhdCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgZG9lcyBub3QgaGF2ZSBhbiBlbGVtZW50LiBcIiArIFwiVGhpcyBtZWFucyBpdCB3aWxsIHJlbmRlciBhbiA8T3V0bGV0IC8+IHdpdGggYSBudWxsIHZhbHVlIGJ5IGRlZmF1bHQgcmVzdWx0aW5nIGluIGFuIFxcXCJlbXB0eVxcXCIgcGFnZS5cIikgOiB2b2lkIDA7XG4gIH1cblxuICBsZXQgcmVuZGVyZWRNYXRjaGVzID0gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyAmJiBtYXRjaGVzLm1hcChtYXRjaCA9PiBPYmplY3QuYXNzaWduKHt9LCBtYXRjaCwge1xuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50UGFyYW1zLCBtYXRjaC5wYXJhbXMpLFxuICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICBwYXRobmFtZUJhc2U6IG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXJlbnRQYXRobmFtZUJhc2UgOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgfSkpLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGVDb250ZXh0IHx8IHVuZGVmaW5lZCk7IC8vIFdoZW4gYSB1c2VyIHBhc3NlcyBpbiBhIGBsb2NhdGlvbkFyZ2AsIHRoZSBhc3NvY2lhdGVkIHJvdXRlcyBuZWVkIHRvXG4gIC8vIGJlIHdyYXBwZWQgaW4gYSBuZXcgYExvY2F0aW9uQ29udGV4dC5Qcm92aWRlcmAgaW4gb3JkZXIgZm9yIGB1c2VMb2NhdGlvbmBcbiAgLy8gdG8gdXNlIHRoZSBzY29wZWQgbG9jYXRpb24gaW5zdGVhZCBvZiB0aGUgZ2xvYmFsIGxvY2F0aW9uLlxuXG5cbiAgaWYgKGxvY2F0aW9uQXJnICYmIHJlbmRlcmVkTWF0Y2hlcykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGxvY2F0aW9uOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgcGF0aG5hbWU6IFwiL1wiLFxuICAgICAgICAgIHNlYXJjaDogXCJcIixcbiAgICAgICAgICBoYXNoOiBcIlwiLFxuICAgICAgICAgIHN0YXRlOiBudWxsLFxuICAgICAgICAgIGtleTogXCJkZWZhdWx0XCJcbiAgICAgICAgfSwgbG9jYXRpb24pLFxuICAgICAgICBuYXZpZ2F0aW9uVHlwZTogQWN0aW9uLlBvcFxuICAgICAgfVxuICAgIH0sIHJlbmRlcmVkTWF0Y2hlcyk7XG4gIH1cblxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzO1xufVxuXG5mdW5jdGlvbiBEZWZhdWx0RXJyb3JFbGVtZW50KCkge1xuICBsZXQgZXJyb3IgPSB1c2VSb3V0ZUVycm9yKCk7XG4gIGxldCBtZXNzYWdlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpID8gZXJyb3Iuc3RhdHVzICsgXCIgXCIgKyBlcnJvci5zdGF0dXNUZXh0IDogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBKU09OLnN0cmluZ2lmeShlcnJvcik7XG4gIGxldCBzdGFjayA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5zdGFjayA6IG51bGw7XG4gIGxldCBsaWdodGdyZXkgPSBcInJnYmEoMjAwLDIwMCwyMDAsIDAuNSlcIjtcbiAgbGV0IHByZVN0eWxlcyA9IHtcbiAgICBwYWRkaW5nOiBcIjAuNXJlbVwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5XG4gIH07XG4gIGxldCBjb2RlU3R5bGVzID0ge1xuICAgIHBhZGRpbmc6IFwiMnB4IDRweFwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCBudWxsLCBcIlVuaGFuZGxlZCBUaHJvd24gRXJyb3IhXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImgzXCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiXG4gICAgfVxuICB9LCBtZXNzYWdlKSwgc3RhY2sgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInByZVwiLCB7XG4gICAgc3R5bGU6IHByZVN0eWxlc1xuICB9LCBzdGFjaykgOiBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwgbnVsbCwgXCJcXHVEODNEXFx1RENCRiBIZXkgZGV2ZWxvcGVyIFxcdUQ4M0RcXHVEQzRCXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwgbnVsbCwgXCJZb3UgY2FuIHByb3ZpZGUgYSB3YXkgYmV0dGVyIFVYIHRoYW4gdGhpcyB3aGVuIHlvdXIgYXBwIHRocm93cyBlcnJvcnMgYnkgcHJvdmlkaW5nIHlvdXIgb3duXFx4QTBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICBzdHlsZTogY29kZVN0eWxlc1xuICB9LCBcImVycm9yRWxlbWVudFwiKSwgXCIgcHJvcHMgb25cXHhBMFwiLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNvZGVcIiwge1xuICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gIH0sIFwiPFJvdXRlPlwiKSkpO1xufVxuXG5jbGFzcyBSZW5kZXJFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5sb2NhdGlvbixcbiAgICAgIGVycm9yOiBwcm9wcy5lcnJvclxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBlcnJvclxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBzdGF0ZSkge1xuICAgIC8vIFdoZW4gd2UgZ2V0IGludG8gYW4gZXJyb3Igc3RhdGUsIHRoZSB1c2VyIHdpbGwgbGlrZWx5IGNsaWNrIFwiYmFja1wiIHRvIHRoZVxuICAgIC8vIHByZXZpb3VzIHBhZ2UgdGhhdCBkaWRuJ3QgaGF2ZSBhbiBlcnJvci4gQmVjYXVzZSB0aGlzIHdyYXBzIHRoZSBlbnRpcmVcbiAgICAvLyBhcHBsaWNhdGlvbiwgdGhhdCB3aWxsIGhhdmUgbm8gZWZmZWN0LS10aGUgZXJyb3IgcGFnZSBjb250aW51ZXMgdG8gZGlzcGxheS5cbiAgICAvLyBUaGlzIGdpdmVzIHVzIGEgbWVjaGFuaXNtIHRvIHJlY292ZXIgZnJvbSB0aGUgZXJyb3Igd2hlbiB0aGUgbG9jYXRpb24gY2hhbmdlcy5cbiAgICAvL1xuICAgIC8vIFdoZXRoZXIgd2UncmUgaW4gYW4gZXJyb3Igc3RhdGUgb3Igbm90LCB3ZSB1cGRhdGUgdGhlIGxvY2F0aW9uIGluIHN0YXRlXG4gICAgLy8gc28gdGhhdCB3aGVuIHdlIGFyZSBpbiBhbiBlcnJvciBzdGF0ZSwgaXQgZ2V0cyByZXNldCB3aGVuIGEgbmV3IGxvY2F0aW9uXG4gICAgLy8gY29tZXMgaW4gYW5kIHRoZSB1c2VyIHJlY292ZXJzIGZyb20gdGhlIGVycm9yLlxuICAgIGlmIChzdGF0ZS5sb2NhdGlvbiAhPT0gcHJvcHMubG9jYXRpb24pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBwcm9wcy5lcnJvcixcbiAgICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uXG4gICAgICB9O1xuICAgIH0gLy8gSWYgd2UncmUgbm90IGNoYW5naW5nIGxvY2F0aW9ucywgcHJlc2VydmUgdGhlIGxvY2F0aW9uIGJ1dCBzdGlsbCBzdXJmYWNlXG4gICAgLy8gYW55IG5ldyBlcnJvcnMgdGhhdCBtYXkgY29tZSB0aHJvdWdoLiBXZSByZXRhaW4gdGhlIGV4aXN0aW5nIGVycm9yLCB3ZSBkb1xuICAgIC8vIHRoaXMgYmVjYXVzZSB0aGUgZXJyb3IgcHJvdmlkZWQgZnJvbSB0aGUgYXBwIHN0YXRlIG1heSBiZSBjbGVhcmVkIHdpdGhvdXRcbiAgICAvLyB0aGUgbG9jYXRpb24gY2hhbmdpbmcuXG5cblxuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogcHJvcHMuZXJyb3IgfHwgc3RhdGUuZXJyb3IsXG4gICAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb25cbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJSZWFjdCBSb3V0ZXIgY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlclwiLCBlcnJvciwgZXJyb3JJbmZvKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5lcnJvciA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlRXJyb3JDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5lcnJvcixcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgIH0pIDogdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIFJlbmRlcmVkUm91dGUoX3JlZikge1xuICBsZXQge1xuICAgIHJvdXRlQ29udGV4dCxcbiAgICBtYXRjaCxcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjtcbiAgbGV0IGRhdGFTdGF0aWNSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhU3RhdGljUm91dGVyQ29udGV4dCk7IC8vIFRyYWNrIGhvdyBkZWVwIHdlIGdvdCBpbiBvdXIgcmVuZGVyIHBhc3MgdG8gZW11bGF0ZSBTU1IgY29tcG9uZW50RGlkQ2F0Y2hcbiAgLy8gaW4gYSBEYXRhU3RhdGljUm91dGVyXG5cbiAgaWYgKGRhdGFTdGF0aWNSb3V0ZXJDb250ZXh0ICYmIG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCkge1xuICAgIGRhdGFTdGF0aWNSb3V0ZXJDb250ZXh0Ll9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkID0gbWF0Y2gucm91dGUuaWQ7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHJvdXRlQ29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMsIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZSkge1xuICBpZiAocGFyZW50TWF0Y2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50TWF0Y2hlcyA9IFtdO1xuICB9XG5cbiAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xuICAgIGlmIChkYXRhUm91dGVyU3RhdGUgIT0gbnVsbCAmJiBkYXRhUm91dGVyU3RhdGUuZXJyb3JzKSB7XG4gICAgICAvLyBEb24ndCBiYWlsIGlmIHdlIGhhdmUgZGF0YSByb3V0ZXIgZXJyb3JzIHNvIHdlIGNhbiByZW5kZXIgdGhlbSBpbiB0aGVcbiAgICAgIC8vIGJvdW5kYXJ5LiAgVXNlIHRoZSBwcmUtbWF0Y2hlZCAob3Igc2hpbW1lZCkgbWF0Y2hlc1xuICAgICAgbWF0Y2hlcyA9IGRhdGFSb3V0ZXJTdGF0ZS5tYXRjaGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBsZXQgcmVuZGVyZWRNYXRjaGVzID0gbWF0Y2hlczsgLy8gSWYgd2UgaGF2ZSBkYXRhIGVycm9ycywgdHJpbSBtYXRjaGVzIHRvIHRoZSBoaWdoZXN0IGVycm9yIGJvdW5kYXJ5XG5cbiAgbGV0IGVycm9ycyA9IGRhdGFSb3V0ZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogZGF0YVJvdXRlclN0YXRlLmVycm9ycztcblxuICBpZiAoZXJyb3JzICE9IG51bGwpIHtcbiAgICBsZXQgZXJyb3JJbmRleCA9IHJlbmRlcmVkTWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkICYmIChlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttLnJvdXRlLmlkXSkpO1xuICAgICEoZXJyb3JJbmRleCA+PSAwKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDb3VsZCBub3QgZmluZCBhIG1hdGNoaW5nIHJvdXRlIGZvciB0aGUgY3VycmVudCBlcnJvcnM6IFwiICsgZXJyb3JzKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmVuZGVyZWRNYXRjaGVzID0gcmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIE1hdGgubWluKHJlbmRlcmVkTWF0Y2hlcy5sZW5ndGgsIGVycm9ySW5kZXggKyAxKSk7XG4gIH1cblxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzLnJlZHVjZVJpZ2h0KChvdXRsZXQsIG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIGxldCBlcnJvciA9IG1hdGNoLnJvdXRlLmlkID8gZXJyb3JzID09IG51bGwgPyB2b2lkIDAgOiBlcnJvcnNbbWF0Y2gucm91dGUuaWRdIDogbnVsbDsgLy8gT25seSBkYXRhIHJvdXRlcnMgaGFuZGxlIGVycm9yc1xuXG4gICAgbGV0IGVycm9yRWxlbWVudCA9IGRhdGFSb3V0ZXJTdGF0ZSA/IG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0RXJyb3JFbGVtZW50LCBudWxsKSA6IG51bGw7XG5cbiAgICBsZXQgZ2V0Q2hpbGRyZW4gPSAoKSA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJlZFJvdXRlLCB7XG4gICAgICBtYXRjaDogbWF0Y2gsXG4gICAgICByb3V0ZUNvbnRleHQ6IHtcbiAgICAgICAgb3V0bGV0LFxuICAgICAgICBtYXRjaGVzOiBwYXJlbnRNYXRjaGVzLmNvbmNhdChyZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgaW5kZXggKyAxKSlcbiAgICAgIH1cbiAgICB9LCBlcnJvciA/IGVycm9yRWxlbWVudCA6IG1hdGNoLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCA/IG1hdGNoLnJvdXRlLmVsZW1lbnQgOiBvdXRsZXQpOyAvLyBPbmx5IHdyYXAgaW4gYW4gZXJyb3IgYm91bmRhcnkgd2l0aGluIGRhdGEgcm91dGVyIHVzYWdlcyB3aGVuIHdlIGhhdmUgYW5cbiAgICAvLyBlcnJvckVsZW1lbnQgb24gdGhpcyByb3V0ZS4gIE90aGVyd2lzZSBsZXQgaXQgYnViYmxlIHVwIHRvIGFuIGFuY2VzdG9yXG4gICAgLy8gZXJyb3JFbGVtZW50XG5cblxuICAgIHJldHVybiBkYXRhUm91dGVyU3RhdGUgJiYgKG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBpbmRleCA9PT0gMCkgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJFcnJvckJvdW5kYXJ5LCB7XG4gICAgICBsb2NhdGlvbjogZGF0YVJvdXRlclN0YXRlLmxvY2F0aW9uLFxuICAgICAgY29tcG9uZW50OiBlcnJvckVsZW1lbnQsXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICBjaGlsZHJlbjogZ2V0Q2hpbGRyZW4oKVxuICAgIH0pIDogZ2V0Q2hpbGRyZW4oKTtcbiAgfSwgbnVsbCk7XG59XG52YXIgRGF0YVJvdXRlckhvb2s7XG5cbihmdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VSZXZhbGlkYXRvclwiXSA9IFwidXNlUmV2YWxpZGF0b3JcIjtcbn0pKERhdGFSb3V0ZXJIb29rIHx8IChEYXRhUm91dGVySG9vayA9IHt9KSk7XG5cbnZhciBEYXRhUm91dGVyU3RhdGVIb29rO1xuXG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUxvYWRlckRhdGFcIl0gPSBcInVzZUxvYWRlckRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUFjdGlvbkRhdGFcIl0gPSBcInVzZUFjdGlvbkRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlRXJyb3JcIl0gPSBcInVzZVJvdXRlRXJyb3JcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU5hdmlnYXRpb25cIl0gPSBcInVzZU5hdmlnYXRpb25cIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlTG9hZGVyRGF0YVwiXSA9IFwidXNlUm91dGVMb2FkZXJEYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VNYXRjaGVzXCJdID0gXCJ1c2VNYXRjaGVzXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSZXZhbGlkYXRvclwiXSA9IFwidXNlUmV2YWxpZGF0b3JcIjtcbn0pKERhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwgKERhdGFSb3V0ZXJTdGF0ZUhvb2sgPSB7fSkpO1xuXG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSB7XG4gIHJldHVybiBob29rTmFtZSArIFwiIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9lbi9tYWluL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuICAhY3R4ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gY3R4O1xufVxuXG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyU3RhdGUoaG9va05hbWUpIHtcbiAgbGV0IHN0YXRlID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgIXN0YXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gc3RhdGU7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiwgZGVmYXVsdGluZyB0byBhbiBcImlkbGVcIiBuYXZpZ2F0aW9uIHdoZW5cbiAqIG5vIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3NcbiAqL1xuXG5cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb24oKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU5hdmlnYXRpb24pO1xuICByZXR1cm4gc3RhdGUubmF2aWdhdGlvbjtcbn1cbi8qKlxuICogUmV0dXJucyBhIHJldmFsaWRhdGUgZnVuY3Rpb24gZm9yIG1hbnVhbGx5IHRyaWdnZXJpbmcgcmV2YWxpZGF0aW9uLCBhcyB3ZWxsXG4gKiBhcyB0aGUgY3VycmVudCBzdGF0ZSBvZiBhbnkgbWFudWFsIHJldmFsaWRhdGlvbnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VSZXZhbGlkYXRvcigpIHtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSZXZhbGlkYXRvcik7XG4gIHJldHVybiB7XG4gICAgcmV2YWxpZGF0ZTogZGF0YVJvdXRlckNvbnRleHQucm91dGVyLnJldmFsaWRhdGUsXG4gICAgc3RhdGU6IHN0YXRlLnJldmFsaWRhdGlvblxuICB9O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhY3RpdmUgcm91dGUgbWF0Y2hlcywgdXNlZnVsIGZvciBhY2Nlc3NpbmcgbG9hZGVyRGF0YSBmb3JcbiAqIHBhcmVudC9jaGlsZCByb3V0ZXMgb3IgdGhlIHJvdXRlIFwiaGFuZGxlXCIgcHJvcGVydHlcbiAqL1xuXG5mdW5jdGlvbiB1c2VNYXRjaGVzKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXMsXG4gICAgbG9hZGVyRGF0YVxuICB9ID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTWF0Y2hlcyk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IG1hdGNoZXMubWFwKG1hdGNoID0+IHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gbWF0Y2g7IC8vIE5vdGU6IFRoaXMgc3RydWN0dXJlIG1hdGNoZXMgdGhhdCBjcmVhdGVkIGJ5IGNyZWF0ZVVzZU1hdGNoZXNNYXRjaFxuICAgIC8vIGluIHRoZSBAcmVtaXgtcnVuL3JvdXRlciAsIHNvIGlmIHlvdSBjaGFuZ2UgdGhpcyBwbGVhc2UgYWxzbyBjaGFuZ2VcbiAgICAvLyB0aGF0IDopICBFdmVudHVhbGx5IHdlJ2xsIERSWSB0aGlzIHVwXG5cbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IG1hdGNoLnJvdXRlLmlkLFxuICAgICAgcGF0aG5hbWUsXG4gICAgICBwYXJhbXMsXG4gICAgICBkYXRhOiBsb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSxcbiAgICAgIGhhbmRsZTogbWF0Y2gucm91dGUuaGFuZGxlXG4gICAgfTtcbiAgfSksIFttYXRjaGVzLCBsb2FkZXJEYXRhXSk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGxvYWRlciBkYXRhIGZvciB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBsb2FkZXJcbiAqL1xuXG5mdW5jdGlvbiB1c2VMb2FkZXJEYXRhKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwidXNlTG9hZGVyRGF0YSBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHRoaXNSb3V0ZSA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgIXRoaXNSb3V0ZS5yb3V0ZS5pZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJ1c2VMb2FkZXJEYXRhIGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcXFwiaWRcXFwiXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbdGhpc1JvdXRlLnJvdXRlLmlkXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyRGF0YSBmb3IgdGhlIGdpdmVuIHJvdXRlSWRcbiAqL1xuXG5mdW5jdGlvbiB1c2VSb3V0ZUxvYWRlckRhdGEocm91dGVJZCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUxvYWRlckRhdGEpO1xuICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZUlkXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aW9uIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGFjdGlvblxuICovXG5cbmZ1bmN0aW9uIHVzZUFjdGlvbkRhdGEoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUFjdGlvbkRhdGEpO1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJ1c2VBY3Rpb25EYXRhIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcygoc3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IHN0YXRlLmFjdGlvbkRhdGEpIHx8IHt9KVswXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBlcnJvciwgd2hpY2ggY291bGQgYmUgYSBsb2FkZXIvYWN0aW9uXG4gKiBlcnJvciBvciBhIHJlbmRlciBlcnJvci4gIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgY2FsbGVkIGZyb20geW91clxuICogZXJyb3JFbGVtZW50IHRvIGRpc3BsYXkgYSBwcm9wZXIgZXJyb3IgbWVzc2FnZS5cbiAqL1xuXG5mdW5jdGlvbiB1c2VSb3V0ZUVycm9yKCkge1xuICB2YXIgX3N0YXRlJGVycm9ycztcblxuICBsZXQgZXJyb3IgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlRXJyb3JDb250ZXh0KTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVFcnJvcik7XG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHRoaXNSb3V0ZSA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXTsgLy8gSWYgdGhpcyB3YXMgYSByZW5kZXIgZXJyb3IsIHdlIHB1dCBpdCBpbiBhIFJvdXRlRXJyb3IgY29udGV4dCBpbnNpZGVcbiAgLy8gb2YgUmVuZGVyRXJyb3JCb3VuZGFyeVxuXG4gIGlmIChlcnJvcikge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuXG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJ1c2VSb3V0ZUVycm9yIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhdGhpc1JvdXRlLnJvdXRlLmlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcInVzZVJvdXRlRXJyb3IgY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFxcXCJpZFxcXCJcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyBPdGhlcndpc2UgbG9vayBmb3IgZXJyb3JzIGZyb20gb3VyIGRhdGEgcm91dGVyIHN0YXRlXG5cbiAgcmV0dXJuIChfc3RhdGUkZXJyb3JzID0gc3RhdGUuZXJyb3JzKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJGVycm9yc1t0aGlzUm91dGUucm91dGUuaWRdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBoYXBweS1wYXRoIGRhdGEgZnJvbSB0aGUgbmVhcmVzdCBhbmNlc3RvciA8QXdhaXQgLz4gdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiB1c2VBc3luY1ZhbHVlKCkge1xuICBsZXQgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KEF3YWl0Q29udGV4dCk7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWUuX2RhdGE7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGVycm9yIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgPEF3YWl0IC8+IHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gdXNlQXN5bmNFcnJvcigpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9lcnJvcjtcbn1cbmNvbnN0IGFscmVhZHlXYXJuZWQgPSB7fTtcblxuZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5LCBjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZFtrZXldKSB7XG4gICAgYWxyZWFkeVdhcm5lZFtrZXldID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBtZXNzYWdlKSA6IHZvaWQgMDtcbiAgfVxufVxuXG4vKipcbiAqIEdpdmVuIGEgUmVtaXggUm91dGVyIGluc3RhbmNlLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIFVJXG4gKi9cbmZ1bmN0aW9uIFJvdXRlclByb3ZpZGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBmYWxsYmFja0VsZW1lbnQsXG4gICAgcm91dGVyXG4gIH0gPSBfcmVmO1xuICAvLyBTeW5jIHJvdXRlciBzdGF0ZSB0byBvdXIgY29tcG9uZW50IHN0YXRlIHRvIGZvcmNlIHJlLXJlbmRlcnNcbiAgbGV0IHN0YXRlID0gdXNlU3luY0V4dGVybmFsU3RvcmUocm91dGVyLnN1YnNjcmliZSwgKCkgPT4gcm91dGVyLnN0YXRlLCAvLyBXZSBoYXZlIHRvIHByb3ZpZGUgdGhpcyBzbyBSZWFjdEAxOCBkb2Vzbid0IGNvbXBsYWluIGR1cmluZyBoeWRyYXRpb24sXG4gIC8vIGJ1dCB3ZSBwYXNzIG91ciBzZXJpYWxpemVkIGh5ZHJhdGlvbiBkYXRhIGludG8gdGhlIHJvdXRlciBzbyBzdGF0ZSBoZXJlXG4gIC8vIGlzIGFscmVhZHkgc3luY2VkIHdpdGggd2hhdCB0aGUgc2VydmVyIHNhd1xuICAoKSA9PiByb3V0ZXIuc3RhdGUpO1xuICBsZXQgbmF2aWdhdG9yID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZUhyZWY6IHJvdXRlci5jcmVhdGVIcmVmLFxuICAgICAgZ286IG4gPT4gcm91dGVyLm5hdmlnYXRlKG4pLFxuICAgICAgcHVzaDogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KSxcbiAgICAgIHJlcGxhY2U6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSlcbiAgICB9O1xuICB9LCBbcm91dGVyXSk7XG4gIGxldCBiYXNlbmFtZSA9IHJvdXRlci5iYXNlbmFtZSB8fCBcIi9cIjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHJvdXRlcixcbiAgICAgIG5hdmlnYXRvcixcbiAgICAgIHN0YXRpYzogZmFsc2UsXG4gICAgICAvLyBEbyB3ZSBuZWVkIHRoaXM/XG4gICAgICBiYXNlbmFtZVxuICAgIH1cbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlclN0YXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzdGF0ZVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogcm91dGVyLmJhc2VuYW1lLFxuICAgIGxvY2F0aW9uOiByb3V0ZXIuc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHJvdXRlci5zdGF0ZS5oaXN0b3J5QWN0aW9uLFxuICAgIG5hdmlnYXRvcjogbmF2aWdhdG9yXG4gIH0sIHJvdXRlci5zdGF0ZS5pbml0aWFsaXplZCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlcywgbnVsbCkgOiBmYWxsYmFja0VsZW1lbnQpKSk7XG59XG5cbi8qKlxuICogQSA8Um91dGVyPiB0aGF0IHN0b3JlcyBhbGwgZW50cmllcyBpbiBtZW1vcnkuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L3JvdXRlcnMvbWVtb3J5LXJvdXRlclxuICovXG5mdW5jdGlvbiBNZW1vcnlSb3V0ZXIoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBpbml0aWFsRW50cmllcyxcbiAgICBpbml0aWFsSW5kZXhcbiAgfSA9IF9yZWYyO1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuXG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXgsXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5cbi8qKlxuICogQ2hhbmdlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBOb3RlOiBUaGlzIEFQSSBpcyBtb3N0bHkgdXNlZnVsIGluIFJlYWN0LkNvbXBvbmVudCBzdWJjbGFzc2VzIHRoYXQgYXJlIG5vdFxuICogYWJsZSB0byB1c2UgaG9va3MuIEluIGZ1bmN0aW9uYWwgY29tcG9uZW50cywgd2UgcmVjb21tZW5kIHlvdSB1c2UgdGhlXG4gKiBgdXNlTmF2aWdhdGVgIGhvb2sgaW5zdGVhZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvY29tcG9uZW50cy9uYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiBOYXZpZ2F0ZShfcmVmMykge1xuICBsZXQge1xuICAgIHRvLFxuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgcmVsYXRpdmVcbiAgfSA9IF9yZWYzO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mXG4gIC8vIHRoZSByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwiPE5hdmlnYXRlPiBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIVJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpLnN0YXRpYywgXCI8TmF2aWdhdGU+IG11c3Qgbm90IGJlIHVzZWQgb24gdGhlIGluaXRpYWwgcmVuZGVyIGluIGEgPFN0YXRpY1JvdXRlcj4uIFwiICsgXCJUaGlzIGlzIGEgbm8tb3AsIGJ1dCB5b3Ugc2hvdWxkIG1vZGlmeSB5b3VyIGNvZGUgc28gdGhlIDxOYXZpZ2F0ZT4gaXMgXCIgKyBcIm9ubHkgZXZlciByZW5kZXJlZCBpbiByZXNwb25zZSB0byBzb21lIHVzZXIgaW50ZXJhY3Rpb24gb3Igc3RhdGUgY2hhbmdlLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRhdGFSb3V0ZXJTdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gQXZvaWQga2lja2luZyBvZmYgbXVsdGlwbGUgbmF2aWdhdGlvbnMgaWYgd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhXG4gICAgLy8gZGF0YS1yb3V0ZXIgbmF2aWdhdGlvbiwgc2luY2UgY29tcG9uZW50cyBnZXQgcmUtcmVuZGVyZWQgd2hlbiB3ZSBlbnRlclxuICAgIC8vIGEgc3VibWl0dGluZy9sb2FkaW5nIHN0YXRlXG4gICAgaWYgKGRhdGFSb3V0ZXJTdGF0ZSAmJiBkYXRhUm91dGVyU3RhdGUubmF2aWdhdGlvbi5zdGF0ZSAhPT0gXCJpZGxlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgcmVsYXRpdmVcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgdGhlIGNoaWxkIHJvdXRlJ3MgZWxlbWVudCwgaWYgdGhlcmUgaXMgb25lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9jb21wb25lbnRzL291dGxldFxuICovXG5mdW5jdGlvbiBPdXRsZXQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZU91dGxldChwcm9wcy5jb250ZXh0KTtcbn1cblxuLyoqXG4gKiBEZWNsYXJlcyBhbiBlbGVtZW50IHRoYXQgc2hvdWxkIGJlIHJlbmRlcmVkIGF0IGEgY2VydGFpbiBVUkwgcGF0aC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvY29tcG9uZW50cy9yb3V0ZVxuICovXG5mdW5jdGlvbiBSb3V0ZShfcHJvcHMpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkEgPFJvdXRlPiBpcyBvbmx5IGV2ZXIgdG8gYmUgdXNlZCBhcyB0aGUgY2hpbGQgb2YgPFJvdXRlcz4gZWxlbWVudCwgXCIgKyBcIm5ldmVyIHJlbmRlcmVkIGRpcmVjdGx5LiBQbGVhc2Ugd3JhcCB5b3VyIDxSb3V0ZT4gaW4gYSA8Um91dGVzPi5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDtcbn1cblxuLyoqXG4gKiBQcm92aWRlcyBsb2NhdGlvbiBjb250ZXh0IGZvciB0aGUgcmVzdCBvZiB0aGUgYXBwLlxuICpcbiAqIE5vdGU6IFlvdSB1c3VhbGx5IHdvbid0IHJlbmRlciBhIDxSb3V0ZXI+IGRpcmVjdGx5LiBJbnN0ZWFkLCB5b3UnbGwgcmVuZGVyIGFcbiAqIHJvdXRlciB0aGF0IGlzIG1vcmUgc3BlY2lmaWMgdG8geW91ciBlbnZpcm9ubWVudCBzdWNoIGFzIGEgPEJyb3dzZXJSb3V0ZXI+XG4gKiBpbiB3ZWIgYnJvd3NlcnMgb3IgYSA8U3RhdGljUm91dGVyPiBmb3Igc2VydmVyIHJlbmRlcmluZy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvcm91dGVycy9yb3V0ZXJcbiAqL1xuZnVuY3Rpb24gUm91dGVyKF9yZWY0KSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lUHJvcCA9IFwiL1wiLFxuICAgIGNoaWxkcmVuID0gbnVsbCxcbiAgICBsb2NhdGlvbjogbG9jYXRpb25Qcm9wLFxuICAgIG5hdmlnYXRpb25UeXBlID0gQWN0aW9uLlBvcCxcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBzdGF0aWNQcm9wID0gZmFsc2VcbiAgfSA9IF9yZWY0O1xuICAhIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgcmVuZGVyIGEgPFJvdXRlcj4gaW5zaWRlIGFub3RoZXIgPFJvdXRlcj4uXCIgKyBcIiBZb3Ugc2hvdWxkIG5ldmVyIGhhdmUgbW9yZSB0aGFuIG9uZSBpbiB5b3VyIGFwcC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyBQcmVzZXJ2ZSB0cmFpbGluZyBzbGFzaGVzIG9uIGJhc2VuYW1lLCBzbyB3ZSBjYW4gbGV0IHRoZSB1c2VyIGNvbnRyb2xcbiAgLy8gdGhlIGVuZm9yY2VtZW50IG9mIHRyYWlsaW5nIHNsYXNoZXMgdGhyb3VnaG91dCB0aGUgYXBwXG5cbiAgbGV0IGJhc2VuYW1lID0gYmFzZW5hbWVQcm9wLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuICBsZXQgbmF2aWdhdGlvbkNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcFxuICB9KSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHN0YXRpY1Byb3BdKTtcblxuICBpZiAodHlwZW9mIGxvY2F0aW9uUHJvcCA9PT0gXCJzdHJpbmdcIikge1xuICAgIGxvY2F0aW9uUHJvcCA9IHBhcnNlUGF0aChsb2NhdGlvblByb3ApO1xuICB9XG5cbiAgbGV0IHtcbiAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCIsXG4gICAgc3RhdGUgPSBudWxsLFxuICAgIGtleSA9IFwiZGVmYXVsdFwiXG4gIH0gPSBsb2NhdGlvblByb3A7XG4gIGxldCBsb2NhdGlvbiA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCB0cmFpbGluZ1BhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpO1xuXG4gICAgaWYgKHRyYWlsaW5nUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGhuYW1lOiB0cmFpbGluZ1BhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaCxcbiAgICAgIHN0YXRlLFxuICAgICAga2V5XG4gICAgfTtcbiAgfSwgW2Jhc2VuYW1lLCBwYXRobmFtZSwgc2VhcmNoLCBoYXNoLCBzdGF0ZSwga2V5XSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobG9jYXRpb24gIT0gbnVsbCwgXCI8Um91dGVyIGJhc2VuYW1lPVxcXCJcIiArIGJhc2VuYW1lICsgXCJcXFwiPiBpcyBub3QgYWJsZSB0byBtYXRjaCB0aGUgVVJMIFwiICsgKFwiXFxcIlwiICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoICsgXCJcXFwiIGJlY2F1c2UgaXQgZG9lcyBub3Qgc3RhcnQgd2l0aCB0aGUgXCIpICsgXCJiYXNlbmFtZSwgc28gdGhlIDxSb3V0ZXI+IHdvbid0IHJlbmRlciBhbnl0aGluZy5cIikgOiB2b2lkIDA7XG5cbiAgaWYgKGxvY2F0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChOYXZpZ2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBuYXZpZ2F0aW9uQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgdmFsdWU6IHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgbmF2aWdhdGlvblR5cGVcbiAgICB9XG4gIH0pKTtcbn1cblxuLyoqXG4gKiBBIGNvbnRhaW5lciBmb3IgYSBuZXN0ZWQgdHJlZSBvZiA8Um91dGU+IGVsZW1lbnRzIHRoYXQgcmVuZGVycyB0aGUgYnJhbmNoXG4gKiB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvY29tcG9uZW50cy9yb3V0ZXNcbiAqL1xuZnVuY3Rpb24gUm91dGVzKF9yZWY1KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW4sXG4gICAgbG9jYXRpb25cbiAgfSA9IF9yZWY1O1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTsgLy8gV2hlbiBpbiBhIERhdGFSb3V0ZXJDb250ZXh0IF93aXRob3V0XyBjaGlsZHJlbiwgd2UgdXNlIHRoZSByb3V0ZXIgcm91dGVzXG4gIC8vIGRpcmVjdGx5LiAgSWYgd2UgaGF2ZSBjaGlsZHJlbiwgdGhlbiB3ZSdyZSBpbiBhIGRlc2NlbmRhbnQgdHJlZSBhbmQgd2VcbiAgLy8gbmVlZCB0byB1c2UgY2hpbGQgcm91dGVzLlxuXG4gIGxldCByb3V0ZXMgPSBkYXRhUm91dGVyQ29udGV4dCAmJiAhY2hpbGRyZW4gPyBkYXRhUm91dGVyQ29udGV4dC5yb3V0ZXIucm91dGVzIDogY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgcmV0dXJuIHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uKTtcbn1cblxuLyoqXG4gKiBDb21wb25lbnQgdG8gdXNlIGZvciByZW5kZXJpbmcgbGF6aWx5IGxvYWRlZCBkYXRhIGZyb20gcmV0dXJuaW5nIGRlZmVyKClcbiAqIGluIGEgbG9hZGVyIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIEF3YWl0KF9yZWY2KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW4sXG4gICAgZXJyb3JFbGVtZW50LFxuICAgIHJlc29sdmVcbiAgfSA9IF9yZWY2O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRFcnJvckJvdW5kYXJ5LCB7XG4gICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICBlcnJvckVsZW1lbnQ6IGVycm9yRWxlbWVudFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZXNvbHZlQXdhaXQsIG51bGwsIGNoaWxkcmVuKSk7XG59XG52YXIgQXdhaXRSZW5kZXJTdGF0dXM7XG5cbihmdW5jdGlvbiAoQXdhaXRSZW5kZXJTdGF0dXMpIHtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJwZW5kaW5nXCJdID0gMF0gPSBcInBlbmRpbmdcIjtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJzdWNjZXNzXCJdID0gMV0gPSBcInN1Y2Nlc3NcIjtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJlcnJvclwiXSA9IDJdID0gXCJlcnJvclwiO1xufSkoQXdhaXRSZW5kZXJTdGF0dXMgfHwgKEF3YWl0UmVuZGVyU3RhdHVzID0ge30pKTtcblxuY29uc3QgbmV2ZXJTZXR0bGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKCgpID0+IHt9KTtcblxuY2xhc3MgQXdhaXRFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGVycm9yOiBudWxsXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCI8QXdhaXQ+IGNhdWdodCB0aGUgZm9sbG93aW5nIGVycm9yIGR1cmluZyByZW5kZXJcIiwgZXJyb3IsIGVycm9ySW5mbyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgbGV0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZXJyb3JFbGVtZW50LFxuICAgICAgcmVzb2x2ZVxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCBwcm9taXNlID0gbnVsbDtcbiAgICBsZXQgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcblxuICAgIGlmICghKHJlc29sdmUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgLy8gRGlkbid0IGdldCBhIHByb21pc2UgLSBwcm92aWRlIGFzIGEgcmVzb2x2ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2VzcztcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9kYXRhXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuZXJyb3IpIHtcbiAgICAgIC8vIENhdWdodCBhIHJlbmRlciBlcnJvciwgcHJvdmlkZSBpdCBhcyBhIHJlamVjdGVkIHByb21pc2VcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yO1xuICAgICAgbGV0IHJlbmRlckVycm9yID0gdGhpcy5zdGF0ZS5lcnJvcjtcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlamVjdCgpLmNhdGNoKCgpID0+IHt9KTsgLy8gQXZvaWQgdW5oYW5kbGVkIHJlamVjdGlvbiB3YXJuaW5nc1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlbmRlckVycm9yXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHJlc29sdmUuX3RyYWNrZWQpIHtcbiAgICAgIC8vIEFscmVhZHkgdHJhY2tlZCBwcm9taXNlIC0gY2hlY2sgY29udGVudHNcbiAgICAgIHByb21pc2UgPSByZXNvbHZlO1xuICAgICAgc3RhdHVzID0gcHJvbWlzZS5fZXJyb3IgIT09IHVuZGVmaW5lZCA/IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yIDogcHJvbWlzZS5fZGF0YSAhPT0gdW5kZWZpbmVkID8gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2VzcyA6IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJhdyAodW50cmFja2VkKSBwcm9taXNlIC0gdHJhY2sgaXRcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBwcm9taXNlID0gcmVzb2x2ZS50aGVuKGRhdGEgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX2RhdGFcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGRhdGFcbiAgICAgIH0pLCBlcnJvciA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgJiYgcHJvbWlzZS5fZXJyb3IgaW5zdGFuY2VvZiBBYm9ydGVkRGVmZXJyZWRFcnJvcikge1xuICAgICAgLy8gRnJlZXplIHRoZSBVSSBieSB0aHJvd2luZyBhIG5ldmVyIHJlc29sdmVkIHByb21pc2VcbiAgICAgIHRocm93IG5ldmVyU2V0dGxlZFByb21pc2U7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgJiYgIWVycm9yRWxlbWVudCkge1xuICAgICAgLy8gTm8gZXJyb3JFbGVtZW50LCB0aHJvdyB0byB0aGUgbmVhcmVzdCByb3V0ZS1sZXZlbCBlcnJvciBib3VuZGFyeVxuICAgICAgdGhyb3cgcHJvbWlzZS5fZXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IpIHtcbiAgICAgIC8vIFJlbmRlciB2aWEgb3VyIGVycm9yRWxlbWVudFxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvbWlzZSxcbiAgICAgICAgY2hpbGRyZW46IGVycm9yRWxlbWVudFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2Vzcykge1xuICAgICAgLy8gUmVuZGVyIGNoaWxkcmVuIHdpdGggcmVzb2x2ZWQgdmFsdWVcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb21pc2UsXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSk7XG4gICAgfSAvLyBUaHJvdyB0byB0aGUgc3VzcGVuc2UgYm91bmRhcnlcblxuXG4gICAgdGhyb3cgcHJvbWlzZTtcbiAgfVxuXG59XG4vKipcbiAqIEBwcml2YXRlXG4gKiBJbmRpcmVjdGlvbiB0byBsZXZlcmFnZSB1c2VBc3luY1ZhbHVlIGZvciBhIHJlbmRlci1wcm9wIEFQSSBvbiA8QXdhaXQ+XG4gKi9cblxuXG5mdW5jdGlvbiBSZXNvbHZlQXdhaXQoX3JlZjcpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjc7XG4gIGxldCBkYXRhID0gdXNlQXN5bmNWYWx1ZSgpO1xuXG4gIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBjaGlsZHJlbihkYXRhKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4pO1xufSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZXMgYSByb3V0ZSBjb25maWcgZnJvbSBhIFJlYWN0IFwiY2hpbGRyZW5cIiBvYmplY3QsIHdoaWNoIGlzIHVzdWFsbHlcbiAqIGVpdGhlciBhIGA8Um91dGU+YCBlbGVtZW50IG9yIGFuIGFycmF5IG9mIHRoZW0uIFVzZWQgaW50ZXJuYWxseSBieVxuICogYDxSb3V0ZXM+YCB0byBjcmVhdGUgYSByb3V0ZSBjb25maWcgZnJvbSBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L3V0aWxzL2NyZWF0ZS1yb3V0ZXMtZnJvbS1jaGlsZHJlblxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gW107XG4gIH1cblxuICBsZXQgcm91dGVzID0gW107XG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgLy8gSWdub3JlIG5vbi1lbGVtZW50cy4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIG1vcmUgZWFzaWx5IGlubGluZVxuICAgICAgLy8gY29uZGl0aW9uYWxzIGluIHRoZWlyIHJvdXRlIGNvbmZpZy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC50eXBlID09PSBSZWFjdC5GcmFnbWVudCkge1xuICAgICAgLy8gVHJhbnNwYXJlbnRseSBzdXBwb3J0IFJlYWN0LkZyYWdtZW50IGFuZCBpdHMgY2hpbGRyZW4uXG4gICAgICByb3V0ZXMucHVzaC5hcHBseShyb3V0ZXMsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuLCBwYXJlbnRQYXRoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgIShlbGVtZW50LnR5cGUgPT09IFJvdXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJbXCIgKyAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gXCJzdHJpbmdcIiA/IGVsZW1lbnQudHlwZSA6IGVsZW1lbnQudHlwZS5uYW1lKSArIFwiXSBpcyBub3QgYSA8Um91dGU+IGNvbXBvbmVudC4gQWxsIGNvbXBvbmVudCBjaGlsZHJlbiBvZiA8Um91dGVzPiBtdXN0IGJlIGEgPFJvdXRlPiBvciA8UmVhY3QuRnJhZ21lbnQ+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKCFlbGVtZW50LnByb3BzLmluZGV4IHx8ICFlbGVtZW50LnByb3BzLmNoaWxkcmVuKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBbiBpbmRleCByb3V0ZSBjYW5ub3QgaGF2ZSBjaGlsZCByb3V0ZXMuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgaW5kZXhdO1xuICAgIGxldCByb3V0ZSA9IHtcbiAgICAgIGlkOiBlbGVtZW50LnByb3BzLmlkIHx8IHRyZWVQYXRoLmpvaW4oXCItXCIpLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogZWxlbWVudC5wcm9wcy5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZWxlbWVudDogZWxlbWVudC5wcm9wcy5lbGVtZW50LFxuICAgICAgaW5kZXg6IGVsZW1lbnQucHJvcHMuaW5kZXgsXG4gICAgICBwYXRoOiBlbGVtZW50LnByb3BzLnBhdGgsXG4gICAgICBsb2FkZXI6IGVsZW1lbnQucHJvcHMubG9hZGVyLFxuICAgICAgYWN0aW9uOiBlbGVtZW50LnByb3BzLmFjdGlvbixcbiAgICAgIGVycm9yRWxlbWVudDogZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQsXG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLmVycm9yRWxlbWVudCAhPSBudWxsLFxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZTogZWxlbWVudC5wcm9wcy5zaG91bGRSZXZhbGlkYXRlLFxuICAgICAgaGFuZGxlOiBlbGVtZW50LnByb3BzLmhhbmRsZVxuICAgIH07XG5cbiAgICBpZiAoZWxlbWVudC5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgcm91dGUuY2hpbGRyZW4gPSBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbiwgdHJlZVBhdGgpO1xuICAgIH1cblxuICAgIHJvdXRlcy5wdXNoKHJvdXRlKTtcbiAgfSk7XG4gIHJldHVybiByb3V0ZXM7XG59XG4vKipcbiAqIFJlbmRlcnMgdGhlIHJlc3VsdCBvZiBgbWF0Y2hSb3V0ZXMoKWAgaW50byBhIFJlYWN0IGVsZW1lbnQuXG4gKi9cblxuZnVuY3Rpb24gcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIHJldHVybiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqIFdhbGsgdGhlIHJvdXRlIHRyZWUgYW5kIGFkZCBoYXNFcnJvckJvdW5kYXJ5IGlmIGl0J3Mgbm90IHByb3ZpZGVkLCBzbyB0aGF0XG4gKiB1c2VycyBwcm92aWRpbmcgbWFudWFsIHJvdXRlIGFycmF5cyBjYW4ganVzdCBzcGVjaWZ5IGVycm9yRWxlbWVudFxuICovXG5cbmZ1bmN0aW9uIGVuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMocm91dGVzKSB7XG4gIHJldHVybiByb3V0ZXMubWFwKHJvdXRlID0+IHtcbiAgICBsZXQgcm91dGVDbG9uZSA9IF9leHRlbmRzKHt9LCByb3V0ZSk7XG5cbiAgICBpZiAocm91dGVDbG9uZS5oYXNFcnJvckJvdW5kYXJ5ID09IG51bGwpIHtcbiAgICAgIHJvdXRlQ2xvbmUuaGFzRXJyb3JCb3VuZGFyeSA9IHJvdXRlQ2xvbmUuZXJyb3JFbGVtZW50ICE9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHJvdXRlQ2xvbmUuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlQ2xvbmUuY2hpbGRyZW4gPSBlbmhhbmNlTWFudWFsUm91dGVPYmplY3RzKHJvdXRlQ2xvbmUuY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHJldHVybiByb3V0ZUNsb25lO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5Um91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBoaXN0b3J5OiBjcmVhdGVNZW1vcnlIaXN0b3J5KHtcbiAgICAgIGluaXRpYWxFbnRyaWVzOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEluZGV4OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmluaXRpYWxJbmRleFxuICAgIH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSxcbiAgICByb3V0ZXM6IGVuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMocm91dGVzKVxuICB9KS5pbml0aWFsaXplKCk7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZXhwb3J0IHsgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE91dGxldCwgUm91dGUsIFJvdXRlciwgUm91dGVyUHJvdmlkZXIsIFJvdXRlcywgRGF0YVJvdXRlckNvbnRleHQgYXMgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LCBEYXRhUm91dGVyU3RhdGVDb250ZXh0IGFzIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBEYXRhU3RhdGljUm91dGVyQ29udGV4dCBhcyBVTlNBRkVfRGF0YVN0YXRpY1JvdXRlckNvbnRleHQsIExvY2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBOYXZpZ2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFJvdXRlQ29udGV4dCBhcyBVTlNBRkVfUm91dGVDb250ZXh0LCBlbmhhbmNlTWFudWFsUm91dGVPYmplY3RzIGFzIFVOU0FGRV9lbmhhbmNlTWFudWFsUm91dGVPYmplY3RzLCBjcmVhdGVNZW1vcnlSb3V0ZXIsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIGFzIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cywgcmVuZGVyTWF0Y2hlcywgdXNlQWN0aW9uRGF0YSwgdXNlQXN5bmNFcnJvciwgdXNlQXN5bmNWYWx1ZSwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2FkZXJEYXRhLCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUmV2YWxpZGF0b3IsIHVzZVJvdXRlRXJyb3IsIHVzZVJvdXRlTG9hZGVyRGF0YSwgdXNlUm91dGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIERPTSB2Ni40LjNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVU5TQUZFX2VuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMsIFJvdXRlciwgdXNlSHJlZiwgdXNlUmVzb2x2ZWRQYXRoLCB1c2VMb2NhdGlvbiwgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIHVzZU5hdmlnYXRlLCBjcmVhdGVQYXRoLCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRpb24sIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE5hdmlnYXRpb25UeXBlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlclByb3ZpZGVyLCBSb3V0ZXMsIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIFVOU0FGRV9EYXRhU3RhdGljUm91dGVyQ29udGV4dCwgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBVTlNBRkVfUm91dGVDb250ZXh0LCBVTlNBRkVfZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cywgY3JlYXRlTWVtb3J5Um91dGVyLCBjcmVhdGVQYXRoLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cywgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlbmRlck1hdGNoZXMsIHJlc29sdmVQYXRoLCB1c2VBY3Rpb25EYXRhLCB1c2VBc3luY0Vycm9yLCB1c2VBc3luY1ZhbHVlLCB1c2VIcmVmLCB1c2VJblJvdXRlckNvbnRleHQsIHVzZUxvYWRlckRhdGEsIHVzZUxvY2F0aW9uLCB1c2VNYXRjaCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGUsIHVzZU5hdmlnYXRpb24sIHVzZU5hdmlnYXRpb25UeXBlLCB1c2VPdXRsZXQsIHVzZU91dGxldENvbnRleHQsIHVzZVBhcmFtcywgdXNlUmVzb2x2ZWRQYXRoLCB1c2VSZXZhbGlkYXRvciwgdXNlUm91dGVFcnJvciwgdXNlUm91dGVMb2FkZXJEYXRhLCB1c2VSb3V0ZXMgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHsgY3JlYXRlUm91dGVyLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGludmFyaWFudCwgam9pblBhdGhzIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5jb25zdCBkZWZhdWx0TWV0aG9kID0gXCJnZXRcIjtcbmNvbnN0IGRlZmF1bHRFbmNUeXBlID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbmZ1bmN0aW9uIGlzSHRtbEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0LnRhZ05hbWUgPT09IFwic3RyaW5nXCI7XG59XG5mdW5jdGlvbiBpc0J1dHRvbkVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJidXR0b25cIjtcbn1cbmZ1bmN0aW9uIGlzRm9ybUVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmb3JtXCI7XG59XG5mdW5jdGlvbiBpc0lucHV0RWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCI7XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkge1xuICByZXR1cm4gZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gSWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIExldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIElnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gIDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QgdXNpbmcgdGhlIGdpdmVuIGluaXRpYWxpemVyLlxuICpcbiAqIFRoaXMgaXMgaWRlbnRpY2FsIHRvIGBuZXcgVVJMU2VhcmNoUGFyYW1zKGluaXQpYCBleGNlcHQgaXQgYWxzb1xuICogc3VwcG9ydHMgYXJyYXlzIGFzIHZhbHVlcyBpbiB0aGUgb2JqZWN0IGZvcm0gb2YgdGhlIGluaXRpYWxpemVyXG4gKiBpbnN0ZWFkIG9mIGp1c3Qgc3RyaW5ncy4gVGhpcyBpcyBjb252ZW5pZW50IHdoZW4geW91IG5lZWQgbXVsdGlwbGVcbiAqIHZhbHVlcyBmb3IgYSBnaXZlbiBrZXksIGJ1dCBkb24ndCB3YW50IHRvIHVzZSBhbiBhcnJheSBpbml0aWFsaXplci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZjpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKFtcbiAqICAgICBbJ3NvcnQnLCAnbmFtZSddLFxuICogICAgIFsnc29ydCcsICdwcmljZSddXG4gKiAgIF0pO1xuICpcbiAqIHlvdSBjYW4gZG86XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHtcbiAqICAgICBzb3J0OiBbJ25hbWUnLCAncHJpY2UnXVxuICogICB9KTtcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTZWFyY2hQYXJhbXMoaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IFwiXCI7XG4gIH1cblxuICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyh0eXBlb2YgaW5pdCA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KGluaXQpIHx8IGluaXQgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMgPyBpbml0IDogT2JqZWN0LmtleXMoaW5pdCkucmVkdWNlKChtZW1vLCBrZXkpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBpbml0W2tleV07XG4gICAgcmV0dXJuIG1lbW8uY29uY2F0KEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKHYgPT4gW2tleSwgdl0pIDogW1trZXksIHZhbHVlXV0pO1xuICB9LCBbXSkpO1xufVxuZnVuY3Rpb24gZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24obG9jYXRpb25TZWFyY2gsIGRlZmF1bHRTZWFyY2hQYXJhbXMpIHtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyhsb2NhdGlvblNlYXJjaCk7XG5cbiAgZm9yIChsZXQga2V5IG9mIGRlZmF1bHRTZWFyY2hQYXJhbXMua2V5cygpKSB7XG4gICAgaWYgKCFzZWFyY2hQYXJhbXMuaGFzKGtleSkpIHtcbiAgICAgIGRlZmF1bHRTZWFyY2hQYXJhbXMuZ2V0QWxsKGtleSkuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2VhcmNoUGFyYW1zO1xufVxuZnVuY3Rpb24gZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvKHRhcmdldCwgZGVmYXVsdEFjdGlvbiwgb3B0aW9ucykge1xuICBsZXQgbWV0aG9kO1xuICBsZXQgYWN0aW9uO1xuICBsZXQgZW5jVHlwZTtcbiAgbGV0IGZvcm1EYXRhO1xuXG4gIGlmIChpc0Zvcm1FbGVtZW50KHRhcmdldCkpIHtcbiAgICBsZXQgc3VibWlzc2lvblRyaWdnZXIgPSBvcHRpb25zLnN1Ym1pc3Npb25UcmlnZ2VyO1xuICAgIG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBhY3Rpb24gPSBvcHRpb25zLmFjdGlvbiB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpIHx8IGRlZmF1bHRBY3Rpb247XG4gICAgZW5jVHlwZSA9IG9wdGlvbnMuZW5jVHlwZSB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSB8fCBkZWZhdWx0RW5jVHlwZTtcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0YXJnZXQpO1xuXG4gICAgaWYgKHN1Ym1pc3Npb25UcmlnZ2VyICYmIHN1Ym1pc3Npb25UcmlnZ2VyLm5hbWUpIHtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZChzdWJtaXNzaW9uVHJpZ2dlci5uYW1lLCBzdWJtaXNzaW9uVHJpZ2dlci52YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQnV0dG9uRWxlbWVudCh0YXJnZXQpIHx8IGlzSW5wdXRFbGVtZW50KHRhcmdldCkgJiYgKHRhcmdldC50eXBlID09PSBcInN1Ym1pdFwiIHx8IHRhcmdldC50eXBlID09PSBcImltYWdlXCIpKSB7XG4gICAgbGV0IGZvcm0gPSB0YXJnZXQuZm9ybTtcblxuICAgIGlmIChmb3JtID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgYSA8YnV0dG9uPiBvciA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIj4gd2l0aG91dCBhIDxmb3JtPlwiKTtcbiAgICB9IC8vIDxidXR0b24+LzxpbnB1dCB0eXBlPVwic3VibWl0XCI+IG1heSBvdmVycmlkZSBhdHRyaWJ1dGVzIG9mIDxmb3JtPlxuXG5cbiAgICBtZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSB8fCBmb3JtLmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKSB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGFjdGlvbiA9IG9wdGlvbnMuYWN0aW9uIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtYWN0aW9uXCIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpIHx8IGRlZmF1bHRBY3Rpb247XG4gICAgZW5jVHlwZSA9IG9wdGlvbnMuZW5jVHlwZSB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybWVuY3R5cGVcIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJlbmN0eXBlXCIpIHx8IGRlZmF1bHRFbmNUeXBlO1xuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0pOyAvLyBJbmNsdWRlIG5hbWUgKyB2YWx1ZSBmcm9tIGEgPGJ1dHRvbj4sIGFwcGVuZGluZyBpbiBjYXNlIHRoZSBidXR0b24gbmFtZVxuICAgIC8vIG1hdGNoZXMgYW4gZXhpc3RpbmcgaW5wdXQgbmFtZVxuXG4gICAgaWYgKHRhcmdldC5uYW1lKSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQodGFyZ2V0Lm5hbWUsIHRhcmdldC52YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSHRtbEVsZW1lbnQodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgZWxlbWVudCB0aGF0IGlzIG5vdCA8Zm9ybT4sIDxidXR0b24+LCBvciBcIiArIFwiPGlucHV0IHR5cGU9XFxcInN1Ym1pdHxpbWFnZVxcXCI+XCIpO1xuICB9IGVsc2Uge1xuICAgIG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IGRlZmF1bHRNZXRob2Q7XG4gICAgYWN0aW9uID0gb3B0aW9ucy5hY3Rpb24gfHwgZGVmYXVsdEFjdGlvbjtcbiAgICBlbmNUeXBlID0gb3B0aW9ucy5lbmNUeXBlIHx8IGRlZmF1bHRFbmNUeXBlO1xuXG4gICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG4gICAgICBmb3JtRGF0YSA9IHRhcmdldDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcblxuICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcykge1xuICAgICAgICBmb3IgKGxldCBbbmFtZSwgdmFsdWVdIG9mIHRhcmdldCkge1xuICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yIChsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyh0YXJnZXQpKSB7XG4gICAgICAgICAgZm9ybURhdGEuYXBwZW5kKG5hbWUsIHRhcmdldFtuYW1lXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBsZXQge1xuICAgIHByb3RvY29sLFxuICAgIGhvc3RcbiAgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgbGV0IHVybCA9IG5ldyBVUkwoYWN0aW9uLCBwcm90b2NvbCArIFwiLy9cIiArIGhvc3QpO1xuICByZXR1cm4ge1xuICAgIHVybCxcbiAgICBtZXRob2QsXG4gICAgZW5jVHlwZSxcbiAgICBmb3JtRGF0YVxuICB9O1xufVxuXG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkNsaWNrXCIsIFwicmVsYXRpdmVcIiwgXCJyZWxvYWREb2N1bWVudFwiLCBcInJlcGxhY2VcIiwgXCJzdGF0ZVwiLCBcInRhcmdldFwiLCBcInRvXCIsIFwicHJldmVudFNjcm9sbFJlc2V0XCJdLFxuICAgICAgX2V4Y2x1ZGVkMiA9IFtcImFyaWEtY3VycmVudFwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJlbmRcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiY2hpbGRyZW5cIl0sXG4gICAgICBfZXhjbHVkZWQzID0gW1wicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwibWV0aG9kXCIsIFwiYWN0aW9uXCIsIFwib25TdWJtaXRcIiwgXCJmZXRjaGVyS2V5XCIsIFwicm91dGVJZFwiLCBcInJlbGF0aXZlXCJdO1xuLy8jcmVnaW9uIFJvdXRlcnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHZhciBfd2luZG93O1xuXG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmJhc2VuYW1lLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCAoKF93aW5kb3cgPSB3aW5kb3cpID09IG51bGwgPyB2b2lkIDAgOiBfd2luZG93Ll9fc3RhdGljUm91dGVySHlkcmF0aW9uRGF0YSksXG4gICAgcm91dGVzOiBVTlNBRkVfZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyhyb3V0ZXMpXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHZhciBfd2luZG93MjtcblxuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBoaXN0b3J5OiBjcmVhdGVIYXNoSGlzdG9yeSh7XG4gICAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSkgfHwgKChfd2luZG93MiA9IHdpbmRvdykgPT0gbnVsbCA/IHZvaWQgMCA6IF93aW5kb3cyLl9fc3RhdGljUm91dGVySHlkcmF0aW9uRGF0YSksXG4gICAgcm91dGVzOiBVTlNBRkVfZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyhyb3V0ZXMpXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBQcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy5cbiAqL1xuXG5mdW5jdGlvbiBCcm93c2VyUm91dGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWY7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnkoe1xuICAgICAgd2luZG93LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFN0b3JlcyB0aGUgbG9jYXRpb24gaW4gdGhlIGhhc2hcbiAqIHBvcnRpb24gb2YgdGhlIFVSTCBzbyBpdCBpcyBub3Qgc2VudCB0byB0aGUgc2VydmVyLlxuICovXG5cbmZ1bmN0aW9uIEhhc2hSb3V0ZXIoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWYyO1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuXG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdyxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIHRoYXQgYWNjZXB0cyBhIHByZS1pbnN0YW50aWF0ZWQgaGlzdG9yeSBvYmplY3QuIEl0J3MgaW1wb3J0YW50XG4gKiB0byBub3RlIHRoYXQgdXNpbmcgeW91ciBvd24gaGlzdG9yeSBvYmplY3QgaXMgaGlnaGx5IGRpc2NvdXJhZ2VkIGFuZCBtYXkgYWRkXG4gKiB0d28gdmVyc2lvbnMgb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0byB5b3VyIGJ1bmRsZXMgdW5sZXNzIHlvdSB1c2UgdGhlIHNhbWVcbiAqIHZlcnNpb24gb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0aGF0IFJlYWN0IFJvdXRlciB1c2VzIGludGVybmFsbHkuXG4gKi9cblxuZnVuY3Rpb24gSGlzdG9yeVJvdXRlcihfcmVmMykge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGhpc3RvcnlcbiAgfSA9IF9yZWYzO1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGlzdG9yeVJvdXRlci5kaXNwbGF5TmFtZSA9IFwidW5zdGFibGVfSGlzdG9yeVJvdXRlclwiO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuY29uc3QgTGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmtXaXRoUmVmKF9yZWY0LCByZWYpIHtcbiAgbGV0IHtcbiAgICBvbkNsaWNrLFxuICAgIHJlbGF0aXZlLFxuICAgIHJlbG9hZERvY3VtZW50LFxuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgdGFyZ2V0LFxuICAgIHRvLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICB9ID0gX3JlZjQsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjQsIF9leGNsdWRlZCk7XG5cbiAgbGV0IGhyZWYgPSB1c2VIcmVmKHRvLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIGxldCBpbnRlcm5hbE9uQ2xpY2sgPSB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCB7XG4gICAgcmVwbGFjZSxcbiAgICBzdGF0ZSxcbiAgICB0YXJnZXQsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgIHJlbGF0aXZlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZXZlbnQpO1xuXG4gICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBpbnRlcm5hbE9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgLyojX19QVVJFX18qL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnRcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogaHJlZixcbiAgICAgIG9uQ2xpY2s6IHJlbG9hZERvY3VtZW50ID8gb25DbGljayA6IGhhbmRsZUNsaWNrLFxuICAgICAgcmVmOiByZWYsXG4gICAgICB0YXJnZXQ6IHRhcmdldFxuICAgIH0pKVxuICApO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbmNvbnN0IE5hdkxpbmsgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBOYXZMaW5rV2l0aFJlZihfcmVmNSwgcmVmKSB7XG4gIGxldCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRQcm9wID0gXCJwYWdlXCIsXG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lUHJvcCA9IFwiXCIsXG4gICAgZW5kID0gZmFsc2UsXG4gICAgc3R5bGU6IHN0eWxlUHJvcCxcbiAgICB0byxcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjUsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjUsIF9leGNsdWRlZDIpO1xuXG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmU6IHJlc3QucmVsYXRpdmVcbiAgfSk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZXJTdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICBsZXQgdG9QYXRobmFtZSA9IHBhdGgucGF0aG5hbWU7XG4gIGxldCBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gIGxldCBuZXh0TG9jYXRpb25QYXRobmFtZSA9IHJvdXRlclN0YXRlICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24gJiYgcm91dGVyU3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiA/IHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24ucGF0aG5hbWUgOiBudWxsO1xuXG4gIGlmICghY2FzZVNlbnNpdGl2ZSkge1xuICAgIGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSBuZXh0TG9jYXRpb25QYXRobmFtZSA/IG5leHRMb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xuICAgIHRvUGF0aG5hbWUgPSB0b1BhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBsZXQgaXNBY3RpdmUgPSBsb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8ICFlbmQgJiYgbG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIGxvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCI7XG4gIGxldCBpc1BlbmRpbmcgPSBuZXh0TG9jYXRpb25QYXRobmFtZSAhPSBudWxsICYmIChuZXh0TG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIG5leHRMb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiYgbmV4dExvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCIpO1xuICBsZXQgYXJpYUN1cnJlbnQgPSBpc0FjdGl2ZSA/IGFyaWFDdXJyZW50UHJvcCA6IHVuZGVmaW5lZDtcbiAgbGV0IGNsYXNzTmFtZTtcblxuICBpZiAodHlwZW9mIGNsYXNzTmFtZVByb3AgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZVByb3Aoe1xuICAgICAgaXNBY3RpdmUsXG4gICAgICBpc1BlbmRpbmdcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB0aGUgY2xhc3NOYW1lIHByb3AgaXMgbm90IGEgZnVuY3Rpb24sIHdlIHVzZSBhIGRlZmF1bHQgYGFjdGl2ZWBcbiAgICAvLyBjbGFzcyBmb3IgPE5hdkxpbmsgLz5zIHRoYXQgYXJlIGFjdGl2ZS4gSW4gdjUgYGFjdGl2ZWAgd2FzIHRoZSBkZWZhdWx0XG4gICAgLy8gdmFsdWUgZm9yIGBhY3RpdmVDbGFzc05hbWVgLCBidXQgd2UgYXJlIHJlbW92aW5nIHRoYXQgQVBJIGFuZCBjYW4gc3RpbGxcbiAgICAvLyB1c2UgdGhlIG9sZCBkZWZhdWx0IGJlaGF2aW9yIGZvciBhIGNsZWFuZXIgdXBncmFkZSBwYXRoIGFuZCBrZWVwIHRoZVxuICAgIC8vIHNpbXBsZSBzdHlsaW5nIHJ1bGVzIHdvcmtpbmcgYXMgdGhleSBjdXJyZW50bHkgZG8uXG4gICAgY2xhc3NOYW1lID0gW2NsYXNzTmFtZVByb3AsIGlzQWN0aXZlID8gXCJhY3RpdmVcIiA6IG51bGwsIGlzUGVuZGluZyA/IFwicGVuZGluZ1wiIDogbnVsbF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpO1xuICB9XG5cbiAgbGV0IHN0eWxlID0gdHlwZW9mIHN0eWxlUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVQcm9wKHtcbiAgICBpc0FjdGl2ZSxcbiAgICBpc1BlbmRpbmdcbiAgfSkgOiBzdHlsZVByb3A7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50LFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIHJlZjogcmVmLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICB0bzogdG9cbiAgfSksIHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4oe1xuICAgIGlzQWN0aXZlLFxuICAgIGlzUGVuZGluZ1xuICB9KSA6IGNoaWxkcmVuKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbn1cbi8qKlxuICogQSBgQHJlbWl4LXJ1bi9yb3V0ZXJgLWF3YXJlIGA8Zm9ybT5gLiBJdCBiZWhhdmVzIGxpa2UgYSBub3JtYWwgZm9ybSBleGNlcHRcbiAqIHRoYXQgdGhlIGludGVyYWN0aW9uIHdpdGggdGhlIHNlcnZlciBpcyB3aXRoIGBmZXRjaGAgaW5zdGVhZCBvZiBuZXcgZG9jdW1lbnRcbiAqIHJlcXVlc3RzLCBhbGxvd2luZyBjb21wb25lbnRzIHRvIGFkZCBuaWNlciBVWCB0byB0aGUgcGFnZSBhcyB0aGUgZm9ybSBpc1xuICogc3VibWl0dGVkIGFuZCByZXR1cm5zIHdpdGggZGF0YS5cbiAqL1xuXG5cbmNvbnN0IEZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUltcGwsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHJlZjogcmVmXG4gIH0pKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZvcm0uZGlzcGxheU5hbWUgPSBcIkZvcm1cIjtcbn1cblxuY29uc3QgRm9ybUltcGwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigoX3JlZjYsIGZvcndhcmRlZFJlZikgPT4ge1xuICBsZXQge1xuICAgIHJlbG9hZERvY3VtZW50LFxuICAgIHJlcGxhY2UsXG4gICAgbWV0aG9kID0gZGVmYXVsdE1ldGhvZCxcbiAgICBhY3Rpb24sXG4gICAgb25TdWJtaXQsXG4gICAgZmV0Y2hlcktleSxcbiAgICByb3V0ZUlkLFxuICAgIHJlbGF0aXZlXG4gIH0gPSBfcmVmNixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjYsIF9leGNsdWRlZDMpO1xuXG4gIGxldCBzdWJtaXQgPSB1c2VTdWJtaXRJbXBsKGZldGNoZXJLZXksIHJvdXRlSWQpO1xuICBsZXQgZm9ybU1ldGhvZCA9IG1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBcImdldFwiID8gXCJnZXRcIiA6IFwicG9zdFwiO1xuICBsZXQgZm9ybUFjdGlvbiA9IHVzZUZvcm1BY3Rpb24oYWN0aW9uLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG5cbiAgbGV0IHN1Ym1pdEhhbmRsZXIgPSBldmVudCA9PiB7XG4gICAgb25TdWJtaXQgJiYgb25TdWJtaXQoZXZlbnQpO1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBsZXQgc3VibWl0dGVyID0gZXZlbnQubmF0aXZlRXZlbnQuc3VibWl0dGVyO1xuICAgIHN1Ym1pdChzdWJtaXR0ZXIgfHwgZXZlbnQuY3VycmVudFRhcmdldCwge1xuICAgICAgbWV0aG9kLFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHJlbGF0aXZlXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBmb3J3YXJkZWRSZWYsXG4gICAgbWV0aG9kOiBmb3JtTWV0aG9kLFxuICAgIGFjdGlvbjogZm9ybUFjdGlvbixcbiAgICBvblN1Ym1pdDogcmVsb2FkRG9jdW1lbnQgPyBvblN1Ym1pdCA6IHN1Ym1pdEhhbmRsZXJcbiAgfSwgcHJvcHMpKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZvcm0uZGlzcGxheU5hbWUgPSBcIkZvcm1cIjtcbn1cbi8qKlxuICogVGhpcyBjb21wb25lbnQgd2lsbCBlbXVsYXRlIHRoZSBicm93c2VyJ3Mgc2Nyb2xsIHJlc3RvcmF0aW9uIG9uIGxvY2F0aW9uXG4gKiBjaGFuZ2VzLlxuICovXG5cblxuZnVuY3Rpb24gU2Nyb2xsUmVzdG9yYXRpb24oX3JlZjcpIHtcbiAgbGV0IHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9ID0gX3JlZjc7XG4gIHVzZVNjcm9sbFJlc3RvcmF0aW9uKHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9KTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU2Nyb2xsUmVzdG9yYXRpb24uZGlzcGxheU5hbWUgPSBcIlNjcm9sbFJlc3RvcmF0aW9uXCI7XG59IC8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBIb29rc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG52YXIgRGF0YVJvdXRlckhvb2s7XG5cbihmdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTdWJtaXRJbXBsXCJdID0gXCJ1c2VTdWJtaXRJbXBsXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlRmV0Y2hlclwiXSA9IFwidXNlRmV0Y2hlclwiO1xufSkoRGF0YVJvdXRlckhvb2sgfHwgKERhdGFSb3V0ZXJIb29rID0ge30pKTtcblxudmFyIERhdGFSb3V0ZXJTdGF0ZUhvb2s7XG5cbihmdW5jdGlvbiAoRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlRmV0Y2hlcnNcIl0gPSBcInVzZUZldGNoZXJzXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbn0pKERhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwgKERhdGFSb3V0ZXJTdGF0ZUhvb2sgPSB7fSkpO1xuXG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSB7XG4gIHJldHVybiBob29rTmFtZSArIFwiIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9lbi9tYWluL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0KTtcbiAgIWN0eCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGN0eDtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlclN0YXRlKGhvb2tOYW1lKSB7XG4gIGxldCBzdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICAhc3RhdGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBzdGF0ZTtcbn1cbi8qKlxuICogSGFuZGxlcyB0aGUgY2xpY2sgYmVoYXZpb3IgZm9yIHJvdXRlciBgPExpbms+YCBjb21wb25lbnRzLiBUaGlzIGlzIHVzZWZ1bCBpZlxuICogeW91IG5lZWQgdG8gY3JlYXRlIGN1c3RvbSBgPExpbms+YCBjb21wb25lbnRzIHdpdGggdGhlIHNhbWUgY2xpY2sgYmVoYXZpb3Igd2VcbiAqIHVzZSBpbiBvdXIgZXhwb3J0ZWQgYDxMaW5rPmAuXG4gKi9cblxuXG5mdW5jdGlvbiB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCBfdGVtcCkge1xuICBsZXQge1xuICAgIHRhcmdldCxcbiAgICByZXBsYWNlOiByZXBsYWNlUHJvcCxcbiAgICBzdGF0ZSxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGlmIChzaG91bGRQcm9jZXNzTGlua0NsaWNrKGV2ZW50LCB0YXJnZXQpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBJZiB0aGUgVVJMIGhhc24ndCBjaGFuZ2VkLCBhIHJlZ3VsYXIgPGE+IHdpbGwgZG8gYSByZXBsYWNlIGluc3RlYWQgb2ZcbiAgICAgIC8vIGEgcHVzaCwgc28gZG8gdGhlIHNhbWUgaGVyZSB1bmxlc3MgdGhlIHJlcGxhY2UgcHJvcCBpcyBleHBsaWNpdGx5IHNldFxuXG4gICAgICBsZXQgcmVwbGFjZSA9IHJlcGxhY2VQcm9wICE9PSB1bmRlZmluZWQgPyByZXBsYWNlUHJvcCA6IGNyZWF0ZVBhdGgobG9jYXRpb24pID09PSBjcmVhdGVQYXRoKHBhdGgpO1xuICAgICAgbmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgcmVsYXRpdmVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2xvY2F0aW9uLCBuYXZpZ2F0ZSwgcGF0aCwgcmVwbGFjZVByb3AsIHN0YXRlLCB0YXJnZXQsIHRvLCBwcmV2ZW50U2Nyb2xsUmVzZXQsIHJlbGF0aXZlXSk7XG59XG4vKipcbiAqIEEgY29udmVuaWVudCB3cmFwcGVyIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIHNlYXJjaCBwYXJhbWV0ZXJzIHZpYSB0aGVcbiAqIFVSTFNlYXJjaFBhcmFtcyBpbnRlcmZhY2UuXG4gKi9cblxuZnVuY3Rpb24gdXNlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gXCJ1bmRlZmluZWRcIiwgXCJZb3UgY2Fubm90IHVzZSB0aGUgYHVzZVNlYXJjaFBhcmFtc2AgaG9vayBpbiBhIGJyb3dzZXIgdGhhdCBkb2VzIG5vdCBcIiArIFwic3VwcG9ydCB0aGUgVVJMU2VhcmNoUGFyYW1zIEFQSS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBJbnRlcm5ldCBcIiArIFwiRXhwbG9yZXIgMTEsIHdlIHJlY29tbWVuZCB5b3UgbG9hZCBhIHBvbHlmaWxsIHN1Y2ggYXMgXCIgKyBcImh0dHBzOi8vZ2l0aHViLmNvbS91bmdhcC91cmwtc2VhcmNoLXBhcmFtc1xcblxcblwiICsgXCJJZiB5b3UncmUgdW5zdXJlIGhvdyB0byBsb2FkIHBvbHlmaWxscywgd2UgcmVjb21tZW5kIHlvdSBjaGVjayBvdXQgXCIgKyBcImh0dHBzOi8vcG9seWZpbGwuaW8vdjMvIHdoaWNoIHByb3ZpZGVzIHNvbWUgcmVjb21tZW5kYXRpb25zIGFib3V0IGhvdyBcIiArIFwidG8gbG9hZCBwb2x5ZmlsbHMgb25seSBmb3IgdXNlcnMgdGhhdCBuZWVkIHRoZW0sIGluc3RlYWQgb2YgZm9yIGV2ZXJ5IFwiICsgXCJ1c2VyLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoY3JlYXRlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VNZW1vKCgpID0+IGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uKGxvY2F0aW9uLnNlYXJjaCwgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50KSwgW2xvY2F0aW9uLnNlYXJjaF0pO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgc2V0U2VhcmNoUGFyYW1zID0gUmVhY3QudXNlQ2FsbGJhY2soKG5leHRJbml0LCBuYXZpZ2F0ZU9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBuZXdTZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXModHlwZW9mIG5leHRJbml0ID09PSBcImZ1bmN0aW9uXCIgPyBuZXh0SW5pdChzZWFyY2hQYXJhbXMpIDogbmV4dEluaXQpO1xuICAgIG5hdmlnYXRlKFwiP1wiICsgbmV3U2VhcmNoUGFyYW1zLCBuYXZpZ2F0ZU9wdGlvbnMpO1xuICB9LCBbbmF2aWdhdGUsIHNlYXJjaFBhcmFtc10pO1xuICByZXR1cm4gW3NlYXJjaFBhcmFtcywgc2V0U2VhcmNoUGFyYW1zXTtcbn1cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gcHJvZ3JhbW1hdGljYWxseSBzdWJtaXQgYSBmb3JtIChvclxuICogc29tZSBhcmJpdHJhcnkgZGF0YSkgdG8gdGhlIHNlcnZlci5cbiAqL1xuXG5mdW5jdGlvbiB1c2VTdWJtaXQoKSB7XG4gIHJldHVybiB1c2VTdWJtaXRJbXBsKCk7XG59XG5cbmZ1bmN0aW9uIHVzZVN1Ym1pdEltcGwoZmV0Y2hlcktleSwgcm91dGVJZCkge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU3VibWl0SW1wbCk7XG4gIGxldCBkZWZhdWx0QWN0aW9uID0gdXNlRm9ybUFjdGlvbigpO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGNhbGxpbmcgc3VibWl0IGR1cmluZyB0aGUgc2VydmVyIHJlbmRlci4gXCIgKyBcIlRyeSBjYWxsaW5nIHN1Ym1pdCB3aXRoaW4gYSBgdXNlRWZmZWN0YCBvciBjYWxsYmFjayBpbnN0ZWFkLlwiKTtcbiAgICB9XG5cbiAgICBsZXQge1xuICAgICAgbWV0aG9kLFxuICAgICAgZW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgdXJsXG4gICAgfSA9IGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGRlZmF1bHRBY3Rpb24sIG9wdGlvbnMpO1xuICAgIGxldCBocmVmID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaDtcbiAgICBsZXQgb3B0cyA9IHtcbiAgICAgIHJlcGxhY2U6IG9wdGlvbnMucmVwbGFjZSxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgZm9ybU1ldGhvZDogbWV0aG9kLFxuICAgICAgZm9ybUVuY1R5cGU6IGVuY1R5cGVcbiAgICB9O1xuXG4gICAgaWYgKGZldGNoZXJLZXkpIHtcbiAgICAgICEocm91dGVJZCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJObyByb3V0ZUlkIGF2YWlsYWJsZSBmb3IgdXNlRmV0Y2hlcigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJvdXRlci5mZXRjaChmZXRjaGVyS2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKGhyZWYsIG9wdHMpO1xuICAgIH1cbiAgfSwgW2RlZmF1bHRBY3Rpb24sIHJvdXRlciwgZmV0Y2hlcktleSwgcm91dGVJZF0pO1xufVxuXG5mdW5jdGlvbiB1c2VGb3JtQWN0aW9uKGFjdGlvbiwgX3RlbXAyKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHJvdXRlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX1JvdXRlQ29udGV4dCk7XG4gICFyb3V0ZUNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwidXNlRm9ybUFjdGlvbiBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IFttYXRjaF0gPSByb3V0ZUNvbnRleHQubWF0Y2hlcy5zbGljZSgtMSk7XG4gIGxldCByZXNvbHZlZEFjdGlvbiA9IGFjdGlvbiAhPSBudWxsID8gYWN0aW9uIDogXCIuXCI7IC8vIFNoYWxsb3cgY2xvbmUgcGF0aCBzbyB3ZSBjYW4gbW9kaWZ5IGl0IGJlbG93LCBvdGhlcndpc2Ugd2UgbW9kaWZ5IHRoZVxuICAvLyBvYmplY3QgcmVmZXJlbmNlZCBieSB1c2VNZW1vIGluc2lkZSB1c2VSZXNvbHZlZFBhdGhcblxuICBsZXQgcGF0aCA9IF9leHRlbmRzKHt9LCB1c2VSZXNvbHZlZFBhdGgocmVzb2x2ZWRBY3Rpb24sIHtcbiAgICByZWxhdGl2ZVxuICB9KSk7IC8vIFByZXZpb3VzbHkgd2Ugc2V0IHRoZSBkZWZhdWx0IGFjdGlvbiB0byBcIi5cIi4gVGhlIHByb2JsZW0gd2l0aCB0aGlzIGlzIHRoYXRcbiAgLy8gYHVzZVJlc29sdmVkUGF0aChcIi5cIilgIGV4Y2x1ZGVzIHNlYXJjaCBwYXJhbXMgYW5kIHRoZSBoYXNoIG9mIHRoZSByZXNvbHZlZFxuICAvLyBVUkwuIFRoaXMgaXMgdGhlIGludGVuZGVkIGJlaGF2aW9yIG9mIHdoZW4gXCIuXCIgaXMgc3BlY2lmaWNhbGx5IHByb3ZpZGVkIGFzXG4gIC8vIHRoZSBmb3JtIGFjdGlvbiwgYnV0IGluY29uc2lzdGVudCB3LyBicm93c2VycyB3aGVuIHRoZSBhY3Rpb24gaXMgb21pdHRlZC5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZW1peC9pc3N1ZXMvOTI3XG5cblxuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuXG4gIGlmIChhY3Rpb24gPT0gbnVsbCkge1xuICAgIC8vIFNhZmUgdG8gd3JpdGUgdG8gdGhlc2UgZGlyZWN0bHkgaGVyZSBzaW5jZSBpZiBhY3Rpb24gd2FzIHVuZGVmaW5lZCwgd2VcbiAgICAvLyB3b3VsZCBoYXZlIGNhbGxlZCB1c2VSZXNvbHZlZFBhdGgoXCIuXCIpIHdoaWNoIHdpbGwgbmV2ZXIgaW5jbHVkZSBhIHNlYXJjaFxuICAgIC8vIG9yIGhhc2hcbiAgICBwYXRoLnNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICBwYXRoLmhhc2ggPSBsb2NhdGlvbi5oYXNoOyAvLyBXaGVuIGdyYWJiaW5nIHNlYXJjaCBwYXJhbXMgZnJvbSB0aGUgVVJMLCByZW1vdmUgdGhlIGF1dG9tYXRpY2FsbHlcbiAgICAvLyBpbnNlcnRlZCA/aW5kZXggcGFyYW0gc28gd2UgbWF0Y2ggdGhlIHVzZVJlc29sdmVkUGF0aCBzZWFyY2ggYmVoYXZpb3JcbiAgICAvLyB3aGljaCB3b3VsZCBub3QgaW5jbHVkZSA/aW5kZXhcblxuICAgIGlmIChtYXRjaC5yb3V0ZS5pbmRleCkge1xuICAgICAgbGV0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocGF0aC5zZWFyY2gpO1xuICAgICAgcGFyYW1zLmRlbGV0ZShcImluZGV4XCIpO1xuICAgICAgcGF0aC5zZWFyY2ggPSBwYXJhbXMudG9TdHJpbmcoKSA/IFwiP1wiICsgcGFyYW1zLnRvU3RyaW5nKCkgOiBcIlwiO1xuICAgIH1cbiAgfVxuXG4gIGlmICgoIWFjdGlvbiB8fCBhY3Rpb24gPT09IFwiLlwiKSAmJiBtYXRjaC5yb3V0ZS5pbmRleCkge1xuICAgIHBhdGguc2VhcmNoID0gcGF0aC5zZWFyY2ggPyBwYXRoLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgXCI/aW5kZXgmXCIpIDogXCI/aW5kZXhcIjtcbiAgfSAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gIC8vIHRvIGNyZWF0aW5nIHRoZSBmb3JtIGFjdGlvbi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2VcbiAgLy8gdGhlIHJhdyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlXG4gIC8vIHByZXNlbmNlIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBhY3Rpb25zXG5cblxuICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgcGF0aC5wYXRobmFtZSA9IHBhdGgucGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlUGF0aChwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmV0Y2hlckZvcm0oZmV0Y2hlcktleSwgcm91dGVJZCkge1xuICBsZXQgRmV0Y2hlckZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtSW1wbCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByZWY6IHJlZixcbiAgICAgIGZldGNoZXJLZXk6IGZldGNoZXJLZXksXG4gICAgICByb3V0ZUlkOiByb3V0ZUlkXG4gICAgfSkpO1xuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgRmV0Y2hlckZvcm0uZGlzcGxheU5hbWUgPSBcImZldGNoZXIuRm9ybVwiO1xuICB9XG5cbiAgcmV0dXJuIEZldGNoZXJGb3JtO1xufVxuXG5sZXQgZmV0Y2hlcklkID0gMDtcbi8qKlxuICogSW50ZXJhY3RzIHdpdGggcm91dGUgbG9hZGVycyBhbmQgYWN0aW9ucyB3aXRob3V0IGNhdXNpbmcgYSBuYXZpZ2F0aW9uLiBHcmVhdFxuICogZm9yIGFueSBpbnRlcmFjdGlvbiB0aGF0IHN0YXlzIG9uIHRoZSBzYW1lIHBhZ2UuXG4gKi9cblxuZnVuY3Rpb24gdXNlRmV0Y2hlcigpIHtcbiAgdmFyIF9yb3V0ZSRtYXRjaGVzO1xuXG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VGZXRjaGVyKTtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfUm91dGVDb250ZXh0KTtcbiAgIXJvdXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCByb3V0ZUlkID0gKF9yb3V0ZSRtYXRjaGVzID0gcm91dGUubWF0Y2hlc1tyb3V0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdKSA9PSBudWxsID8gdm9pZCAwIDogX3JvdXRlJG1hdGNoZXMucm91dGUuaWQ7XG4gICEocm91dGVJZCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcXFwiaWRcXFwiXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IFtmZXRjaGVyS2V5XSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IFN0cmluZygrK2ZldGNoZXJJZCkpO1xuICBsZXQgW0Zvcm1dID0gUmVhY3QudXNlU3RhdGUoKCkgPT4ge1xuICAgICFyb3V0ZUlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciBmZXRjaGVyLkZvcm0oKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGNyZWF0ZUZldGNoZXJGb3JtKGZldGNoZXJLZXksIHJvdXRlSWQpO1xuICB9KTtcbiAgbGV0IFtsb2FkXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IGhyZWYgPT4ge1xuICAgICFyb3V0ZXIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVyIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5sb2FkKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICFyb3V0ZUlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciBmZXRjaGVyLmxvYWQoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcm91dGVyLmZldGNoKGZldGNoZXJLZXksIHJvdXRlSWQsIGhyZWYpO1xuICB9KTtcbiAgbGV0IHN1Ym1pdCA9IHVzZVN1Ym1pdEltcGwoZmV0Y2hlcktleSwgcm91dGVJZCk7XG4gIGxldCBmZXRjaGVyID0gcm91dGVyLmdldEZldGNoZXIoZmV0Y2hlcktleSk7XG4gIGxldCBmZXRjaGVyV2l0aENvbXBvbmVudHMgPSBSZWFjdC51c2VNZW1vKCgpID0+IF9leHRlbmRzKHtcbiAgICBGb3JtLFxuICAgIHN1Ym1pdCxcbiAgICBsb2FkXG4gIH0sIGZldGNoZXIpLCBbZmV0Y2hlciwgRm9ybSwgc3VibWl0LCBsb2FkXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gSXMgdGhpcyBidXN0ZWQgd2hlbiB0aGUgUmVhY3QgdGVhbSBnZXRzIHJlYWwgd2VpcmQgYW5kIGNhbGxzIGVmZmVjdHNcbiAgICAvLyB0d2ljZSBvbiBtb3VudD8gIFdlIHJlYWxseSBqdXN0IG5lZWQgdG8gZ2FyYmFnZSBjb2xsZWN0IGhlcmUgd2hlbiB0aGlzXG4gICAgLy8gZmV0Y2hlciBpcyBubyBsb25nZXIgYXJvdW5kLlxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoIXJvdXRlcikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJObyBmZXRjaGVyIGF2YWlsYWJsZSB0byBjbGVhbiB1cCBmcm9tIHVzZUZldGNoZXIoKVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByb3V0ZXIuZGVsZXRlRmV0Y2hlcihmZXRjaGVyS2V5KTtcbiAgICB9O1xuICB9LCBbcm91dGVyLCBmZXRjaGVyS2V5XSk7XG4gIHJldHVybiBmZXRjaGVyV2l0aENvbXBvbmVudHM7XG59XG4vKipcbiAqIFByb3ZpZGVzIGFsbCBmZXRjaGVycyBjdXJyZW50bHkgb24gdGhlIHBhZ2UuIFVzZWZ1bCBmb3IgbGF5b3V0cyBhbmQgcGFyZW50XG4gKiByb3V0ZXMgdGhhdCBuZWVkIHRvIHByb3ZpZGUgcGVuZGluZy9vcHRpbWlzdGljIFVJIHJlZ2FyZGluZyB0aGUgZmV0Y2guXG4gKi9cblxuZnVuY3Rpb24gdXNlRmV0Y2hlcnMoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUZldGNoZXJzKTtcbiAgcmV0dXJuIFsuLi5zdGF0ZS5mZXRjaGVycy52YWx1ZXMoKV07XG59XG5jb25zdCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkgPSBcInJlYWN0LXJvdXRlci1zY3JvbGwtcG9zaXRpb25zXCI7XG5sZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSB7fTtcbi8qKlxuICogV2hlbiByZW5kZXJlZCBpbnNpZGUgYSBSb3V0ZXJQcm92aWRlciwgd2lsbCByZXN0b3JlIHNjcm9sbCBwb3NpdGlvbnMgb24gbmF2aWdhdGlvbnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VTY3JvbGxSZXN0b3JhdGlvbihfdGVtcDMpIHtcbiAgbGV0IHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9ID0gX3RlbXAzID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMztcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKTtcbiAgbGV0IHtcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb24sXG4gICAgcHJldmVudFNjcm9sbFJlc2V0XG4gIH0gPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VTY3JvbGxSZXN0b3JhdGlvbik7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBtYXRjaGVzID0gdXNlTWF0Y2hlcygpO1xuICBsZXQgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb24oKTsgLy8gVHJpZ2dlciBtYW51YWwgc2Nyb2xsIHJlc3RvcmF0aW9uIHdoaWxlIHdlJ3JlIGFjdGl2ZVxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcIm1hbnVhbFwiO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwiYXV0b1wiO1xuICAgIH07XG4gIH0sIFtdKTsgLy8gU2F2ZSBwb3NpdGlvbnMgb24gdW5sb2FkXG5cbiAgdXNlQmVmb3JlVW5sb2FkKFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAobmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIGxldCBrZXkgPSAoZ2V0S2V5ID8gZ2V0S2V5KGxvY2F0aW9uLCBtYXRjaGVzKSA6IG51bGwpIHx8IGxvY2F0aW9uLmtleTtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICB9XG5cbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShzYXZlZFNjcm9sbFBvc2l0aW9ucykpO1xuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gIH0sIFtzdG9yYWdlS2V5LCBnZXRLZXksIG5hdmlnYXRpb24uc3RhdGUsIGxvY2F0aW9uLCBtYXRjaGVzXSkpOyAvLyBSZWFkIGluIGFueSBzYXZlZCBzY3JvbGwgbG9jYXRpb25zXG5cbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICB0cnkge1xuICAgICAgbGV0IHNlc3Npb25Qb3NpdGlvbnMgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZKTtcblxuICAgICAgaWYgKHNlc3Npb25Qb3NpdGlvbnMpIHtcbiAgICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBKU09OLnBhcnNlKHNlc3Npb25Qb3NpdGlvbnMpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHsvLyBuby1vcCwgdXNlIGRlZmF1bHQgZW1wdHkgb2JqZWN0XG4gICAgfVxuICB9LCBbc3RvcmFnZUtleV0pOyAvLyBFbmFibGUgc2Nyb2xsIHJlc3RvcmF0aW9uIGluIHRoZSByb3V0ZXJcblxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24gPSByb3V0ZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHJvdXRlci5lbmFibGVTY3JvbGxSZXN0b3JhdGlvbihzYXZlZFNjcm9sbFBvc2l0aW9ucywgKCkgPT4gd2luZG93LnNjcm9sbFksIGdldEtleSk7XG4gICAgcmV0dXJuICgpID0+IGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiAmJiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24oKTtcbiAgfSwgW3JvdXRlciwgZ2V0S2V5XSk7IC8vIFJlc3RvcmUgc2Nyb2xsaW5nIHdoZW4gc3RhdGUucmVzdG9yZVNjcm9sbFBvc2l0aW9uIGNoYW5nZXNcblxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIC8vIEV4cGxpY2l0IGZhbHNlIG1lYW5zIGRvbid0IGRvIGFueXRoaW5nICh1c2VkIGZvciBzdWJtaXNzaW9ucylcbiAgICBpZiAocmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gYmVlbiBoZXJlIGJlZm9yZSwgc2Nyb2xsIHRvIGl0XG5cblxuICAgIGlmICh0eXBlb2YgcmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBcIm51bWJlclwiKSB7XG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIHRyeSB0byBzY3JvbGwgdG8gdGhlIGhhc2hcblxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGxldCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGxvY2F0aW9uLmhhc2guc2xpY2UoMSkpO1xuXG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgZWwuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gLy8gT3B0IG91dCBvZiBzY3JvbGwgcmVzZXQgaWYgdGhpcyBsaW5rIHJlcXVlc3RlZCBpdFxuXG5cbiAgICBpZiAocHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBvdGhlcndpc2UgZ28gdG8gdGhlIHRvcCBvbiBuZXcgbG9jYXRpb25zXG5cblxuICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgfSwgW2xvY2F0aW9uLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24sIHByZXZlbnRTY3JvbGxSZXNldF0pO1xufVxuXG5mdW5jdGlvbiB1c2VCZWZvcmVVbmxvYWQoY2FsbGJhY2spIHtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGNhbGxiYWNrKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2tdKTtcbn0gLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFV0aWxzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IFJvdXRlciFcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGVycm9yIGlzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHlvdSBjYW4gbW9yZSBlYXNpbHlcbiAgICAgIC8vIGZpbmQgdGhlIHNvdXJjZSBmb3IgYSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieVxuICAgICAgLy8gZW5hYmxpbmcgXCJwYXVzZSBvbiBleGNlcHRpb25zXCIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59IC8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBGb3JtLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rLCBTY3JvbGxSZXN0b3JhdGlvbiwgY3JlYXRlQnJvd3NlclJvdXRlciwgY3JlYXRlSGFzaFJvdXRlciwgY3JlYXRlU2VhcmNoUGFyYW1zLCBIaXN0b3J5Um91dGVyIGFzIHVuc3RhYmxlX0hpc3RvcnlSb3V0ZXIsIHVzZUZldGNoZXIsIHVzZUZldGNoZXJzLCB1c2VGb3JtQWN0aW9uLCB1c2VMaW5rQ2xpY2tIYW5kbGVyLCB1c2VTZWFyY2hQYXJhbXMsIHVzZVN1Ym1pdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7XG5leHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fTtcbmV4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4yLjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBmKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDswPGM7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZigwPGcoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIGgoYSl7cmV0dXJuIDA9PT1hLmxlbmd0aD9udWxsOmFbMF19ZnVuY3Rpb24gayhhKXtpZigwPT09YS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGI9YVswXSxjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGgsdz1lPj4+MTtkPHc7KXt2YXIgbT0yKihkKzEpLTEsQz1hW21dLG49bSsxLHg9YVtuXTtpZigwPmcoQyxjKSluPGUmJjA+Zyh4LEMpPyhhW2RdPXgsYVtuXT1jLGQ9bik6KGFbZF09QyxhW21dPWMsZD1tKTtlbHNlIGlmKG48ZSYmMD5nKHgsYykpYVtkXT14LGFbbl09YyxkPW47ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fXZhciByPVtdLHQ9W10sdT0xLHY9bnVsbCx5PTMsej0hMSxBPSExLEI9ITEsRD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om51bGwsRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpudWxsLEY9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOm51bGw7XG5cInVuZGVmaW5lZFwiIT09dHlwZW9mIG5hdmlnYXRvciYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcmJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nJiZuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtmdW5jdGlvbiBHKGEpe2Zvcih2YXIgYj1oKHQpO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spayh0KTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKWsodCksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxmKHIsYik7ZWxzZSBicmVhaztiPWgodCl9fWZ1bmN0aW9uIEgoYSl7Qj0hMTtHKGEpO2lmKCFBKWlmKG51bGwhPT1oKHIpKUE9ITAsSShKKTtlbHNle3ZhciBiPWgodCk7bnVsbCE9PWImJksoSCxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBKKGEsYil7QT0hMTtCJiYoQj0hMSxFKEwpLEw9LTEpO3o9ITA7dmFyIGM9eTt0cnl7RyhiKTtmb3Iodj1oKHIpO251bGwhPT12JiYoISh2LmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhTSgpKTspe3ZhciBkPXYuY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3YuY2FsbGJhY2s9bnVsbDt5PXYucHJpb3JpdHlMZXZlbDt2YXIgZT1kKHYuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT92LmNhbGxiYWNrPWU6dj09PWgocikmJmsocik7RyhiKX1lbHNlIGsocik7dj1oKHIpfWlmKG51bGwhPT12KXZhciB3PSEwO2Vsc2V7dmFyIG09aCh0KTtudWxsIT09bSYmSyhILG0uc3RhcnRUaW1lLWIpO3c9ITF9cmV0dXJuIHd9ZmluYWxseXt2PW51bGwseT1jLHo9ITF9fXZhciBOPSExLE89bnVsbCxMPS0xLFA9NSxRPS0xO1xuZnVuY3Rpb24gTSgpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpLVE8UD8hMTohMH1mdW5jdGlvbiBSKCl7aWYobnVsbCE9PU8pe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7UT1hO3ZhciBiPSEwO3RyeXtiPU8oITAsYSl9ZmluYWxseXtiP1MoKTooTj0hMSxPPW51bGwpfX1lbHNlIE49ITF9dmFyIFM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEYpUz1mdW5jdGlvbigpe0YoUil9O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1SO1M9ZnVuY3Rpb24oKXtVLnBvc3RNZXNzYWdlKG51bGwpfX1lbHNlIFM9ZnVuY3Rpb24oKXtEKFIsMCl9O2Z1bmN0aW9uIEkoYSl7Tz1hO058fChOPSEwLFMoKSl9ZnVuY3Rpb24gSyhhLGIpe0w9RChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe0F8fHp8fChBPSEwLEkoSikpfTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOlA9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4geX07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBoKHIpfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKHkpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPXl9dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXt5PWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtcbmV4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPXk7eT1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7eT1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOnUrKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLGYodCxhKSxudWxsPT09aChyKSYmYT09PWgodCkmJihCPyhFKEwpLEw9LTEpOkI9ITAsSyhILGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxmKHIsYSksQXx8enx8KEE9ITAsSShKKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9TTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj15O3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXt5PWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Db2RlUGFuZWwuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ29kZVBhbmVsLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRGVtb1BhZ2UuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRGVtb1BhZ2UuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanMhLi9JY29uVGFiQmFyLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0ljb25UYWJCYXIuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanMhLi9PYmplY3RIZWFkZXJBdHRyaWJ1dGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vT2JqZWN0SGVhZGVyQXR0cmlidXRlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUGFnZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanMhLi9QYWdlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vVG9vbGJhci5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Ub29sYmFyLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgeyBTaGVsbEJhciB9IGZyb20gJy4uL2xpYi9jb21wb25lbnRzL3NoZWxsYmFyL1NoZWxsQmFyJ1xyXG5cclxuZXhwb3J0IGNvbnN0IEFwcEhlYWRlciA9ICgpID0+IHtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxTaGVsbEJhciAvPlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCwgeyBSZWFjdEVsZW1lbnQgfSBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICcuLi9saWIvY29tcG9uZW50cy9wYWdlL1BhZ2UnXHJcbmltcG9ydCB7IFBhZ2VCb2R5IH0gZnJvbSAnLi4vbGliL2NvbXBvbmVudHMvcGFnZS9QYWdlQm9keSdcclxuaW1wb3J0IHsgUGFnZUhlYWRlciB9IGZyb20gJy4uL2xpYi9jb21wb25lbnRzL3BhZ2UvUGFnZUhlYWRlcidcclxuZXhwb3J0IGludGVyZmFjZSBBcHBNYWluQ29udGVudFByb3BlcnRpZXMge1xyXG4gIGNoaWxkcmVuPzogUmVhY3RFbGVtZW50IHwgUmVhY3RFbGVtZW50W11cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEFwcE1haW5Db250ZW50ID0gKHtcclxuICBjaGlsZHJlblxyXG59OiBBcHBNYWluQ29udGVudFByb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXZcclxuICAgICAgc3R5bGU9e3tcclxuICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxyXG4gICAgICAgIG92ZXJmbG93OiAnYXV0bycsXHJcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXHJcbiAgICAgICAgcGFkZGluZzogJzFyZW0gNHJlbSdcclxuICAgICAgfX1cclxuICAgID5cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC9kaXY+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcblxyXG5pbXBvcnQgeyBWZXJ0aWNhbE5hdmlnYXRpb24gfSBmcm9tICcuLi9saWIvY29tcG9uZW50cy92ZXJ0aWNhbG5hdmlnYXRpb24vVmVydGljYWxOYXZpZ2F0aW9uJ1xyXG5pbXBvcnQgeyBDT01QT05FTlRTIH0gZnJvbSAnLi4vbGliL2luZGV4LWRlbW9zJ1xyXG5cclxuZXhwb3J0IGNvbnN0IEFwcFNpZGVQYW5lbCA9ICgpID0+IHtcclxuXHJcbiAgLy8gSG9va3MgLy9cclxuXHJcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpXHJcblxyXG4gIC8vIEV2ZW50cyAvL1xyXG5cclxuICBjb25zdCBvbkNvbXBvbmVudENsaWNrZWQgPSAoY29tcG9uZW50OiBzdHJpbmcpID0+IHtcclxuICAgIGlmIChjb21wb25lbnQgIT09ICdjb21wb25lbnRzJykge1xyXG4gICAgICBuYXZpZ2F0ZShgL2RlbW8vJHtjb21wb25lbnR9YClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPFZlcnRpY2FsTmF2aWdhdGlvblxyXG4gICAgICBsYWJlbD0nTmF2aWdhdGlvbidcclxuICAgICAgaXRlbXNMYWJlbD0nQ29yZSBOYXZpZ2F0aW9uJ1xyXG4gICAgICBpdGVtcz17W1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnY29tcG9uZW50cycsXHJcbiAgICAgICAgICB0ZXh0OiAnQ29tcG9uZW50cycsXHJcbiAgICAgICAgICBnbHlwaDogJ2ZvbGRlci1ibGFuaycsXHJcbiAgICAgICAgICBleHBhbmRlZDogdHJ1ZSxcclxuICAgICAgICAgIGl0ZW1zOiBDT01QT05FTlRTLm1hcCgoY29tcG8pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAuLi5jb21wbyxcclxuICAgICAgICAgICAgICBnbHlwaDogJ2RvY3VtZW50LXRleHQnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICBdfVxyXG4gICAgICBvbkl0ZW1TZWxlY3Q9e29uQ29tcG9uZW50Q2xpY2tlZH1cclxuICAgIC8+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0RWxlbWVudCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCAnLi9Db2RlUGFuZWwuY3NzJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb2RlUGFuZWxQcm9wZXJ0aWVzIHtcclxuICB0aXRsZT86IHN0cmluZ1xyXG4gIHJlc3VsdD86IFJlYWN0RWxlbWVudCB8IFJlYWN0RWxlbWVudFtdXHJcbiAgY29kZT86IFJlYWN0RWxlbWVudCB8IFJlYWN0RWxlbWVudFtdXHJcbn1cclxuZXhwb3J0IGNvbnN0IENvZGVQYW5lbCA9ICh7XHJcbiAgdGl0bGUsXHJcbiAgcmVzdWx0LFxyXG4gIGNvZGUsXHJcbn06IENvZGVQYW5lbFByb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgLy8gSG9va3MgLy9cclxuXHJcbiAgY29uc3QgW3Nob3dDb2RlLCBzZXRTaG93Q29kZV0gPSB1c2VTdGF0ZShmYWxzZSlcclxuXHJcbiAgLy8gRXZlbnRzIC8vXHJcblxyXG4gIGNvbnN0IG9uU2hvd0NvZGUgPSAoKSA9PiB7XHJcbiAgICBzZXRTaG93Q29kZSghc2hvd0NvZGUpXHJcbiAgfVxyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPSdjb2RlLXBhbmVsJz5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9J2hlYWRlcic+XHJcbiAgICAgICAge3RpdGxlfVxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9J3JlbmRlcmluZyc+XHJcbiAgICAgICAge3Jlc3VsdH1cclxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnV0dG9uLXNob3cnIG9uQ2xpY2s9e29uU2hvd0NvZGV9PlxyXG4gICAgICAgICAge3Nob3dDb2RlID8gJ0hpZGUgQ29kZScgOiAnU2hvdyBDb2RlJ31cclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIHtzaG93Q29kZSA/XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvZGUnPlxyXG4gICAgICAgICAge2NvZGV9XHJcbiAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnV0dG9uLWNvcHknPkNvcHk8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA6IG51bGx9XHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0RWxlbWVudCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBBY2NlbnRDb2xvciwgQWNjZW50Q29sb3JzLCBJbmZvTGFiZWwsIFRhYmxlLCBUaXRsZSwgVGl0bGVMZXZlbHMgfSBmcm9tICcuLi8uLi9saWInXHJcbmltcG9ydCB7IENvZGVQYW5lbCB9IGZyb20gJy4uL2NvbW1vbi9Db2RlUGFuZWwnXHJcblxyXG5pbXBvcnQgJy4vRGVtb1BhZ2UuY3NzJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEZW1vUGFnZVByb3BlcnRpZXMge1xyXG4gIHRpdGxlOiBzdHJpbmdcclxuICBsYWJlbHM6IERlbW9QYWdlTGFiZWxbXVxyXG4gIGRlc2NyaXB0aW9uOiBSZWFjdEVsZW1lbnQgfCBSZWFjdEVsZW1lbnRbXSB8IHN0cmluZ1xyXG4gIHByb3BzOiBEZW1vUGFnZVByb3BbXVxyXG4gIGV4YW1wbGVzOiBEZW1vUGFnZUV4YW1wbGVbXVxyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgRGVtb1BhZ2VMYWJlbCB7XHJcbiAgdGV4dDogc3RyaW5nXHJcbiAgYWNjZW50Q29sb3I6IEFjY2VudENvbG9yXHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBEZW1vUGFnZVByb3Age1xyXG4gIGlkOiBzdHJpbmdcclxuICB0eXBlOiBzdHJpbmdcclxuICBkZXNjcmlwdGlvbjogc3RyaW5nXHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBEZW1vUGFnZUV4YW1wbGUge1xyXG4gIHRpdGxlOiBzdHJpbmdcclxuICBkZXNjcmlwdGlvbjogc3RyaW5nXHJcbiAgcmVzdWx0OiBSZWFjdEVsZW1lbnQgfCBSZWFjdEVsZW1lbnRbXVxyXG4gIGNvZGU6IFJlYWN0RWxlbWVudCB8IFJlYWN0RWxlbWVudFtdXHJcbn1cclxuZXhwb3J0IGNvbnN0IERlbW9QYWdlID0gKHtcclxuICB0aXRsZSxcclxuICBsYWJlbHMsXHJcbiAgZGVzY3JpcHRpb24sXHJcbiAgcHJvcHMsXHJcbiAgZXhhbXBsZXMsXHJcbn06IERlbW9QYWdlUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPSdkZW1vLXBhZ2UnPlxyXG4gICAgICA8VGl0bGVcclxuICAgICAgICB0ZXh0PXt0aXRsZX1cclxuICAgICAgLz5cclxuXHJcbiAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2ZsZXgnLCBnYXA6ICcwLjI1cmVtJywgZmxleFdyYXA6ICd3cmFwJyB9fT5cclxuICAgICAgICB7bGFiZWxzLm1hcChsYWJlbCA9PiAoXHJcbiAgICAgICAgICA8SW5mb0xhYmVsIGtleT17bGFiZWwudGV4dH0gey4uLmxhYmVsfSAvPlxyXG4gICAgICAgICkpfVxyXG4gICAgICA8L2Rpdj5cclxuXHJcbiAgICAgIDxUaXRsZVxyXG4gICAgICAgIHRleHQ9J1Byb3BlcnRpZXMnXHJcbiAgICAgICAgbGV2ZWw9e1RpdGxlTGV2ZWxzLkgyfVxyXG4gICAgICAvPlxyXG5cclxuICAgICAgPHA+XHJcbiAgICAgICAge2Rlc2NyaXB0aW9ufVxyXG4gICAgICA8L3A+XHJcblxyXG4gICAgICA8VGFibGVcclxuICAgICAgICBjb2x1bW5zPXtbXHJcbiAgICAgICAgICB7IGtleTogJ2lkJywgbmFtZTogJ1Byb3BlcnR5JywgZm9ybWF0dGVyOiBwcm9wID0+IDxzdHJvbmc+e3Byb3AuaWR9PC9zdHJvbmc+IH0sXHJcbiAgICAgICAgICB7IGtleTogJ3R5cGUnLCBuYW1lOiAnVHlwZScgfSxcclxuICAgICAgICAgIHsga2V5OiAnZGVzY3JpcHRpb24nLCBuYW1lOiAnRGVzY3JpcHRpb24nIH0sXHJcbiAgICAgICAgXX1cclxuICAgICAgICBjb21wYWN0XHJcbiAgICAgICAgcm93cz17cHJvcHMubWFwKHByb3AgPT4gKHsgZGF0YTogcHJvcCB9KSl9XHJcbiAgICAgIC8+XHJcblxyXG4gICAgICA8VGl0bGVcclxuICAgICAgICB0ZXh0PSdFeGFtcGxlcydcclxuICAgICAgICBsZXZlbD17VGl0bGVMZXZlbHMuSDJ9XHJcbiAgICAgIC8+XHJcblxyXG4gICAgICB7ZXhhbXBsZXMubWFwKGV4YW1wbGUgPT4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICA8VGl0bGVcclxuICAgICAgICAgICAgdGV4dD17ZXhhbXBsZS50aXRsZX1cclxuICAgICAgICAgICAgbGV2ZWw9e1RpdGxlTGV2ZWxzLkgzfVxyXG4gICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICA8cD57ZXhhbXBsZS5kZXNjcmlwdGlvbn08L3A+XHJcblxyXG4gICAgICAgICAgPENvZGVQYW5lbFxyXG4gICAgICAgICAgICB0aXRsZT0nJ1xyXG4gICAgICAgICAgICByZXN1bHQ9e2V4YW1wbGUucmVzdWx0fVxyXG4gICAgICAgICAgICBjb2RlPXtleGFtcGxlLmNvZGV9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvPlxyXG4gICAgICApKX1cclxuICAgIDwvZGl2PlxyXG4gIClcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgY29uc3QgQXZhdGFyRGVtbyA9ICgpID0+IHtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXY+QVZBVEFSPC9kaXY+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuZXhwb3J0IGNvbnN0IEJhZGdlRGVtbyA9ICgpID0+IHtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXY+QkFER0U8L2Rpdj5cclxuICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgY29uc3QgQmFyRGVtbyA9ICgpID0+IHtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXY+QkFSPC9kaXY+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuZXhwb3J0IGNvbnN0IEJ1dHRvbkRlbW8gPSAoKSA9PiB7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PkJVVFRPTjwvZGl2PlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBjb25zdCBDYWxlbmRhckRlbW8gPSAoKSA9PiB7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PkNBTEVOREFSPC9kaXY+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuZXhwb3J0IGNvbnN0IENhcmREZW1vID0gKCkgPT4ge1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdj5DQVJEPC9kaXY+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuZXhwb3J0IGNvbnN0IERpYWxvZ0RlbW8gPSAoKSA9PiB7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PkRJQUxPRzwvZGl2PlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBjb25zdCBGb3JtRGVtbyA9ICgpID0+IHtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXY+Rk9STTwvZGl2PlxyXG4gIClcclxufSIsImltcG9ydCB7IEFjY2VudENvbG9ycywgSWNvblRhYkJhciB9IGZyb20gJ2xpYidcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuaW1wb3J0IHsgRGVtb1BhZ2UgfSBmcm9tICcuLi9jb21tb24vRGVtb1BhZ2UnXHJcblxyXG5jb25zdCBERU1PX0RBVEEgPSB7XHJcbiAgdGl0bGU6ICdJY29uIFRhYiBCYXInLFxyXG4gIGxhYmVsczogW1xyXG4gICAgeyB0ZXh0OiAndmVyc2lvbiAwLjAuMycsIGFjY2VudENvbG9yOiBBY2NlbnRDb2xvcnMuQ09MT1JfOCB9LFxyXG4gICAgeyB0ZXh0OiAnaW4gcHJvZ3Jlc3MnLCBhY2NlbnRDb2xvcjogQWNjZW50Q29sb3JzLkNPTE9SXzUgfSxcclxuICAgIHsgdGV4dDogJ3RoZW1hYmxlJywgYWNjZW50Q29sb3I6IEFjY2VudENvbG9ycy5DT0xPUl8zIH1cclxuICBdLFxyXG4gIGRlc2NyaXB0aW9uOiAnSW5mbyBMYWJlbCBpcyBhIHNtYWxsIG5vbi1pbnRlcmFjdGl2ZSBudW1lcmljIG9yIHRleHQtYmFzZWQgbGFiZWwuIEl0cyBwcmltYXJ5IHVzZSBpcyB0byBhZGQgdXNlci1kZWZpbmVkIGNoYXJhY3RlcmlzdGljIHRvIGFuIG9iamVjdC4nLFxyXG4gIHByb3BzOiBbXHJcbiAgICB7IGlkOiAnc2VsZWN0ZWRUYWInLCB0eXBlOiAnYm9vbGVhbicsIGRlc2NyaXB0aW9uOiAnVGhlIGlkZW50aWZpZXIgb2YgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0YWInIH0sXHJcbiAgICB7IGlkOiAndGFicycsIHR5cGU6ICdJY29uVGFiQmFySXRlbVByb3BlcnRpZXNbXScsIGRlc2NyaXB0aW9uOiAnTGlzdCBvZiB0YWJzIHRvIGRpc3BsYXknIH0sXHJcbiAgICB7IGlkOiAnb25UYWJTZWxlY3QnLCB0eXBlOiAnQ2FsbGJhY2sgKHN0cmluZykgPT4gdm9pZCcsIGRlc2NyaXB0aW9uOiAnRXZlbnQgY2FsbGVkIHdoZW4gYSB0YWIgaXMgc2VsZWN0ZWQnIH0sXHJcbiAgXSxcclxuICBleGFtcGxlczogW3tcclxuICAgIHRpdGxlOiAnVGV4dCBPbmx5IChJbmxpbmUgbW9kZSknLFxyXG4gICAgZGVzY3JpcHRpb246ICdUaGUgdGV4dC1vbmx5IHZhcmlhbnQgaXMgb25lIG9mIHRoZSBtb3N0IGNvbW1vbiB0eXBlcy4gSXQgYWxsb3dzIGxvbmdlciBsYWJlbHMsIGFuZCBjYW4gYWxzbyBkaXNwbGF5IGNvdW50ZXJzIG5leHQgdG8gdGhlIHRleHQgdG8gaW5kaWNhdGUgdGhlIG51bWJlciBvZiBpdGVtcyBvbiB0aGUgdGFiIHBhZ2UuIFRoZSBsYWJlbHMgb2YgdGhlIHRhYnMgZG8gbm90IGdldCB0cnVuY2F0ZWQuIFRoZSBmdWxsIHRleHQgaXMgYWx3YXlzIHNob3duLiBBcyBhIHJlc3VsdCwgeW91IG5lZWQgdG8gZW5zdXJlIHRoYXQgeW91ciBsYWJlbHMgZG8gbm90IGJlY29tZSB0b28gbG9uZy4gVGhleSBzaG91bGQgc3RpbGwgYmUgZWFzeSB0byByZWFkIG9uIHNtYWxsZXIgc2NyZWVucy4gVGhlIGNvbnRyb2wgaGFzIHRoZSBzYW1lIGxvb2sgYW5kIGZlZWwgaW4gQ296eSBhbmQgQ29tcGFjdCBtb2RlLicsXHJcbiAgICByZXN1bHQ6IChcclxuICAgICAgPEljb25UYWJCYXJcclxuICAgICAgICBzZWxlY3RlZFRhYj0ndGFiMSdcclxuICAgICAgICB0YWJzPXtbXHJcbiAgICAgICAgICB7IGlkOiAndGFiMScsIHRpdGxlOiAnSW5mbycgfSxcclxuICAgICAgICAgIHsgaWQ6ICd0YWIyJywgdGl0bGU6ICdBdHRhY2hlbWVudHMgKDE2KScgfSxcclxuICAgICAgICAgIHsgaWQ6ICd0YWIzJywgdGl0bGU6ICdBcHByb3ZhbHMgKDQyKScgfSxcclxuICAgICAgICBdfVxyXG4gICAgICAvPlxyXG4gICAgKSxcclxuICAgIGNvZGU6IChcclxuICAgICAgPGRpdiBzdHlsZT17eyB3aGl0ZVNwYWNlOiAncHJlJyB9fT5cclxuICAgICAgICA8ZGl2PntgPEljb25UYWJCYXJgfTwvZGl2PlxyXG4gICAgICAgIDxkaXY+e2AgIHNlbGVjdGVkVGFiPSd0YWIxJ2B9PC9kaXY+XHJcbiAgICAgICAgPGRpdj57YCAgdGFicz17W2B9PC9kaXY+XHJcbiAgICAgICAgPGRpdj57YCAgICB7IGlkOiAndGFiMScsIHRpdGxlOiAnSW5mbycgfSxgfTwvZGl2PlxyXG4gICAgICAgIDxkaXY+e2AgICAgeyBpZDogJ3RhYjInLCB0aXRsZTogJ0F0dGFjaGVtZW50cyAoMTYpJyB9LGB9PC9kaXY+XHJcbiAgICAgICAgPGRpdj57YCAgICB7IGlkOiAndGFiMycsIHRpdGxlOiAnQXBwcm92YWxzICg0MiknIH0sYH08L2Rpdj5cclxuICAgICAgICA8ZGl2PntgICBdfWB9PC9kaXY+XHJcbiAgICAgICAgPGRpdj57YC8+YH08L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfV1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEljb25UYWJCYXJEZW1vID0gKCkgPT4ge1xyXG4gIHJldHVybiA8RGVtb1BhZ2Ugey4uLkRFTU9fREFUQX0gLz5cclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCB7IEFjY2VudENvbG9ycywgSW5mb0xhYmVsIH0gZnJvbSAnLi4vLi4vbGliJ1xyXG5pbXBvcnQgeyBEZW1vUGFnZSB9IGZyb20gJy4uL2NvbW1vbi9EZW1vUGFnZSdcclxuXHJcbmNvbnN0IERFTU9fREFUQSA9IHtcclxuICB0aXRsZTogJ0luZm8gTGFiZWwnLFxyXG4gIGxhYmVsczogW1xyXG4gICAgeyB0ZXh0OiAndmVyc2lvbiAwLjAuMycsIGFjY2VudENvbG9yOiBBY2NlbnRDb2xvcnMuQ09MT1JfOCB9LFxyXG4gICAgeyB0ZXh0OiAncmV2aWV3ZWQgMC4wLjMnLCBhY2NlbnRDb2xvcjogQWNjZW50Q29sb3JzLkNPTE9SXzYgfSxcclxuICAgIHsgdGV4dDogJ3RoZW1hYmxlJywgYWNjZW50Q29sb3I6IEFjY2VudENvbG9ycy5DT0xPUl8zIH1cclxuICBdLFxyXG4gIGRlc2NyaXB0aW9uOiAnSW5mbyBMYWJlbCBpcyBhIHNtYWxsIG5vbi1pbnRlcmFjdGl2ZSBudW1lcmljIG9yIHRleHQtYmFzZWQgbGFiZWwuIEl0cyBwcmltYXJ5IHVzZSBpcyB0byBhZGQgdXNlci1kZWZpbmVkIGNoYXJhY3RlcmlzdGljIHRvIGFuIG9iamVjdC4gVXNlIHRoZSBJbmZvIExhYmVsIGJhc2UgY2xhc3Mgd2l0aCBmb2xsb3dpbmcgbW9kaWZpZXJzOicsXHJcbiAgcHJvcHM6IFtcclxuICAgIHsgaWQ6ICdpY29uJywgdHlwZTogJ3N0cmluZycsIGRlc2NyaXB0aW9uOiAnKE9wdGlvbmFsKSBJZiBwcm92aWRlZCwgYW4gaWNvbiB3aWxsIGJlIGRpc3BsYXllZCBhcyB0aGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgSW5mbyBMYWJlbCcgfSxcclxuICAgIHsgaWQ6ICd0ZXh0JywgdHlwZTogJ3N0cmluZycsIGRlc2NyaXB0aW9uOiAnKE9wdGlvbmFsKSBJZiBwcm92aWRlZCwgYSB0ZXh0IHdpbGwgYmUgZGlzcGxheWVkIGluIHRoZSBJbmZvIExhYmVsJyB9LFxyXG4gICAgeyBpZDogJ2Rpc3BsYXknLCB0eXBlOiAnYm9vbGVhbicsIGRlc2NyaXB0aW9uOiAnKE9wdGlvbmFsKSBBcHBseSB0aGUgZGVmYXVsdCBzdHlsaW5nIHRvIHRoZSBJbmZvIExhYmVsJyB9LFxyXG4gICAgeyBpZDogJ251bWVyaWMnLCB0eXBlOiAnYm9vbGVhbicsIGRlc2NyaXB0aW9uOiAnKE9wdGlvbmFsKSBTdWJidGxlIHN0eWxlIG1vZGlmaWNhdGlvbiB0byBlbmhhbmNlIGRpc3BsYXkgaW4gY2FzZSBvZiBudW1lcmljIGluZm9ybWF0aW9uJyB9LFxyXG4gICAgeyBpZDogJ2FjY2VudENvbG9yJywgdHlwZTogJ0FjY2VudENvbG9yJywgZGVzY3JpcHRpb246ICcoT3B0aW9uYWwpIEFwcGx5IHNlbWFudGljIGNvbG9yIHRvIEluZm8gTGFiZWwnIH0sXHJcbiAgXSxcclxuICBleGFtcGxlczogW3tcclxuICAgIHRpdGxlOiAnQ29sb3IgRmxhdm9ycycsXHJcbiAgICBkZXNjcmlwdGlvbjogJ1VzZSB0aGUgZmQtaW5mby1sYWJlbC0tYWNjZW50LWNvbG9yLSogbW9kaWZpZXIgY2xhc3MgdG8gYXBwbHkgc2VtYW50aWMgY29sb3IgdG8gSW5mbyBMYWJlbC4gT3B0aW9ucyBpbmNsdWRlIG51bWJlcnMgZnJvbSAxIHRvIDEwLicsXHJcbiAgICByZXN1bHQ6IChcclxuICAgICAgPGRpdiBzdHlsZT17eyBkaXNwbGF5OiAnZmxleCcsIGdhcDogJzAuMjVyZW0nLCBmbGV4V3JhcDogJ3dyYXAnIH19PlxyXG4gICAgICAgIDxJbmZvTGFiZWwgdGV4dD0nY29sb3IgMScgYWNjZW50Q29sb3I9e0FjY2VudENvbG9ycy5DT0xPUl8xfSAvPlxyXG4gICAgICAgIDxJbmZvTGFiZWwgdGV4dD0nY29sb3IgMicgYWNjZW50Q29sb3I9e0FjY2VudENvbG9ycy5DT0xPUl8yfSAvPlxyXG4gICAgICAgIDxJbmZvTGFiZWwgdGV4dD0nY29sb3IgMycgYWNjZW50Q29sb3I9e0FjY2VudENvbG9ycy5DT0xPUl8zfSAvPlxyXG4gICAgICAgIDxJbmZvTGFiZWwgdGV4dD0nY29sb3IgNCcgYWNjZW50Q29sb3I9e0FjY2VudENvbG9ycy5DT0xPUl80fSAvPlxyXG4gICAgICAgIDxJbmZvTGFiZWwgdGV4dD0nY29sb3IgNScgYWNjZW50Q29sb3I9e0FjY2VudENvbG9ycy5DT0xPUl81fSAvPlxyXG4gICAgICAgIDxJbmZvTGFiZWwgdGV4dD0nY29sb3IgNicgYWNjZW50Q29sb3I9e0FjY2VudENvbG9ycy5DT0xPUl82fSAvPlxyXG4gICAgICAgIDxJbmZvTGFiZWwgdGV4dD0nY29sb3IgNycgYWNjZW50Q29sb3I9e0FjY2VudENvbG9ycy5DT0xPUl83fSAvPlxyXG4gICAgICAgIDxJbmZvTGFiZWwgdGV4dD0nY29sb3IgOCcgYWNjZW50Q29sb3I9e0FjY2VudENvbG9ycy5DT0xPUl84fSAvPlxyXG4gICAgICAgIDxJbmZvTGFiZWwgdGV4dD0nY29sb3IgOScgYWNjZW50Q29sb3I9e0FjY2VudENvbG9ycy5DT0xPUl85fSAvPlxyXG4gICAgICAgIDxJbmZvTGFiZWwgdGV4dD0nY29sb3IgMTAnIGFjY2VudENvbG9yPXtBY2NlbnRDb2xvcnMuQ09MT1JfMTB9IC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKSxcclxuICAgIGNvZGU6IChcclxuICAgICAgPGRpdj5cclxuICAgICAgICA8ZGl2PntgPEluZm9MYWJlbCB0ZXh0PSdjb2xvciAxJyBhY2NlbnRDb2xvcj17QWNjZW50Q29sb3JzLkNPTE9SXzF9IC8+YH08L2Rpdj5cclxuICAgICAgICA8ZGl2PntgPEluZm9MYWJlbCB0ZXh0PSdjb2xvciAyJyBhY2NlbnRDb2xvcj17QWNjZW50Q29sb3JzLkNPTE9SXzJ9IC8+YH08L2Rpdj5cclxuICAgICAgICA8ZGl2PntgPEluZm9MYWJlbCB0ZXh0PSdjb2xvciAzJyBhY2NlbnRDb2xvcj17QWNjZW50Q29sb3JzLkNPTE9SXzN9IC8+YH08L2Rpdj5cclxuICAgICAgICA8ZGl2PntgPEluZm9MYWJlbCB0ZXh0PSdjb2xvciA0JyBhY2NlbnRDb2xvcj17QWNjZW50Q29sb3JzLkNPTE9SXzR9IC8+YH08L2Rpdj5cclxuICAgICAgICA8ZGl2PntgPEluZm9MYWJlbCB0ZXh0PSdjb2xvciA1JyBhY2NlbnRDb2xvcj17QWNjZW50Q29sb3JzLkNPTE9SXzV9IC8+YH08L2Rpdj5cclxuICAgICAgICA8ZGl2PntgPEluZm9MYWJlbCB0ZXh0PSdjb2xvciA2JyBhY2NlbnRDb2xvcj17QWNjZW50Q29sb3JzLkNPTE9SXzZ9IC8+YH08L2Rpdj5cclxuICAgICAgICA8ZGl2PntgPEluZm9MYWJlbCB0ZXh0PSdjb2xvciA3JyBhY2NlbnRDb2xvcj17QWNjZW50Q29sb3JzLkNPTE9SXzd9IC8+YH08L2Rpdj5cclxuICAgICAgICA8ZGl2PntgPEluZm9MYWJlbCB0ZXh0PSdjb2xvciA4JyBhY2NlbnRDb2xvcj17QWNjZW50Q29sb3JzLkNPTE9SXzh9IC8+YH08L2Rpdj5cclxuICAgICAgICA8ZGl2PntgPEluZm9MYWJlbCB0ZXh0PSdjb2xvciA5JyBhY2NlbnRDb2xvcj17QWNjZW50Q29sb3JzLkNPTE9SXzl9IC8+YH08L2Rpdj5cclxuICAgICAgICA8ZGl2PntgPEluZm9MYWJlbCB0ZXh0PSdjb2xvciAxMCcgYWNjZW50Q29sb3I9e0FjY2VudENvbG9ycy5DT0xPUl8xMH0gLz5gfTwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9LCB7XHJcbiAgICB0aXRsZTogJ0luZm8gTGFiZWwgd2l0aCBJY29uJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnVXNlIHRoZSBmZC1pbmZvLWxhYmVsLS1pY29uIG1vZGlmaWVyIGNsYXNzIGFuZCBpY29uIHR5cGUgdG8gY3JlYXRlIEluZm8gTGFiZWwgd2l0aCBJY29uLicsXHJcbiAgICByZXN1bHQ6IChcclxuICAgICAgPGRpdiBzdHlsZT17eyBkaXNwbGF5OiAnZmxleCcsIGdhcDogJzAuMjVyZW0nLCBmbGV4V3JhcDogJ3dyYXAnIH19PlxyXG4gICAgICAgIDxJbmZvTGFiZWwgdGV4dD0nSW5mbyBMYWJlbCcgaWNvbj0ncGFzdCcgYWNjZW50Q29sb3I9e0FjY2VudENvbG9ycy5DT0xPUl8xfSAvPlxyXG4gICAgICAgIDxJbmZvTGFiZWwgaWNvbj0nYWN0aW9uJyBhY2NlbnRDb2xvcj17QWNjZW50Q29sb3JzLkNPTE9SXzJ9IC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKSxcclxuICAgIGNvZGU6IChcclxuICAgICAgPGRpdj5cclxuICAgICAgICA8ZGl2PntgPEluZm9MYWJlbCB0ZXh0PSdJbmZvIExhYmVsJyBpY29uPSdwYXN0JyBhY2NlbnRDb2xvcj17QWNjZW50Q29sb3JzLkNPTE9SXzF9IC8+YH08L2Rpdj5cclxuICAgICAgICA8ZGl2PntgPEluZm9MYWJlbCBpY29uPSdhY3Rpb24nIGFjY2VudENvbG9yPXtBY2NlbnRDb2xvcnMuQ09MT1JfMn0gLz5gfTwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9LCB7XHJcbiAgICB0aXRsZTogJ051bWVyaWMgSW5mbyBMYWJlbCcsXHJcbiAgICBkZXNjcmlwdGlvbjogJ0ZvciBOdW1lcmljIEluZm8gTGFiZWwgdXNlIHRoZSBmZC1pbmZvLWxhYmVsLS1udW1lcmljIG1vZGlmaWVyIGNsYXNzLicsXHJcbiAgICByZXN1bHQ6IChcclxuICAgICAgPGRpdiBzdHlsZT17eyBkaXNwbGF5OiAnZmxleCcsIGdhcDogJzAuMjVyZW0nLCBmbGV4V3JhcDogJ3dyYXAnIH19PlxyXG4gICAgICAgIDxJbmZvTGFiZWwgdGV4dD0nNicgbnVtZXJpYyBhY2NlbnRDb2xvcj17QWNjZW50Q29sb3JzLkNPTE9SXzF9IC8+XHJcbiAgICAgICAgPEluZm9MYWJlbCB0ZXh0PSc2LjInIG51bWVyaWMgYWNjZW50Q29sb3I9e0FjY2VudENvbG9ycy5DT0xPUl8yfSAvPlxyXG4gICAgICAgIDxJbmZvTGFiZWwgdGV4dD0nNDJLJyBudW1lcmljIGFjY2VudENvbG9yPXtBY2NlbnRDb2xvcnMuQ09MT1JfM30gLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICApLFxyXG4gICAgY29kZTogKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxkaXY+e2A8SW5mb0xhYmVsIHRleHQ9JzYnIG51bWVyaWMgYWNjZW50Q29sb3I9e0FjY2VudENvbG9ycy5DT0xPUl8xfSAvPmB9PC9kaXY+XHJcbiAgICAgICAgPGRpdj57YDxJbmZvTGFiZWwgdGV4dD0nNi4yJyBudW1lcmljIGFjY2VudENvbG9yPXtBY2NlbnRDb2xvcnMuQ09MT1JfMn0gLz5gfTwvZGl2PlxyXG4gICAgICAgIDxkaXY+e2A8SW5mb0xhYmVsIHRleHQ9JzQySycgbnVtZXJpYyBhY2NlbnRDb2xvcj17QWNjZW50Q29sb3JzLkNPTE9SXzN9IC8+YH08L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfSwge1xyXG4gICAgdGl0bGU6ICdEaXNwbGF5IE9ubHkgSW5mbyBMYWJlbCcsXHJcbiAgICBkZXNjcmlwdGlvbjogJ0ZvciBEaXNwbGF5IE9ubHkgSW5mbyBMYWJlbCB1c2UgdGhlIGZkLWluZm8tbGFiZWwtLWRpc3BsYXkgbW9kaWZpZXIgY2xhc3MnLFxyXG4gICAgcmVzdWx0OiAoXHJcbiAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2ZsZXgnLCBnYXA6ICcwLjI1cmVtJywgZmxleFdyYXA6ICd3cmFwJyB9fT5cclxuICAgICAgICA8SW5mb0xhYmVsIHRleHQ9J3N5c3RlbSBzdGF0dXMnIGRpc3BsYXkgLz5cclxuICAgICAgICA8SW5mb0xhYmVsIHRleHQ9JzQyJyBkaXNwbGF5IG51bWVyaWMgLz5cclxuICAgICAgICA8SW5mb0xhYmVsIGljb249J2FjdGlvbicgZGlzcGxheSAvPlxyXG4gICAgICAgIDxJbmZvTGFiZWwgdGV4dD0nSW5mbyBMYWJlbCcgaWNvbj0ncGFzdCcgZGlzcGxheSAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICksXHJcbiAgICBjb2RlOiAoXHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPGRpdj57YDxJbmZvTGFiZWwgdGV4dD0nc3lzdGVtIHN0YXR1cycgZGlzcGxheSAvPmB9PC9kaXY+XHJcbiAgICAgICAgPGRpdj57YDxJbmZvTGFiZWwgdGV4dD0nNDInIGRpc3BsYXkgbnVtZXJpYyAvPmB9PC9kaXY+XHJcbiAgICAgICAgPGRpdj57YDxJbmZvTGFiZWwgaWNvbj0nYWN0aW9uJyBkaXNwbGF5IC8+YH08L2Rpdj5cclxuICAgICAgICA8ZGl2PntgPEluZm9MYWJlbCB0ZXh0PSdJbmZvIExhYmVsJyBpY29uPSdwYXN0JyBkaXNwbGF5IC8+YH08L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfV1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEluZm9MYWJlbERlbW8gPSAoKSA9PiB7XHJcbiAgcmV0dXJuIDxEZW1vUGFnZSB7Li4uREVNT19EQVRBfSAvPlxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuZXhwb3J0IGNvbnN0IExpbmtEZW1vID0gKCkgPT4ge1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdj5MSU5LPC9kaXY+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuZXhwb3J0IGNvbnN0IE9iamVjdERlbW8gPSAoKSA9PiB7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2Pk9CSkVDVDwvZGl2PlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBjb25zdCBQYWdlRGVtbyA9ICgpID0+IHtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXY+UEFHRTwvZGl2PlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBjb25zdCBQYW5lbERlbW8gPSAoKSA9PiB7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PlBBTkVMPC9kaXY+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuZXhwb3J0IGNvbnN0IFNlbGVjdERlbW8gPSAoKSA9PiB7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PlNFTEVDVDwvZGl2PlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBjb25zdCBTaGVsbEJhckRlbW8gPSAoKSA9PiB7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PlNIRUxMIEJBUjwvZGl2PlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBjb25zdCBUYWJsZURlbW8gPSAoKSA9PiB7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PlRBQkxFPC9kaXY+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuZXhwb3J0IGNvbnN0IFRpbGVEZW1vID0gKCkgPT4ge1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdj5USUxFPC9kaXY+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuZXhwb3J0IGNvbnN0IFRpdGxlRGVtbyA9ICgpID0+IHtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXY+VElUTEU8L2Rpdj5cclxuICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgY29uc3QgVG9vbGJhckRlbW8gPSAoKSA9PiB7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PlRPT0xCQVI8L2Rpdj5cclxuICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgY29uc3QgVmVydGljYWxOYXZpZ2F0aW9uRGVtbyA9ICgpID0+IHtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXY+VkVSVElDQUwgTkFWSUdBVElPTjwvZGl2PlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCB7XHJcbiAgSGFzaFJvdXRlciBhcyBSb3V0ZXJcclxufSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xyXG5cclxuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gJ3JlYWN0LWRvbS9jbGllbnQnXHJcblxyXG4vLyBJbXBvcnQgY29tcG9uZW50c1xyXG5pbXBvcnQgUm9vdCBmcm9tICcuL3JvdXRlcy9fX2xheW91dCdcclxuXHJcbmNvbnN0IGNvbnRhaW5lclJvb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVhY3Ryb290JykhXHJcbmNvbnN0IHJvb3QgPSBjcmVhdGVSb290KGNvbnRhaW5lclJvb3QpXHJcbnJvb3QucmVuZGVyKDxSb3V0ZXI+PFJvb3QgLz48L1JvdXRlcj4pXHJcbiIsImltcG9ydCBSZWFjdCwgeyBDU1NQcm9wZXJ0aWVzIH0gZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgeyBBY2NlbnRDb2xvciB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9BY2NlbnRDb2xvcidcclxuaW1wb3J0IHsgU2l6ZSwgU2l6ZXMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvU2l6ZSdcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXZhdGFyUHJvcGVydGllcyB7XHJcbiAgbGFiZWw6IHN0cmluZ1xyXG4gIGljb24/OiBzdHJpbmdcclxuICBpbml0aWFscz86IHN0cmluZ1xyXG4gIHNpemU/OiBTaXplXHJcbiAgc3R5bGU/OiBDU1NQcm9wZXJ0aWVzXHJcbiAgYWNjZW50Q29sb3I/OiBBY2NlbnRDb2xvclxyXG4gIHNoZWxsPzogYm9vbGVhblxyXG4gIGJvcmRlcmVkPzogYm9vbGVhblxyXG4gIHRyYW5zcGFyZW50PzogYm9vbGVhblxyXG4gIGNpcmNsZT86IGJvb2xlYW5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEF2YXRhciA9ICh7XHJcbiAgbGFiZWwsXHJcbiAgaWNvbixcclxuICBpbml0aWFscyxcclxuICBzaXplID0gU2l6ZXMuTUVESVVNLFxyXG4gIHN0eWxlLFxyXG4gIGFjY2VudENvbG9yLFxyXG4gIHNoZWxsLFxyXG4gIGJvcmRlcmVkLFxyXG4gIHRyYW5zcGFyZW50LFxyXG4gIGNpcmNsZSxcclxufTogQXZhdGFyUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBDaGVja1xyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgY29uc3QgY2xhc3NlcyA9IFsnZmQtYXZhdGFyJ11cclxuICBpZiAoc2l6ZSkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKGBmZC1hdmF0YXItLSR7c2l6ZX1gKVxyXG4gIH1cclxuICBpZiAoYWNjZW50Q29sb3IpIHtcclxuICAgIGNsYXNzZXMucHVzaChgZmQtYXZhdGFyLS0ke2FjY2VudENvbG9yfWApXHJcbiAgfVxyXG4gIGlmIChzaGVsbCkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKCdmZC1hdmF0YXItLXNoZWxsJylcclxuICB9XHJcbiAgaWYgKGJvcmRlcmVkKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goJ2ZkLWF2YXRhci0tYm9yZGVyJylcclxuICB9XHJcbiAgaWYgKHRyYW5zcGFyZW50KSB7XHJcbiAgICBjbGFzc2VzLnB1c2goJ2ZkLWF2YXRhci0tdHJhbnNwYXJlbnQnKVxyXG4gIH1cclxuICBpZiAoY2lyY2xlKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goJ2ZkLWF2YXRhci0tY2lyY2xlJylcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8c3BhblxyXG4gICAgICBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfVxyXG4gICAgICBhcmlhLWxhYmVsPXtsYWJlbH1cclxuICAgICAgc3R5bGU9e3N0eWxlfVxyXG4gICAgPlxyXG4gICAgICB7aWNvbiA/XHJcbiAgICAgICAgPGlcclxuICAgICAgICAgIGNsYXNzTmFtZT17YGZkLWF2YXRhcl9faWNvbiBzYXAtaWNvbi0tJHtpY29ufWB9XHJcbiAgICAgICAgICByb2xlPSdwcmVzZW50YXRpb24nXHJcbiAgICAgICAgPjwvaT5cclxuICAgICAgICA6IG51bGx9XHJcbiAgICAgIHtpY29uID8gbnVsbCA6IGluaXRpYWxzfVxyXG4gICAgPC9zcGFuPlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCB7IEFjY2VudENvbG9yIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL0FjY2VudENvbG9yJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCYWRnZVByb3BlcnRpZXMge1xyXG4gIHRleHQ6IHN0cmluZyxcclxuICBhY2NlbnRDb2xvcj86IEFjY2VudENvbG9yLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgQmFkZ2UgPSAoe1xyXG4gIHRleHQsXHJcbiAgYWNjZW50Q29sb3IsXHJcbn06IEJhZGdlUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgY29uc3QgY2xhc3NlcyA9IFsnZmQtYmFkZ2UnXVxyXG4gIGlmIChhY2NlbnRDb2xvcikge1xyXG4gICAgY2xhc3Nlcy5wdXNoKGBmZC1pbmZvLWxhYmVsLS0ke2FjY2VudENvbG9yfWApXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfT5cclxuICAgICAge3RleHR9XHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBjb25zdCBCYXIgPSAoKSA9PiB7XHJcblxyXG4gIC8vIEhvb2tzIC8vXHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9J2ZkLWJhcic+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1iYXJfX2xlZnQnPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1iYXJfX2VsZW1lbnQnPlxyXG4gICAgICAgICAgPGg1XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT0nZmQtdGl0bGUgZmQtdGl0bGUtLWg1J1xyXG4gICAgICAgICAgICBhcmlhLWxhYmVsPSd0ZXh0J1xyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICBURVhUXHJcbiAgICAgICAgICA8L2g1PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9J2ZkLWJhcl9fbWlkZGxlJz5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtYmFyX19lbGVtZW50Jz5cclxuICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgY2xhc3NOYW1lPSdmZC1zZWdtZW50ZWQtYnV0dG9uJ1xyXG4gICAgICAgICAgICByb2xlPSdncm91cCdcclxuICAgICAgICAgICAgYXJpYS1sYWJlbD0nR3JvdXAgbGFiZWwnXHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICBhcmlhLWxhYmVsPSdidXR0b24nXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPSdmZC1idXR0b24gZmQtYnV0dG9uLS1jb21wYWN0J1xyXG4gICAgICAgICAgICAgIGFyaWEtcHJlc3NlZD0ndHJ1ZSdcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT0nc2FwLWljb24tLWVtYWlsJz48L2k+XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgYXJpYS1sYWJlbD0nYnV0dG9uJ1xyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT0nZmQtYnV0dG9uIGZkLWJ1dHRvbi0tY29tcGFjdCdcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT0nc2FwLWljb24tLWlwaG9uZSc+PC9pPlxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgIGFyaWEtbGFiZWw9J2J1dHRvbidcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9J2ZkLWJ1dHRvbiBmZC1idXR0b24tLWNvbXBhY3QnXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9J3NhcC1pY29uLS1ub3RpZmljYXRpb24tMic+PC9pPlxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9J2ZkLWJhcl9fcmlnaHQnPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1iYXJfX2VsZW1lbnQnPlxyXG4gICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgY2xhc3NOYW1lPSdmZC1hdmF0YXIgZmQtYXZhdGFyLS14cyBmZC1hdmF0YXItLWNpcmNsZSBmZC1hdmF0YXItLXRodW1ibmFpbCdcclxuICAgICAgICAgICAgcm9sZT0naW1nJ1xyXG4gICAgICAgICAgICBhcmlhLWxhYmVsPSdKb2huIERvZScgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtYmFyX19lbGVtZW50Jz5cclxuICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgYXJpYS1sYWJlbD0nYnV0dG9uJ1xyXG4gICAgICAgICAgICBjbGFzc05hbWU9J2ZkLWJ1dHRvbiBmZC1idXR0b24tLXRyYW5zcGFyZW50IGZkLWJ1dHRvbi0tY29tcGFjdCdcclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPGkgY2xhc3NOYW1lPSdzYXAtaWNvbi0tZ3JpZCc+PC9pPlxyXG4gICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuaW1wb3J0IHsgQnV0dG9uU3R5bGUgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvQnV0dG9uU3R5bGUnXHJcbmltcG9ydCB7IEJ1dHRvblR5cGUsIEJ1dHRvblR5cGVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL0J1dHRvblR5cGUnXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJ1dHRvblByb3BlcnRpZXMge1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZ1xyXG4gIGFyaWFMYWJlbD86IHN0cmluZ1xyXG4gIHN0eWxlPzogQnV0dG9uU3R5bGVcclxuICBpY29uPzogc3RyaW5nXHJcbiAgaWNvbkFmdGVyPzogYm9vbGVhblxyXG4gIHRleHQ/OiBzdHJpbmcgfCBudW1iZXJcclxuICBiYWRnZT86IHN0cmluZ1xyXG4gIHNlbGVjdGVkPzogYm9vbGVhblxyXG4gIG1lbnU/OiBib29sZWFuXHJcbiAgZGlzYWJsZWQ/OiBib29sZWFuXHJcbiAgY29tcGFjdD86IGJvb2xlYW5cclxuICB0YWJJbmRleD86IG51bWJlclxyXG4gIHR5cGU/OiBCdXR0b25UeXBlXHJcbiAgb25DbGljaz86ICgpID0+IHZvaWRcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEJ1dHRvbiA9ICh7XHJcbiAgY2xhc3NOYW1lLFxyXG4gIGFyaWFMYWJlbCxcclxuICBzdHlsZSxcclxuICBpY29uLFxyXG4gIGljb25BZnRlcixcclxuICB0ZXh0LFxyXG4gIGJhZGdlLFxyXG4gIHNlbGVjdGVkLFxyXG4gIG1lbnUsXHJcbiAgZGlzYWJsZWQsXHJcbiAgY29tcGFjdCxcclxuICB0YWJJbmRleCxcclxuICB0eXBlID0gQnV0dG9uVHlwZXMuQlVUVE9OLFxyXG4gIG9uQ2xpY2ssXHJcbn06IEJ1dHRvblByb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgLy8gRXZlbnRzIC8vXHJcblxyXG4gIGNvbnN0IG9uQ2xpY2tlZCA9ICgpID0+IHtcclxuICAgIGlmIChvbkNsaWNrKSB7XHJcbiAgICAgIG9uQ2xpY2soKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIGNvbnN0IGNsYXNzZXMgPSBbJ2ZkLWJ1dHRvbiddXHJcbiAgaWYgKGNsYXNzTmFtZSkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKGNsYXNzTmFtZSlcclxuICB9XHJcbiAgaWYgKHN0eWxlKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goYGZkLWJ1dHRvbi0tJHtzdHlsZX1gKVxyXG4gIH1cclxuICBpZiAoc2VsZWN0ZWQpIHtcclxuICAgIGNsYXNzZXMucHVzaCgnaXMtc2VsZWN0ZWQnKVxyXG4gIH1cclxuICBpZiAoY29tcGFjdCkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKCdmZC1idXR0b24tLWNvbXBhY3QnKVxyXG4gIH1cclxuICBpZiAobWVudSkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKCdmZC1idXR0b24tLW1lbnUnKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxidXR0b25cclxuICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX1cclxuICAgICAgYXJpYS1sYWJlbD17YXJpYUxhYmVsfVxyXG4gICAgICBvbkNsaWNrPXtvbkNsaWNrZWR9XHJcbiAgICAgIHRhYkluZGV4PXt0YWJJbmRleCA/IHRhYkluZGV4IDogMH1cclxuICAgICAgdHlwZT17dHlwZX1cclxuICAgICAgYXJpYS1kaXNhYmxlZD17ZGlzYWJsZWQgPyB0cnVlIDogZmFsc2V9XHJcbiAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cclxuICAgID5cclxuICAgICAge2ljb24gJiYgIWljb25BZnRlciA/XHJcbiAgICAgICAgPGkgY2xhc3NOYW1lPXtgc2FwLWljb24tLSR7aWNvbn1gfSByb2xlPSdwcmVzZW50YXRpb24nPjwvaT5cclxuICAgICAgICA6IG51bGx9XHJcblxyXG4gICAgICB7dGV4dCA/XHJcbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdmZC1idXR0b25fX3RleHQnPlxyXG4gICAgICAgICAge3RleHR9XHJcbiAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgIDogbnVsbH1cclxuXHJcbiAgICAgIHtpY29uICYmIGljb25BZnRlciA/XHJcbiAgICAgICAgPGkgY2xhc3NOYW1lPXtgc2FwLWljb24tLSR7aWNvbn1gfSByb2xlPSdwcmVzZW50YXRpb24nPjwvaT5cclxuICAgICAgICA6IG51bGx9XHJcblxyXG4gICAgICB7bWVudSA/XHJcbiAgICAgICAgPGkgY2xhc3NOYW1lPXtgc2FwLWljb24tLXNsaW0tYXJyb3ctZG93bmB9PjwvaT5cclxuICAgICAgICA6IG51bGx9XHJcblxyXG4gICAgICB7YmFkZ2UgP1xyXG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nZmQtYnV0dG9uX19iYWRnZSc+XHJcbiAgICAgICAgICB7YmFkZ2V9XHJcbiAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgIDogbnVsbH1cclxuICAgIDwvYnV0dG9uPlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgeyBDYWxlbmRhckRheXMgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2NhbGVuZGFyL0NhbGVuZGFyRGF5cydcclxuaW1wb3J0IHsgQ2FsZW5kYXJNb250aHMgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2NhbGVuZGFyL0NhbGVuZGFyTW9udGhzJ1xyXG5pbXBvcnQgeyBDYWxlbmRhclllYXJzIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9jYWxlbmRhci9DYWxlbmRhclllYXJzJ1xyXG5cclxuZXhwb3J0IGNvbnN0IERJU1BMQVlfTU9ERSA9IHtcclxuICBEQVlTOiAnREFZUycsXHJcbiAgTU9OVEhTOiAnTU9OVEhTJyxcclxuICBZRUFSUzogJ1lFQVJTJ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhbGVuZGFyUHJvcGVydGllcyB7XHJcbiAgZGF0ZT86IERhdGVcclxuICBzZWxlY3RlZERhdGU/OiBEYXRlXHJcbiAgY29tcGFjdD86IGJvb2xlYW5cclxuICBvblNlbGVjdGVkRGF0ZUNoYW5nZT86IChhcmc6IERhdGUpID0+IHZvaWRcclxufVxyXG5leHBvcnQgY29uc3QgQ2FsZW5kYXIgPSAoe1xyXG4gIGRhdGUgPSBuZXcgRGF0ZSgpLFxyXG4gIHNlbGVjdGVkRGF0ZSxcclxuICBjb21wYWN0LFxyXG4gIG9uU2VsZWN0ZWREYXRlQ2hhbmdlLFxyXG59OiBDYWxlbmRhclByb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgLy8gSG9va3MgLy9cclxuXHJcbiAgbGV0IHByZXZpb3VzTW9kZSA9IERJU1BMQVlfTU9ERS5EQVlTXHJcblxyXG4gIGNvbnN0IFtkaXNwbGF5RGF0ZSwgc2V0RGlzcGxheURhdGVdID0gdXNlU3RhdGUoZGF0ZSlcclxuICBjb25zdCBbZGlzcGxheU1vZGUsIHNldERpc3BsYXlNb2RlXSA9IHVzZVN0YXRlKERJU1BMQVlfTU9ERS5EQVlTKVxyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKGRpc3BsYXlNb2RlICE9PSBESVNQTEFZX01PREUuWUVBUlMpIHtcclxuICAgICAgcHJldmlvdXNNb2RlID0gZGlzcGxheU1vZGVcclxuICAgIH1cclxuICB9LCBbZGlzcGxheU1vZGVdKVxyXG5cclxuICAvLyBFdmVudHMgLy9cclxuXHJcbiAgY29uc3Qgb25EaXNwbGF5RGF0ZUNoYW5nZSA9IChuZXdEaXNwbGF5RGF0ZTogRGF0ZSkgPT4ge1xyXG4gICAgc2V0RGlzcGxheURhdGUobmV3RGlzcGxheURhdGUpXHJcbiAgfVxyXG5cclxuICBjb25zdCBvbkRpc3BsYXlNb2RlQ2hhbmdlRGF5cyA9IChuZXdEaXNwbGF5TW9kZTogc3RyaW5nKSA9PiB7XHJcbiAgICBzZXREaXNwbGF5TW9kZShuZXdEaXNwbGF5TW9kZSlcclxuICB9XHJcblxyXG4gIGNvbnN0IG9uRGlzcGxheU1vZGVDaGFuZ2VNb250aHMgPSAobmV3RGlzcGxheU1vZGU6IHN0cmluZykgPT4ge1xyXG4gICAgc2V0RGlzcGxheU1vZGUobmV3RGlzcGxheU1vZGUpXHJcbiAgfVxyXG5cclxuICBjb25zdCBvbkRpc3BsYXlNb2RlQ2hhbmdlWWVhcnMgPSAobmV3RGlzcGxheU1vZGU6IHN0cmluZykgPT4ge1xyXG4gICAgaWYgKHByZXZpb3VzTW9kZSkge1xyXG4gICAgICBzZXREaXNwbGF5TW9kZShwcmV2aW91c01vZGUpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzZXREaXNwbGF5TW9kZShuZXdEaXNwbGF5TW9kZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICBzd2l0Y2ggKGRpc3BsYXlNb2RlKSB7XHJcbiAgICBjYXNlIERJU1BMQVlfTU9ERS5NT05USFM6IHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8Q2FsZW5kYXJNb250aHNcclxuICAgICAgICAgIGRhdGU9e2Rpc3BsYXlEYXRlfVxyXG4gICAgICAgICAgb25EaXNwbGF5RGF0ZUNoYW5nZT17b25EaXNwbGF5RGF0ZUNoYW5nZX1cclxuICAgICAgICAgIG9uRGlzcGxheU1vZGVDaGFuZ2U9e29uRGlzcGxheU1vZGVDaGFuZ2VNb250aHN9XHJcbiAgICAgICAgLz5cclxuICAgICAgKVxyXG4gICAgfVxyXG4gICAgY2FzZSBESVNQTEFZX01PREUuWUVBUlM6IHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8Q2FsZW5kYXJZZWFyc1xyXG4gICAgICAgICAgZGF0ZT17ZGlzcGxheURhdGV9XHJcbiAgICAgICAgICBvbkRpc3BsYXlEYXRlQ2hhbmdlPXtvbkRpc3BsYXlEYXRlQ2hhbmdlfVxyXG4gICAgICAgICAgb25EaXNwbGF5TW9kZUNoYW5nZT17b25EaXNwbGF5TW9kZUNoYW5nZVllYXJzfVxyXG4gICAgICAgIC8+XHJcbiAgICAgIClcclxuICAgIH1cclxuICAgIGRlZmF1bHQ6IHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8Q2FsZW5kYXJEYXlzXHJcbiAgICAgICAgICBkYXRlPXtkaXNwbGF5RGF0ZX1cclxuICAgICAgICAgIHNlbGVjdGVkRGF0ZT17c2VsZWN0ZWREYXRlfVxyXG4gICAgICAgICAgY29tcGFjdD17Y29tcGFjdH1cclxuICAgICAgICAgIG9uRGlzcGxheURhdGVDaGFuZ2U9e29uRGlzcGxheURhdGVDaGFuZ2V9XHJcbiAgICAgICAgICBvbkRpc3BsYXlNb2RlQ2hhbmdlPXtvbkRpc3BsYXlNb2RlQ2hhbmdlRGF5c31cclxuICAgICAgICAgIG9uU2VsZWN0ZWREYXRlQ2hhbmdlPXtvblNlbGVjdGVkRGF0ZUNoYW5nZX1cclxuICAgICAgICAvPlxyXG4gICAgICApXHJcbiAgICB9XHJcbiAgfVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSAnQHVuY292ZXIvanMtdXRpbHMnXHJcblxyXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2J1dHRvbi9CdXR0b24nXHJcbmltcG9ydCB7IERJU1BMQVlfTU9ERSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvY2FsZW5kYXIvQ2FsZW5kYXInXHJcbmltcG9ydCB7IEJ1dHRvblN0eWxlcyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9CdXR0b25TdHlsZSdcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FsZW5kYXJEYXlzUHJvcGVydGllcyB7XHJcbiAgZGF0ZTogRGF0ZVxyXG4gIHNlbGVjdGVkRGF0ZT86IERhdGVcclxuICBjb21wYWN0PzogYm9vbGVhblxyXG4gIG9uRGlzcGxheURhdGVDaGFuZ2U6IChhcmc6IERhdGUpID0+IHZvaWRcclxuICBvbkRpc3BsYXlNb2RlQ2hhbmdlOiAoYXJnOiBzdHJpbmcpID0+IHZvaWRcclxuICBvblNlbGVjdGVkRGF0ZUNoYW5nZT86IChhcmc6IERhdGUpID0+IHZvaWRcclxufVxyXG5cclxuaW50ZXJmYWNlIFdlZWtEYXlEYXRhIHtcclxuICBkYXRlOiBEYXRlXHJcbiAgdGV4dDogbnVtYmVyXHJcbiAgb3RoZXJNb250aDogYm9vbGVhblxyXG4gIGN1cnJlbnQ6IGJvb2xlYW5cclxuICBhY3RpdmU6IGJvb2xlYW5cclxuICB3ZWVrZW5kOiBib29sZWFuXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBDYWxlbmRhckRheXMgPSAoe1xyXG4gIGRhdGUsXHJcbiAgc2VsZWN0ZWREYXRlLFxyXG4gIGNvbXBhY3QsXHJcbiAgb25EaXNwbGF5RGF0ZUNoYW5nZSxcclxuICBvbkRpc3BsYXlNb2RlQ2hhbmdlLFxyXG4gIG9uU2VsZWN0ZWREYXRlQ2hhbmdlLFxyXG59OiBDYWxlbmRhckRheXNQcm9wZXJ0aWVzKSA9PiB7XHJcblxyXG4gIC8vIEhvb2tzIC8vXHJcblxyXG4gIGNvbnN0IGxvY2FsZSA9ICdlbidcclxuICBjb25zdCBpbnRsTG9jYWxlOmFueSA9IG5ldyBJbnRsLkxvY2FsZShsb2NhbGUpXHJcbiAgY29uc3Qge1xyXG4gICAgZmlyc3REYXksXHJcbiAgICBtaW5pbWFsRGF5cyxcclxuICAgIHdlZWtlbmRcclxuICB9ID0gaW50bExvY2FsZS53ZWVrSW5mb1xyXG5cclxuICBjb25zdCBbd2Vla3MsIHNldFdlZWtzXSA9IHVzZVN0YXRlPFdlZWtEYXlEYXRhW11bXT4oW10pXHJcbiAgY29uc3QgW3dlZWtEYXlzLCBzZXRXZWVrRGF5c10gPSB1c2VTdGF0ZTxzdHJpbmdbXT4oW10pXHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCB3ZWVrRGF5c0RhdGEgPSBbXVxyXG4gICAgY29uc3QgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpXHJcbiAgICB3aGlsZSAoY3VycmVudERhdGUuZ2V0RGF5KCkgIT09IGZpcnN0RGF5ICUgNykge1xyXG4gICAgICBjdXJyZW50RGF0ZS5zZXREYXRlKGN1cnJlbnREYXRlLmdldERhdGUoKSAtIDEpXHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDc7IGkrKykge1xyXG4gICAgICBjb25zdCBkYXlOYW1lID0gY3VycmVudERhdGUudG9Mb2NhbGVTdHJpbmcobG9jYWxlLCB7IHdlZWtkYXk6ICdzaG9ydCcgfSlcclxuICAgICAgd2Vla0RheXNEYXRhLnB1c2goZGF5TmFtZS5zdWJzdHJpbmcoMCwgMSkudG9VcHBlckNhc2UoKSlcclxuICAgICAgY3VycmVudERhdGUuc2V0RGF0ZShjdXJyZW50RGF0ZS5nZXREYXRlKCkgKyAxKVxyXG4gICAgfVxyXG4gICAgc2V0V2Vla0RheXMod2Vla0RheXNEYXRhKVxyXG4gIH0sIFtdKVxyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKVxyXG4gICAgY29uc3Qgd2Vla3NEYXRhID0gW11cclxuICAgIGNvbnN0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIDEpO1xyXG4gICAgd2hpbGUgKGN1cnJlbnREYXRlLmdldERheSgpICE9PSBmaXJzdERheSAlIDcpIHtcclxuICAgICAgY3VycmVudERhdGUuc2V0RGF0ZShjdXJyZW50RGF0ZS5nZXREYXRlKCkgLSAxKVxyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgd2VlayA9IDA7IHdlZWsgPCA1OyB3ZWVrKyspIHtcclxuICAgICAgY29uc3Qgd2Vla0RhdGE6V2Vla0RheURhdGFbXSA9IFtdXHJcbiAgICAgIGZvciAobGV0IGRheSA9IDE7IGRheSA8IDg7IGRheSsrKSB7XHJcbiAgICAgICAgY29uc3QgaXNOb3dZZWFyID0gbm93LmdldEZ1bGxZZWFyKCkgPT09IGN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKClcclxuICAgICAgICBjb25zdCBpc05vd01vbnRoID0gbm93LmdldE1vbnRoKCkgPT09IGN1cnJlbnREYXRlLmdldE1vbnRoKClcclxuICAgICAgICBjb25zdCBpc05vd0RhdGUgPSBub3cuZ2V0RGF0ZSgpID09PSBjdXJyZW50RGF0ZS5nZXREYXRlKClcclxuXHJcbiAgICAgICAgY29uc3QgaXNTZWxlY3RlZFllYXIgPSBzZWxlY3RlZERhdGUgPyBzZWxlY3RlZERhdGUuZ2V0RnVsbFllYXIoKSA9PT0gY3VycmVudERhdGUuZ2V0RnVsbFllYXIoKSA6IGZhbHNlXHJcbiAgICAgICAgY29uc3QgaXNTZWxlY3RlZE1vbnRoID0gc2VsZWN0ZWREYXRlID8gc2VsZWN0ZWREYXRlLmdldE1vbnRoKCkgPT09IGN1cnJlbnREYXRlLmdldE1vbnRoKCkgOiBmYWxzZVxyXG4gICAgICAgIGNvbnN0IGlzU2VsZWN0ZWREYXRlID0gc2VsZWN0ZWREYXRlID8gc2VsZWN0ZWREYXRlLmdldERhdGUoKSA9PT0gY3VycmVudERhdGUuZ2V0RGF0ZSgpIDogZmFsc2VcclxuXHJcbiAgICAgICAgd2Vla0RhdGEucHVzaCh7XHJcbiAgICAgICAgICBkYXRlOiBuZXcgRGF0ZShjdXJyZW50RGF0ZS5nZXRUaW1lKCkpLFxyXG4gICAgICAgICAgdGV4dDogY3VycmVudERhdGUuZ2V0RGF0ZSgpLFxyXG4gICAgICAgICAgb3RoZXJNb250aDogY3VycmVudERhdGUuZ2V0TW9udGgoKSAhPT0gZGF0ZS5nZXRNb250aCgpLFxyXG4gICAgICAgICAgY3VycmVudDogaXNOb3dZZWFyICYmIGlzTm93TW9udGggJiYgaXNOb3dEYXRlLFxyXG4gICAgICAgICAgYWN0aXZlOiBpc1NlbGVjdGVkWWVhciAmJiBpc1NlbGVjdGVkTW9udGggJiYgaXNTZWxlY3RlZERhdGUsXHJcbiAgICAgICAgICB3ZWVrZW5kOiB3ZWVrZW5kLmluY2x1ZGVzKGRheSksXHJcbiAgICAgICAgfSlcclxuICAgICAgICBjdXJyZW50RGF0ZS5zZXREYXRlKGN1cnJlbnREYXRlLmdldERhdGUoKSArIDEpXHJcbiAgICAgIH1cclxuICAgICAgd2Vla3NEYXRhLnB1c2god2Vla0RhdGEpXHJcbiAgICB9XHJcbiAgICBzZXRXZWVrcyh3ZWVrc0RhdGEpXHJcbiAgfSwgW2RhdGUsIHNlbGVjdGVkRGF0ZV0pXHJcblxyXG5cclxuICAvLyBFdmVudHMgLy9cclxuXHJcbiAgY29uc3Qgb25QcmV2aW91cyA9ICgpID0+IHtcclxuICAgIGNvbnN0IG5ld0RhdGUgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgMCk7XHJcbiAgICBvbkRpc3BsYXlEYXRlQ2hhbmdlKG5ld0RhdGUpXHJcbiAgfVxyXG5cclxuICBjb25zdCBvbk1vbnRoUHJlc3NlZCA9ICgpID0+IHtcclxuICAgIG9uRGlzcGxheU1vZGVDaGFuZ2UoRElTUExBWV9NT0RFLk1PTlRIUylcclxuICB9XHJcblxyXG4gIGNvbnN0IG9uWWVhclByZXNzZWQgPSAoKSA9PiB7XHJcbiAgICBvbkRpc3BsYXlNb2RlQ2hhbmdlKERJU1BMQVlfTU9ERS5ZRUFSUylcclxuICB9XHJcblxyXG4gIGNvbnN0IG9uTmV4dCA9ICgpID0+IHtcclxuICAgIGNvbnN0IG5ld0RhdGUgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSArIDEsIDEpO1xyXG4gICAgb25EaXNwbGF5RGF0ZUNoYW5nZShuZXdEYXRlKVxyXG4gIH1cclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIGNvbnN0IGNsYXNzZXMgPSBbJ2ZkLWNhbGVuZGFyJ11cclxuICBpZiAoY29tcGFjdCkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKCdmZC1jYWxlbmRhci0tY29tcGFjdCcpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPHNlY3Rpb25cclxuICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX1cclxuICAgID5cclxuICAgICAgPGhlYWRlciBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX19oZWFkZXInPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1jYWxlbmRhcl9fbmF2aWdhdGlvbic+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtY2FsZW5kYXJfX2FjdGlvbiBmZC1jYWxlbmRhcl9fYWN0aW9uLS1hcnJvdy1sZWZ0Jz5cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgIHN0eWxlPXtCdXR0b25TdHlsZXMuVFJBTlNQQVJFTlR9XHJcbiAgICAgICAgICAgICAgaWNvbj0nc2xpbS1hcnJvdy1sZWZ0J1xyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHJldmlvdXN9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1jYWxlbmRhcl9fYWN0aW9uJz5cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgIHN0eWxlPXtCdXR0b25TdHlsZXMuVFJBTlNQQVJFTlR9XHJcbiAgICAgICAgICAgICAgdGV4dD17U3RyaW5nVXRpbHMuY2FwaXRhbGl6ZShkYXRlLnRvTG9jYWxlU3RyaW5nKGxvY2FsZSwgeyBtb250aDogJ2xvbmcnIH0pKX1cclxuICAgICAgICAgICAgICBvbkNsaWNrPXtvbk1vbnRoUHJlc3NlZH1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX19hY3Rpb24nPlxyXG4gICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgc3R5bGU9e0J1dHRvblN0eWxlcy5UUkFOU1BBUkVOVH1cclxuICAgICAgICAgICAgICB0ZXh0PXtkYXRlLmdldEZ1bGxZZWFyKCl9XHJcbiAgICAgICAgICAgICAgb25DbGljaz17b25ZZWFyUHJlc3NlZH1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX19hY3Rpb24gZmQtY2FsZW5kYXJfX2FjdGlvbi0tYXJyb3ctcmlnaHQnPlxyXG4gICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgc3R5bGU9e0J1dHRvblN0eWxlcy5UUkFOU1BBUkVOVH1cclxuICAgICAgICAgICAgICBpY29uPSdzbGltLWFycm93LXJpZ2h0J1xyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uTmV4dH1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2hlYWRlcj5cclxuXHJcbiAgICAgIDxkaXZcclxuICAgICAgICBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX19jb250ZW50IGZkLWNhbGVuZGFyX19jb250ZW50LS1kYXRlcydcclxuICAgICAgPlxyXG4gICAgICAgIDx0YWJsZVxyXG4gICAgICAgICAgY2xhc3NOYW1lPSdmZC1jYWxlbmRhcl9fdGFibGUnXHJcbiAgICAgICAgICByb2xlPSdncmlkJ1xyXG4gICAgICAgID5cclxuICAgICAgICAgIDx0aGVhZCBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX19ncm91cCc+XHJcbiAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX19yb3cnPlxyXG4gICAgICAgICAgICAgIDxDYWxlbmRhckRheXNJdGVtSGVhZGVyIC8+XHJcbiAgICAgICAgICAgICAge3dlZWtEYXlzLm1hcCgod2Vla0RheSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgIDxDYWxlbmRhckRheXNJdGVtSGVhZGVyXHJcbiAgICAgICAgICAgICAgICAgICAga2V5PXtgY2FsZW5kYXItd2Vlay1kYXktJHtpbmRleH1gfVxyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ9e3dlZWtEYXl9XHJcbiAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICA8L3RoZWFkPlxyXG5cclxuICAgICAgICAgIDx0Ym9keSBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX19ncm91cCc+XHJcbiAgICAgICAgICAgIHt3ZWVrcy5tYXAoKHdlZWssIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDx0clxyXG4gICAgICAgICAgICAgICAgICBrZXk9e2BjYWxlbmRhci13ZWVrLSR7aW5kZXh9YH1cclxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdmZC1jYWxlbmRhcl9fcm93J1xyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICA8Q2FsZW5kYXJEYXlzSXRlbUhlbHBlciB0ZXh0PXtpbmRleCArIDF9IC8+XHJcbiAgICAgICAgICAgICAgICAgIHt3ZWVrLm1hcCgoZGF5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgIDxDYWxlbmRhckRheXNJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17YGNhbGVuZGFyLXdlZWstJHtpbmRleH0tZGF5LSR7ZGF5LnRleHR9YH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgey4uLmRheX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DYWxlbmRhckRheUNsaWNrZWQ9eygpID0+IG9uU2VsZWN0ZWREYXRlQ2hhbmdlICYmIG9uU2VsZWN0ZWREYXRlQ2hhbmdlKGRheS5kYXRlKX1cclxuICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICB9KX1cclxuXHJcbiAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgIDwvdGFibGU+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGFyaWEtbGl2ZT1cInBvbGl0ZVwiIGNsYXNzTmFtZT1cImZkLWNhbGVuZGFyX19jb250ZW50IGZkLWNhbGVuZGFyX19jb250ZW50LS1zY3JlZW4tcmVhZGVyLW9ubHlcIj5Vc2UgYXJyb3cga2V5cyB0byBuYXZpZ2F0ZSBkYXRlczwvZGl2PlxyXG4gICAgPC9zZWN0aW9uPlxyXG4gIClcclxufVxyXG5cclxudHlwZSBDYWxlbmRhckRheXNJdGVtSGVhZGVyUHJvcGVydGllcyA9IHtcclxuICB0ZXh0Pzogc3RyaW5nXHJcbn1cclxuY29uc3QgQ2FsZW5kYXJEYXlzSXRlbUhlYWRlciA9ICh7XHJcbiAgdGV4dFxyXG59OiBDYWxlbmRhckRheXNJdGVtSGVhZGVyUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDx0aCBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX19pdGVtIGZkLWNhbGVuZGFyX19pdGVtLS1zaWRlLWhlbHBlcic+XHJcbiAgICAgIHt0ZXh0ID9cclxuICAgICAgICA8c3BhblxyXG4gICAgICAgICAgY2xhc3NOYW1lPSdmZC1jYWxlbmRhcl9fdGV4dCdcclxuICAgICAgICAgIHJvbGU9J2J1dHRvbidcclxuICAgICAgICA+XHJcbiAgICAgICAgICB7dGV4dH1cclxuICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgOiBudWxsfVxyXG4gICAgPC90aD5cclxuICApXHJcbn1cclxuXHJcbnR5cGUgQ2FsZW5kYXJEYXlzSXRlbUhlbHBlclByb3BlcnRpZXMgPSB7XHJcbiAgdGV4dD86IHN0cmluZyB8IG51bWJlclxyXG59XHJcbmNvbnN0IENhbGVuZGFyRGF5c0l0ZW1IZWxwZXIgPSAoe1xyXG4gIHRleHRcclxufTogQ2FsZW5kYXJEYXlzSXRlbUhlbHBlclByb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8dGQgY2xhc3NOYW1lPSdmZC1jYWxlbmRhcl9faXRlbSBmZC1jYWxlbmRhcl9faXRlbS0tc2lkZS1oZWxwZXInPlxyXG4gICAgICA8c3BhblxyXG4gICAgICAgIGNsYXNzTmFtZT0nZmQtY2FsZW5kYXJfX3RleHQnXHJcbiAgICAgICAgcm9sZT0nYnV0dG9uJ1xyXG4gICAgICA+XHJcbiAgICAgICAge3RleHR9XHJcbiAgICAgIDwvc3Bhbj5cclxuICAgIDwvdGQ+XHJcbiAgKVxyXG59XHJcblxyXG5pbnRlcmZhY2UgQ2FsZW5kYXJEYXlzSXRlbVByb3BlcnRpZXMge1xyXG4gIHRleHQ6IHN0cmluZyB8IG51bWJlclxyXG4gIGFjdGl2ZT86IGJvb2xlYW5cclxuICBjdXJyZW50PzogYm9vbGVhblxyXG4gIG90aGVyTW9udGg/OiBib29sZWFuXHJcbiAgcmFuZ2U/OiBib29sZWFuXHJcbiAgc3BlY2lhbERheT86IG51bWJlclxyXG4gIHdlZWtlbmQ/OiBib29sZWFuXHJcbiAgb25DYWxlbmRhckRheUNsaWNrZWQ6ICgpID0+IHZvaWRcclxufVxyXG5jb25zdCBDYWxlbmRhckRheXNJdGVtID0gKHtcclxuICB0ZXh0LFxyXG4gIGFjdGl2ZSxcclxuICBjdXJyZW50LFxyXG4gIG90aGVyTW9udGgsXHJcbiAgcmFuZ2UsXHJcbiAgc3BlY2lhbERheSxcclxuICB3ZWVrZW5kLFxyXG4gIG9uQ2FsZW5kYXJEYXlDbGlja2VkLFxyXG59OiBDYWxlbmRhckRheXNJdGVtUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgY29uc3QgY2xhc3NlcyA9IFsnZmQtY2FsZW5kYXJfX2l0ZW0nXVxyXG4gIGlmIChhY3RpdmUpIHtcclxuICAgIGNsYXNzZXMucHVzaCgnaXMtYWN0aXZlJylcclxuICB9XHJcbiAgaWYgKGN1cnJlbnQpIHtcclxuICAgIGNsYXNzZXMucHVzaCgnZmQtY2FsZW5kYXJfX2l0ZW0tLWN1cnJlbnQnKVxyXG4gIH1cclxuICBpZiAob3RoZXJNb250aCkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKCdmZC1jYWxlbmRhcl9faXRlbS0tb3RoZXItbW9udGgnKVxyXG4gIH1cclxuICBpZiAocmFuZ2UpIHtcclxuICAgIGNsYXNzZXMucHVzaCgnZmQtY2FsZW5kYXJfX2l0ZW0tLXJhbmdlJylcclxuICB9XHJcbiAgaWYgKHNwZWNpYWxEYXkpIHtcclxuICAgIGNsYXNzZXMucHVzaChgZmQtY2FsZW5kYXJfX3NwZWNpYWwtZGF5LS0ke3NwZWNpYWxEYXl9YClcclxuICB9XHJcbiAgaWYgKHdlZWtlbmQpIHtcclxuICAgIGNsYXNzZXMucHVzaCgnZmQtY2FsZW5kYXJfX2l0ZW0tLXdlZWtlbmQnKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDx0ZFxyXG4gICAgICBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfVxyXG4gICAgICByb2xlPSdncmlkY2VsbCdcclxuICAgICAgc3R5bGU9e3tcclxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xyXG4gICAgICB9fVxyXG4gICAgPlxyXG4gICAgICA8c3BhblxyXG4gICAgICAgIGNsYXNzTmFtZT0nZmQtY2FsZW5kYXJfX3RleHQnXHJcbiAgICAgICAgcm9sZT0nYnV0dG9uJ1xyXG4gICAgICAgIG9uQ2xpY2s9e29uQ2FsZW5kYXJEYXlDbGlja2VkfVxyXG4gICAgICA+XHJcbiAgICAgICAge3RleHR9XHJcbiAgICAgIDwvc3Bhbj5cclxuICAgIDwvdGQ+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCB7IFN0cmluZ1V0aWxzIH0gZnJvbSAnQHVuY292ZXIvanMtdXRpbHMnXHJcblxyXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2J1dHRvbi9CdXR0b24nXHJcbmltcG9ydCB7IERJU1BMQVlfTU9ERSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvY2FsZW5kYXIvQ2FsZW5kYXInXHJcblxyXG5pbXBvcnQgeyBCdXR0b25TdHlsZXMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvQnV0dG9uU3R5bGUnXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhbGVuZGFyTW9udGhzUHJvcGVydGllcyB7XHJcbiAgZGF0ZTogRGF0ZVxyXG4gIG9uRGlzcGxheURhdGVDaGFuZ2U6IChhcmc6IERhdGUpID0+IHZvaWRcclxuICBvbkRpc3BsYXlNb2RlQ2hhbmdlOiAoYXJnOiBzdHJpbmcpID0+IHZvaWRcclxufVxyXG5cclxuaW50ZXJmYWNlIE1vbnRoRGF0YSB7XHJcbiAgbW9udGg6IG51bWJlclxyXG4gIGN1cnJlbnQ6IGJvb2xlYW5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IENhbGVuZGFyTW9udGhzID0gKHtcclxuICBkYXRlLFxyXG4gIG9uRGlzcGxheURhdGVDaGFuZ2UsXHJcbiAgb25EaXNwbGF5TW9kZUNoYW5nZSxcclxufTogQ2FsZW5kYXJNb250aHNQcm9wZXJ0aWVzKSA9PiB7XHJcblxyXG4gIC8vIEhvb2tzIC8vXHJcblxyXG4gIGNvbnN0IGxvY2FsZSA9ICdlbidcclxuICBjb25zdCBbbW9udGhzLCBzZXRNb250aHNdID0gdXNlU3RhdGU8TW9udGhEYXRhW11bXT4oW10pXHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpXHJcbiAgICBjb25zdCBtb250aHNEYXRhID0gW11cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IG1vbnRoc1JvdzpNb250aERhdGFbXSA9IFtdXHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMzsgaisrKSB7XHJcbiAgICAgICAgY29uc3QgbW9udGggPSAoNCAqIGopICsgaVxyXG4gICAgICAgIGNvbnN0IGlzWWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKSA9PT0gbm93LmdldEZ1bGxZZWFyKClcclxuICAgICAgICBjb25zdCBpc01vbnRoID0gbm93LmdldE1vbnRoKCkgPT09IG1vbnRoXHJcbiAgICAgICAgbW9udGhzUm93LnB1c2goe1xyXG4gICAgICAgICAgbW9udGgsXHJcbiAgICAgICAgICBjdXJyZW50OiBpc1llYXIgJiYgaXNNb250aFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgICAgbW9udGhzRGF0YS5wdXNoKG1vbnRoc1JvdylcclxuICAgIH1cclxuICAgIHNldE1vbnRocyhtb250aHNEYXRhKVxyXG4gIH0sIFtkYXRlXSlcclxuXHJcbiAgLy8gRXZlbnRzIC8vXHJcblxyXG4gIGNvbnN0IG9uUHJldmlvdXMgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBuZXdEYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpIC0gMSwgZGF0ZS5nZXRNb250aCgpLCAxKVxyXG4gICAgb25EaXNwbGF5RGF0ZUNoYW5nZShuZXdEYXRlKVxyXG4gIH1cclxuXHJcbiAgY29uc3Qgb25ZZWFyUHJlc3NlZCA9ICgpID0+IHtcclxuICAgIG9uRGlzcGxheU1vZGVDaGFuZ2UoRElTUExBWV9NT0RFLllFQVJTKVxyXG4gIH1cclxuXHJcbiAgY29uc3Qgb25OZXh0ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgbmV3RGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSArIDEsIGRhdGUuZ2V0TW9udGgoKSwgMSlcclxuICAgIG9uRGlzcGxheURhdGVDaGFuZ2UobmV3RGF0ZSlcclxuICB9XHJcblxyXG4gIGNvbnN0IG9uU2VsZWN0TW9udGggPSAobW9udGg6IG51bWJlcikgPT4ge1xyXG4gICAgY29uc3QgbmV3RGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgbW9udGgsIDEpXHJcbiAgICBvbkRpc3BsYXlEYXRlQ2hhbmdlKG5ld0RhdGUpXHJcbiAgICBvbkRpc3BsYXlNb2RlQ2hhbmdlKERJU1BMQVlfTU9ERS5EQVlTKVxyXG4gIH1cclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIGNvbnN0IGZvcm1hdE1vbnRoID0gKG1vbnRoOiBudW1iZXIpID0+IHtcclxuICAgIGNvbnN0IG1vbnRoRGF0ZSA9IG5ldyBEYXRlKDIwMDAsIG1vbnRoKVxyXG4gICAgY29uc3QgbW9udGhOYW1lID0gbW9udGhEYXRlLnRvTG9jYWxlU3RyaW5nKGxvY2FsZSwgeyBtb250aDogJ2xvbmcnIH0pXHJcbiAgICByZXR1cm4gU3RyaW5nVXRpbHMuY2FwaXRhbGl6ZShtb250aE5hbWUpXHJcbiAgfVxyXG5cclxuICBjb25zdCBjbGFzc2VzID0gWydmZC1jYWxlbmRhciddXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8c2VjdGlvblxyXG4gICAgICBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfVxyXG4gICAgPlxyXG5cclxuICAgICAgPGhlYWRlciBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX19oZWFkZXInPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1jYWxlbmRhcl9fbmF2aWdhdGlvbic+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtY2FsZW5kYXJfX2FjdGlvbiBmZC1jYWxlbmRhcl9fYWN0aW9uLS1hcnJvdy1sZWZ0Jz5cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgIHN0eWxlPXtCdXR0b25TdHlsZXMuVFJBTlNQQVJFTlR9XHJcbiAgICAgICAgICAgICAgaWNvbj0nc2xpbS1hcnJvdy1sZWZ0J1xyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHJldmlvdXN9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1jYWxlbmRhcl9fYWN0aW9uJz5cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgIHN0eWxlPXtCdXR0b25TdHlsZXMuVFJBTlNQQVJFTlR9XHJcbiAgICAgICAgICAgICAgdGV4dD17ZGF0ZS5nZXRGdWxsWWVhcigpfVxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uWWVhclByZXNzZWR9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1jYWxlbmRhcl9fYWN0aW9uIGZkLWNhbGVuZGFyX19hY3Rpb24tLWFycm93LXJpZ2h0Jz5cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgIHN0eWxlPXtCdXR0b25TdHlsZXMuVFJBTlNQQVJFTlR9XHJcbiAgICAgICAgICAgICAgaWNvbj0nc2xpbS1hcnJvdy1yaWdodCdcclxuICAgICAgICAgICAgICBvbkNsaWNrPXtvbk5leHR9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9oZWFkZXI+XHJcblxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtY2FsZW5kYXJfX2NvbnRlbnQgZmQtY2FsZW5kYXJfX2NvbnRlbnQtLW1vbnRocyc+XHJcbiAgICAgICAgPHRhYmxlXHJcbiAgICAgICAgICBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX190YWJsZSdcclxuICAgICAgICAgIHJvbGU9J2dyaWQnXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPHRib2R5IGNsYXNzTmFtZT0nZmQtY2FsZW5kYXJfX2dyb3VwJz5cclxuICAgICAgICAgICAge21vbnRocy5tYXAoKG1vbnRoc1JvdywgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPHRyXHJcbiAgICAgICAgICAgICAgICAgIGtleT17YCdjYWxlbmRhci1tb250aC1yb3ctJHtpbmRleH1gfVxyXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX19yb3cnXHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIHttb250aHNSb3cubWFwKChtb250aERhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgPENhbGVuZGFyTW9udGhzSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2AnY2FsZW5kYXItbW9udGgtJHttb250aERhdGEubW9udGh9YH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dD17Zm9ybWF0TW9udGgobW9udGhEYXRhLm1vbnRoKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudD17bW9udGhEYXRhLmN1cnJlbnR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uU2VsZWN0TW9udGgobW9udGhEYXRhLm1vbnRoKX1cclxuICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICB9KX1cclxuICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgPC90YWJsZT5cclxuICAgICAgPC9kaXY+XHJcblxyXG4gICAgICA8ZGl2XHJcbiAgICAgICAgYXJpYS1saXZlPSdwb2xpdGUnXHJcbiAgICAgICAgY2xhc3NOYW1lPSdmZC1jYWxlbmRhcl9fY29udGVudCBmZC1jYWxlbmRhcl9fY29udGVudC0tc2NyZWVuLXJlYWRlci1vbmx5J1xyXG4gICAgICA+XHJcbiAgICAgICAgVXNlIGFycm93IGtleXMgdG8gbmF2aWdhdGUgZGF0ZXNcclxuICAgICAgPC9kaXY+XHJcblxyXG4gICAgPC9zZWN0aW9uPlxyXG4gIClcclxufVxyXG5cclxudHlwZSBDYWxlbmRhck1vbnRoc0l0ZW1Qcm9wZXJ0aWVzID0ge1xyXG4gIHRleHQ6IHN0cmluZyB8IG51bWJlclxyXG4gIGFjdGl2ZT86IGJvb2xlYW5cclxuICBjdXJyZW50PzogYm9vbGVhblxyXG4gIG9uQ2xpY2s6ICgpID0+IHZvaWRcclxufVxyXG5jb25zdCBDYWxlbmRhck1vbnRoc0l0ZW0gPSAoe1xyXG4gIHRleHQsXHJcbiAgYWN0aXZlLFxyXG4gIGN1cnJlbnQsXHJcbiAgb25DbGljayxcclxufTogQ2FsZW5kYXJNb250aHNJdGVtUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgY29uc3QgY2xhc3NlcyA9IFsnZmQtY2FsZW5kYXJfX2l0ZW0nXVxyXG4gIGlmIChjdXJyZW50KSB7XHJcbiAgICBjbGFzc2VzLnB1c2goJ2ZkLWNhbGVuZGFyX19pdGVtLS1jdXJyZW50JylcclxuICB9XHJcblxyXG4gIGNvbnN0IGNsYXNzZXNCdXR0b24gPSBbJ2ZkLWJ1dHRvbiBmZC1idXR0b24tLXRyYW5zcGFyZW50IGZkLWNhbGVuZGFyX19pdGVtLWJ1dHRvbiddXHJcbiAgaWYgKGFjdGl2ZSkge1xyXG4gICAgY2xhc3Nlc0J1dHRvbi5wdXNoKCdpcy1hY3RpdmUnKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDx0ZFxyXG4gICAgICBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfVxyXG4gICAgICByb2xlPSdncmlkY2VsbCdcclxuICAgID5cclxuICAgICAgPGJ1dHRvblxyXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlc0J1dHRvbi5qb2luKCcgJyl9XHJcbiAgICAgICAgdHlwZT0nYnV0dG9uJ1xyXG4gICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XHJcbiAgICAgID5cclxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX190ZXh0Jz5cclxuICAgICAgICAgIHt0ZXh0fVxyXG4gICAgICAgIDwvc3Bhbj5cclxuICAgICAgPC9idXR0b24+XHJcbiAgICA8L3RkPlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2J1dHRvbi9CdXR0b24nXHJcbmltcG9ydCB7IERJU1BMQVlfTU9ERSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvY2FsZW5kYXIvQ2FsZW5kYXInXHJcblxyXG5pbXBvcnQgeyBCdXR0b25TdHlsZXMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvQnV0dG9uU3R5bGUnXHJcblxyXG5pbnRlcmZhY2UgWWVhckRhdGEge1xyXG4gIGN1cnJlbnQ6IGJvb2xlYW5cclxuICB5ZWFyOiBudW1iZXJcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDYWxlbmRhclllYXJzUHJvcGVydGllcyB7XHJcbiAgZGF0ZTogRGF0ZVxyXG4gIG9uRGlzcGxheURhdGVDaGFuZ2U6IChhcmc6IERhdGUpID0+IHZvaWRcclxuICBvbkRpc3BsYXlNb2RlQ2hhbmdlOiAoYXJnOiBzdHJpbmcpID0+IHZvaWRcclxufVxyXG5leHBvcnQgY29uc3QgQ2FsZW5kYXJZZWFycyA9ICh7XHJcbiAgZGF0ZSxcclxuICBvbkRpc3BsYXlEYXRlQ2hhbmdlLFxyXG4gIG9uRGlzcGxheU1vZGVDaGFuZ2UsXHJcbn06IENhbGVuZGFyWWVhcnNQcm9wZXJ0aWVzKSA9PiB7XHJcblxyXG4gIC8vIEhvb2tzIC8vXHJcblxyXG4gIGNvbnN0IFt5ZWFycywgc2V0WWVhcnNdID0gdXNlU3RhdGU8WWVhckRhdGFbXVtdPihbXSlcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKClcclxuICAgIGxldCBjdXJyZW50WWVhciA9IE1hdGguZmxvb3IoZGF0ZS5nZXRGdWxsWWVhcigpIC8gMTApICogMTBcclxuICAgIGNvbnN0IHllYXJzRGF0YSA9IFtdXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xyXG4gICAgICBjb25zdCB5ZWFyc1JvdzpZZWFyRGF0YVtdID0gW11cclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA1OyBqKyspIHtcclxuICAgICAgICB5ZWFyc1Jvdy5wdXNoKHtcclxuICAgICAgICAgIGN1cnJlbnQ6IGN1cnJlbnRZZWFyID09PSBub3cuZ2V0RnVsbFllYXIoKSxcclxuICAgICAgICAgIHllYXI6IGN1cnJlbnRZZWFyKyssXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgICB5ZWFyc0RhdGEucHVzaCh5ZWFyc1JvdylcclxuICAgIH1cclxuICAgIHNldFllYXJzKHllYXJzRGF0YSlcclxuICB9LCBbZGF0ZV0pXHJcblxyXG4gIC8vIEV2ZW50cyAvL1xyXG5cclxuICBjb25zdCBvblByZXZpb3VzID0gKCkgPT4ge1xyXG4gICAgY29uc3QgbmV3RGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSAtIDIwLCBkYXRlLmdldE1vbnRoKCksIDEpXHJcbiAgICBvbkRpc3BsYXlEYXRlQ2hhbmdlKG5ld0RhdGUpXHJcbiAgfVxyXG5cclxuICBjb25zdCBvbk5leHQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBuZXdEYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpICsgMjAsIGRhdGUuZ2V0TW9udGgoKSwgMSlcclxuICAgIG9uRGlzcGxheURhdGVDaGFuZ2UobmV3RGF0ZSlcclxuICB9XHJcblxyXG4gIGNvbnN0IG9uU2VsZWN0WWVhciA9ICh5ZWFyOiBudW1iZXIpID0+IHtcclxuICAgIGNvbnN0IG5ld0RhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBkYXRlLmdldE1vbnRoKCksIDEpXHJcbiAgICBvbkRpc3BsYXlEYXRlQ2hhbmdlKG5ld0RhdGUpXHJcbiAgICBvbkRpc3BsYXlNb2RlQ2hhbmdlKERJU1BMQVlfTU9ERS5NT05USFMpXHJcbiAgfVxyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgY29uc3QgY2xhc3NlcyA9IFsnZmQtY2FsZW5kYXInXVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPHNlY3Rpb25cclxuICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX1cclxuICAgICAgc3R5bGU9e3sgbWFyZ2luQm90dG9tOiAnMXJlbScgfX1cclxuICAgID5cclxuICAgICAgPGhlYWRlciBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX19oZWFkZXInPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1jYWxlbmRhcl9fbmF2aWdhdGlvbic+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtY2FsZW5kYXJfX2FjdGlvbiBmZC1jYWxlbmRhcl9fYWN0aW9uLS1hcnJvdy1sZWZ0Jz5cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgIHN0eWxlPXtCdXR0b25TdHlsZXMuVFJBTlNQQVJFTlR9XHJcbiAgICAgICAgICAgICAgaWNvbj0nc2xpbS1hcnJvdy1sZWZ0J1xyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHJldmlvdXN9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1jYWxlbmRhcl9fYWN0aW9uJz5cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgIHN0eWxlPXtCdXR0b25TdHlsZXMuVFJBTlNQQVJFTlR9XHJcbiAgICAgICAgICAgICAgdGV4dD17eWVhcnMgJiYgeWVhcnMubGVuZ3RoID8gYCR7eWVhcnNbMF1bMF0ueWVhcn0gLSAke3llYXJzWzNdWzRdLnllYXJ9YCA6IHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX19hY3Rpb24gZmQtY2FsZW5kYXJfX2FjdGlvbi0tYXJyb3ctcmlnaHQnPlxyXG4gICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgc3R5bGU9e0J1dHRvblN0eWxlcy5UUkFOU1BBUkVOVH1cclxuICAgICAgICAgICAgICBpY29uPSdzbGltLWFycm93LXJpZ2h0J1xyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uTmV4dH1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2hlYWRlcj5cclxuXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1jYWxlbmRhcl9fY29udGVudCBmZC1jYWxlbmRhcl9fY29udGVudC0teWVhcnMgJyBpZD0nNTdZVVo1MjEnPlxyXG4gICAgICAgIDx0YWJsZSBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX190YWJsZScgcm9sZT0nZ3JpZCc+XHJcbiAgICAgICAgICA8dGJvZHkgY2xhc3NOYW1lPSdmZC1jYWxlbmRhcl9fZ3JvdXAnPlxyXG4gICAgICAgICAgICB7eWVhcnMubWFwKCh5ZWFyc1JvdywgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPHRyXHJcbiAgICAgICAgICAgICAgICAgIGtleT17YCdjYWxlbmRhci15ZWFycy1yb3ctJHtpbmRleH1gfVxyXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX19yb3cnXHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIHt5ZWFyc1Jvdy5tYXAoKHllYXJEYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgIDxDYWxlbmRhclllYXJzSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2AnY2FsZW5kYXIteWVhcnMtJHt5ZWFyRGF0YS55ZWFyfWB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ9e3llYXJEYXRhLnllYXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQ9e3llYXJEYXRhLmN1cnJlbnR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uU2VsZWN0WWVhcih5ZWFyRGF0YS55ZWFyKX1cclxuICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICB9KX1cclxuICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgPC90YWJsZT5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXZcclxuICAgICAgICBhcmlhLWxpdmU9J3BvbGl0ZSdcclxuICAgICAgICBjbGFzc05hbWU9J2ZkLWNhbGVuZGFyX19jb250ZW50IGZkLWNhbGVuZGFyX19jb250ZW50LS1zY3JlZW4tcmVhZGVyLW9ubHknXHJcbiAgICAgID5cclxuICAgICAgICBVc2UgYXJyb3cga2V5cyB0byBuYXZpZ2F0ZSBkYXRlc1xyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvc2VjdGlvbj5cclxuICApXHJcbn1cclxuXHJcbnR5cGUgQ2FsZW5kYXJZZWFyc0l0ZW1Qcm9wZXJ0aWVzID0ge1xyXG4gIHRleHQ6IHN0cmluZyB8IG51bWJlclxyXG4gIGFjdGl2ZT86IGJvb2xlYW5cclxuICBjdXJyZW50PzogYm9vbGVhblxyXG4gIG9uQ2xpY2s6ICgpID0+IHZvaWRcclxufVxyXG5jb25zdCBDYWxlbmRhclllYXJzSXRlbSA9ICh7XHJcbiAgdGV4dCxcclxuICBhY3RpdmUsXHJcbiAgY3VycmVudCxcclxuICBvbkNsaWNrLFxyXG59OiBDYWxlbmRhclllYXJzSXRlbVByb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIGNvbnN0IGNsYXNzZXMgPSBbJ2ZkLWNhbGVuZGFyX19pdGVtJ11cclxuICBpZiAoY3VycmVudCkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKCdmZC1jYWxlbmRhcl9faXRlbS0tY3VycmVudCcpXHJcbiAgfVxyXG5cclxuICBjb25zdCBjbGFzc2VzQnV0dG9uID0gWydmZC1idXR0b24gZmQtYnV0dG9uLS10cmFuc3BhcmVudCBmZC1jYWxlbmRhcl9faXRlbS1idXR0b24nXVxyXG4gIGlmIChhY3RpdmUpIHtcclxuICAgIGNsYXNzZXNCdXR0b24ucHVzaCgnaXMtYWN0aXZlJylcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8dGRcclxuICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX1cclxuICAgICAgcm9sZT0nZ3JpZGNlbGwnXHJcbiAgICA+XHJcbiAgICAgIDxidXR0b25cclxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXNCdXR0b24uam9pbignICcpfVxyXG4gICAgICAgIHR5cGU9J2J1dHRvbidcclxuICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxyXG4gICAgICA+XHJcbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdmZC1jYWxlbmRhcl9fdGV4dCc+XHJcbiAgICAgICAgICB7dGV4dH1cclxuICAgICAgICA8L3NwYW4+XHJcbiAgICAgIDwvYnV0dG9uPlxyXG4gICAgPC90ZD5cclxuICApXHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgeyBCYWRnZSwgQmFkZ2VQcm9wZXJ0aWVzIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9iYWRnZS9CYWRnZSdcclxuXHJcbmltcG9ydCB7IENhcmRIZWFkZXJQcm9wZXJ0aWVzLCBDYXJkSGVhZGVyIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9jYXJkL0NhcmRIZWFkZXInXHJcbmltcG9ydCB7IENhcmRGb290ZXJQcm9wZXJ0aWVzLCBDYXJkRm9vdGVyIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9jYXJkL0NhcmRGb290ZXInXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhcmRQcm9wZXJ0aWVzIHtcclxuICBiYWRnZT86IEJhZGdlUHJvcGVydGllc1xyXG4gIGhlYWRlcjogQ2FyZEhlYWRlclByb3BlcnRpZXNcclxuICBmb290ZXI/OiBDYXJkRm9vdGVyUHJvcGVydGllc1xyXG4gIGNoaWxkcmVuPzogUmVhY3RFbGVtZW50IHwgUmVhY3RFbGVtZW50W10sXHJcbiAgb25DbGljaz86ICgpID0+IHZvaWRcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IENhcmQgPSAoe1xyXG4gIGJhZGdlLFxyXG4gIGhlYWRlcixcclxuICBmb290ZXIsXHJcbiAgY2hpbGRyZW4sXHJcbn06IENhcmRQcm9wZXJ0aWVzKSA9PiB7XHJcblxyXG4gIC8vIEV2ZW50cyAvL1xyXG5cclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIGNvbnN0IGNsYXNzZXMgPSBbJ2ZkLWNhcmQnXVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdlxyXG4gICAgICBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfVxyXG4gICAgPlxyXG4gICAgICB7YmFkZ2UgPyA8QmFkZ2Ugey4uLmJhZGdlfSAvPiA6IG51bGx9XHJcbiAgICAgIDxDYXJkSGVhZGVyIHsuLi5oZWFkZXJ9IC8+XHJcbiAgICAgIHtjaGlsZHJlbiA/XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY2xhc3NOYW1lPSdmZC1jYXJkX19jb250ZW50J1xyXG4gICAgICAgICAgcm9sZT0nZ3JvdXAnXHJcbiAgICAgICAgICBhcmlhLWxhYmVsPSdDYXJkIENvbnRlbnQnXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDogbnVsbH1cclxuICAgICAgPENhcmRGb290ZXIgey4uLmZvb3Rlcn0gLz5cclxuICAgIDwvZGl2PlxyXG4gIClcclxufVxyXG5cclxuXHJcbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdEVsZW1lbnQgfSBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FyZEZvb3RlclByb3BlcnRpZXMge1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZ1xyXG4gIGNoaWxkcmVuPzogUmVhY3RFbGVtZW50IHwgUmVhY3RFbGVtZW50W11cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IENhcmRGb290ZXIgPSAoe1xyXG4gIGNsYXNzTmFtZSxcclxuICBjaGlsZHJlbixcclxufTogQ2FyZEZvb3RlclByb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIGNvbnN0IGNsYXNzZXMgPSBbJ2ZkLWNhcmRfX2Zvb3RlciddXHJcbiAgaWYgKGNsYXNzTmFtZSkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKGNsYXNzTmFtZSlcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8YVxyXG4gICAgICBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfVxyXG4gICAgPlxyXG4gICAgICB7Y2hpbGRyZW59XHJcbiAgICA8L2E+XHJcbiAgKVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCwgeyBLZXlib2FyZEV2ZW50IH0gZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgeyBBdmF0YXIsIEF2YXRhclByb3BlcnRpZXMgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2F2YXRhci9BdmF0YXInXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhcmRIZWFkZXJQcm9wZXJ0aWVzIHtcclxuICBhdmF0YXI/OiBBdmF0YXJQcm9wZXJ0aWVzXHJcbiAgdGl0bGU/OiBzdHJpbmdcclxuICB0aXRsZUNvdW50ZXI/OiBzdHJpbmdcclxuICBzdWJUaXRsZT86IHN0cmluZ1xyXG4gIG9uQ2xpY2s/OiAoKSA9PiB2b2lkXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBDYXJkSGVhZGVyID0gKHtcclxuICBhdmF0YXIsXHJcbiAgdGl0bGUsXHJcbiAgdGl0bGVDb3VudGVyLFxyXG4gIHN1YlRpdGxlLFxyXG4gIG9uQ2xpY2ssXHJcbn06IENhcmRIZWFkZXJQcm9wZXJ0aWVzKSA9PiB7XHJcblxyXG4gIC8vIEV2ZW50cyAvL1xyXG5cclxuICBjb25zdCBvbkNsaWNrZWQgPSAoKSA9PiB7XHJcbiAgICBpZiAob25DbGljaykge1xyXG4gICAgICBvbkNsaWNrKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnN0IG9uS2V5VXAgPSAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcclxuICAgIHN3aXRjaCAoZXZlbnQuY29kZSkge1xyXG4gICAgICBjYXNlICdFbnRlcic6XHJcbiAgICAgIGNhc2UgJ1NwYWNlJzoge1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXHJcbiAgICAgICAgaWYgKG9uQ2xpY2spIHtcclxuICAgICAgICAgIG9uQ2xpY2soKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICBjb25zdCBjbGFzc2VzID0gWydmZC1jYXJkX19oZWFkZXInXVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGFcclxuICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX1cclxuICAgICAgdGFiSW5kZXg9ezB9XHJcbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2tlZH1cclxuICAgICAgb25LZXlVcD17b25LZXlVcH1cclxuICAgID5cclxuICAgICAge2F2YXRhciA/IDxBdmF0YXIgey4uLmF2YXRhcn0gLz4gOiBudWxsfVxyXG4gICAgICB7dGl0bGUgfHwgdGl0bGVDb3VudGVyID9cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtY2FyZF9fdGl0bGUtYXJlYSc+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtY2FyZF9fdGl0bGUnPlxyXG4gICAgICAgICAgICB7dGl0bGV9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nZmQtb2JqZWN0LXN0YXR1cyBmZC1jYXJkX19jb3VudGVyJz5cclxuICAgICAgICAgICAge3RpdGxlQ291bnRlcn1cclxuICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA6IG51bGx9XHJcbiAgICAgIHtzdWJUaXRsZSA/XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZkLWNhcmRfX3N1YnRpdGxlLWFyZWEnPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZkLWNhcmRfX3N1YnRpdGxlJz5cclxuICAgICAgICAgICAge3N1YlRpdGxlfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgOiBudWxsfVxyXG4gICAgPC9hPlxyXG4gIClcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3RFbGVtZW50LCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0J1xyXG5cclxuaW1wb3J0IHsgRGlhbG9nRm9vdGVyIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9kaWFsb2cvRGlhbG9nRm9vdGVyJ1xyXG5pbXBvcnQgeyBEaWFsb2dIZWFkZXIgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2RpYWxvZy9EaWFsb2dIZWFkZXInXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERpYWxvZ1Byb3BlcnRpZXMge1xyXG4gIHJlc2l6YWJsZT86IGJvb2xlYW4sXHJcbiAgdGl0bGU/OiBzdHJpbmcsXHJcbiAgaGVhZGVyPzogYW55LFxyXG4gIGZvb3Rlcj86IGFueSxcclxuICBjaGlsZHJlbj86IFJlYWN0RWxlbWVudCB8IFJlYWN0RWxlbWVudFtdLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgRGlhbG9nID0gKHtcclxuICByZXNpemFibGUsXHJcbiAgaGVhZGVyLFxyXG4gIGZvb3RlcixcclxuICBjaGlsZHJlbixcclxufTogRGlhbG9nUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBIb29rcyAvL1xyXG5cclxuICBjb25zdCByZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpXHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBjdXJyZW50ID0gcmVmPy5jdXJyZW50XHJcbiAgICBpZiAoY3VycmVudCkge1xyXG4gICAgICBjb25zdCBmb2N1c2FibGVFbGVtZW50ID0gY3VycmVudC5xdWVyeVNlbGVjdG9yPEhUTUxFbGVtZW50PignW3RhYmluZGV4PVwiMFwiXScpXHJcbiAgICAgIGlmIChmb2N1c2FibGVFbGVtZW50KSB7XHJcbiAgICAgICAgZm9jdXNhYmxlRWxlbWVudC5mb2N1cygpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LCBbXSlcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8c2VjdGlvbiBjbGFzc05hbWU9J2ZkLWRpYWxvZy1kb2NzLXN0YXRpYyBmZC1kaWFsb2cgZmQtZGlhbG9nLS1hY3RpdmUnPlxyXG5cclxuICAgICAgPGRpdlxyXG4gICAgICAgIGNsYXNzTmFtZT0nZmQtZGlhbG9nX19jb250ZW50J1xyXG4gICAgICAgIHJvbGU9J2RpYWxvZydcclxuICAgICAgICBhcmlhLW1vZGFsPSd0cnVlJ1xyXG4gICAgICAgIGFyaWEtbGFiZWxsZWRieT0nZGlhbG9nLXRpdGxlLTEnXHJcbiAgICAgICAgcmVmPXtyZWZ9XHJcbiAgICAgID5cclxuICAgICAgICB7cmVzaXphYmxlID8gPHNwYW4gY2xhc3NOYW1lPSdmZC1kaWFsb2dfX3Jlc2l6ZS1oYW5kbGUnIC8+IDogbnVsbH1cclxuXHJcbiAgICAgICAge2hlYWRlciA/IDxEaWFsb2dIZWFkZXIgey4uLmhlYWRlcn0gLz4gOiBudWxsfVxyXG5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtZGlhbG9nX19ib2R5Jz5cclxuICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAge2Zvb3RlciA/IDxEaWFsb2dGb290ZXIgey4uLmZvb3Rlcn0gLz4gOiBudWxsfVxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvc2VjdGlvbj5cclxuICApXHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERpYWxvZ0Zvb3RlclByb3BlcnRpZXMge1xyXG4gIGxlZnQ/OiBSZWFjdEVsZW1lbnQgfCBSZWFjdEVsZW1lbnRbXVxyXG4gIHJpZ2h0PzogUmVhY3RFbGVtZW50IHwgUmVhY3RFbGVtZW50W11cclxuICBjaGlsZHJlbj86IFJlYWN0RWxlbWVudCB8IFJlYWN0RWxlbWVudFtdXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBEaWFsb2dGb290ZXIgPSAoe1xyXG4gIGxlZnQsXHJcbiAgcmlnaHQsXHJcbiAgY2hpbGRyZW4sXHJcbn06IERpYWxvZ0Zvb3RlclByb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIGNvbnN0IHJlbmRlckVsZW1lbnRzID0gKGVsZW1lbnRzOiBSZWFjdEVsZW1lbnQgfCBSZWFjdEVsZW1lbnRbXSB8IG51bGwgfCB1bmRlZmluZWQpID0+IHtcclxuICAgIGlmIChlbGVtZW50cykge1xyXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShlbGVtZW50cykpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgPD5cclxuICAgICAgICAgICAge2VsZW1lbnRzLm1hcCgoZWxlbSwgaW5kZXgpID0+IHJlbmRlckVsZW1lbnQoZWxlbSwgYGVsZW0tJHtpbmRleH1gKSl9XHJcbiAgICAgICAgICA8Lz5cclxuICAgICAgICApXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHJlbmRlckVsZW1lbnQoZWxlbWVudHMpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsXHJcbiAgfVxyXG5cclxuICBjb25zdCByZW5kZXJFbGVtZW50ID0gKGVsZW1lbnQ6IFJlYWN0RWxlbWVudCwga2V5Pzogc3RyaW5nKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGtleT17a2V5fSBjbGFzc05hbWU9J2ZkLWJhcl9fZWxlbWVudCc+XHJcbiAgICAgICAge2VsZW1lbnR9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxmb290ZXIgY2xhc3NOYW1lPSdmZC1kaWFsb2dfX2Zvb3RlciBmZC1iYXIgZmQtYmFyLS1mb290ZXInPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtYmFyX19sZWZ0Jz5cclxuICAgICAgICB7bGVmdCA/IHJlbmRlckVsZW1lbnRzKGxlZnQpIDogbnVsbH1cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1iYXJfX3JpZ2h0Jz5cclxuICAgICAgICB7cmlnaHQgPyByZW5kZXJFbGVtZW50cyhyaWdodCkgOiByZW5kZXJFbGVtZW50cyhjaGlsZHJlbil9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9mb290ZXI+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0RWxlbWVudCB9IGZyb20gJ3JlYWN0J1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEaWFsb2dIZWFkZXJQcm9wZXJ0aWVzIHtcclxuICBsZWZ0PzogUmVhY3RFbGVtZW50IHwgUmVhY3RFbGVtZW50W11cclxuICByaWdodD86IFJlYWN0RWxlbWVudCB8IFJlYWN0RWxlbWVudFtdLFxyXG4gIHN1YmhlYWRlcj86IGJvb2xlYW5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IERpYWxvZ0hlYWRlciA9ICh7XHJcbiAgbGVmdCxcclxuICByaWdodCxcclxuICBzdWJoZWFkZXIsXHJcbn06IERpYWxvZ0hlYWRlclByb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIGNvbnN0IGNsYXNzZXMgPSBbJ2ZkLWRpYWxvZ19faGVhZGVyIGZkLWJhciddXHJcblxyXG4gIGlmIChzdWJoZWFkZXIpIHtcclxuICAgIGNsYXNzZXMucHVzaCgnZmQtYmFyLS1oZWFkZXItd2l0aC1zdWJoZWFkZXInKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBjbGFzc2VzLnB1c2goJ2ZkLWJhci0taGVhZGVyJylcclxuICB9XHJcblxyXG4gIGNvbnN0IHJlbmRlckVsZW1lbnRzID0gKGVsZW1lbnRzOiBSZWFjdEVsZW1lbnQgfCBSZWFjdEVsZW1lbnRbXSB8IG51bGwgfCB1bmRlZmluZWQpID0+IHtcclxuICAgIGlmIChlbGVtZW50cykge1xyXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShlbGVtZW50cykpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgPD5cclxuICAgICAgICAgICAge2VsZW1lbnRzLm1hcCgoZWxlbSwgaW5kZXgpID0+IHJlbmRlckVsZW1lbnQoZWxlbSwgYGVsZW0tJHtpbmRleH1gKSl9XHJcbiAgICAgICAgICA8Lz5cclxuICAgICAgICApXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHJlbmRlckVsZW1lbnQoZWxlbWVudHMpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnN0IHJlbmRlckVsZW1lbnQgPSAoZWxlbWVudDogUmVhY3RFbGVtZW50LCBrZXk/OiBzdHJpbmcpID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYga2V5PXtrZXl9IGNsYXNzTmFtZT0nZmQtYmFyX19lbGVtZW50Jz5cclxuICAgICAgICB7ZWxlbWVudH1cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGZvb3RlciBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfT5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9J2ZkLWJhcl9fbGVmdCc+XHJcbiAgICAgICAge2xlZnQgPyByZW5kZXJFbGVtZW50cyhsZWZ0KSA6IG51bGx9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtYmFyX19yaWdodCc+XHJcbiAgICAgICAge3JlbmRlckVsZW1lbnRzKHJpZ2h0KX1cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Zvb3Rlcj5cclxuICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgeyBVVUlEIH0gZnJvbSAnQHVuY292ZXIvanMtdXRpbHMnXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1JbnB1dFByb3BlcnRpZXMge1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZ1xyXG4gIGxhYmVsPzogc3RyaW5nXHJcbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmdcclxuICB0eXBlPzogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBGb3JtSW5wdXQgPSAoe1xyXG4gIGNsYXNzTmFtZSxcclxuICBsYWJlbCxcclxuICBwbGFjZWhvbGRlcixcclxuICB0eXBlID0gJ3RleHQnLFxyXG59OiBGb3JtSW5wdXRQcm9wZXJ0aWVzKSA9PiB7XHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICBjb25zdCBpZCA9IFVVSUQubmV4dCgpXHJcblxyXG4gIGNvbnN0IGNsYXNzZXMgPSBbJ2ZkLWZvcm0taXRlbSddXHJcbiAgaWYgKGNsYXNzTmFtZSkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKGNsYXNzTmFtZSlcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5qb2luKCcgJyl9PlxyXG4gICAgICA8bGFiZWxcclxuICAgICAgICBjbGFzc05hbWU9J2ZkLWZvcm0tbGFiZWwnXHJcbiAgICAgICAgaHRtbEZvcj17aWR9XHJcbiAgICAgID5cclxuICAgICAgICB7bGFiZWx9XHJcbiAgICAgIDwvbGFiZWw+XHJcbiAgICAgIDxpbnB1dFxyXG4gICAgICAgIGNsYXNzTmFtZT0nZmQtaW5wdXQnXHJcbiAgICAgICAgdHlwZT17dHlwZX1cclxuICAgICAgICBpZD17aWR9XHJcbiAgICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxyXG4gICAgICAvPlxyXG4gICAgPC9kaXY+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0LCB7IENoYW5nZUV2ZW50LCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCB7IFVVSUQgfSBmcm9tICdAdW5jb3Zlci9qcy11dGlscydcclxuXHJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvYnV0dG9uL0J1dHRvbidcclxuaW1wb3J0IHsgQnV0dG9uU3R5bGVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL0J1dHRvblN0eWxlJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGb3JtU3RlcElucHV0UHJvcGVydGllcyB7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nXHJcbiAgbGFiZWw/OiBzdHJpbmdcclxuICBtaW46IG51bWJlclxyXG4gIG1heD86IG51bWJlclxyXG4gIHZhbHVlOiBudW1iZXJcclxuICBvbkNoYW5nZTogKHY6IG51bWJlcikgPT4gdm9pZFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgRm9ybVN0ZXBJbnB1dCA9ICh7XHJcbiAgY2xhc3NOYW1lLFxyXG4gIGxhYmVsLFxyXG4gIG1pbixcclxuICBtYXgsXHJcbiAgdmFsdWUsXHJcbiAgb25DaGFuZ2UsXHJcbn06IEZvcm1TdGVwSW5wdXRQcm9wZXJ0aWVzKSA9PiB7XHJcblxyXG4gIC8vIEhvb2tzIC8vXHJcblxyXG4gIGNvbnN0IGlucHV0ID0gdXNlUmVmKG51bGwpXHJcbiAgY29uc3QgW2N1cnJlbnRWYWx1ZSwgc2V0Q3VycmVudFZhbHVlXSA9IHVzZVN0YXRlPG51bWJlcj4obWluKVxyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgdXBkYXRlVmFsdWUodmFsdWUpXHJcbiAgfSwgW3ZhbHVlXSlcclxuXHJcbiAgY29uc3QgdXBkYXRlVmFsdWUgPSAobmV3VmFsdWU6IG51bWJlcikgPT4ge1xyXG4gICAgbGV0IHRtcFZhbHVlID0gbmV3VmFsdWVcclxuICAgIGlmICghaXNOYU4obWluKSAmJiB0bXBWYWx1ZSA8IG1pbikge1xyXG4gICAgICB0bXBWYWx1ZSA9IG1pblxyXG4gICAgfVxyXG4gICAgaWYgKG1heCAmJiAhaXNOYU4obWF4KSAmJiB0bXBWYWx1ZSA+IG1heCkge1xyXG4gICAgICB0bXBWYWx1ZSA9IG1heFxyXG4gICAgfVxyXG4gICAgc2V0Q3VycmVudFZhbHVlKHRtcFZhbHVlKVxyXG4gICAgb25DaGFuZ2UodG1wVmFsdWUpXHJcbiAgfVxyXG5cclxuICAvLyBFdmVudHMgLy9cclxuXHJcbiAgY29uc3Qgb25WYWx1ZURvd24gPSAoKSA9PiB7XHJcbiAgICB1cGRhdGVWYWx1ZShjdXJyZW50VmFsdWUgLSAxKVxyXG4gIH1cclxuXHJcbiAgY29uc3Qgb25WYWx1ZVVwID0gKCkgPT4ge1xyXG4gICAgdXBkYXRlVmFsdWUoY3VycmVudFZhbHVlICsgMSlcclxuICB9XHJcblxyXG4gIGNvbnN0IG9uSW5wdXRDaGFuZ2UgPSAoZXZlbnQ6IENoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XHJcbiAgICB1cGRhdGVWYWx1ZShOdW1iZXIoZXZlbnQudGFyZ2V0LnZhbHVlKSlcclxuICB9XHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICBjb25zdCBpZCA9IFVVSUQubmV4dCgpXHJcblxyXG4gIGNvbnN0IGNsYXNzZXMgPSBbJ2ZkLWZvcm0taXRlbSddXHJcbiAgaWYgKGNsYXNzTmFtZSkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKGNsYXNzTmFtZSlcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5qb2luKCcgJyl9PlxyXG4gICAgICA8bGFiZWxcclxuICAgICAgICBjbGFzc05hbWU9J2ZkLWZvcm0tbGFiZWwnXHJcbiAgICAgICAgaHRtbEZvcj17aWR9XHJcbiAgICAgID5cclxuICAgICAgICB7bGFiZWx9XHJcbiAgICAgIDwvbGFiZWw+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1zdGVwLWlucHV0Jz5cclxuICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICBjbGFzc05hbWU9J2ZkLXN0ZXAtaW5wdXRfX2J1dHRvbidcclxuICAgICAgICAgIGFyaWFMYWJlbD0nU3RlcCBkb3duJ1xyXG4gICAgICAgICAgc3R5bGU9e0J1dHRvblN0eWxlcy5UUkFOU1BBUkVOVH1cclxuICAgICAgICAgIHRhYkluZGV4PXstMX1cclxuICAgICAgICAgIGljb249J2xlc3MnXHJcbiAgICAgICAgICBvbkNsaWNrPXtvblZhbHVlRG93bn1cclxuICAgICAgICAvPlxyXG4gICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgaWQ9e2lkfVxyXG4gICAgICAgICAgY2xhc3NOYW1lPSdmZC1pbnB1dCBmZC1pbnB1dC0tbm8tbnVtYmVyLXNwaW5uZXIgZmQtc3RlcC1pbnB1dF9faW5wdXQnXHJcbiAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnXHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgICAgdHlwZT0nbnVtYmVyJ1xyXG4gICAgICAgICAgdmFsdWU9e2N1cnJlbnRWYWx1ZX1cclxuICAgICAgICAgIHJlZj17aW5wdXR9XHJcbiAgICAgICAgICBvbkNoYW5nZT17b25JbnB1dENoYW5nZX1cclxuICAgICAgICAvPlxyXG4gICAgICAgIDxCdXR0b25cclxuICAgICAgICAgIGNsYXNzTmFtZT0nZmQtc3RlcC1pbnB1dF9fYnV0dG9uJ1xyXG4gICAgICAgICAgYXJpYUxhYmVsPSdTdGVwIFVwJ1xyXG4gICAgICAgICAgc3R5bGU9e0J1dHRvblN0eWxlcy5UUkFOU1BBUkVOVH1cclxuICAgICAgICAgIHRhYkluZGV4PXstMX1cclxuICAgICAgICAgIGljb249J2FkZCdcclxuICAgICAgICAgIG9uQ2xpY2s9e29uVmFsdWVVcH1cclxuICAgICAgICAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCwgeyBSZWFjdEVsZW1lbnQgfSBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCB7XHJcbiAgSWNvblRhYkJhckl0ZW0sXHJcbiAgSWNvblRhYkJhckl0ZW1Qcm9wZXJ0aWVzXHJcbn0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9pY29udGFiYmFyL0ljb25UYWJCYXJJdGVtJ1xyXG5cclxuaW1wb3J0ICcuL0ljb25UYWJCYXIuY3NzJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJY29uVGFiQmFyUHJvcGVydGllcyB7XHJcbiAgc2VsZWN0ZWRUYWI/OiBzdHJpbmdcclxuICB0YWJzPzogSWNvblRhYkJhckl0ZW1Qcm9wZXJ0aWVzW11cclxuICBjaGlsZHJlbj86IFJlYWN0RWxlbWVudCB8IFJlYWN0RWxlbWVudFtdXHJcbiAgb25UYWJTZWxlY3Q/OiAoaWQ6IHN0cmluZykgPT4gdm9pZFxyXG59XHJcbmV4cG9ydCBjb25zdCBJY29uVGFiQmFyID0gKHtcclxuICBzZWxlY3RlZFRhYixcclxuICB0YWJzLFxyXG4gIG9uVGFiU2VsZWN0LFxyXG4gIGNoaWxkcmVuXHJcbn06IEljb25UYWJCYXJQcm9wZXJ0aWVzKSA9PiB7XHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICBjb25zdCBjbGFzc2VzID0gWydmZC1pY29uLXRhYi1iYXInXVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfT5cclxuICAgICAgPHVsXHJcbiAgICAgICAgY2xhc3NOYW1lPSdmZC1pY29uLXRhYi1iYXJfX2hlYWRlcidcclxuICAgICAgICByb2xlPSd0YWJsaXN0J1xyXG4gICAgICA+XHJcbiAgICAgICAge3RhYnM/Lm1hcCh0YWIgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPEljb25UYWJCYXJJdGVtXHJcbiAgICAgICAgICAgICAga2V5PXt0YWIuaWR9XHJcbiAgICAgICAgICAgICAgc2VsZWN0ZWQ9e3NlbGVjdGVkVGFiID09PSB0YWIuaWR9XHJcbiAgICAgICAgICAgICAgey4uLnRhYn1cclxuICAgICAgICAgICAgICBvblRhYlNlbGVjdD17b25UYWJTZWxlY3R9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgfSl9XHJcbiAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICA8L3VsPlxyXG4gICAgPC9kaXY+XHJcbiAgKVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCwgeyBLZXlib2FyZEV2ZW50IH0gZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgeyBTZW1hbnRpYyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9TZW1hbnRpYydcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSWNvblRhYkJhckl0ZW1Qcm9wZXJ0aWVzIHtcclxuICBpZDogc3RyaW5nXHJcbiAgYmFkZ2U/OiBib29sZWFuXHJcbiAgc2VsZWN0ZWQ/OiBib29sZWFuXHJcbiAgc2VtYW50aWM/OiBTZW1hbnRpY1xyXG4gIHRpdGxlOiBzdHJpbmdcclxuICBvblRhYlNlbGVjdD86IChpZDogc3RyaW5nKSA9PiB2b2lkXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBJY29uVGFiQmFySXRlbSA9ICh7XHJcbiAgaWQsXHJcbiAgYmFkZ2UsXHJcbiAgc2VsZWN0ZWQsXHJcbiAgc2VtYW50aWMsXHJcbiAgdGl0bGUsXHJcbiAgb25UYWJTZWxlY3QsXHJcbn06IEljb25UYWJCYXJJdGVtUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBFdmVudHMgLy9cclxuXHJcbiAgY29uc3Qgb25DbGljayA9ICgpID0+IHtcclxuICAgIGlmIChvblRhYlNlbGVjdCkge1xyXG4gICAgICBvblRhYlNlbGVjdChpZClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnN0IG9uS2V5VXAgPSAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcclxuICAgIHN3aXRjaCAoZXZlbnQuY29kZSkge1xyXG4gICAgICBjYXNlICdFbnRlcic6XHJcbiAgICAgIGNhc2UgJ1NwYWNlJzoge1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXHJcbiAgICAgICAgaWYgKG9uVGFiU2VsZWN0KSB7XHJcbiAgICAgICAgICBvblRhYlNlbGVjdChpZClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgY29uc3QgY2xhc3NlcyA9IFsnZmQtaWNvbi10YWItYmFyX19pdGVtJ11cclxuICBpZiAoc2VtYW50aWMpIHtcclxuICAgIGNsYXNzZXMucHVzaChgZmQtaWNvbi10YWItYmFyX19pdGVtLS0ke3NlbWFudGljfWApXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGxpXHJcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5qb2luKCcgJyl9XHJcbiAgICAgIHJvbGU9J3ByZXNlbnRhdGlvbidcclxuICAgICAgb25DbGljaz17b25DbGlja31cclxuICAgICAgb25LZXlVcD17b25LZXlVcH1cclxuICAgID5cclxuICAgICAgPHNwYW5cclxuICAgICAgICBpZD17aWR9XHJcbiAgICAgICAgY2xhc3NOYW1lPSdmZC1pY29uLXRhYi1iYXJfX3RhYidcclxuICAgICAgICBhcmlhLXNlbGVjdGVkPXshIXNlbGVjdGVkfVxyXG4gICAgICAgIHJvbGU9J3RhYidcclxuICAgICAgICB0YWJJbmRleD17MH1cclxuICAgICAgPlxyXG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nZmQtaWNvbi10YWItYmFyX190YWcnPlxyXG4gICAgICAgICAge3RpdGxlfVxyXG4gICAgICAgIDwvc3Bhbj5cclxuICAgICAgICB7YmFkZ2UgP1xyXG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdmZC1pY29uLXRhYi1iYXJfX2JhZGdlJyAvPlxyXG4gICAgICAgICAgOiBudWxsfVxyXG4gICAgICA8L3NwYW4+XHJcbiAgICA8L2xpPlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCB7IEFjY2VudENvbG9yIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL0FjY2VudENvbG9yJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJbmZvTGFiZWxQcm9wZXJ0aWVzIHtcclxuICBpY29uPzogc3RyaW5nLFxyXG4gIHRleHQ/OiBzdHJpbmcsXHJcbiAgZGlzcGxheT86IGJvb2xlYW5cclxuICBudW1lcmljPzogYm9vbGVhblxyXG4gIGFjY2VudENvbG9yPzogQWNjZW50Q29sb3IsXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBJbmZvTGFiZWwgPSAoe1xyXG4gIGljb24sXHJcbiAgdGV4dCxcclxuICBkaXNwbGF5LFxyXG4gIG51bWVyaWMsXHJcbiAgYWNjZW50Q29sb3IsXHJcbn06IEluZm9MYWJlbFByb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIGNvbnN0IGNsYXNzZXMgPSBbJ2ZkLWluZm8tbGFiZWwnXVxyXG4gIGlmIChhY2NlbnRDb2xvcikge1xyXG4gICAgY2xhc3Nlcy5wdXNoKGBmZC1pbmZvLWxhYmVsLS0ke2FjY2VudENvbG9yfWApXHJcbiAgfVxyXG4gIGlmIChudW1lcmljKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goJ2ZkLWluZm8tbGFiZWwtLW51bWVyaWMnKVxyXG4gIH1cclxuICBpZiAoZGlzcGxheSkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKCdmZC1pbmZvLWxhYmVsLS1kaXNwbGF5JylcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8c3BhbiBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfT5cclxuICAgICAge2ljb24gP1xyXG4gICAgICAgIDxpXHJcbiAgICAgICAgICBjbGFzc05hbWU9e2BmZC1pbmZvLWxhYmVsX19pY29uIHNhcC1pY29uLS0ke2ljb259YH1cclxuICAgICAgICAgIHJvbGU9J3ByZXNlbnRhdGlvbidcclxuICAgICAgICA+PC9pPlxyXG4gICAgICAgIDogbnVsbH1cclxuICAgICAge3RleHQgP1xyXG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nZmQtaW5mby1sYWJlbF9fdGV4dCc+XHJcbiAgICAgICAgICB7dGV4dH1cclxuICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgOiBudWxsfVxyXG4gICAgPC9zcGFuPlxyXG4gIClcclxufSIsImltcG9ydCB7IExpbmtUeXBlIH0gZnJvbSAnY29uc3RhbnRzL0xpbmtUeXBlJ1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMaW5rUHJvcGVydGllcyB7XHJcbiAgaHJlZjpzdHJpbmdcclxuICBjbGFzc05hbWU/OiBzdHJpbmdcclxuICBhcmlhTGFiZWw/OiBzdHJpbmdcclxuICBzdHlsZT86IExpbmtUeXBlXHJcbiAgaWNvbj86IHN0cmluZ1xyXG4gIGljb25BZnRlcj86IGJvb2xlYW5cclxuICB0ZXh0OiBzdHJpbmcgfCBudW1iZXJcclxuICBkaXNhYmxlZD86IGJvb2xlYW5cclxuICB0YWJJbmRleD86IG51bWJlclxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgTGluayA9ICh7XHJcbiAgaHJlZixcclxuICBjbGFzc05hbWUsXHJcbiAgYXJpYUxhYmVsLFxyXG4gIHN0eWxlLFxyXG4gIGljb24sXHJcbiAgaWNvbkFmdGVyLFxyXG4gIHRleHQsXHJcbiAgZGlzYWJsZWQsXHJcbiAgdGFiSW5kZXgsXHJcbn06IExpbmtQcm9wZXJ0aWVzKSA9PiB7XHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICBjb25zdCBjbGFzc2VzID0gWydmZC1saW5rJ11cclxuICBpZiAoY2xhc3NOYW1lKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goY2xhc3NOYW1lKVxyXG4gIH1cclxuXHJcbiAgaWYgKHN0eWxlKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goYGZkLWxpbmstLSR7c3R5bGV9YClcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8YVxyXG4gICAgICBocmVmPXtocmVmfVxyXG4gICAgICBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfVxyXG4gICAgICBhcmlhLWxhYmVsPXthcmlhTGFiZWx9XHJcbiAgICAgIHRhYkluZGV4PXt0YWJJbmRleCA/IHRhYkluZGV4IDogMH1cclxuICAgICAgYXJpYS1kaXNhYmxlZD17ZGlzYWJsZWQgPyB0cnVlIDogZmFsc2V9XHJcbiAgICA+XHJcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZkLWxpbmtfX2NvbnRlbnRcIj5cclxuXHJcbiAgICAgIHtpY29uICYmICFpY29uQWZ0ZXIgP1xyXG4gICAgICA8c3BhbiBjbGFzc05hbWU9e2BzYXAtaWNvbi0tJHtpY29ufWB9Pjwvc3Bhbj5cclxuICAgICAgOiBudWxsfVxyXG5cclxuICAgICAge3RleHR9XHJcblxyXG4gICAgICB7aWNvbiAmJiBpY29uQWZ0ZXIgP1xyXG4gICAgICA8c3BhbiBjbGFzc05hbWU9e2BzYXAtaWNvbi0tJHtpY29ufWB9Pjwvc3Bhbj5cclxuICAgICAgOiBudWxsfVxyXG5cclxuICAgICAgPC9zcGFuPlxyXG5cclxuICAgIDwvYT5cclxuICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE9iamVjdEF0dHJpYnV0ZVByb3BlcnRpZXMge1xyXG4gIHRleHQ/OiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE9iamVjdEF0dHJpYnV0ZSA9ICh7XHJcbiAgdGV4dFxyXG59OiBPYmplY3RBdHRyaWJ1dGVQcm9wZXJ0aWVzKSA9PiB7XHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9J2ZkLW9iamVjdC1saXN0X19vYmplY3QtYXR0cmlidXRlJz5cclxuICAgICAge3RleHR9XHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCAnLi9PYmplY3RIZWFkZXJBdHRyaWJ1dGUuY3NzJ1xyXG5leHBvcnQgaW50ZXJmYWNlIE9iamVjdEhlYWRlckF0dHJpYnV0ZVByb3BlcnRpZXMge1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZyxcclxuICBsYWJlbDogc3RyaW5nLFxyXG4gIHRleHQ6IHN0cmluZyxcclxufVxyXG5leHBvcnQgY29uc3QgT2JqZWN0SGVhZGVyQXR0cmlidXRlID0gKHtcclxuICBjbGFzc05hbWUsXHJcbiAgbGFiZWwsXHJcbiAgdGV4dCxcclxufTogT2JqZWN0SGVhZGVyQXR0cmlidXRlUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgY29uc3QgY2xhc3NlcyA9IFsnZmQtb2JqZWN0LWhlYWRlci1hdHRyaWJ1dGUnXVxyXG4gIGlmIChjbGFzc05hbWUpIHtcclxuICAgIGNsYXNzZXMucHVzaChjbGFzc05hbWUpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfT5cclxuICAgICAgPGxhYmVsIGNsYXNzTmFtZT0nZmQtb2JqZWN0LWhlYWRlci1hdHRyaWJ1dGVfX2xhYmVsJz5cclxuICAgICAgICB7bGFiZWx9XHJcbiAgICAgIDwvbGFiZWw+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1vYmplY3QtaGVhZGVyLWF0dHJpYnV0ZV9fdGV4dCc+XHJcbiAgICAgICAge3RleHR9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBPYmplY3RJZGVudGlmaWVyUHJvcGVydGllcyB7XHJcbiAgdGl0bGU6IHN0cmluZ1xyXG4gIHRleHQ/OiBzdHJpbmdcclxuICBib2xkPzogYm9vbGVhblxyXG4gIG1lZGl1bT86IGJvb2xlYW5cclxuICBjbGFzc05hbWU/OiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE9iamVjdElkZW50aWZpZXIgPSAoe1xyXG4gIHRpdGxlLFxyXG4gIHRleHQsXHJcbiAgYm9sZCxcclxuICBtZWRpdW0sXHJcbiAgY2xhc3NOYW1lLFxyXG59OiBPYmplY3RJZGVudGlmaWVyUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgY29uc3QgY2xhc3NlcyA9IFsnZmQtb2JqZWN0LWlkZW50aWZpZXInXVxyXG4gIGlmIChtZWRpdW0pIHtcclxuICAgIGNsYXNzZXMucHVzaCgnZmQtb2JqZWN0LWlkZW50aWZpZXItLW1lZGl1bScpXHJcbiAgfVxyXG4gIGlmIChjbGFzc05hbWUpIHtcclxuICAgIGNsYXNzZXMucHVzaChjbGFzc05hbWUpXHJcbiAgfVxyXG5cclxuICBjb25zdCBjbGFzc2VzVGl0bGUgPSBbJ2ZkLW9iamVjdC1pZGVudGlmaWVyX190aXRsZSddXHJcbiAgaWYgKGJvbGQpIHtcclxuICAgIGNsYXNzZXNUaXRsZS5wdXNoKCdmZC1vYmplY3QtaWRlbnRpZmllcl9fdGl0bGUtLWJvbGQnKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX0+XHJcbiAgICAgIDxwIGNsYXNzTmFtZT17Y2xhc3Nlc1RpdGxlLmpvaW4oJyAnKX0+XHJcbiAgICAgICAge3RpdGxlfVxyXG4gICAgICA8L3A+XHJcbiAgICAgIHt0ZXh0ID9cclxuICAgICAgICA8cCBjbGFzc05hbWU9J2ZkLW9iamVjdC1pZGVudGlmaWVyX190ZXh0Jz5cclxuICAgICAgICAgIHt0ZXh0fVxyXG4gICAgICAgIDwvcD5cclxuICAgICAgICA6IG51bGx9XHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQge1xyXG4gIE9iamVjdExpc3RJdGVtLFxyXG4gIE9iamVjdExpc3RJdGVtUHJvcGVydGllc1xyXG59IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvb2JqZWN0L09iamVjdExpc3RJdGVtJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBPYmplY3RMaXN0UHJvcGVydGllcyB7XHJcbiAgYXJpYUxhYmVsZWRCeTogc3RyaW5nXHJcbiAgaXRlbXM/OiBPYmplY3RMaXN0SXRlbVByb3BlcnRpZXNbXVxyXG4gIGNoaWxkcmVuPzogUmVhY3RFbGVtZW50IHwgUmVhY3RFbGVtZW50W11cclxuICBib3JkZXJlZD86IGJvb2xlYW5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE9iamVjdExpc3QgPSAoe1xyXG4gIGFyaWFMYWJlbGVkQnksXHJcbiAgaXRlbXMsXHJcbiAgY2hpbGRyZW4sXHJcbiAgYm9yZGVyZWQsXHJcbn06IE9iamVjdExpc3RQcm9wZXJ0aWVzKSA9PiB7XHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICBjb25zdCBjbGFzc2VzID0gWydmZC1saXN0IGZkLW9iamVjdC1saXN0J11cclxuICBpZiAoIWJvcmRlcmVkKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goJ2ZkLWxpc3QtLW5vLWJvcmRlcicpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPHVsXHJcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5qb2luKCcgJyl9XHJcbiAgICAgIHJvbGU9J2xpc3QnXHJcbiAgICAgIGFyaWEtbGFiZWxsZWRieT17YXJpYUxhYmVsZWRCeX1cclxuICAgID5cclxuICAgICAge2l0ZW1zPy5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgIDxPYmplY3RMaXN0SXRlbSBrZXk9e2BpdGVtLSR7aW5kZXh9YH0gey4uLml0ZW19IC8+XHJcbiAgICAgICAgKVxyXG4gICAgICB9KX1cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC91bD5cclxuICApXHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgeyBBdmF0YXIsIEF2YXRhclByb3BlcnRpZXMgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2F2YXRhci9BdmF0YXInXHJcbmltcG9ydCB7IE9iamVjdEF0dHJpYnV0ZSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvb2JqZWN0L09iamVjdEF0dHJpYnV0ZSdcclxuaW1wb3J0IHsgT2JqZWN0SWRlbnRpZmllciB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvb2JqZWN0L09iamVjdElkZW50aWZpZXInXHJcbmltcG9ydCB7IE9iamVjdE1hcmtlciB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvb2JqZWN0L09iamVjdE1hcmtlcidcclxuaW1wb3J0IHsgT2JqZWN0TnVtYmVyIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9vYmplY3QvT2JqZWN0TnVtYmVyJ1xyXG5pbXBvcnQgeyBPYmplY3RTdGF0dXMgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL29iamVjdC9PYmplY3RTdGF0dXMnXHJcblxyXG5pbXBvcnQgeyBTaXplcyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9TaXplJ1xyXG5cclxuLypcclxuPE9iamVjdExpc3RJdGVtXHJcbiAgaW50cm89J2hlbGxvIHdvcmxkJ1xyXG4gIGF2YXRhcj17e1xyXG4gICAgaWNvbjogJ2hvbWUnLFxyXG4gICAgbGFiZWw6ICdIb21lJyxcclxuICAgIGNpcmNsZTogdHJ1ZVxyXG4gIH19XHJcbiAgdGl0bGU9J015IE9iamVjdCBMaXN0IEl0ZW0nXHJcbiAgaW5mbz17e1xyXG4gICAgdHlwZTogJ251bWJlcicsXHJcbiAgICBwcm9wczoge1xyXG4gICAgICB2YWx1ZTogJzQ1Ny4wMCcsXHJcbiAgICAgIHVuaXQ6ICdFVVInXHJcbiAgICB9XHJcbiAgfX1cclxuICBhdHRyaWJ1dGVzPXtbXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdGaXJzdCBBdHRyaWJ1dGUnLFxyXG4gICAgICBpdGVtczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIHR5cGU6ICdtYXJrZXInLFxyXG4gICAgICAgICAgcHJvcHM6IHsgaWNvbjogJ2ZsYWcnLCBpY29uT25seTogdHJ1ZSB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICB0eXBlOiAnbWFya2VyJyxcclxuICAgICAgICAgIHByb3BzOiB7IGljb246ICdmYXZvcml0ZScsIGljb25Pbmx5OiB0cnVlIH1cclxuICAgICAgICB9XHJcbiAgICAgIF1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICdTZWNvbmQgQXR0cmlidXRlJyxcclxuICAgICAgaXRlbXM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICB0eXBlOiAnc3RhdHVzJyxcclxuICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgIHRleHQ6ICdQb3NpdGl2ZSBWYWx1ZScsXHJcbiAgICAgICAgICAgIHNlbWFudGljOiAncG9zaXRpdmUnXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICBdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiAnVGhpcmQgQXR0cmlidXRlJyxcclxuICAgICAgaXRlbXM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICB0eXBlOiAnYXR0cmlidXRlJyxcclxuICAgICAgICAgIHByb3BzOiB7IHRleHQ6ICdWYWx1ZScgfVxyXG4gICAgICAgIH1cclxuICAgICAgXVxyXG4gICAgfSxcclxuICBdfVxyXG4vPlxyXG4qL1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBPYmplY3RMaXN0SXRlbVByb3BlcnRpZXMge1xyXG4gIGludHJvPzogc3RyaW5nXHJcbiAgYXZhdGFyPzogQXZhdGFyUHJvcGVydGllc1xyXG4gIHRpdGxlPzogc3RyaW5nXHJcbiAgaW5mbz86IGFueVxyXG4gIGF0dHJpYnV0ZXM/OiBhbnlbXVxyXG4gIGNoaWxkcmVuPzogUmVhY3RFbGVtZW50IHwgUmVhY3RFbGVtZW50W11cclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIE9iamVjdExpc3RJdGVtSGVhZGVyUHJvcGVydGllcyB7XHJcbiAgYXZhdGFyPzogUmVhY3RFbGVtZW50XHJcbiAgbGVmdD86IFJlYWN0RWxlbWVudCB8IFJlYWN0RWxlbWVudFtdXHJcbiAgcmlnaHQ/OiBSZWFjdEVsZW1lbnQgfCBSZWFjdEVsZW1lbnRbXVxyXG4gIGNoaWxkcmVuPzogUmVhY3RFbGVtZW50IHwgUmVhY3RFbGVtZW50W11cclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIE9iamVjdExpc3RJdGVtUm93UHJvcGVydGllcyB7XHJcbiAgbGVmdD86IFJlYWN0RWxlbWVudCB8IFJlYWN0RWxlbWVudFtdXHJcbiAgcmlnaHQ/OiBSZWFjdEVsZW1lbnQgfCBSZWFjdEVsZW1lbnRbXVxyXG4gIGNoaWxkcmVuPzogUmVhY3RFbGVtZW50IHwgUmVhY3RFbGVtZW50W11cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE9iamVjdExpc3RJdGVtID0gKHtcclxuICBpbnRybyxcclxuICBhdmF0YXIsXHJcbiAgdGl0bGUsXHJcbiAgaW5mbyxcclxuICBhdHRyaWJ1dGVzLFxyXG4gIGNoaWxkcmVuLFxyXG59OiBPYmplY3RMaXN0SXRlbVByb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIHJldHVybiAoXHJcblxyXG4gICAgPGxpXHJcbiAgICAgIGNsYXNzTmFtZT0nZmQtbGlzdF9faXRlbSBmZC1vYmplY3QtbGlzdF9faXRlbSdcclxuICAgICAgc3R5bGU9e3tcclxuICAgICAgICBoZWlnaHQ6ICdhdXRvJ1xyXG4gICAgICB9fVxyXG4gICAgICByb2xlPSdsaXN0aXRlbSdcclxuICAgICAgdGFiSW5kZXg9ezB9XHJcbiAgICA+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1vYmplY3QtbGlzdF9fY29udGFpbmVyJz5cclxuICAgICAgICB7aW50cm8gP1xyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZkLW9iamVjdC1saXN0X19pbnRybyc+XHJcbiAgICAgICAgICAgIHtpbnRyb31cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgOiBudWxsfVxyXG4gICAgICAgIHtpbmZvICYmIGF2YXRhciAmJiB0aXRsZSA/XHJcbiAgICAgICAgICA8T2JqZWN0TGlzdEl0ZW1IZWFkZXJcclxuICAgICAgICAgICAgYXZhdGFyPXs8QXZhdGFyIHsuLi5hdmF0YXJ9IHNpemU9e1NpemVzLlNNQUxMfSAvPn1cclxuICAgICAgICAgICAgbGVmdD17XHJcbiAgICAgICAgICAgICAgPE9iamVjdElkZW50aWZpZXJcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nZmQtb2JqZWN0LWxpc3RfX29iamVjdC1pZGVudGlmaWVyJ1xyXG4gICAgICAgICAgICAgICAgdGl0bGU9e3RpdGxlfVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmlnaHQ9e1xyXG4gICAgICAgICAgICAgIDxPYmplY3RMaXN0SXRlbUluZm9cclxuICAgICAgICAgICAgICAgIHR5cGU9e2luZm8udHlwZX1cclxuICAgICAgICAgICAgICAgIHByb3BzPXtpbmZvLnByb3BzfVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA6IG51bGx9XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZkLW9iamVjdC1saXN0X19jb250ZW50Jz5cclxuICAgICAgICAgIHthdHRyaWJ1dGVzPy5tYXAoKGF0dHJpYnV0ZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICA8T2JqZWN0TGlzdEl0ZW1Sb3cga2V5PXtgYXR0cmlidXRlLSR7aW5kZXh9YH0+XHJcbiAgICAgICAgICAgICAgICA8T2JqZWN0TGlzdEl0ZW1Sb3dMZWZ0PlxyXG4gICAgICAgICAgICAgICAgICA8T2JqZWN0QXR0cmlidXRlIHRleHQ9e2F0dHJpYnV0ZS5uYW1lfSAvPlxyXG4gICAgICAgICAgICAgICAgPC9PYmplY3RMaXN0SXRlbVJvd0xlZnQ+XHJcbiAgICAgICAgICAgICAgICA8T2JqZWN0TGlzdEl0ZW1Sb3dSaWdodD5cclxuICAgICAgICAgICAgICAgICAge2F0dHJpYnV0ZS5pdGVtcz8ubWFwKChpdGVtOiBPYmplY3RMaXN0SXRlbUluZm9Qcm9wZXJ0aWVzLCBpbmRleEl0ZW06IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICA8T2JqZWN0TGlzdEl0ZW1JbmZvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17YGl0ZW0tJHtpbmRleH0tJHtpbmRleEl0ZW19YH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgey4uLml0ZW19XHJcbiAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgICAgICA8L09iamVjdExpc3RJdGVtUm93UmlnaHQ+XHJcbiAgICAgICAgICAgICAgPC9PYmplY3RMaXN0SXRlbVJvdz5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgfSl9XHJcbiAgICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9saT5cclxuICApXHJcbn1cclxuXHJcbmNvbnN0IE9iamVjdExpc3RJdGVtSGVhZGVyID0gKHtcclxuICBhdmF0YXIsXHJcbiAgbGVmdCxcclxuICByaWdodCxcclxuICBjaGlsZHJlblxyXG59OiBPYmplY3RMaXN0SXRlbUhlYWRlclByb3BlcnRpZXMpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9J2ZkLW9iamVjdC1saXN0X19oZWFkZXInPlxyXG4gICAgICB7YXZhdGFyID8gYXZhdGFyIDogY2hpbGRyZW59XHJcbiAgICAgIHtsZWZ0ID9cclxuICAgICAgICA8T2JqZWN0TGlzdEl0ZW1IZWFkZXJMZWZ0PlxyXG4gICAgICAgICAge2xlZnR9XHJcbiAgICAgICAgPC9PYmplY3RMaXN0SXRlbUhlYWRlckxlZnQ+XHJcbiAgICAgICAgOiBudWxsfVxyXG4gICAgICB7cmlnaHQgP1xyXG4gICAgICAgIDxPYmplY3RMaXN0SXRlbUhlYWRlclJpZ2h0PlxyXG4gICAgICAgICAge3JpZ2h0fVxyXG4gICAgICAgIDwvT2JqZWN0TGlzdEl0ZW1IZWFkZXJSaWdodD5cclxuICAgICAgICA6IG51bGx9XHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgT2JqZWN0TGlzdEl0ZW1IZWFkZXJMZWZ0UHJvcGVydGllcyB7XHJcbiAgY2hpbGRyZW46IFJlYWN0RWxlbWVudCB8IFJlYWN0RWxlbWVudFtdXHJcbn1cclxuY29uc3QgT2JqZWN0TGlzdEl0ZW1IZWFkZXJMZWZ0ID0gKHtcclxuICBjaGlsZHJlblxyXG59OiBPYmplY3RMaXN0SXRlbUhlYWRlckxlZnRQcm9wZXJ0aWVzKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1vYmplY3QtbGlzdF9faGVhZGVyLWxlZnQnPlxyXG4gICAgICB7Y2hpbGRyZW59XHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgT2JqZWN0TGlzdEl0ZW1IZWFkZXJSaWdodFByb3BlcnRpZXMge1xyXG4gIGNoaWxkcmVuOiBSZWFjdEVsZW1lbnQgfCBSZWFjdEVsZW1lbnRbXVxyXG59XHJcbmNvbnN0IE9iamVjdExpc3RJdGVtSGVhZGVyUmlnaHQgPSAoe1xyXG4gIGNoaWxkcmVuXHJcbn06IE9iamVjdExpc3RJdGVtSGVhZGVyUmlnaHRQcm9wZXJ0aWVzKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1vYmplY3QtbGlzdF9faGVhZGVyLXJpZ2h0Jz5cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC9kaXY+XHJcbiAgKVxyXG59XHJcblxyXG5jb25zdCBPYmplY3RMaXN0SXRlbVJvdyA9ICh7XHJcbiAgbGVmdCxcclxuICByaWdodCxcclxuICBjaGlsZHJlbixcclxufTogT2JqZWN0TGlzdEl0ZW1Sb3dQcm9wZXJ0aWVzKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1vYmplY3QtbGlzdF9fcm93Jz5cclxuICAgICAge2xlZnQgP1xyXG4gICAgICAgIDxPYmplY3RMaXN0SXRlbVJvd0xlZnQ+XHJcbiAgICAgICAgICB7bGVmdH1cclxuICAgICAgICA8L09iamVjdExpc3RJdGVtUm93TGVmdD5cclxuICAgICAgICA6IG51bGx9XHJcbiAgICAgIHtyaWdodCA/XHJcbiAgICAgICAgPE9iamVjdExpc3RJdGVtUm93UmlnaHQ+XHJcbiAgICAgICAgICB7cmlnaHR9XHJcbiAgICAgICAgPC9PYmplY3RMaXN0SXRlbVJvd1JpZ2h0PlxyXG4gICAgICAgIDogbnVsbH1cclxuICAgICAgeyhsZWZ0IHx8IHJpZ2h0KSA/IG51bGwgOiBjaGlsZHJlbn1cclxuICAgIDwvZGl2PlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBPYmplY3RMaXN0SXRlbVJvd0xlZnRQcm9wZXJ0aWVzIHtcclxuICBjaGlsZHJlbjogUmVhY3RFbGVtZW50IHwgUmVhY3RFbGVtZW50W11cclxufVxyXG5jb25zdCBPYmplY3RMaXN0SXRlbVJvd0xlZnQgPSAoe1xyXG4gIGNoaWxkcmVuXHJcbn06IE9iamVjdExpc3RJdGVtUm93TGVmdFByb3BlcnRpZXMpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9J2ZkLW9iamVjdC1saXN0X19yb3ctbGVmdCc+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvZGl2PlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBPYmplY3RMaXN0SXRlbVJvd1JpZ2h0UHJvcGVydGllcyB7XHJcbiAgY2hpbGRyZW46IFJlYWN0RWxlbWVudCB8IFJlYWN0RWxlbWVudFtdXHJcbn1cclxuY29uc3QgT2JqZWN0TGlzdEl0ZW1Sb3dSaWdodCA9ICh7XHJcbiAgY2hpbGRyZW5cclxufTogT2JqZWN0TGlzdEl0ZW1Sb3dSaWdodFByb3BlcnRpZXMpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9J2ZkLW9iamVjdC1saXN0X19yb3ctcmlnaHQnPlxyXG4gICAgICB7Y2hpbGRyZW59XHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgT2JqZWN0TGlzdEl0ZW1JbmZvUHJvcGVydGllcyB7XHJcbiAgdHlwZTogJ2F0dHJpYnV0ZScgfCAnbWFya2VyJyB8ICdudW1iZXInIHwgJ3N0YXR1cycgfCAnaWRlbnRpZmllcidcclxuICBwcm9wczogYW55XHJcbn1cclxuY29uc3QgT2JqZWN0TGlzdEl0ZW1JbmZvID0gKHtcclxuICB0eXBlLFxyXG4gIHByb3BzXHJcbn06IE9iamVjdExpc3RJdGVtSW5mb1Byb3BlcnRpZXMpID0+IHtcclxuICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgIGNhc2UgJ2F0dHJpYnV0ZSc6IHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8T2JqZWN0QXR0cmlidXRlXHJcbiAgICAgICAgICB0ZXh0PXtwcm9wcy50ZXh0fVxyXG4gICAgICAgIC8+XHJcbiAgICAgIClcclxuICAgIH1cclxuICAgIGNhc2UgJ21hcmtlcic6IHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8T2JqZWN0TWFya2VyXHJcbiAgICAgICAgICBpY29uPXtwcm9wcy5pY29ufVxyXG4gICAgICAgICAgaWNvbk9ubHk9e3Byb3BzLmljb25Pbmx5fVxyXG4gICAgICAgICAgdGV4dD17cHJvcHMudGV4dH1cclxuICAgICAgICAvPlxyXG4gICAgICApXHJcbiAgICB9XHJcbiAgICBjYXNlICdudW1iZXInOiB7XHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPE9iamVjdE51bWJlclxyXG4gICAgICAgICAgY2xhc3NOYW1lPSdmZC1vYmplY3QtbGlzdF9fb2JqZWN0LW51bWJlcidcclxuICAgICAgICAgIHZhbHVlPXtwcm9wcy52YWx1ZX1cclxuICAgICAgICAgIHVuaXQ9e3Byb3BzLnVuaXR9XHJcbiAgICAgICAgLz5cclxuICAgICAgKVxyXG4gICAgfVxyXG4gICAgY2FzZSAnc3RhdHVzJzoge1xyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxPYmplY3RTdGF0dXNcclxuICAgICAgICAgIHRleHQ9e3Byb3BzLnRleHR9XHJcbiAgICAgICAgICBzZW1hbnRpYz17cHJvcHMuc2VtYW50aWN9XHJcbiAgICAgICAgLz5cclxuICAgICAgKVxyXG4gICAgfVxyXG4gICAgY2FzZSAnaWRlbnRpZmllcic6IHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8T2JqZWN0SWRlbnRpZmllclxyXG4gICAgICAgICAgY2xhc3NOYW1lPSdmZC1vYmplY3QtbGlzdF9fb2JqZWN0LWlkZW50aWZpZXInXHJcbiAgICAgICAgICB0aXRsZT17cHJvcHMudGl0bGV9XHJcbiAgICAgICAgLz5cclxuICAgICAgKVxyXG4gICAgfVxyXG4gICAgZGVmYXVsdDoge1xyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG4gIH1cclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgT2JqZWN0TWFya2VyUHJvcGVydGllcyB7XHJcbiAgaWNvbj86IHN0cmluZ1xyXG4gIGljb25Pbmx5PzogYm9vbGVhblxyXG4gIHRleHQ6IHN0cmluZ1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgT2JqZWN0TWFya2VyID0gKHtcclxuICBpY29uLFxyXG4gIGljb25Pbmx5LFxyXG4gIHRleHQsXHJcbiAgY2xhc3NOYW1lLFxyXG59OiBPYmplY3RNYXJrZXJQcm9wZXJ0aWVzKSA9PiB7XHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICBjb25zdCBjbGFzc2VzID0gWydmZC1vYmplY3QtbWFya2VyJ11cclxuICBpZiAoY2xhc3NOYW1lKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goY2xhc3NOYW1lKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX0+XHJcbiAgICAgIHtpY29uID9cclxuICAgICAgICA8aVxyXG4gICAgICAgICAgY2xhc3NOYW1lPXtgZmQtb2JqZWN0LW1hcmtlcl9faWNvbiBzYXAtaWNvbi0tJHtpY29ufWB9XHJcbiAgICAgICAgICBhcmlhLWxhYmVsPXtpY29uT25seSA/IHRleHQgOiB1bmRlZmluZWR9XHJcbiAgICAgICAgICByb2xlPXtpY29uT25seSA/IHVuZGVmaW5lZCA6ICdwcmVzZW50YXRpb24nfVxyXG4gICAgICAgID48L2k+XHJcbiAgICAgICAgOiBudWxsfVxyXG4gICAgICB7IWljb25Pbmx5ICYmIHRleHQgP1xyXG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nZmQtb2JqZWN0LW1hcmtlcl9fdGV4dCc+XHJcbiAgICAgICAgICB7dGV4dH1cclxuICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgOiBudWxsfVxyXG4gICAgPC9kaXY+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuaW1wb3J0IHsgU2VtYW50aWMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvU2VtYW50aWMnXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE9iamVjdE51bWJlclByb3BlcnRpZXMge1xyXG4gIHZhbHVlOiBzdHJpbmdcclxuICB1bml0OiBzdHJpbmdcclxuICBib2xkPzogYm9vbGVhblxyXG4gIGxhcmdlPzogYm9vbGVhblxyXG4gIHNlbWFudGljPzogU2VtYW50aWNcclxuICBjbGFzc05hbWU/OiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE9iamVjdE51bWJlciA9ICh7XHJcbiAgdmFsdWUsXHJcbiAgdW5pdCxcclxuICBib2xkLFxyXG4gIGxhcmdlLFxyXG4gIHNlbWFudGljLFxyXG4gIGNsYXNzTmFtZSxcclxufTogT2JqZWN0TnVtYmVyUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgY29uc3QgY2xhc3NlcyA9IFsnZmQtb2JqZWN0LW51bWJlciddXHJcbiAgaWYgKGNsYXNzTmFtZSkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKGNsYXNzTmFtZSlcclxuICB9XHJcbiAgaWYgKGxhcmdlKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goJ2ZkLW9iamVjdC1udW1iZXItLWxhcmdlJylcclxuICB9XHJcbiAgaWYgKHNlbWFudGljKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goYGZkLW9iamVjdC1udW1iZXItLSR7c2VtYW50aWN9YClcclxuICB9XHJcblxyXG4gIGNvbnN0IGNsYXNzZXNUZXh0ID0gWydmZC1vYmplY3QtbnVtYmVyX190ZXh0J11cclxuICBpZiAoYm9sZCkge1xyXG4gICAgY2xhc3Nlc1RleHQucHVzaCgnZmQtb2JqZWN0LW51bWJlcl9fdGV4dC0tYm9sZCcpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPHNwYW4gY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX0+XHJcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT17Y2xhc3Nlc1RleHQuam9pbignICcpfT5cclxuICAgICAgICB7dmFsdWV9XHJcbiAgICAgIDwvc3Bhbj5cclxuICAgICAgPHNwYW4gY2xhc3NOYW1lPSdmZC1vYmplY3QtbnVtYmVyX191bml0Jz5cclxuICAgICAgICB7dW5pdH1cclxuICAgICAgPC9zcGFuPlxyXG4gICAgPC9zcGFuPlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgT2JqZWN0U3RhdHVzUHJvcGVydGllcyB7XHJcbiAgaWNvbj86IHN0cmluZ1xyXG4gIGljb25Pbmx5PzogYm9vbGVhblxyXG4gIHRleHQ6IHN0cmluZ1xyXG4gIGludmVydGVkPzogYm9vbGVhblxyXG4gIGxhcmdlPzogYm9vbGVhblxyXG4gIHNlbWFudGljPzogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBPYmplY3RTdGF0dXMgPSAoe1xyXG4gIGljb24sXHJcbiAgaWNvbk9ubHksXHJcbiAgdGV4dCxcclxuICBpbnZlcnRlZCxcclxuICBsYXJnZSxcclxuICBzZW1hbnRpYyxcclxufTogT2JqZWN0U3RhdHVzUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgY29uc3QgY2xhc3NlcyA9IFsnZmQtb2JqZWN0LXN0YXR1cyddXHJcbiAgaWYgKHNlbWFudGljKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goYGZkLW9iamVjdC1zdGF0dXMtLSR7c2VtYW50aWN9YClcclxuICB9XHJcbiAgaWYgKGludmVydGVkKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goJ2ZkLW9iamVjdC1zdGF0dXMtLWludmVydGVkJylcclxuICB9XHJcbiAgaWYgKGxhcmdlKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goJ2ZkLW9iamVjdC1zdGF0dXMtLWxhcmdlJylcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8c3BhbiBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfT5cclxuICAgICAgPGlcclxuICAgICAgICBjbGFzc05hbWU9e2BmZC1vYmplY3Qtc3RhdHVzX19pY29uIHNhcC1pY29uLS0ke2ljb259YH1cclxuICAgICAgICBhcmlhLWxhYmVsPXtpY29uT25seSA/IHRleHQgOiB1bmRlZmluZWR9XHJcbiAgICAgICAgcm9sZT17aWNvbk9ubHkgPyB1bmRlZmluZWQgOiAncHJlc2VudGF0aW9uJ31cclxuICAgICAgPjwvaT5cclxuICAgICAgeyFpY29uT25seSA/XHJcbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdmZC1vYmplY3Qtc3RhdHVzX190ZXh0Jz5cclxuICAgICAgICAgIHt0ZXh0fVxyXG4gICAgICAgIDwvc3Bhbj5cclxuICAgICAgICA6IG51bGx9XHJcbiAgICA8L3NwYW4+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuaW1wb3J0IHsgUGFnZUJvZHlQcm9wZXJ0aWVzIH0gZnJvbSAnLi9QYWdlQm9keSdcclxuaW1wb3J0IHsgUGFnZUZvb3RlclByb3BlcnRpZXMgfSBmcm9tICcuL1BhZ2VGb290ZXInXHJcbmltcG9ydCB7IFBhZ2VIZWFkZXJQcm9wZXJ0aWVzIH0gZnJvbSAnLi9QYWdlSGVhZGVyJ1xyXG5cclxuaW1wb3J0ICcuL1BhZ2UuY3NzJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQYWdlUHJvcGVydGllcyB7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nXHJcbiAgY2hpbGRyZW46IFtcclxuICAgIFJlYWN0LlJlYWN0RWxlbWVudDxQYWdlSGVhZGVyUHJvcGVydGllcz4sXHJcbiAgICBSZWFjdC5SZWFjdEVsZW1lbnQ8UGFnZUJvZHlQcm9wZXJ0aWVzPixcclxuICAgIFJlYWN0LlJlYWN0RWxlbWVudDxQYWdlRm9vdGVyUHJvcGVydGllcz5cclxuICBdIHwgW1xyXG4gICAgUmVhY3QuUmVhY3RFbGVtZW50PFBhZ2VIZWFkZXJQcm9wZXJ0aWVzPixcclxuICAgIFJlYWN0LlJlYWN0RWxlbWVudDxQYWdlQm9keVByb3BlcnRpZXM+LFxyXG4gIF1cclxufVxyXG5leHBvcnQgY29uc3QgUGFnZSA9ICh7XHJcbiAgY2xhc3NOYW1lLFxyXG4gIGNoaWxkcmVuOiBbaGVhZGVyLCBib2R5LCBmb290ZXJdXHJcbn06IFBhZ2VQcm9wZXJ0aWVzKSA9PiB7XHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICBjb25zdCBjbGFzc2VzID0gWydmZC1wYWdlJ11cclxuICBpZiAoY2xhc3NOYW1lKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goY2xhc3NOYW1lKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX0+XHJcbiAgICAgIHtoZWFkZXJ9XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1wYWdlX19jb250ZW50Jz5cclxuICAgICAgICB7Ym9keX1cclxuICAgICAgICB7Zm9vdGVyfVxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIClcclxufVxyXG5cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQYWdlQm9keVByb3BlcnRpZXMge1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZ1xyXG4gIGNoaWxkcmVuPzogYW55XHJcbn1cclxuZXhwb3J0IGNvbnN0IFBhZ2VCb2R5ID0gKHtcclxuICBjbGFzc05hbWUsXHJcbiAgY2hpbGRyZW5cclxufTogUGFnZUJvZHlQcm9wZXJ0aWVzKSA9PiB7XHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICBjb25zdCBjbGFzc2VzID0gWydmZC1wYWdlX19ib2R5J11cclxuICBpZiAoY2xhc3NOYW1lKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goY2xhc3NOYW1lKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX0+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvZGl2PlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGFnZUZvb3RlclByb3BlcnRpZXMge1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZ1xyXG4gIGNoaWxkcmVuPzogYW55XHJcbn1cclxuZXhwb3J0IGNvbnN0IFBhZ2VGb290ZXIgPSAoe1xyXG4gIGNsYXNzTmFtZSxcclxuICBjaGlsZHJlblxyXG59OiBQYWdlRm9vdGVyUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgY29uc3QgY2xhc3NlcyA9IFsnZmQtcGFnZV9fZm9vdGVyJ11cclxuICBpZiAoY2xhc3NOYW1lKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goY2xhc3NOYW1lKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX0+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvZGl2PlxyXG4gIClcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBhZ2VIZWFkZXJQcm9wZXJ0aWVzIHtcclxuICBjbGFzc05hbWU/OiBzdHJpbmdcclxuICBjaGlsZHJlbj86IGFueVxyXG59XHJcbmV4cG9ydCBjb25zdCBQYWdlSGVhZGVyID0gKHtcclxuICBjbGFzc05hbWUsXHJcbiAgY2hpbGRyZW5cclxufTogUGFnZUhlYWRlclByb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIGNvbnN0IGNsYXNzZXMgPSBbJ2ZkLXBhZ2VfX2hlYWRlciddXHJcbiAgaWYgKGNsYXNzTmFtZSkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKGNsYXNzTmFtZSlcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5qb2luKCcgJyl9PlxyXG4gICAgICB7Y2hpbGRyZW59XHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0RWxlbWVudCwgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQYW5lbFByb3BlcnRpZXMge1xyXG4gIGNvbXBhY3Q/OiBib29sZWFuXHJcbiAgZXhwYW5kZWQ/OiBib29sZWFuXHJcbiAgZXhwYW5kYWJsZT86IGJvb2xlYW5cclxuICB0aXRsZTogc3RyaW5nXHJcbiAgdG9vbGJhcj86IFJlYWN0RWxlbWVudFxyXG4gIGNoaWxkcmVuPzogc3RyaW5nIHwgUmVhY3RFbGVtZW50IHwgUmVhY3RFbGVtZW50W11cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFBhbmVsID0gKHtcclxuICBjb21wYWN0LFxyXG4gIGV4cGFuZGVkLFxyXG4gIGV4cGFuZGFibGUsXHJcbiAgdGl0bGUsXHJcbiAgdG9vbGJhcixcclxuICBjaGlsZHJlbixcclxufTogUGFuZWxQcm9wZXJ0aWVzKSA9PiB7XHJcblxyXG4gIC8vIEhvb2tzIC8vXHJcblxyXG4gIGNvbnN0IFtpc0V4cGFuZGVkLCBzZXRFeHBhbmRlZF0gPSB1c2VTdGF0ZTxib29sZWFuIHwgdW5kZWZpbmVkIHwgbnVsbD4obnVsbClcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHNldEV4cGFuZGVkKGV4cGFuZGVkKVxyXG4gIH0sIFtleHBhbmRlZF0pXHJcblxyXG4gIC8vIEV2ZW50cyAvL1xyXG5cclxuICBjb25zdCBvblRvZ2dsZUV4cGFuZGVkID0gKCkgPT4ge1xyXG4gICAgc2V0RXhwYW5kZWQoIWlzRXhwYW5kZWQpXHJcbiAgfVxyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgY29uc3QgY2xhc3NlcyA9IFsnZmQtcGFuZWwnXVxyXG4gIGlmIChjb21wYWN0KSB7XHJcbiAgICBjbGFzc2VzLnB1c2goJ2ZkLXBhbmVsLS1jb21wYWN0JylcclxuICB9XHJcbiAgaWYgKCFleHBhbmRhYmxlKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goJ2ZkLXBhbmVsLS1maXhlZCcpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfT5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9J2ZkLXBhbmVsX19oZWFkZXInPlxyXG4gICAgICAgIHtleHBhbmRhYmxlID9cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1wYW5lbF9fZXhwYW5kJz5cclxuICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT0nZmQtYnV0dG9uIGZkLWJ1dHRvbi0tY29tcGFjdCBmZC1idXR0b24tLXRyYW5zcGFyZW50IGZkLXBhbmVsX19idXR0b24nXHJcbiAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD17ISFpc0V4cGFuZGVkfVxyXG4gICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9J3RydWUnXHJcbiAgICAgICAgICAgICAgYXJpYS1jb250cm9scz0ncGFuZWwtY29udGVudCdcclxuICAgICAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9J3BhbmVsLXRpdGxlJ1xyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uVG9nZ2xlRXhwYW5kZWR9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9e2lzRXhwYW5kZWQgPyAnc2FwLWljb24tLXNsaW0tYXJyb3ctZG93bicgOiAnc2FwLWljb24tLXNsaW0tYXJyb3ctcmlnaHQnfT48L2k+XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA6IG51bGx9XHJcbiAgICAgICAgPGg0XHJcbiAgICAgICAgICBjbGFzc05hbWU9J2ZkLXBhbmVsX190aXRsZSdcclxuICAgICAgICAgIGlkPSdwYW5lbC10aXRsZSdcclxuICAgICAgICA+XHJcbiAgICAgICAgICB7dGl0bGV9XHJcbiAgICAgICAgPC9oND5cclxuICAgICAgICB7dG9vbGJhciA/IHRvb2xiYXIgOiBudWxsfVxyXG4gICAgICA8L2Rpdj5cclxuXHJcbiAgICAgIDxkaXZcclxuICAgICAgICBpZD0ncGFuZWwtY29udGVudCdcclxuICAgICAgICBjbGFzc05hbWU9J2ZkLXBhbmVsX19jb250ZW50J1xyXG4gICAgICAgIHJvbGU9J3JlZ2lvbidcclxuICAgICAgICBhcmlhLWhpZGRlbj17IWlzRXhwYW5kZWR9XHJcbiAgICAgID5cclxuICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgeyBVVUlEIH0gZnJvbSAnQHVuY292ZXIvanMtdXRpbHMnXHJcblxyXG5pbXBvcnQge1xyXG4gIEJ1dHRvbixcclxuICBCdXR0b25TdHlsZXNcclxufSBmcm9tICcuLi8uLi9pbmRleCdcclxuZXhwb3J0IGludGVyZmFjZSBTZWxlY3RQcm9wZXJ0aWVzIHtcclxuICBjaGlsZHJlbjogYW55XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTZWxlY3QgPSAoe1xyXG4gIGNoaWxkcmVuXHJcbn06IFNlbGVjdFByb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgLy8gSG9va3MgLy9cclxuXHJcbiAgY29uc3QgW2lkLCBzZXRJZF0gPSB1c2VTdGF0ZTxzdHJpbmcgfCB1bmRlZmluZWQ+KClcclxuICBjb25zdCBbb3BlbmVkLCBzZXRPcGVuZWRdID0gdXNlU3RhdGUoZmFsc2UpXHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBzZXRJZChVVUlELm5leHQoKSlcclxuICB9LCBbXSlcclxuXHJcbiAgLy8gRXZlbnRzIC8vXHJcblxyXG4gIGNvbnN0IG9uVG9nZ2xlT3BlbiA9ICgpID0+IHtcclxuICAgIHNldE9wZW5lZCghb3BlbmVkKVxyXG4gIH1cclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtcG9wb3Zlcic+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC1wb3BvdmVyX19jb250cm9sJz5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtc2VsZWN0Jz5cclxuICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgaWQ9e2lkfVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9J2ZkLXNlbGVjdF9fY29udHJvbCdcclxuICAgICAgICAgICAgYXJpYS1leHBhbmRlZD17ISFvcGVuZWR9XHJcbiAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9J2xpc3Rib3gnXHJcbiAgICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT0nY296eVNlbGVjdExhYmVsIGNvenlTZWxlY3RWYWx1ZSdcclxuICAgICAgICAgICAgdGFiSW5kZXg9ezB9XHJcbiAgICAgICAgICAgIHZhbHVlPSdMaXN0IEl0ZW0gMSdcclxuICAgICAgICAgICAgb25DbGljaz17b25Ub2dnbGVPcGVufVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgIGlzPSdjb3p5U2VsZWN0VmFsdWUnXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPSdmZC1zZWxlY3RfX3RleHQtY29udGVudCdcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIExpc3QgSXRlbSAxXHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdmZC1idXR0b24gZmQtYnV0dG9uLS10cmFuc3BhcmVudCBmZC1zZWxlY3RfX2J1dHRvbic+XHJcbiAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPSdzYXAtaWNvbi0tc2xpbS1hcnJvdy1kb3duJz48L2k+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdlxyXG4gICAgICAgIGNsYXNzTmFtZT0nZmQtcG9wb3Zlcl9fYm9keSBmZC1wb3BvdmVyX19ib2R5LS1uby1hcnJvdyBmZC1wb3BvdmVyX19ib2R5LS1kcm9wZG93bidcclxuICAgICAgICBhcmlhLWhpZGRlbj17IW9wZW5lZH1cclxuICAgICAgPlxyXG4gICAgICAgIDx1bFxyXG4gICAgICAgICAgYXJpYS1hY3RpdmVkZXNjZW5kYW50PSdjb3p5U2VsZWN0Q29tYm9ib3gtY3VycmVudGx5Rm9jdXNlZEl0ZW0nXHJcbiAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9e2lkfVxyXG4gICAgICAgICAgY2xhc3NOYW1lPSdmZC1saXN0IGZkLWxpc3QtLWRyb3Bkb3duJ1xyXG4gICAgICAgICAgcm9sZT0nbGlzdGJveCdcclxuICAgICAgICA+XHJcbiAgICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgICAgPC91bD5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNlbGVjdEl0ZW1Qcm9wZXJ0aWVzIHtcclxuICBzZWxlY3RlZD86IGJvb2xlYW4sXHJcbiAgaWQ6IHN0cmluZyxcclxuICB0aXRsZTogc3RyaW5nLFxyXG4gIG9uU2VsZWN0OiAoKSA9PiB2b2lkXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTZWxlY3RJdGVtID0gKHtcclxuICBzZWxlY3RlZCxcclxuICB0aXRsZSxcclxuICBvblNlbGVjdFxyXG59OiBTZWxlY3RJdGVtUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBFdmVudHMgLy9cclxuXHJcbiAgY29uc3Qgb25JdGVtU2VsZWN0ZWQgPSAoKSA9PiB7XHJcbiAgICBvblNlbGVjdCgpXHJcbiAgfVxyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgY29uc3QgY2xhc3NlcyA9IFsnZmQtbGlzdF9faXRlbSddXHJcbiAgaWYgKHNlbGVjdGVkKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goJ2lzLXNlbGVjdGVkJylcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8bGlcclxuICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX1cclxuICAgICAgYXJpYS1zZWxlY3RlZD17YCR7Qm9vbGVhbihzZWxlY3RlZCl9YH1cclxuICAgICAgcm9sZT0nb3B0aW9uJ1xyXG4gICAgICB0YWJJbmRleD17MH1cclxuICAgICAgb25DbGljaz17b25JdGVtU2VsZWN0ZWR9XHJcbiAgICA+XHJcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT0nZmQtbGlzdF9fdGl0bGUnPlxyXG4gICAgICAgIHt0aXRsZX1cclxuICAgICAgPC9zcGFuPlxyXG4gICAgPC9saT5cclxuICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgY29uc3QgU2hlbGxCYXIgPSAoXHJcblxyXG4pID0+IHtcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZmQtc2hlbGxiYXJcIj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmZC1zaGVsbGJhcl9fZ3JvdXAgZmQtc2hlbGxiYXJfX2dyb3VwLS1wcm9kdWN0XCI+XHJcbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZmQtc2hlbGxiYXJfX2xvZ29cIj5cclxuICAgICAgICAgIDxpbWdcclxuICAgICAgICAgICAgc3JjPVwiLy91bnBrZy5jb20vZnVuZGFtZW50YWwtc3R5bGVzL2Rpc3QvaW1hZ2VzL3NhcC1sb2dvLnBuZ1wiXHJcbiAgICAgICAgICAgIHdpZHRoPVwiNDhcIlxyXG4gICAgICAgICAgICBoZWlnaHQ9XCIyNFwiXHJcbiAgICAgICAgICAgIGFsdD1cIlNBUFwiXHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvc3Bhbj5cclxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmZC1zaGVsbGJhcl9fdGl0bGVcIj5cclxuICAgICAgICAgIEZ1bmRhbWVudGFsIFJlYWN0XHJcbiAgICAgICAgPC9zcGFuPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCwgeyBSZWFjdEVsZW1lbnQgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgVGFibGVSb3cgfSBmcm9tICcuL1RhYmxlUm93J1xyXG5cclxuLypcclxuICA8VGFibGVcclxuICAgIGNvbHVtbnM9e1tcclxuICAgICAgeyBrZXk6ICdmaXJzdE5hbWUnLCBuYW1lOiAnRmlyc3QgTmFtZScsIHJlbmRlcjogdiA9PiA8c3Ryb25nPnt2fTwvc3Ryb25nPiB9LFxyXG4gICAgICB7IGtleTogJ2xhc3ROYW1lJywgbmFtZTogJ0xhc3QgTmFtZScgfSxcclxuICAgICAgeyBrZXk6ICdlbWFpbCcsIG5hbWU6ICdFbWFpbCcgfSxcclxuICAgICAgeyBrZXk6ICdkYXRlJywgbmFtZTogJ0pvaW4gRGF0ZScgfSxcclxuICAgIF19XHJcbiAgICByb3dzPXtbXHJcbiAgICAgIHsgZGF0YTogeyBpZDogJ3VzZXIxJywgZmlyc3ROYW1lOiAnVGl0aScsIGxhc3ROYW1lOiAnRmlmaScgfSB9LFxyXG4gICAgICB7IGRhdGE6IHsgZmlyc3ROYW1lOiAnVG90bycsIGxhc3ROYW1lOiAnRm9mbycgfSB9LFxyXG4gICAgICB7IGRhdGE6IHsgZmlyc3ROYW1lOiAnVGF0YScgfSB9LFxyXG4gICAgXX1cclxuICAvPlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUYWJsZVByb3BlcnRpZXMge1xyXG4gIGJvcmRlcmVkSG9yaXpvbnRhbD86IGJvb2xlYW5cclxuICBib3JkZXJlZFZlcnRpY2FsPzogYm9vbGVhblxyXG4gIGNvbXBhY3Q/OiBib29sZWFuXHJcbiAgaW5kaWNhdG9yPzogYm9vbGVhblxyXG4gIGNvbHVtbnM6IFRhYmxlQ29sdW1uUHJvcGVydGllc1tdXHJcbiAgcm93cz86IFRhYmxlUm93UHJvcGVydGllc1tdXHJcbiAgY2hpbGRyZW4/OiBSZWFjdEVsZW1lbnQgfCBSZWFjdEVsZW1lbnRbXVxyXG59XHJcbmV4cG9ydCB0eXBlIFRhYmxlQ29sdW1uUHJvcGVydGllcyA9IHtcclxuICBrZXk6IHN0cmluZ1xyXG4gIG5hbWU/OiBzdHJpbmdcclxuICB0eXBlPzogVGFibGVDZWxsVHlwZVxyXG4gIGluZGljYXRvcj86IFRhYmxlQ2VsbEluZGljYXRvclxyXG4gIHJlbmRlcj86ICh2YWx1ZTogYW55KSA9PiBSZWFjdEVsZW1lbnRcclxuICBmb3JtYXR0ZXI/OiAodmFsdWU6IGFueSkgPT4gc3RyaW5nIHwgUmVhY3RFbGVtZW50XHJcbn1cclxuZXhwb3J0IHR5cGUgVGFibGVSb3dQcm9wZXJ0aWVzID0ge1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZ1xyXG4gIGluZGljYXRvcj86IFRhYmxlQ2VsbEluZGljYXRvclxyXG4gIGRhdGE6IFRhYmxlUm93RGF0YVByb3BlcnRpZXNcclxufVxyXG5leHBvcnQgdHlwZSBUYWJsZVJvd0RhdGFQcm9wZXJ0aWVzID0ge1xyXG4gIGlkOiBzdHJpbmdcclxuICBba2V5OiBzdHJpbmddOiBhbnlcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgVGFibGVDZWxsVHlwZSA9ICdzdGF0dXMtaW5kaWNhdG9yJyB8ICdjaGVja2JveCdcclxuZXhwb3J0IHR5cGUgVGFibGVDZWxsSW5kaWNhdG9yID0gJ3ZhbGlkJyB8ICd3YXJuaW5nJyB8ICdlcnJvcicgfCAnaW5mb3JtYXRpb24nXHJcblxyXG5leHBvcnQgY29uc3QgVGFibGVDZWxsSW5kaWNhdG9yczogeyBba2V5OiBzdHJpbmddOiBUYWJsZUNlbGxJbmRpY2F0b3IgfSA9IHtcclxuICBWQUxJRDogJ3ZhbGlkJyxcclxuICBXQVJOSU5HOiAnd2FybmluZycsXHJcbiAgRVJST1I6ICdlcnJvcicsXHJcbiAgSU5GT1JNQVRJT046ICdpbmZvcm1hdGlvbidcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFRhYmxlID0gKHtcclxuICBib3JkZXJlZEhvcml6b250YWwsXHJcbiAgYm9yZGVyZWRWZXJ0aWNhbCxcclxuICBjb21wYWN0LFxyXG4gIGluZGljYXRvcixcclxuICBjb2x1bW5zLFxyXG4gIHJvd3MsXHJcbiAgY2hpbGRyZW4sXHJcbn06IFRhYmxlUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgY29uc3QgY2xhc3NlcyA9IFsnZmQtdGFibGUnXVxyXG4gIGlmICghYm9yZGVyZWRWZXJ0aWNhbCkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKCdmZC10YWJsZS0tbm8tdmVydGljYWwtYm9yZGVycycpXHJcbiAgfVxyXG4gIGlmICghYm9yZGVyZWRIb3Jpem9udGFsKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goJ2ZkLXRhYmxlLS1uby1ob3Jpem9udGFsLWJvcmRlcnMnKVxyXG4gIH1cclxuICBpZiAoY29tcGFjdCkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKCdmZC10YWJsZS0tY29tcGFjdCcpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPHRhYmxlIGNsYXNzTmFtZT17Y2xhc3Nlcy5qb2luKCcgJyl9PlxyXG4gICAgICA8dGhlYWQgY2xhc3NOYW1lPSdmZC10YWJsZV9faGVhZGVyJz5cclxuICAgICAgICA8VGFibGVSb3c+XHJcbiAgICAgICAgICA8PlxyXG4gICAgICAgICAgICB7aW5kaWNhdG9yID9cclxuICAgICAgICAgICAgICA8VGFibGVDZWxsXHJcbiAgICAgICAgICAgICAgICB0eXBlPSdzdGF0dXMtaW5kaWNhdG9yJ1xyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgOiBudWxsfVxyXG4gICAgICAgICAgICB7Y29sdW1ucy5tYXAoY29sdW1uID0+IChcclxuICAgICAgICAgICAgICA8VGFibGVIZWFkZXJDZWxsXHJcbiAgICAgICAgICAgICAgICBrZXk9e2NvbHVtbi5rZXl9XHJcbiAgICAgICAgICAgICAgICB0eXBlPXtjb2x1bW4udHlwZX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj57Y29sdW1uLm5hbWV9PC9zcGFuPlxyXG4gICAgICAgICAgICAgIDwvVGFibGVIZWFkZXJDZWxsPlxyXG4gICAgICAgICAgICApKX1cclxuICAgICAgICAgIDwvPlxyXG4gICAgICAgIDwvVGFibGVSb3c+XHJcbiAgICAgIDwvdGhlYWQ+XHJcbiAgICAgIDx0Ym9keSBjbGFzc05hbWU9J2ZkLXRhYmxlX19ib2R5Jz5cclxuICAgICAgICB7cm93cz8ubWFwKChyb3csIGluZGV4KSA9PiAoXHJcbiAgICAgICAgICA8VGFibGVSb3dcclxuICAgICAgICAgICAga2V5PXtyb3cuZGF0YS5pZH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICB7aW5kaWNhdG9yXHJcbiAgICAgICAgICAgICAgICA/IChcclxuICAgICAgICAgICAgICAgICAgPFRhYmxlQ2VsbFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9J3N0YXR1cy1pbmRpY2F0b3InXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kaWNhdG9yPXtyb3cuaW5kaWNhdG9yfVxyXG4gICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgOiBudWxsfVxyXG4gICAgICAgICAgICAgIHtjb2x1bW5zLm1hcCgoY29sdW1uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZW5kZXJlZCA9IGNvbHVtbi5yZW5kZXIgfHwgKChkYXRhKSA9PiAoPHNwYW4+e2NvbHVtbi5mb3JtYXR0ZXIgPyBjb2x1bW4uZm9ybWF0dGVyKGRhdGEpIDogZGF0YVtjb2x1bW4ua2V5XX08L3NwYW4+KSlcclxuICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgIDxUYWJsZUNlbGxcclxuICAgICAgICAgICAgICAgICAgICBrZXk9e2NvbHVtbi5rZXl9XHJcbiAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICB7cmVuZGVyZWQocm93LmRhdGEpfVxyXG4gICAgICAgICAgICAgICAgICA8L1RhYmxlQ2VsbD5cclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICA8L1RhYmxlUm93PlxyXG4gICAgICAgICkpfVxyXG4gICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgPC90Ym9keT5cclxuICAgIDwvdGFibGU+XHJcbiAgKVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBUYWJsZUhlYWRlckNlbGwgPSAoe1xyXG4gIGNoaWxkcmVuLFxyXG4gIHR5cGVcclxufTogeyBjaGlsZHJlbjogUmVhY3RFbGVtZW50IHwgUmVhY3RFbGVtZW50W10sIHR5cGU/OiBUYWJsZUNlbGxUeXBlIH0pID0+IHtcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIGNvbnN0IGNsYXNzZXMgPSBbJ2ZkLXRhYmxlX19jZWxsJ11cclxuICBpZiAodHlwZSkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKGBmZC10YWJsZV9fY2VsbC0tJHt0eXBlfWApXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPHRoXHJcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5qb2luKCcgJyl9XHJcbiAgICAgIHNjb3BlPSdjb2wnXHJcbiAgICA+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvdGg+XHJcbiAgKVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgVGFibGVDZWxsID0gKHtcclxuICBjaGlsZHJlbixcclxuICB0eXBlLFxyXG4gIGluZGljYXRvclxyXG59OiB7XHJcbiAgY2hpbGRyZW4/OiBSZWFjdEVsZW1lbnQgfCBSZWFjdEVsZW1lbnRbXSxcclxuICB0eXBlPzogVGFibGVDZWxsVHlwZVxyXG4gIGluZGljYXRvcj86IFRhYmxlQ2VsbEluZGljYXRvclxyXG59KSA9PiB7XHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICBjb25zdCBjbGFzc2VzID0gWydmZC10YWJsZV9fY2VsbCddXHJcbiAgaWYgKHR5cGUpIHtcclxuICAgIGNsYXNzZXMucHVzaChgZmQtdGFibGVfX2NlbGwtLSR7dHlwZX1gKVxyXG4gIH1cclxuICBpZiAodHlwZSA9PT0gJ3N0YXR1cy1pbmRpY2F0b3InICYmIGluZGljYXRvcikge1xyXG4gICAgY2xhc3Nlcy5wdXNoKGBmZC10YWJsZV9fY2VsbC0tc3RhdHVzLWluZGljYXRvci0tJHtpbmRpY2F0b3J9YClcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8dGQgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX0+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvdGQ+XHJcbiAgKVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCwgeyBSZWFjdEVsZW1lbnQgfSBmcm9tICdyZWFjdCdcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGFibGVSb3dQcm9wZXJ0aWVzIHtcclxuICBjaGlsZHJlbjogUmVhY3RFbGVtZW50IHwgUmVhY3RFbGVtZW50W11cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFRhYmxlUm93ID0gKHtcclxuICBjaGlsZHJlblxyXG59OiBUYWJsZVJvd1Byb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8dHIgY2xhc3NOYW1lPSdmZC10YWJsZV9fcm93Jz5cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC90cj5cclxuICApXHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgeyBCYWRnZSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvYmFkZ2UvQmFkZ2UnXHJcbmltcG9ydCB7IFNpemUsIFNpemVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL1NpemUnXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRpbGVQcm9wZXJ0aWVzIHtcclxuICBjbGFzc05hbWU/OiBzdHJpbmdcclxuICBiYWRnZT86IHN0cmluZ1xyXG4gIHRpdGxlOiBzdHJpbmdcclxuICBzdWJUaXRsZT86IHN0cmluZ1xyXG4gIGZvb3Rlcj86IHN0cmluZ1xyXG4gIHNpemU/OiBTaXplXHJcbiAgY2hpbGRyZW4/OiBSZWFjdEVsZW1lbnQgfCBSZWFjdEVsZW1lbnRbXVxyXG4gIG9uQ2xpY2s/OiAoKSA9PiB2b2lkXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBUaWxlID0gKHtcclxuICBjbGFzc05hbWUsXHJcbiAgYmFkZ2UsXHJcbiAgdGl0bGUsXHJcbiAgc3ViVGl0bGUsXHJcbiAgZm9vdGVyLFxyXG4gIHNpemUgPSBTaXplcy5MQVJHRSxcclxuICBjaGlsZHJlbixcclxuICBvbkNsaWNrLFxyXG59OiBUaWxlUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBFdmVudHMgLy9cclxuXHJcbiAgY29uc3Qgb25DbGlja2VkID0gKCkgPT4ge1xyXG4gICAgaWYgKG9uQ2xpY2spIHtcclxuICAgICAgb25DbGljaygpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgY29uc3QgY2xhc3NlcyA9IFsnZmQtdGlsZSddXHJcbiAgaWYgKGNsYXNzTmFtZSkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKGNsYXNzTmFtZSlcclxuICB9XHJcbiAgaWYgKHNpemUpIHtcclxuICAgIGNsYXNzZXMucHVzaChgZmQtdGlsZS0tJHtzaXplfWApXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdlxyXG4gICAgICBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfVxyXG4gICAgICByb2xlPSdidXR0b24nXHJcbiAgICAgIHRhYkluZGV4PXswfVxyXG4gICAgICBvbkNsaWNrPXtvbkNsaWNrZWR9XHJcbiAgICA+XHJcbiAgICAgIHtiYWRnZSA/IDxCYWRnZSB0ZXh0PXtiYWRnZX0gLz4gOiBudWxsfVxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtdGlsZV9faGVhZGVyJz5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtdGlsZV9fdGl0bGUnPlxyXG4gICAgICAgICAge3RpdGxlfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIHtzdWJUaXRsZSA/XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtdGlsZV9fc3VidGl0bGUnPlxyXG4gICAgICAgICAgICB7c3ViVGl0bGV9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDogbnVsbH1cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdmZC10aWxlX19jb250ZW50Jz5cclxuICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICB7Zm9vdGVyID9cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtdGlsZV9fZm9vdGVyJz5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nZmQtdGlsZV9fZm9vdGVyLXRleHQnPlxyXG4gICAgICAgICAgICB7Zm9vdGVyfVxyXG4gICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDogbnVsbH1cclxuICAgIDwvZGl2PlxyXG4gIClcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRpbGVDb250YWluZXJQcm9wZXJ0aWVzIHtcclxuICBjbGFzc05hbWU/OiBzdHJpbmdcclxuICBjaGlsZHJlbj86IHN0cmluZyB8IFJlYWN0RWxlbWVudCB8IFJlYWN0RWxlbWVudFtdXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBUaWxlQ29udGFpbmVyID0gKHtcclxuICBjbGFzc05hbWUsXHJcbiAgY2hpbGRyZW4sXHJcbn06IFRpbGVDb250YWluZXJQcm9wZXJ0aWVzKSA9PiB7XHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICBjb25zdCBjbGFzc2VzID0gWydmZC10aWxlIGZkLXRpbGUtY29udGFpbmVyJ11cclxuICBpZiAoY2xhc3NOYW1lKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goY2xhc3NOYW1lKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXZcclxuICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX1cclxuICAgICAgc3R5bGU9e3tcclxuICAgICAgICBtaW5IZWlnaHQ6IDAsXHJcbiAgICAgICAgbWF4SGVpZ2h0OiAnbm9uZScsXHJcbiAgICAgICAgaGVpZ2h0OiAnYXV0bycsXHJcbiAgICAgICAgbWluV2lkdGg6IDAsXHJcbiAgICAgICAgbWF4V2lkdGg6ICdub25lJyxcclxuICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICB9fVxyXG4gICAgPlxyXG4gICAgICB7Y2hpbGRyZW59XHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgeyBTZW1hbnRpYyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9TZW1hbnRpYydcclxuaW1wb3J0IHsgU2l6ZSwgU2l6ZXMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvU2l6ZSdcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGlsZUNvbnRlbnROdW1lcmljUHJvcGVydGllcyB7XHJcbiAgdmFsdWU6IHN0cmluZ1xyXG4gIHNpemU/OiBTaXplXHJcbiAgc2VtYW50aWM/OiBTZW1hbnRpY1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgVGlsZUNvbnRlbnROdW1lcmljID0gKHtcclxuICB2YWx1ZSxcclxuICBzaXplID0gU2l6ZXMuTEFSR0UsXHJcbiAgc2VtYW50aWMsXHJcbn06IFRpbGVDb250ZW50TnVtZXJpY1Byb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIGNvbnN0IGNsYXNzZXMgPSBbJ2ZkLW51bWVyaWMtY29udGVudCddXHJcbiAgaWYgKHNpemUpIHtcclxuICAgIGNsYXNzZXMucHVzaChgZmQtbnVtZXJpYy1jb250ZW50LS0ke3NpemV9YClcclxuICB9XHJcblxyXG4gIGNvbnN0IGNsYXNzZXNLcGkgPSBbJ2ZkLW51bWVyaWMtY29udGVudF9fa3BpJ11cclxuICBpZiAoc2VtYW50aWMpIHtcclxuICAgIGNsYXNzZXNLcGkucHVzaChgZmQtbnVtZXJpYy1jb250ZW50X19rcGktLSR7c2VtYW50aWN9YClcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5qb2luKCcgJyl9PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nZmQtbnVtZXJpYy1jb250ZW50X19rcGktY29udGFpbmVyJz5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlc0twaS5qb2luKCcgJyl9PlxyXG4gICAgICAgICAge3ZhbHVlfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCB7IFRpdGxlTGV2ZWwsIFRpdGxlTGV2ZWxzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL1RpdGxlTGV2ZWwnXHJcblxyXG5leHBvcnQgdHlwZSBUaXRsZVByb3BlcnRpZXMgPSB7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nXHJcbiAgbGV2ZWw/OiBUaXRsZUxldmVsXHJcbiAgbGV2ZWxWaXN1YWw/OiBUaXRsZUxldmVsXHJcbiAgd3JhcD86IGJvb2xlYW5cclxuICB0ZXh0OiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFRpdGxlID0gKHtcclxuICBjbGFzc05hbWUsXHJcbiAgbGV2ZWwsXHJcbiAgbGV2ZWxWaXN1YWwsXHJcbiAgd3JhcCxcclxuICB0ZXh0LFxyXG59OiBUaXRsZVByb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIGNvbnN0IGNsYXNzZXMgPSBbJ2ZkLXRpdGxlJ11cclxuICBjbGFzc2VzLnB1c2goYGZkLXRpdGxlLS1oJHtsZXZlbFZpc3VhbCB8fCBsZXZlbCB8fCBUaXRsZUxldmVscy5IMX1gKVxyXG4gIGlmIChjbGFzc05hbWUpIHtcclxuICAgIGNsYXNzZXMucHVzaChjbGFzc05hbWUpXHJcbiAgfVxyXG4gIGlmICh3cmFwKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goJ2ZkLXRpdGxlLS13cmFwJylcclxuICB9XHJcblxyXG4gIHN3aXRjaCAobGV2ZWwpIHtcclxuICAgIGNhc2UgVGl0bGVMZXZlbHMuSDY6IHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8aDYgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX0+e3RleHR9PC9oNj5cclxuICAgICAgKVxyXG4gICAgfVxyXG4gICAgY2FzZSBUaXRsZUxldmVscy5INToge1xyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxoNSBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfT57dGV4dH08L2g1PlxyXG4gICAgICApXHJcbiAgICB9XHJcbiAgICBjYXNlIFRpdGxlTGV2ZWxzLkg0OiB7XHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPGg0IGNsYXNzTmFtZT17Y2xhc3Nlcy5qb2luKCcgJyl9Pnt0ZXh0fTwvaDQ+XHJcbiAgICAgIClcclxuICAgIH1cclxuICAgIGNhc2UgVGl0bGVMZXZlbHMuSDM6IHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8aDMgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX0+e3RleHR9PC9oMz5cclxuICAgICAgKVxyXG4gICAgfVxyXG4gICAgY2FzZSBUaXRsZUxldmVscy5IMjoge1xyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxoMiBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfT57dGV4dH08L2gyPlxyXG4gICAgICApXHJcbiAgICB9XHJcbiAgICBkZWZhdWx0OiB7XHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPGgxIGNsYXNzTmFtZT17Y2xhc3Nlcy5qb2luKCcgJyl9Pnt0ZXh0fTwvaDE+XHJcbiAgICAgIClcclxuICAgIH1cclxuICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgeyBUb29sYmFyU3BhY2VyIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy90b29sYmFyL1Rvb2xiYXJTcGFjZXInXHJcbmltcG9ydCB7IFRpdGxlIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy90aXRsZS9UaXRsZSdcclxuXHJcbmltcG9ydCB7IFRpdGxlTGV2ZWwsIFRpdGxlTGV2ZWxzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL1RpdGxlTGV2ZWwnXHJcblxyXG5pbXBvcnQgJy4vVG9vbGJhci5jc3MnXHJcbmV4cG9ydCBpbnRlcmZhY2UgVG9vbGJhclByb3BlcnRpZXMge1xyXG4gIHRpdGxlPzogc3RyaW5nXHJcbiAgdGl0bGVMZXZlbD86IFRpdGxlTGV2ZWxcclxuICBhY3RpdmU/OiBib29sZWFuXHJcbiAgY2xlYXI/OiBib29sZWFuXHJcbiAgdHJhbnNwYXJlbnQ/OiBib29sZWFuXHJcbiAgc29saWQ/OiBib29sZWFuXHJcbiAgY2hpbGRyZW4/OiBSZWFjdEVsZW1lbnQgfCBSZWFjdEVsZW1lbnRbXVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgVG9vbGJhciA9ICh7XHJcbiAgdGl0bGUsXHJcbiAgdGl0bGVMZXZlbCA9IFRpdGxlTGV2ZWxzLkg0LFxyXG4gIGFjdGl2ZSxcclxuICBjbGVhcixcclxuICB0cmFuc3BhcmVudCxcclxuICBzb2xpZCxcclxuICBjaGlsZHJlbixcclxufTogVG9vbGJhclByb3BlcnRpZXMpID0+IHtcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIGNvbnN0IGNsYXNzZXMgPSBbJ2ZkLXRvb2xiYXInXVxyXG4gIGlmIChhY3RpdmUpIHtcclxuICAgIGNsYXNzZXMucHVzaCgnZmQtdG9vbGJhci1hY3RpdmUnKVxyXG4gIH1cclxuICBpZiAodGl0bGUpIHtcclxuICAgIGNsYXNzZXMucHVzaCgnZmQtdG9vbGJhci0tdGl0bGUnKVxyXG4gIH1cclxuICBpZiAoY2xlYXIpIHtcclxuICAgIGNsYXNzZXMucHVzaCgnZmQtdG9vbGJhci0tY2xlYXInKVxyXG4gIH1cclxuICBpZiAodHJhbnNwYXJlbnQpIHtcclxuICAgIGNsYXNzZXMucHVzaCgnZmQtdG9vbGJhci0tdHJhbnNwYXJlbnQnKVxyXG4gIH1cclxuICBpZiAoc29saWQpIHtcclxuICAgIGNsYXNzZXMucHVzaCgnZmQtdG9vbGJhci0tc29saWQnKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXZcclxuICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX1cclxuICAgID5cclxuICAgICAge3RpdGxlID9cclxuICAgICAgICA8VGl0bGVcclxuICAgICAgICAgIGNsYXNzTmFtZT0nZmQtdG9vbGJhcl9fdGl0bGUnXHJcbiAgICAgICAgICBsZXZlbD17dGl0bGVMZXZlbH1cclxuICAgICAgICAgIHRleHQ9e3RpdGxlfVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgOiBudWxsfVxyXG4gICAgICA8VG9vbGJhclNwYWNlciAvPlxyXG4gICAgICB7Y2hpbGRyZW59XHJcblxyXG4gICAgPC9kaXY+XHJcbiAgKVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuZXhwb3J0IGNvbnN0IFRvb2xiYXJTZXBhcmF0b3IgPSAoKSA9PiB7XHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgICA8c3BhbiBjbGFzc05hbWU9J2ZkLXRvb2xiYXJfX3NlcGFyYXRvcicgLz5cclxuICApXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgY29uc3QgVG9vbGJhclNwYWNlciA9ICgpID0+IHtcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT0nZmQtdG9vbGJhcl9fc3BhY2VyJyAvPlxyXG4gIClcclxufSIsImltcG9ydCBSZWFjdCwgeyBSZWFjdEVsZW1lbnQgfSBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCB7XHJcbiAgVmVydGljYWxOYXZpZ2F0aW9uSXRlbSxcclxuICBWZXJ0aWNhbE5hdmlnYXRpb25JdGVtUHJvcGVydGllc1xyXG59IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvdmVydGljYWxuYXZpZ2F0aW9uL1ZlcnRpY2FsTmF2aWdhdGlvbkl0ZW0nXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFZlcnRpY2FsTmF2aWdhdGlvblByb3BlcnRpZXMge1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZ1xyXG4gIGxhYmVsOiBzdHJpbmdcclxuICBpdGVtc0xhYmVsOiBzdHJpbmdcclxuICBpdGVtcz86IFZlcnRpY2FsTmF2aWdhdGlvbkl0ZW1Qcm9wZXJ0aWVzW10sXHJcbiAgb25JdGVtU2VsZWN0PzogKGlkOiBzdHJpbmcpID0+IHZvaWRcclxuICBjaGlsZHJlbj86IFJlYWN0RWxlbWVudCB8IFJlYWN0RWxlbWVudFtdXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBWZXJ0aWNhbE5hdmlnYXRpb24gPSAoe1xyXG4gIGNsYXNzTmFtZSxcclxuICBsYWJlbCxcclxuICBpdGVtc0xhYmVsLFxyXG4gIGl0ZW1zLFxyXG4gIG9uSXRlbVNlbGVjdCxcclxuICBjaGlsZHJlbixcclxufTogVmVydGljYWxOYXZpZ2F0aW9uUHJvcGVydGllcykgPT4ge1xyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgY29uc3QgY2xhc3NlcyA9IFsnZmQtdmVydGljYWwtbmF2J11cclxuICBpZiAoY2xhc3NOYW1lKSB7XHJcbiAgICBjbGFzc2VzLnB1c2goY2xhc3NOYW1lKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmpvaW4oJyAnKX0+XHJcbiAgICAgIDxuYXYgY2xhc3NOYW1lPSdmZC12ZXJ0aWNhbC1uYXZfX21haW4tbmF2aWdhdGlvbicgYXJpYS1sYWJlbD17bGFiZWx9PlxyXG4gICAgICAgIDx1bCBjbGFzc05hbWU9J2ZkLWxpc3QnIGFyaWEtbGFiZWw9e2l0ZW1zTGFiZWx9PlxyXG4gICAgICAgICAge2l0ZW1zPy5tYXAoaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgPFZlcnRpY2FsTmF2aWdhdGlvbkl0ZW1cclxuICAgICAgICAgICAgICAgIGtleT17aXRlbS5pZH1cclxuICAgICAgICAgICAgICAgIGlkPXtpdGVtLmlkfVxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtpdGVtLmNsYXNzTmFtZX1cclxuICAgICAgICAgICAgICAgIGV4cGFuZGVkPXtpdGVtLmV4cGFuZGVkfVxyXG4gICAgICAgICAgICAgICAgaXRlbXM9e2l0ZW0uaXRlbXN9XHJcbiAgICAgICAgICAgICAgICBnbHlwaD17aXRlbS5nbHlwaH1cclxuICAgICAgICAgICAgICAgIHRleHQ9e2l0ZW0udGV4dH1cclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkPXtpdGVtLnNlbGVjdGVkfVxyXG4gICAgICAgICAgICAgICAgb25JdGVtU2VsZWN0PXtpdGVtLm9uSXRlbVNlbGVjdCB8fCBvbkl0ZW1TZWxlY3R9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgfSl9XHJcbiAgICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgICAgPC91bD5cclxuICAgICAgPC9uYXY+XHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7XHJcbiAgS2V5Ym9hcmRFdmVudCxcclxuICBNb3VzZUV2ZW50LFxyXG4gIHVzZVN0YXRlXHJcbn0gZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFZlcnRpY2FsTmF2aWdhdGlvbkl0ZW1Qcm9wZXJ0aWVzIHtcclxuICBpZDogc3RyaW5nXHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nXHJcbiAgZXhwYW5kZWQ/OiBib29sZWFuXHJcbiAgaXRlbXM/OiBWZXJ0aWNhbE5hdmlnYXRpb25JdGVtUHJvcGVydGllc1tdXHJcbiAgZ2x5cGg/OiBzdHJpbmdcclxuICBzZWxlY3RlZD86IGJvb2xlYW5cclxuICB0ZXh0OiBzdHJpbmdcclxuICBvbkl0ZW1TZWxlY3Q/OiAoaWQ6IHN0cmluZykgPT4gdm9pZFxyXG4gIGNoaWxkcmVuPzogYW55IHwgYW55W11cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFZlcnRpY2FsTmF2aWdhdGlvbkl0ZW0gPSAoe1xyXG4gIGlkLFxyXG4gIGNsYXNzTmFtZSxcclxuICBleHBhbmRlZCxcclxuICBpdGVtcyxcclxuICBnbHlwaCxcclxuICBzZWxlY3RlZCxcclxuICB0ZXh0LFxyXG4gIG9uSXRlbVNlbGVjdCxcclxuICBjaGlsZHJlbixcclxufTogVmVydGljYWxOYXZpZ2F0aW9uSXRlbVByb3BlcnRpZXMpID0+IHtcclxuXHJcblxyXG4gIC8vIEhvb2tzIC8vXHJcblxyXG4gIGNvbnN0IFtpc0V4cGFuZGVkLCBzZXRFeHBhbmRlZF0gPSB1c2VTdGF0ZShleHBhbmRlZClcclxuICBjb25zdCBleHBhbmRhYmxlID0gQm9vbGVhbihpdGVtcz8ubGVuZ3RoKSB8fCBCb29sZWFuKGNoaWxkcmVuKVxyXG5cclxuICAvLyBFdmVudHMgLy9cclxuXHJcbiAgY29uc3Qgb25DbGljayA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcclxuICAgIGlmIChvbkl0ZW1TZWxlY3QpIHtcclxuICAgICAgb25JdGVtU2VsZWN0KGlkKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3Qgb25LZXlVcCA9IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xyXG4gICAgc3dpdGNoIChldmVudC5jb2RlKSB7XHJcbiAgICAgIGNhc2UgJ0VudGVyJzpcclxuICAgICAgY2FzZSAnU3BhY2UnOiB7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcclxuICAgICAgICBpZiAob25JdGVtU2VsZWN0KSB7XHJcbiAgICAgICAgICBvbkl0ZW1TZWxlY3QoaWQpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIGNvbnN0IGNsYXNzZXMgPSBbJ2ZkLWxpc3RfX25hdmlnYXRpb24taXRlbSddXHJcbiAgaWYgKGNsYXNzTmFtZSkge1xyXG4gICAgY2xhc3Nlcy5wdXNoKGNsYXNzTmFtZSlcclxuICB9XHJcbiAgaWYgKGV4cGFuZGFibGUpIHtcclxuICAgIGNsYXNzZXMucHVzaCgnZmQtbGlzdF9fbmF2aWdhdGlvbi1pdGVtLS1leHBhbmRhYmxlJylcclxuICB9XHJcbiAgaWYgKGlzRXhwYW5kZWQpIHtcclxuICAgIGNsYXNzZXMucHVzaCgnaXMtZXhwYW5kZWQnKVxyXG4gIH1cclxuICBpZiAoc2VsZWN0ZWQpIHtcclxuICAgIGNsYXNzZXMucHVzaCgnZmQtbGlzdF9fbmF2aWdhdGlvbi1pdGVtLS1pbmRpY2F0ZWQnKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgY2xhc3Nlc0Fycm93ID0gWydmZC1saXN0X19uYXZpZ2F0aW9uLWl0ZW0tYXJyb3cnXVxyXG4gIGlmIChpc0V4cGFuZGVkKSB7XHJcbiAgICBjbGFzc2VzQXJyb3cucHVzaCgnaXMtZXhwYW5kZWQnKVxyXG4gICAgY2xhc3Nlc0Fycm93LnB1c2goJ3NhcC1pY29uLS1uYXZpZ2F0aW9uLWRvd24tYXJyb3cnKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBjbGFzc2VzQXJyb3cucHVzaCgnc2FwLWljb24tLW5hdmlnYXRpb24tcmlnaHQtYXJyb3cnKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxsaVxyXG4gICAgICBjbGFzc05hbWU9e2NsYXNzZXMuam9pbignICcpfVxyXG4gICAgICB0YWJJbmRleD17MH1cclxuICAgICAgb25DbGljaz17b25DbGlja31cclxuICAgICAgb25LZXlVcD17b25LZXlVcH1cclxuICAgID5cclxuICAgICAge2dseXBoID9cclxuICAgICAgICA8aVxyXG4gICAgICAgICAgY2xhc3NOYW1lPXtgZmQtbGlzdF9fbmF2aWdhdGlvbi1pdGVtLWljb24gc2FwLWljb24tLSR7Z2x5cGh9YH1cclxuICAgICAgICAgIHJvbGU9J3ByZXNlbnRhdGlvbidcclxuICAgICAgICA+PC9pPlxyXG4gICAgICAgIDogbnVsbH1cclxuICAgICAgPHNwYW4gY2xhc3NOYW1lPSdmZC1saXN0X19uYXZpZ2F0aW9uLWl0ZW0tdGV4dCc+XHJcbiAgICAgICAge3RleHR9XHJcbiAgICAgIDwvc3Bhbj5cclxuICAgICAge2V4cGFuZGFibGUgP1xyXG4gICAgICAgIDxidXR0b25cclxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlc0Fycm93LmpvaW4oJyAnKX1cclxuICAgICAgICAgIGFyaWEtbGFiZWw9J0V4cGFuZCBzZWNvbmQgc3VibWVudSdcclxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldEV4cGFuZGVkKCFpc0V4cGFuZGVkKX1cclxuICAgICAgICA+PC9idXR0b24+XHJcbiAgICAgICAgOiBudWxsfVxyXG4gICAgICB7ZXhwYW5kYWJsZSAmJiBpc0V4cGFuZGVkICYmIChCb29sZWFuKGl0ZW1zPy5sZW5ndGgpIHx8IEJvb2xlYW4oY2hpbGRyZW4pKSA/XHJcbiAgICAgICAgPHVsIGNsYXNzTmFtZT0nZmQtbGlzdCc+XHJcbiAgICAgICAgICB7aXRlbXM/Lm1hcChpdGVtID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICA8VmVydGljYWxOYXZpZ2F0aW9uSXRlbVxyXG4gICAgICAgICAgICAgICAga2V5PXtpdGVtLmlkfVxyXG4gICAgICAgICAgICAgICAgaWQ9e2l0ZW0uaWR9XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2l0ZW0uY2xhc3NOYW1lfVxyXG4gICAgICAgICAgICAgICAgZXhwYW5kZWQ9e2l0ZW0uZXhwYW5kZWR9XHJcbiAgICAgICAgICAgICAgICBpdGVtcz17aXRlbS5pdGVtc31cclxuICAgICAgICAgICAgICAgIGdseXBoPXtpdGVtLmdseXBofVxyXG4gICAgICAgICAgICAgICAgdGV4dD17aXRlbS50ZXh0fVxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e2l0ZW0uc2VsZWN0ZWR9XHJcbiAgICAgICAgICAgICAgICBvbkl0ZW1TZWxlY3Q9e29uSXRlbVNlbGVjdH1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICB9KX1cclxuICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICA8L3VsPlxyXG4gICAgICAgIDogbnVsbH1cclxuXHJcbiAgICA8L2xpPlxyXG4gIClcclxufVxyXG4iLCJleHBvcnQgdHlwZSBBY2NlbnRDb2xvciA9XHJcbiAgJ2FjY2VudC1jb2xvci0xJyB8XHJcbiAgJ2FjY2VudC1jb2xvci0yJyB8XHJcbiAgJ2FjY2VudC1jb2xvci0zJyB8XHJcbiAgJ2FjY2VudC1jb2xvci00JyB8XHJcbiAgJ2FjY2VudC1jb2xvci01JyB8XHJcbiAgJ2FjY2VudC1jb2xvci02JyB8XHJcbiAgJ2FjY2VudC1jb2xvci03JyB8XHJcbiAgJ2FjY2VudC1jb2xvci04JyB8XHJcbiAgJ2FjY2VudC1jb2xvci05JyB8XHJcbiAgJ2FjY2VudC1jb2xvci0xMCdcclxuXHJcbmV4cG9ydCBjb25zdCBBY2NlbnRDb2xvcnM6IHtcclxuICBDT0xPUl8xOiBBY2NlbnRDb2xvciwgLy8gT3JhbmdlXHJcbiAgQ09MT1JfMjogQWNjZW50Q29sb3IsIC8vIFJlZFxyXG4gIENPTE9SXzM6IEFjY2VudENvbG9yLCAvLyBQaW5rXHJcbiAgQ09MT1JfNDogQWNjZW50Q29sb3IsIC8vIFB1cnBsZVxyXG4gIENPTE9SXzU6IEFjY2VudENvbG9yLCAvLyBCbHVlXHJcbiAgQ09MT1JfNjogQWNjZW50Q29sb3IsIC8vIExpZ2h0IEJsdWVcclxuICBDT0xPUl83OiBBY2NlbnRDb2xvciwgLy8gVHVycXVvaXNlXHJcbiAgQ09MT1JfODogQWNjZW50Q29sb3IsIC8vIEdyZWVuXHJcbiAgQ09MT1JfOTogQWNjZW50Q29sb3IsIC8vIFZpb2xldFxyXG4gIENPTE9SXzEwOiBBY2NlbnRDb2xvciwgLy8gR3JleVxyXG59ID0ge1xyXG4gIENPTE9SXzE6ICdhY2NlbnQtY29sb3ItMScsXHJcbiAgQ09MT1JfMjogJ2FjY2VudC1jb2xvci0yJyxcclxuICBDT0xPUl8zOiAnYWNjZW50LWNvbG9yLTMnLFxyXG4gIENPTE9SXzQ6ICdhY2NlbnQtY29sb3ItNCcsXHJcbiAgQ09MT1JfNTogJ2FjY2VudC1jb2xvci01JyxcclxuICBDT0xPUl82OiAnYWNjZW50LWNvbG9yLTYnLFxyXG4gIENPTE9SXzc6ICdhY2NlbnQtY29sb3ItNycsXHJcbiAgQ09MT1JfODogJ2FjY2VudC1jb2xvci04JyxcclxuICBDT0xPUl85OiAnYWNjZW50LWNvbG9yLTknLFxyXG4gIENPTE9SXzEwOiAnYWNjZW50LWNvbG9yLTEwJyxcclxufSIsImV4cG9ydCB0eXBlIEJ1dHRvblN0eWxlID1cclxuICAnZW1waGFzaXplZCcgfFxyXG4gICdnaG9zdCcgfFxyXG4gICdwb3NpdGl2ZScgfFxyXG4gICduZWdhdGl2ZScgfFxyXG4gICdhdHRlbnRpb24nIHxcclxuICAndHJhbnNwYXJlbnQnXHJcblxyXG5leHBvcnQgY29uc3QgQnV0dG9uU3R5bGVzOiB7XHJcbiAgRU1QSEFTSVpFRDogQnV0dG9uU3R5bGUsXHJcbiAgR0hPU1Q6IEJ1dHRvblN0eWxlLFxyXG4gIFBPU0lUSVZFOiBCdXR0b25TdHlsZSxcclxuICBORUdBVElWRTogQnV0dG9uU3R5bGUsXHJcbiAgQVRURU5USU9OOiBCdXR0b25TdHlsZSxcclxuICBUUkFOU1BBUkVOVDogQnV0dG9uU3R5bGUsXHJcbn0gPSB7XHJcbiAgRU1QSEFTSVpFRDogJ2VtcGhhc2l6ZWQnLFxyXG4gIEdIT1NUOiAnZ2hvc3QnLFxyXG4gIFBPU0lUSVZFOiAncG9zaXRpdmUnLFxyXG4gIE5FR0FUSVZFOiAnbmVnYXRpdmUnLFxyXG4gIEFUVEVOVElPTjogJ2F0dGVudGlvbicsXHJcbiAgVFJBTlNQQVJFTlQ6ICd0cmFuc3BhcmVudCcsXHJcbn0iLCJleHBvcnQgdHlwZSBCdXR0b25UeXBlID1cclxuICAnYnV0dG9uJyB8XHJcbiAgJ3N1Ym1pdCcgfFxyXG4gICdyZXNldCdcclxuXHJcbmV4cG9ydCBjb25zdCBCdXR0b25UeXBlczoge1xyXG4gIEJVVFRPTjogQnV0dG9uVHlwZSxcclxuICBTVUJNSVQ6IEJ1dHRvblR5cGUsXHJcbiAgUkVTRVQ6IEJ1dHRvblR5cGUsXHJcbn0gPSB7XHJcbiAgQlVUVE9OOiAnYnV0dG9uJyxcclxuICBTVUJNSVQ6ICdzdWJtaXQnLFxyXG4gIFJFU0VUOiAncmVzZXQnLFxyXG59IiwiZXhwb3J0IHR5cGUgTGlua1R5cGUgPVxyXG4gICdlbXBoYXNpemVkJyB8XHJcbiAgJ3N1YnRsZScgfFxyXG4gICdpbnZlcnRlZCdcclxuXHJcbmV4cG9ydCBjb25zdCBMaW5rVHlwZXM6IHtcclxuICBFTVBIQVNJWkVEOiBMaW5rVHlwZSxcclxuICBTVUJUTEU6IExpbmtUeXBlLFxyXG4gIElOVkVSVEVEOiBMaW5rVHlwZSxcclxufSA9IHtcclxuICBFTVBIQVNJWkVEOiAnZW1waGFzaXplZCcsXHJcbiAgU1VCVExFOiAnc3VidGxlJyxcclxuICBJTlZFUlRFRDogJ2ludmVydGVkJyxcclxuIH0iLCJleHBvcnQgdHlwZSBTZW1hbnRpYyA9XHJcbiAgJ3Bvc2l0aXZlJyB8XHJcbiAgJ25lZ2F0aXZlJyB8XHJcbiAgJ2NyaXRpY2FsJyB8XHJcbiAgJ2luZm9ybWF0aXZlJ1xyXG5cclxuZXhwb3J0IGNvbnN0IFNlbWFudGljczoge1xyXG4gIFBPU0lUSVZFOiBTZW1hbnRpYyxcclxuICBORUdBVElWRTogU2VtYW50aWMsXHJcbiAgQ1JJVElDQUw6IFNlbWFudGljLFxyXG4gIElORk9STUFUSVZFOiBTZW1hbnRpY1xyXG59ID0ge1xyXG4gIFBPU0lUSVZFOiAncG9zaXRpdmUnLFxyXG4gIE5FR0FUSVZFOiAnbmVnYXRpdmUnLFxyXG4gIENSSVRJQ0FMOiAnY3JpdGljYWwnLFxyXG4gIElORk9STUFUSVZFOiAnaW5mb3JtYXRpdmUnXHJcbn0iLCJleHBvcnQgdHlwZSBTaXplID1cclxuICAneHMnIHxcclxuICAncycgfFxyXG4gICdtJyB8XHJcbiAgJ2wnIHxcclxuICAneGwnXHJcblxyXG5leHBvcnQgY29uc3QgU2l6ZXM6IHtcclxuICBYX1NNQUxMOiBTaXplLFxyXG4gIFNNQUxMOiBTaXplLFxyXG4gIE1FRElVTTogU2l6ZSxcclxuICBMQVJHRTogU2l6ZSxcclxuICBYX0xBUkdFOiBTaXplLFxyXG59ID0ge1xyXG4gIFhfU01BTEw6ICd4cycsXHJcbiAgU01BTEw6ICdzJyxcclxuICBNRURJVU06ICdtJyxcclxuICBMQVJHRTogJ2wnLFxyXG4gIFhfTEFSR0U6ICd4bCcsXHJcbn0iLCJleHBvcnQgdHlwZSBUaXRsZUxldmVsID1cclxuICAxIHxcclxuICAyIHxcclxuICAzIHxcclxuICA0IHxcclxuICA1IHxcclxuICA2XHJcblxyXG5leHBvcnQgY29uc3QgVGl0bGVMZXZlbHM6IHtcclxuICBIMTogVGl0bGVMZXZlbCxcclxuICBIMjogVGl0bGVMZXZlbCxcclxuICBIMzogVGl0bGVMZXZlbCxcclxuICBINDogVGl0bGVMZXZlbCxcclxuICBINTogVGl0bGVMZXZlbCxcclxuICBINjogVGl0bGVMZXZlbCxcclxufSA9IHtcclxuICBIMTogMSxcclxuICBIMjogMixcclxuICBIMzogMyxcclxuICBINDogNCxcclxuICBINTogNSxcclxuICBINjogNixcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgeyBBdmF0YXJEZW1vIH0gZnJvbSAnLi4vY29tcG9uZW50cy9kZW1vL0F2YXRhckRlbW8nXHJcbmltcG9ydCB7IEJhZGdlRGVtbyB9IGZyb20gJy4uL2NvbXBvbmVudHMvZGVtby9CYWRnZURlbW8nXHJcbmltcG9ydCB7IEJhckRlbW8gfSBmcm9tICcuLi9jb21wb25lbnRzL2RlbW8vQmFyRGVtbydcclxuaW1wb3J0IHsgQnV0dG9uRGVtbyB9IGZyb20gJy4uL2NvbXBvbmVudHMvZGVtby9CdXR0b25EZW1vJ1xyXG5pbXBvcnQgeyBDYWxlbmRhckRlbW8gfSBmcm9tICcuLi9jb21wb25lbnRzL2RlbW8vQ2FsZW5kYXJEZW1vJ1xyXG5pbXBvcnQgeyBDYXJkRGVtbyB9IGZyb20gJy4uL2NvbXBvbmVudHMvZGVtby9DYXJkRGVtbydcclxuaW1wb3J0IHsgRGlhbG9nRGVtbyB9IGZyb20gJy4uL2NvbXBvbmVudHMvZGVtby9EaWFsb2dEZW1vJ1xyXG5pbXBvcnQgeyBGb3JtRGVtbyB9IGZyb20gJy4uL2NvbXBvbmVudHMvZGVtby9Gb3JtRGVtbydcclxuaW1wb3J0IHsgSWNvblRhYkJhckRlbW8gfSBmcm9tICcuLi9jb21wb25lbnRzL2RlbW8vSWNvblRhYkJhckRlbW8nXHJcbmltcG9ydCB7IEluZm9MYWJlbERlbW8gfSBmcm9tICcuLi9jb21wb25lbnRzL2RlbW8vSW5mb0xhYmVsRGVtbydcclxuaW1wb3J0IHsgTGlua0RlbW8gfSBmcm9tICcuLi9jb21wb25lbnRzL2RlbW8vTGlua0RlbW8nXHJcbmltcG9ydCB7IE9iamVjdERlbW8gfSBmcm9tICcuLi9jb21wb25lbnRzL2RlbW8vT2JqZWN0RGVtbydcclxuaW1wb3J0IHsgUGFnZURlbW8gfSBmcm9tICcuLi9jb21wb25lbnRzL2RlbW8vUGFnZURlbW8nXHJcbmltcG9ydCB7IFBhbmVsRGVtbyB9IGZyb20gJy4uL2NvbXBvbmVudHMvZGVtby9QYW5lbERlbW8nXHJcbmltcG9ydCB7IFNlbGVjdERlbW8gfSBmcm9tICcuLi9jb21wb25lbnRzL2RlbW8vU2VsZWN0RGVtbydcclxuaW1wb3J0IHsgU2hlbGxCYXJEZW1vIH0gZnJvbSAnLi4vY29tcG9uZW50cy9kZW1vL1NoZWxsQmFyRGVtbydcclxuaW1wb3J0IHsgVGFibGVEZW1vIH0gZnJvbSAnLi4vY29tcG9uZW50cy9kZW1vL1RhYmxlRGVtbydcclxuaW1wb3J0IHsgVGlsZURlbW8gfSBmcm9tICcuLi9jb21wb25lbnRzL2RlbW8vVGlsZURlbW8nXHJcbmltcG9ydCB7IFRpdGxlRGVtbyB9IGZyb20gJy4uL2NvbXBvbmVudHMvZGVtby9UaXRsZURlbW8nXHJcbmltcG9ydCB7IFRvb2xiYXJEZW1vIH0gZnJvbSAnLi4vY29tcG9uZW50cy9kZW1vL1Rvb2xiYXJEZW1vJ1xyXG5pbXBvcnQgeyBWZXJ0aWNhbE5hdmlnYXRpb25EZW1vIH0gZnJvbSAnLi4vY29tcG9uZW50cy9kZW1vL1ZlcnRpY2FsTmF2aWdhdGlvbkRlbW8nXHJcblxyXG5leHBvcnQgY29uc3QgQ09NUE9ORU5UID0ge1xyXG4gIEFWQVRBUjoge1xyXG4gICAgaWQ6ICdhdmF0YXInLFxyXG4gICAgdGV4dDogJ0F2YXRhcicsXHJcbiAgICBkZW1vOiBBdmF0YXJEZW1vXHJcbiAgfSxcclxuICBCQURHRToge1xyXG4gICAgaWQ6ICdiYWRnZScsXHJcbiAgICB0ZXh0OiAnQmFkZ2UnLFxyXG4gICAgZGVtbzogQmFkZ2VEZW1vXHJcbiAgfSxcclxuICBCQVI6IHtcclxuICAgIGlkOiAnYmFyJyxcclxuICAgIHRleHQ6ICdCYXInLFxyXG4gICAgZGVtbzogQmFyRGVtb1xyXG4gIH0sXHJcbiAgQlVUVE9OOiB7XHJcbiAgICBpZDogJ2J1dHRvbicsXHJcbiAgICB0ZXh0OiAnQnV0dG9uJyxcclxuICAgIGRlbW86IEJ1dHRvbkRlbW9cclxuICB9LFxyXG4gIENBTEVOREFSOiB7XHJcbiAgICBpZDogJ2NhbGVuZGFyJyxcclxuICAgIHRleHQ6ICdDYWxlbmRhcicsXHJcbiAgICBkZW1vOiBDYWxlbmRhckRlbW9cclxuICB9LFxyXG4gIENBUkQ6IHtcclxuICAgIGlkOiAnY2FyZCcsXHJcbiAgICB0ZXh0OiAnQ2FyZCcsXHJcbiAgICBkZW1vOiBDYXJkRGVtb1xyXG4gIH0sXHJcbiAgRElBTE9HOiB7XHJcbiAgICBpZDogJ2RpYWxvZycsXHJcbiAgICB0ZXh0OiAnRGlhbG9nJyxcclxuICAgIGRlbW86IERpYWxvZ0RlbW9cclxuICB9LFxyXG4gIEZPUk06IHtcclxuICAgIGlkOiAnZm9ybScsXHJcbiAgICB0ZXh0OiAnRm9ybScsXHJcbiAgICBkZW1vOiBGb3JtRGVtb1xyXG4gIH0sXHJcbiAgSUNPTl9UQUJfQkFSOiB7XHJcbiAgICBpZDogJ2ljb250YWJiYXInLFxyXG4gICAgdGV4dDogJ0ljb25UYWJCYXInLFxyXG4gICAgZGVtbzogSWNvblRhYkJhckRlbW9cclxuICB9LFxyXG4gIElORk9fTEFCRUw6IHtcclxuICAgIGlkOiAnaW5mb2xhYmVsJyxcclxuICAgIHRleHQ6ICdJbmZvTGFiZWwnLFxyXG4gICAgZGVtbzogSW5mb0xhYmVsRGVtb1xyXG4gIH0sXHJcbiAgTElOSzoge1xyXG4gICAgaWQ6ICdsaW5rJyxcclxuICAgIHRleHQ6ICdMaW5rJyxcclxuICAgIGRlbW86IExpbmtEZW1vXHJcbiAgfSxcclxuICBPQkpFQ1Q6IHtcclxuICAgIGlkOiAnb2JqZWN0JyxcclxuICAgIHRleHQ6ICdPYmplY3QnLFxyXG4gICAgZGVtbzogT2JqZWN0RGVtb1xyXG4gIH0sXHJcbiAgUEFHRToge1xyXG4gICAgaWQ6ICdwYWdlJyxcclxuICAgIHRleHQ6ICdQYWdlJyxcclxuICAgIGRlbW86IFBhZ2VEZW1vXHJcbiAgfSxcclxuICBQQU5FTDoge1xyXG4gICAgaWQ6ICdwYW5lbCcsXHJcbiAgICB0ZXh0OiAnUGFuZWwnLFxyXG4gICAgZGVtbzogUGFuZWxEZW1vXHJcbiAgfSxcclxuICBTRUxFQ1Q6IHtcclxuICAgIGlkOiAnc2VsZWN0JyxcclxuICAgIHRleHQ6ICdTZWxlY3QnLFxyXG4gICAgZGVtbzogU2VsZWN0RGVtb1xyXG4gIH0sXHJcbiAgU0hFTExfQkFSOiB7XHJcbiAgICBpZDogJ3NoZWxsYmFyJyxcclxuICAgIHRleHQ6ICdTaGVsbEJhcicsXHJcbiAgICBkZW1vOiBTaGVsbEJhckRlbW9cclxuICB9LFxyXG4gIFRBQkxFOiB7XHJcbiAgICBpZDogJ3RhYmxlJyxcclxuICAgIHRleHQ6ICdUYWJsZScsXHJcbiAgICBkZW1vOiBUYWJsZURlbW9cclxuICB9LFxyXG4gIFRJTEU6IHtcclxuICAgIGlkOiAndGlsZScsXHJcbiAgICB0ZXh0OiAnVGlsZScsXHJcbiAgICBkZW1vOiBUaWxlRGVtb1xyXG4gIH0sXHJcbiAgVElUTEU6IHtcclxuICAgIGlkOiAndGl0bGUnLFxyXG4gICAgdGV4dDogJ1RpdGxlJyxcclxuICAgIGRlbW86IFRpdGxlRGVtb1xyXG4gIH0sXHJcbiAgVE9PTEJBUjoge1xyXG4gICAgaWQ6ICd0b29sYmFyJyxcclxuICAgIHRleHQ6ICdUb29sYmFyJyxcclxuICAgIGRlbW86IFRvb2xiYXJEZW1vXHJcbiAgfSxcclxuICBWRVJUSUNBTF9OQVZJR0FUSU9OOiB7XHJcbiAgICBpZDogJ3ZlcnRpY2FsbmF2aWdhdGlvbicsXHJcbiAgICB0ZXh0OiAnVmVydGljYWxOYXZpZ2F0aW9uJyxcclxuICAgIGRlbW86IFZlcnRpY2FsTmF2aWdhdGlvbkRlbW9cclxuICB9LFxyXG59XHJcbmV4cG9ydCBjb25zdCBDT01QT05FTlRTID0gT2JqZWN0LnZhbHVlcyhDT01QT05FTlQpXHJcbiIsIi8vIGNvbnN0YW50c1xyXG5leHBvcnQgeyBBY2NlbnRDb2xvciwgQWNjZW50Q29sb3JzfSBmcm9tICcuL2NvbnN0YW50cy9BY2NlbnRDb2xvcidcclxuZXhwb3J0IHsgQnV0dG9uU3R5bGUsIEJ1dHRvblN0eWxlcyB9IGZyb20gJy4vY29uc3RhbnRzL0J1dHRvblN0eWxlJ1xyXG5leHBvcnQgeyBCdXR0b25UeXBlLCBCdXR0b25UeXBlcyB9IGZyb20gJy4vY29uc3RhbnRzL0J1dHRvblR5cGUnXHJcbmV4cG9ydCB7IExpbmtUeXBlLCBMaW5rVHlwZXMgfSBmcm9tICcuL2NvbnN0YW50cy9MaW5rVHlwZSdcclxuZXhwb3J0IHsgU2VtYW50aWMsIFNlbWFudGljcyB9IGZyb20gJy4vY29uc3RhbnRzL1NlbWFudGljJ1xyXG5leHBvcnQgeyBTaXplLCBTaXplcyB9IGZyb20gJy4vY29uc3RhbnRzL1NpemUnXHJcbmV4cG9ydCB7IFRpdGxlTGV2ZWwsIFRpdGxlTGV2ZWxzIH0gZnJvbSAnLi9jb25zdGFudHMvVGl0bGVMZXZlbCdcclxuXHJcbi8vIGF2YXRhclxyXG5leHBvcnQgeyBBdmF0YXIgfSBmcm9tICcuL2NvbXBvbmVudHMvYXZhdGFyL0F2YXRhcidcclxuLy8gYmFkZ2VcclxuZXhwb3J0IHsgQmFkZ2UgfSBmcm9tICcuL2NvbXBvbmVudHMvYmFkZ2UvQmFkZ2UnXHJcbi8vIGJhclxyXG5leHBvcnQgeyBCYXIgfSBmcm9tICcuL2NvbXBvbmVudHMvYmFyL0JhcidcclxuLy8gYnV0dG9uXHJcbmV4cG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4vY29tcG9uZW50cy9idXR0b24vQnV0dG9uJ1xyXG4vLyBjYWxlbmRhclxyXG5leHBvcnQgeyBDYWxlbmRhciB9IGZyb20gJy4vY29tcG9uZW50cy9jYWxlbmRhci9DYWxlbmRhcidcclxuLy8gY2FyZFxyXG5leHBvcnQgeyBDYXJkIH0gZnJvbSAnLi9jb21wb25lbnRzL2NhcmQvQ2FyZCdcclxuZXhwb3J0IHsgQ2FyZEhlYWRlciB9IGZyb20gJy4vY29tcG9uZW50cy9jYXJkL0NhcmRIZWFkZXInXHJcbmV4cG9ydCB7IENhcmRGb290ZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvY2FyZC9DYXJkRm9vdGVyJ1xyXG4vLyBkaWFsb2dcclxuZXhwb3J0IHsgRGlhbG9nIH0gZnJvbSAnLi9jb21wb25lbnRzL2RpYWxvZy9EaWFsb2cnXHJcbmV4cG9ydCB7IERpYWxvZ0hlYWRlciB9IGZyb20gJy4vY29tcG9uZW50cy9kaWFsb2cvRGlhbG9nSGVhZGVyJ1xyXG5leHBvcnQgeyBEaWFsb2dGb290ZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvZGlhbG9nL0RpYWxvZ0Zvb3RlcidcclxuLy8gZnJvbVxyXG5leHBvcnQgeyBGb3JtSW5wdXQgfSBmcm9tICcuL2NvbXBvbmVudHMvZm9ybS9Gb3JtSW5wdXQnXHJcbmV4cG9ydCB7IEZvcm1TdGVwSW5wdXQgfSBmcm9tICcuL2NvbXBvbmVudHMvZm9ybS9Gb3JtU3RlcElucHV0J1xyXG4vLyBpY29udGFiYmFyXHJcbmV4cG9ydCB7IEljb25UYWJCYXIgfSBmcm9tICcuL2NvbXBvbmVudHMvaWNvbnRhYmJhci9JY29uVGFiQmFyJ1xyXG5leHBvcnQgeyBJY29uVGFiQmFySXRlbSB9IGZyb20gJy4vY29tcG9uZW50cy9pY29udGFiYmFyL0ljb25UYWJCYXJJdGVtJ1xyXG4vLyBpbmZvbGFiZWxcclxuZXhwb3J0IHsgSW5mb0xhYmVsIH0gZnJvbSAnLi9jb21wb25lbnRzL2luZm9sYWJlbC9JbmZvTGFiZWwnXHJcbi8vIGxpbmtcclxuZXhwb3J0IHsgTGluayB9IGZyb20gJy4vY29tcG9uZW50cy9saW5rL0xpbmsnXHJcbi8vIG9iamVjdFxyXG5leHBvcnQgeyBPYmplY3RBdHRyaWJ1dGUgfSBmcm9tICcuL2NvbXBvbmVudHMvb2JqZWN0L09iamVjdEF0dHJpYnV0ZSdcclxuZXhwb3J0IHsgT2JqZWN0SGVhZGVyQXR0cmlidXRlIH0gZnJvbSAnLi9jb21wb25lbnRzL29iamVjdC9PYmplY3RIZWFkZXJBdHRyaWJ1dGUnXHJcbmV4cG9ydCB7IE9iamVjdElkZW50aWZpZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvb2JqZWN0L09iamVjdElkZW50aWZpZXInXHJcbmV4cG9ydCB7IE9iamVjdExpc3QgfSBmcm9tICcuL2NvbXBvbmVudHMvb2JqZWN0L09iamVjdExpc3QnXHJcbmV4cG9ydCB7IE9iamVjdExpc3RJdGVtIH0gZnJvbSAnLi9jb21wb25lbnRzL29iamVjdC9PYmplY3RMaXN0SXRlbSdcclxuZXhwb3J0IHsgT2JqZWN0TWFya2VyIH0gZnJvbSAnLi9jb21wb25lbnRzL29iamVjdC9PYmplY3RNYXJrZXInXHJcbmV4cG9ydCB7IE9iamVjdE51bWJlciB9IGZyb20gJy4vY29tcG9uZW50cy9vYmplY3QvT2JqZWN0TnVtYmVyJ1xyXG5leHBvcnQgeyBPYmplY3RTdGF0dXMgfSBmcm9tICcuL2NvbXBvbmVudHMvb2JqZWN0L09iamVjdFN0YXR1cydcclxuLy8gcGFnZVxyXG5leHBvcnQgeyBQYWdlIH0gZnJvbSAnLi9jb21wb25lbnRzL3BhZ2UvUGFnZSdcclxuZXhwb3J0IHsgUGFnZUhlYWRlciB9IGZyb20gJy4vY29tcG9uZW50cy9wYWdlL1BhZ2VIZWFkZXInXHJcbmV4cG9ydCB7IFBhZ2VCb2R5IH0gZnJvbSAnLi9jb21wb25lbnRzL3BhZ2UvUGFnZUJvZHknXHJcbmV4cG9ydCB7IFBhZ2VGb290ZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvcGFnZS9QYWdlRm9vdGVyJ1xyXG4vLyBwYW5lbFxyXG5leHBvcnQgeyBQYW5lbCB9IGZyb20gJy4vY29tcG9uZW50cy9wYW5lbC9QYW5lbCdcclxuLy8gc2VsZWN0XHJcbmV4cG9ydCB7IFNlbGVjdCB9IGZyb20gJy4vY29tcG9uZW50cy9zZWxlY3QvU2VsZWN0J1xyXG5leHBvcnQgeyBTZWxlY3RJdGVtIH0gZnJvbSAnLi9jb21wb25lbnRzL3NlbGVjdC9TZWxlY3RJdGVtJ1xyXG4vLyBzaGVsbGJhclxyXG5leHBvcnQgeyBTaGVsbEJhciB9IGZyb20gJy4vY29tcG9uZW50cy9zaGVsbGJhci9TaGVsbEJhcidcclxuLy8gdGFibGVcclxuZXhwb3J0IHsgVGFibGUgfSBmcm9tICcuL2NvbXBvbmVudHMvdGFibGUvVGFibGUnXHJcbmV4cG9ydCB7IFRhYmxlUm93IH0gZnJvbSAnLi9jb21wb25lbnRzL3RhYmxlL1RhYmxlUm93J1xyXG4vLyB0aWxlXHJcbmV4cG9ydCB7IFRpbGUgfSBmcm9tICcuL2NvbXBvbmVudHMvdGlsZS9UaWxlJ1xyXG5leHBvcnQgeyBUaWxlQ29udGFpbmVyIH0gZnJvbSAnLi9jb21wb25lbnRzL3RpbGUvVGlsZUNvbnRhaW5lcidcclxuZXhwb3J0IHsgVGlsZUNvbnRlbnROdW1lcmljIH0gZnJvbSAnLi9jb21wb25lbnRzL3RpbGUvVGlsZUNvbnRlbnROdW1lcmljJ1xyXG4vLyB0aXRsZVxyXG5leHBvcnQgeyBUaXRsZSB9IGZyb20gJy4vY29tcG9uZW50cy90aXRsZS9UaXRsZSdcclxuLy8gdG9vbGJhclxyXG5leHBvcnQgeyBUb29sYmFyIH0gZnJvbSAnLi9jb21wb25lbnRzL3Rvb2xiYXIvVG9vbGJhcidcclxuZXhwb3J0IHsgVG9vbGJhclNlcGFyYXRvciB9IGZyb20gJy4vY29tcG9uZW50cy90b29sYmFyL1Rvb2xiYXJTZXBhcmF0b3InXHJcbmV4cG9ydCB7IFRvb2xiYXJTcGFjZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvdG9vbGJhci9Ub29sYmFyU3BhY2VyJ1xyXG4vLyB2ZXJ0aWNhbG5hdmlnYXRpb25cclxuZXhwb3J0IHsgVmVydGljYWxOYXZpZ2F0aW9uIH0gZnJvbSAnLi9jb21wb25lbnRzL3ZlcnRpY2FsbmF2aWdhdGlvbi9WZXJ0aWNhbE5hdmlnYXRpb24nXHJcbmV4cG9ydCB7IFZlcnRpY2FsTmF2aWdhdGlvbkl0ZW0gfSBmcm9tICcuL2NvbXBvbmVudHMvdmVydGljYWxuYXZpZ2F0aW9uL1ZlcnRpY2FsTmF2aWdhdGlvbkl0ZW0nXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCB7XHJcbiAgUm91dGUsXHJcbiAgUm91dGVzLFxyXG59IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcblxyXG5pbXBvcnQgUm91dGVSb290IGZyb20gJy4vaW5kZXgnXHJcbmltcG9ydCBSb3V0ZURlbW9zIGZyb20gJy4vZGVtbydcclxuaW1wb3J0IFJvdXRlRGVtbyBmcm9tICcuL2RlbW8vI2lkJ1xyXG5cclxuXHJcbmNvbnN0IFJvb3QgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxSb3V0ZXM+XHJcbiAgICAgIDxSb3V0ZSBwYXRoPScqJyBlbGVtZW50PXs8Um91dGVSb290IC8+fT5cclxuICAgICAgICA8Um91dGUgcGF0aD0nZGVtbycgZWxlbWVudD17PFJvdXRlRGVtb3MgLz59PlxyXG4gICAgICAgICAgPFJvdXRlIHBhdGg9JzpkZW1vSWQnIGVsZW1lbnQ9ezxSb3V0ZURlbW8gLz59IC8+XHJcbiAgICAgICAgPC9Sb3V0ZT5cclxuICAgICAgPC9Sb3V0ZT5cclxuICAgIDwvUm91dGVzPlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUm9vdFxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IHVzZVBhcmFtcyB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcblxyXG5pbXBvcnQgeyBDT01QT05FTlRTIH0gZnJvbSAnLi4vLi4vLi4vbGliL2luZGV4LWRlbW9zJ1xyXG5cclxuZXhwb3J0IGNvbnN0IFJvdXRlRGVtbyA9ICgpID0+IHtcclxuXHJcbiAgLy8gSG9va3MgLy9cclxuXHJcbiAgY29uc3QgcGFyYW1zID0gdXNlUGFyYW1zKClcclxuICBjb25zdCBkZW1vSWQgPSBwYXJhbXMuZGVtb0lkXHJcblxyXG4gIC8vIFJlbmRlcmluZyAvL1xyXG5cclxuICBjb25zdCBjb21wb25lbnQgPSBDT01QT05FTlRTLmZpbmQoY29tcG8gPT4gY29tcG8uaWQgPT09IGRlbW9JZClcclxuICBpZiAoY29tcG9uZW50KSB7XHJcbiAgICByZXR1cm4gPGNvbXBvbmVudC5kZW1vIC8+XHJcbiAgfVxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PlxyXG4gICAgICBJTkRBTElEXHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJvdXRlRGVtb1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IE91dGxldCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcblxyXG5leHBvcnQgY29uc3QgUm91dGVEZW1vcyA9ICgpID0+IHtcclxuXHJcbiAgLy8gUmVuZGVyaW5nIC8vXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8T3V0bGV0IC8+XHJcbiAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSb3V0ZURlbW9zXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgT3V0bGV0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcclxuXHJcbmltcG9ydCB7IEFwcEhlYWRlciB9IGZyb20gJy4uL2NvbXBvbmVudHMvQXBwSGVhZGVyJ1xyXG5pbXBvcnQgeyBBcHBNYWluQ29udGVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQXBwTWFpbkNvbnRlbnQnXHJcbmltcG9ydCB7IEFwcFNpZGVQYW5lbCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQXBwU2lkZVBhbmVsJ1xyXG5cclxuY29uc3QgUm91dGVSb290ID0gKCkgPT4ge1xyXG5cclxuICAvLyBIb29rcyAvL1xyXG5cclxuICAvLyBSZW5kZXJpbmcgLy9cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXZcclxuICAgICAgc3R5bGU9e3tcclxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXHJcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXHJcbiAgICAgIH19XHJcbiAgICA+XHJcbiAgICAgIDxkaXZcclxuICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgZmxleFNocmluazogMCxcclxuICAgICAgICB9fVxyXG4gICAgICA+XHJcbiAgICAgICAgPEFwcEhlYWRlciAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdlxyXG4gICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICAgICAgICBmbGV4QmFzaXM6IDAsXHJcbiAgICAgICAgICBmbGV4R3JvdzogMSxcclxuICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xyXG4gICAgICAgIH19XHJcbiAgICAgID5cclxuICAgICAgICA8ZGl2XHJcbiAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICBvdmVyZmxvdzogJ2F1dG8nLFxyXG4gICAgICAgICAgICBmbGV4U2hyaW5rOiAwLFxyXG4gICAgICAgICAgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8QXBwU2lkZVBhbmVsIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgZmxleEJhc2lzOiAwLFxyXG4gICAgICAgICAgICBmbGV4R3JvdzogMSxcclxuICAgICAgICAgIH19XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPEFwcE1haW5Db250ZW50PlxyXG4gICAgICAgICAgICA8T3V0bGV0IC8+XHJcbiAgICAgICAgICA8L0FwcE1haW5Db250ZW50PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUm91dGVSb290XHJcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MjEyKTtcbiJdLCJuYW1lcyI6WyJsZWFmUHJvdG90eXBlcyIsImdldFByb3RvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJMRVRURVJTIiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJGIiwiRyIsIkgiLCJJIiwiSiIsIksiLCJMIiwiTSIsIk4iLCJPIiwiUCIsIlEiLCJSIiwiUyIsIlQiLCJVIiwiViIsIlciLCJYIiwiWSIsIloiLCJyYW5kb21TdWJBcnJheSIsInNodWZmbGUiLCJjcmVhdGVJbnRBcnJheSIsInNpemUiLCJyZXN1bHQiLCJpIiwicHVzaCIsImFycmF5Iiwic291cmNlIiwiY29uY2F0IiwibGVuZ3RoIiwiaW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJzcGxpY2UiLCJpdGVtcyIsIk5FVkVSIiwiRkVUQ0hJTkdfRklSU1QiLCJGRVRDSElORyIsIlNVQ0NFU1MiLCJGQUlMVVJFIiwiT1VUREFURUQiLCJfX2ltcG9ydERlZmF1bHQiLCJ0aGlzIiwibW9kIiwiX19lc01vZHVsZSIsIm1lcmdlRGF0YVN0YXRlcyIsIkRhdGFTdGF0ZXNfMSIsInN0YXRlcyIsImRlZmF1bHQiLCJzb21lIiwicyIsIm5vd1N0cmluZyIsImRhdGVTdHJpbmciLCJub3JtYWxpemVUaW1lIiwiZHVyYXRpb25Ub0h1bWFuVGltZSIsIlRpbWVDb25zdGFudHMiLCJNSUxfUEVSX1NFQyIsIk1JTF9QRVJfSE9VIiwiTUlMX1BFUl9NSU4iLCJTRUNfUEVSX01JTiIsIk1JTl9QRVJfSE9VIiwiU0VDX1BFUl9IT1UiLCJIT1VfUEVSX0RBWSIsIk1JTl9QRVJfREFZIiwiU0VDX1BFUl9EQVkiLCJNSUxfUEVSX0RBWSIsImR1cmF0aW9uIiwibWlsbGlzIiwic2Vjb25kcyIsIm1pbnV0ZXMiLCJob3VycyIsInBhZFN0YXJ0IiwiZGF0ZSIsInllYXIiLCJnZXRGdWxsWWVhciIsIm1vbnRoIiwiZ2V0TW9udGgiLCJkYXkiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsIkRhdGUiLCJub3ciLCJkZWNvZGVCYXNpY0hlYWRlciIsImVuY29kZUJhc2ljSGVhZGVyIiwiZGVjb2RlIiwiZW5jb2RlIiwiQnVmZmVyIiwiZnJvbSIsInRvU3RyaW5nIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImRlY29kZWQiLCJlbmNvZGVkIiwiaGVhZGVyIiwic3BsaXQiLCJqb2luIiwidmFsdWVzIiwiY2hlY2tTaXplIiwiY2hlY2tFeHRlbnNpb24iLCJnZXRFeHRlbnNpb24iLCJmaWxlIiwibmFtZSIsInN1YnN0cmluZyIsImxhc3RJbmRleE9mIiwidG9Mb3dlckNhc2UiLCJleHRlbnRpb25zIiwiaW5kZXhPZiIsImdldFBhcmFtTmFtZXMiLCJTVFJJUF9DT01NRU5UUyIsIkFSR1VNRU5UX05BTUVTIiwiZnVuYyIsImZuU3RyIiwicmVwbGFjZSIsInNsaWNlIiwibWF0Y2giLCJIdHRwU3RhdHVzIiwiSHR0cE1ldGhvZCIsIkh0dHBIZWFkZXIiLCJjbG9uZSIsImdldFByb3BlcnR5Iiwib2JqZWN0IiwicGF0aCIsInJlZHVjZSIsImFjYyIsImVsZW1lbnQiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJkZWxheWVkUHJvbWlzZSIsInByb21pc2UiLCJ0aW1lb3V0IiwiUHJvbWlzZSIsImFsbCIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwidGhlbiIsImNhdGNoIiwiZXJyb3IiLCJtZXJnZSIsInJlbW92ZSIsImFkZCIsInRvU2V0IiwiaW5jbHVkZXMiLCJzZXQiLCJlbGVtZW50cyIsIl9pIiwiYXJndW1lbnRzIiwiZm9yRWFjaCIsInNldDEiLCJzZXQyIiwiX19jcmVhdGVCaW5kaW5nIiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX19zZXRNb2R1bGVEZWZhdWx0IiwidiIsIl9faW1wb3J0U3RhciIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIlN0cmluZ1V0aWxzIiwiU3RyaW5nTGFiZWwiLCJzZXBhcmF0b3IiLCJfdmFsdWUiLCJfd29yZHMiLCJtYXAiLCJ3IiwiZmlsdGVyIiwiQm9vbGVhbiIsIndvcmRzIiwiY2FwaXRhbGl6ZSIsInRvVXBwZXJDYXNlIiwicmVwbGFjZUFsbCIsImNhcGl0YWxpemVGaXJzdCIsInJlcGxhY2VQYXR0ZXJuIiwicmVwbGFjZVdpdGgiLCJVVUlEIiwibmV4dCIsImMiLCJyIiwiU2V0cyIsIlByb21pc2VVdGlscyIsIk9iamVjdFV0aWxzIiwiSHR0cFV0aWxzIiwiRnVuY3Rpb25VdGlscyIsIkZpbGVVdGlscyIsIkVuY29kZVV0aWxzIiwiRGF0ZVV0aWxzIiwiRGF0YVN0YXRlc1V0aWxzIiwiRGF0YVN0YXRlcyIsIkFycmF5VXRpbHMiLCJBbHBoYWJldCIsIkFscGhhYmV0QmFzZSIsIkFycmF5VXRpbHNCYXNlIiwiRGF0YVN0YXRlc1V0aWxzQmFzZSIsIkRhdGVVdGlsc0Jhc2UiLCJFbmNvZGVVdGlsc0Jhc2UiLCJGaWxlVXRpbHNCYXNlIiwiRnVuY3Rpb25VdGlsc0Jhc2UiLCJIdHRwVXRpbHNCYXNlIiwiT2JqZWN0VXRpbHNCYXNlIiwiUHJvbWlzZVV0aWxzQmFzZSIsIlNldHNCYXNlIiwiU3RyaW5nTGFiZWxfMSIsIlN0cmluZ1V0aWxzQmFzZSIsIlVVSURfMSIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwibW9kdWxlIiwiaWQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImFhIiwiY2EiLCJwIiwiYSIsImIiLCJkYSIsIlNldCIsImVhIiwiZmEiLCJoYSIsImlhIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiamEiLCJrYSIsImxhIiwibWEiLCJkIiwiZSIsImYiLCJnIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInR5cGUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwieiIsInJhIiwic2EiLCJ0YSIsInBhIiwiaXNOYU4iLCJxYSIsInRlc3QiLCJvYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmtIcmVmIiwidWEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInZhIiwiU3ltYm9sIiwiZm9yIiwid2EiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJpdGVyYXRvciIsIkthIiwiTGEiLCJhc3NpZ24iLCJNYSIsIkVycm9yIiwic3RhY2siLCJ0cmltIiwiTmEiLCJPYSIsInByZXBhcmVTdGFja1RyYWNlIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImwiLCJoIiwiZGlzcGxheU5hbWUiLCJQYSIsInRhZyIsInJlbmRlciIsIlFhIiwiJCR0eXBlb2YiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJSYSIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsImNvbnN0cnVjdG9yIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwiWGEiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsIllhIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJhYiIsImJiIiwiY2IiLCJkYiIsIm93bmVyRG9jdW1lbnQiLCJlYiIsIkFycmF5IiwiaXNBcnJheSIsImZiIiwib3B0aW9ucyIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJnYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiY2hpbGRyZW4iLCJoYiIsImliIiwiamIiLCJ0ZXh0Q29udGVudCIsImtiIiwibGIiLCJtYiIsIm5iIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwidmFsdWVPZiIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm9iIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJwYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJxYiIsInJiIiwic2IiLCJzdHlsZSIsInNldFByb3BlcnR5Iiwia2V5cyIsImNoYXJBdCIsInRiIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidWIiLCJ2YiIsImlzIiwid2IiLCJ4YiIsInRhcmdldCIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIk5iIiwiYXBwbHkiLCJvbkVycm9yIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIlRiIiwiVmIiLCJhbHRlcm5hdGUiLCJyZXR1cm4iLCJmbGFncyIsIldiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJYYiIsIlpiIiwiY2hpbGQiLCJzaWJsaW5nIiwiY3VycmVudCIsIlliIiwiJGIiLCJhYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJiYyIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiY2MiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsImRjIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwidW5zdGFibGVfbm93IiwiZWMiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsImZjIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJnYyIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiaGMiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImljIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJqYyIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImtjIiwibGMiLCJvYyIsImNsejMyIiwicGMiLCJxYyIsImxvZyIsIkxOMiIsInJjIiwic2MiLCJ0YyIsInVjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInZjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJldmVudFRpbWVzIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJNYXAiLCJQYyIsIlFjIiwiUmMiLCJTYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIlRjIiwibmF0aXZlRXZlbnQiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwidGFyZ2V0Q29udGFpbmVycyIsIlZjIiwiV2MiLCJwcmlvcml0eSIsImlzRGVoeWRyYXRlZCIsImNvbnRhaW5lckluZm8iLCJYYyIsIlljIiwiZGlzcGF0Y2hFdmVudCIsInNoaWZ0IiwiWmMiLCIkYyIsImFkIiwiYmQiLCJjZCIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwiZGQiLCJlZCIsInRyYW5zaXRpb24iLCJmZCIsImdkIiwiaGQiLCJVYyIsInN0b3BQcm9wYWdhdGlvbiIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsIndkIiwieGQiLCJ5ZCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwidGQiLCJ1ZCIsInZpZXciLCJkZXRhaWwiLCJ2ZCIsIkFkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIklkIiwiY2xpcGJvYXJkRGF0YSIsIkpkIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUWQiLCJrZXkiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjb2RlIiwibG9jYXRpb24iLCJyZXBlYXQiLCJsb2NhbGUiLCJ3aGljaCIsIlJkIiwiVGQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJWZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJYZCIsIllkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJjb2xvciIsImRhdGV0aW1lIiwiZW1haWwiLCJudW1iZXIiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwidXJsIiwid2VlayIsIm1lIiwibmUiLCJvZSIsImV2ZW50IiwibGlzdGVuZXJzIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJub2RlIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJMZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJNZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJOZSIsImNvbnRlbnRFZGl0YWJsZSIsIk9lIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImRvY3VtZW50RWxlbWVudCIsInN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJtaW4iLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsImV4dGVuZCIsInJhbmdlQ291bnQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZvY3VzIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJXZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlhlIiwiWWUiLCJaZSIsImFuaW1hdGlvbiIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImxmIiwibWYiLCJuZiIsIlViIiwiaW5zdGFuY2UiLCJsaXN0ZW5lciIsIm9mIiwiaGFzIiwicGYiLCJxZiIsInJmIiwic2YiLCJiaW5kIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJuIiwidCIsIngiLCJ1IiwidGYiLCJ1ZiIsInBhcmVudFdpbmRvdyIsInZmIiwid2YiLCJuYSIsInhhIiwiJGEiLCJiYSIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX2h0bWwiLCJGZiIsIkdmIiwiY2xlYXJUaW1lb3V0IiwiSGYiLCJKZiIsInF1ZXVlTWljcm90YXNrIiwiSWYiLCJLZiIsIkxmIiwiTWYiLCJwcmV2aW91c1NpYmxpbmciLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJjb250ZXh0VHlwZXMiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJaZiIsImNoaWxkQ29udGV4dFR5cGVzIiwiJGYiLCJhZyIsImJnIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY2ciLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwidWciLCJ2ZyIsIndnIiwieGciLCJ5ZyIsInpnIiwiQWciLCJCZyIsImVsZW1lbnRUeXBlIiwiZGVsZXRpb25zIiwiQ2ciLCJwZW5kaW5nUHJvcHMiLCJvdmVyZmxvdyIsInRyZWVDb250ZXh0IiwicmV0cnlMYW5lIiwiRGciLCJtb2RlIiwiRWciLCJGZyIsIkdnIiwibWVtb2l6ZWRQcm9wcyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJkZWZhdWx0UHJvcHMiLCJNZyIsIk5nIiwiT2ciLCJQZyIsIlFnIiwiUmciLCJfY3VycmVudFZhbHVlIiwiU2ciLCJjaGlsZExhbmVzIiwiVGciLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsIlVnIiwiVmciLCJjb250ZXh0IiwibWVtb2l6ZWRWYWx1ZSIsIldnIiwiWGciLCJZZyIsImludGVybGVhdmVkIiwiWmciLCIkZyIsImFoIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwiYmgiLCJjaCIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJkaCIsImVoIiwiZmgiLCJnaCIsInEiLCJ5IiwiaGgiLCJpaCIsImpoIiwiQ29tcG9uZW50IiwicmVmcyIsImtoIiwibmgiLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJsaCIsIm1oIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIm9oIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJwaCIsImNvbnRleHRUeXBlIiwic3RhdGUiLCJ1cGRhdGVyIiwicWgiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJyaCIsInByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJzaCIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJ0aCIsInVoIiwidmgiLCJ3aCIsInhoIiwieWgiLCJpbXBsZW1lbnRhdGlvbiIsInpoIiwiQWgiLCJkb25lIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJJaCIsInRhZ05hbWUiLCJKaCIsIktoIiwiTGgiLCJNaCIsInJldmVhbE9yZGVyIiwiTmgiLCJPaCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwiUGgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImJhc2VRdWV1ZSIsInF1ZXVlIiwiZGkiLCJlaSIsImZpIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImhhc0VhZ2VyU3RhdGUiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJnZXRTbmFwc2hvdCIsImxpIiwibWkiLCJuaSIsImxhc3RFZmZlY3QiLCJzdG9yZXMiLCJvaSIsInBpIiwicWkiLCJyaSIsImRlc3Ryb3kiLCJkZXBzIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJDaSIsIkRpIiwiRWkiLCJGaSIsIkdpIiwiSGkiLCJJaSIsIkppIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZUlkIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwiaWRlbnRpZmllclByZWZpeCIsIktpIiwibWVzc2FnZSIsImRpZ2VzdCIsIkxpIiwiTWkiLCJjb25zb2xlIiwiTmkiLCJXZWFrTWFwIiwiT2kiLCJQaSIsIlFpIiwiUmkiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJjb21wb25lbnREaWRDYXRjaCIsIlNpIiwiY29tcG9uZW50U3RhY2siLCJUaSIsInBpbmdDYWNoZSIsIlVpIiwiVmkiLCJXaSIsIlhpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJZaSIsIlppIiwiJGkiLCJhaiIsImJqIiwiY29tcGFyZSIsImNqIiwiZGoiLCJlaiIsImJhc2VMYW5lcyIsImNhY2hlUG9vbCIsInRyYW5zaXRpb25zIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJqaiIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImtqIiwibGoiLCJwZW5kaW5nQ29udGV4dCIsIm1qIiwiQWoiLCJDaiIsIkRqIiwibmoiLCJvaiIsInBqIiwiZmFsbGJhY2siLCJxaiIsInJqIiwidGoiLCJkYXRhc2V0IiwiZGdzdCIsInVqIiwidmoiLCJfcmVhY3RSZXRyeSIsInNqIiwic3VidHJlZUZsYWdzIiwid2oiLCJ4aiIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsTW9kZSIsInlqIiwiRWoiLCJGaiIsIkdqIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiY3JlYXRlRWxlbWVudE5TIiwiYXV0b0ZvY3VzIiwiY3JlYXRlVGV4dE5vZGUiLCJIaiIsIklqIiwiSmoiLCJLaiIsIkxqIiwiV2Vha1NldCIsIk1qIiwiTmoiLCJPaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiVWoiLCJWaiIsIldqIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlhqIiwiWWoiLCJaaiIsImFrIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImJrIiwiY2siLCJkayIsImVrIiwiZmsiLCJpc0hpZGRlbiIsImdrIiwiaGsiLCJkaXNwbGF5IiwiaWsiLCJqayIsImtrIiwibGsiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsInNyYyIsIldrIiwibWsiLCJjZWlsIiwibmsiLCJvayIsInBrIiwicWsiLCJyayIsInNrIiwidGsiLCJ1ayIsIkluZmluaXR5IiwidmsiLCJ3ayIsInhrIiwieWsiLCJ6ayIsIkFrIiwiQmsiLCJDayIsIkRrIiwiRWsiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJleHBpcmVkTGFuZXMiLCJ3YyIsImNhbGxiYWNrUHJpb3JpdHkiLCJpZyIsIkZrIiwiR2siLCJIayIsIklrIiwiSmsiLCJLayIsIkxrIiwiTWsiLCJOayIsIk9rIiwiUGsiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiUWsiLCJ0aW1lb3V0SGFuZGxlIiwiUmsiLCJTayIsIlRrIiwiVWsiLCJWayIsIm11dGFibGVSZWFkTGFuZXMiLCJCYyIsIlBqIiwib25Db21taXRGaWJlclJvb3QiLCJtYyIsIm9uUmVjb3ZlcmFibGVFcnJvciIsIlhrIiwib25Qb3N0Q29tbWl0RmliZXJSb290IiwiWWsiLCJaayIsImFsIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImJsIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImNsIiwiY2FjaGUiLCJwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzIiwiZGwiLCJlbCIsImZsIiwiZ2wiLCJobCIsImlsIiwiamwiLCJ6aiIsIiRrIiwibGwiLCJyZXBvcnRFcnJvciIsIm1sIiwiX2ludGVybmFsUm9vdCIsIm5sIiwib2wiLCJwbCIsInFsIiwic2wiLCJybCIsInVubW91bnQiLCJ1bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwidGwiLCJ1c2luZ0NsaWVudEVudHJ5UG9pbnQiLCJFdmVudHMiLCJ1bCIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInZlcnNpb24iLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwidmwiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRFcnJvckhhbmRsZXIiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsInJlY29uY2lsZXJWZXJzaW9uIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwid2wiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImNyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJoeWRyYXRlIiwiaHlkcmF0ZVJvb3QiLCJoeWRyYXRlZFNvdXJjZXMiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwiZXJyIiwiQWN0aW9uIiwiX2V4dGVuZHMiLCJQb3BTdGF0ZUV2ZW50VHlwZSIsImNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJlbnRyaWVzIiwiaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsSW5kZXgiLCJ2NUNvbXBhdCIsImVudHJ5IiwiY3JlYXRlTWVtb3J5TG9jYXRpb24iLCJjbGFtcEluZGV4IiwiUG9wIiwibWF4IiwiZ2V0Q3VycmVudExvY2F0aW9uIiwidG8iLCJjcmVhdGVMb2NhdGlvbiIsInBhdGhuYW1lIiwid2FybmluZyQxIiwiY3JlYXRlSHJlZiIsImNyZWF0ZVBhdGgiLCJlbmNvZGVMb2NhdGlvbiIsIlB1c2giLCJuZXh0TG9jYXRpb24iLCJSZXBsYWNlIiwiZ28iLCJkZWx0YSIsImxpc3RlbiIsImZuIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJnZXRVcmxCYXNlZEhpc3RvcnkiLCJnbG9iYWxIaXN0b3J5IiwiaGFzaCIsInVzciIsImNyZWF0ZUhhc2hIaXN0b3J5IiwicGFyc2VQYXRoIiwic3Vic3RyIiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsImhhc2hJbmRleCIsImNvbmQiLCJ3YXJuIiwiZ2V0SGlzdG9yeVN0YXRlIiwiX3JlZiIsInBhcnNlZFBhdGgiLCJzZWFyY2hJbmRleCIsImNyZWF0ZVVSTCIsIm9yaWdpbiIsIlVSTCIsImdldExvY2F0aW9uIiwidmFsaWRhdGVMb2NhdGlvbiIsImhpc3RvcnkiLCJoYW5kbGVQb3AiLCJoaXN0b3J5U3RhdGUiLCJwdXNoU3RhdGUiLCJyZXBsYWNlU3RhdGUiLCJSZXN1bHRUeXBlIiwiY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyIsInJvdXRlcyIsInBhcmVudFBhdGgiLCJhbGxJZHMiLCJyb3V0ZSIsInRyZWVQYXRoIiwiaW52YXJpYW50IiwiaXNJbmRleFJvdXRlIiwibWF0Y2hSb3V0ZXMiLCJsb2NhdGlvbkFyZyIsImJhc2VuYW1lIiwic3RyaXBCYXNlbmFtZSIsImJyYW5jaGVzIiwiZmxhdHRlblJvdXRlcyIsInNvcnQiLCJzY29yZSIsImV2ZXJ5IiwiY29tcGFyZUluZGV4ZXMiLCJyb3V0ZXNNZXRhIiwiY2hpbGRyZW5JbmRleCIsInJhbmtSb3V0ZUJyYW5jaGVzIiwibWF0Y2hlcyIsIm1hdGNoUm91dGVCcmFuY2giLCJzYWZlbHlEZWNvZGVVUkkiLCJwYXJlbnRzTWV0YSIsInJlbGF0aXZlUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJzdGFydHNXaXRoIiwiam9pblBhdGhzIiwiY29tcHV0ZVNjb3JlIiwicGFyYW1SZSIsImlzU3BsYXQiLCJzZWdtZW50cyIsImluaXRpYWxTY29yZSIsInNlZ21lbnQiLCJicmFuY2giLCJtYXRjaGVkUGFyYW1zIiwibWF0Y2hlZFBhdGhuYW1lIiwicmVtYWluaW5nUGF0aG5hbWUiLCJtYXRjaFBhdGgiLCJwYXJhbXMiLCJwYXRobmFtZUJhc2UiLCJub3JtYWxpemVQYXRobmFtZSIsImdlbmVyYXRlUGF0aCIsIl8iLCJwcmVmaXgiLCJfXyIsInN0ciIsInBhdHRlcm4iLCJtYXRjaGVyIiwicGFyYW1OYW1lcyIsIndhcm5pbmciLCJlbmRzV2l0aCIsInJlZ2V4cFNvdXJjZSIsInBhcmFtTmFtZSIsIlJlZ0V4cCIsImNvbXBpbGVQYXRoIiwiY2FwdHVyZUdyb3VwcyIsIm1lbW8iLCJzcGxhdFZhbHVlIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50IiwiZGVjb2RlVVJJIiwic3RhcnRJbmRleCIsIm5leHRDaGFyIiwicmVzb2x2ZVBhdGgiLCJmcm9tUGF0aG5hbWUiLCJ0b1BhdGhuYW1lIiwicG9wIiwicmVzb2x2ZVBhdGhuYW1lIiwibm9ybWFsaXplU2VhcmNoIiwibm9ybWFsaXplSGFzaCIsImdldEludmFsaWRQYXRoRXJyb3IiLCJmaWVsZCIsImRlc3QiLCJnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyIsInJlc29sdmVUbyIsInRvQXJnIiwicm91dGVQYXRobmFtZXMiLCJsb2NhdGlvblBhdGhuYW1lIiwiaXNQYXRoUmVsYXRpdmUiLCJpc0VtcHR5UGF0aCIsInJvdXRlUGF0aG5hbWVJbmRleCIsInRvU2VnbWVudHMiLCJoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2giLCJoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCIsInBhdGhzIiwianNvbiIsImluaXQiLCJyZXNwb25zZUluaXQiLCJzdGF0dXMiLCJoZWFkZXJzIiwiSGVhZGVycyIsIlJlc3BvbnNlIiwiQWJvcnRlZERlZmVycmVkRXJyb3IiLCJEZWZlcnJlZERhdGEiLCJyZWplY3QiLCJwZW5kaW5nS2V5cyIsInN1YnNjcmliZXIiLCJhYm9ydFByb21pc2UiLCJjb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwib25BYm9ydCIsInVubGlzdGVuQWJvcnRTaWduYWwiLCJzaWduYWwiLCJ0cmFja1Byb21pc2UiLCJyYWNlIiwib25TZXR0bGUiLCJhYm9ydGVkIiwic3Vic2NyaWJlIiwiY2FuY2VsIiwiYWJvcnQiLCJhc3luYyIsInVud3JhcHBlZERhdGEiLCJfcmVmMiIsInVud3JhcFRyYWNrZWRQcm9taXNlIiwiX3RyYWNrZWQiLCJpc1RyYWNrZWRQcm9taXNlIiwiX2Vycm9yIiwiX2RhdGEiLCJkZWZlciIsInJlZGlyZWN0IiwiRXJyb3JSZXNwb25zZSIsInN0YXR1c1RleHQiLCJpc1JvdXRlRXJyb3JSZXNwb25zZSIsIklETEVfTkFWSUdBVElPTiIsImZvcm1NZXRob2QiLCJmb3JtQWN0aW9uIiwiZm9ybUVuY1R5cGUiLCJmb3JtRGF0YSIsIklETEVfRkVUQ0hFUiIsImlzU2VydmVyIiwiY3JlYXRlUm91dGVyIiwiZGF0YVJvdXRlcyIsInVubGlzdGVuSGlzdG9yeSIsInN1YnNjcmliZXJzIiwic2F2ZWRTY3JvbGxQb3NpdGlvbnMiLCJnZXRTY3JvbGxSZXN0b3JhdGlvbktleSIsImdldFNjcm9sbFBvc2l0aW9uIiwiaW5pdGlhbFNjcm9sbFJlc3RvcmVkIiwiaW5pdGlhbE1hdGNoZXMiLCJpbml0aWFsRXJyb3JzIiwiZ2V0Tm90Rm91bmRNYXRjaGVzIiwicm91dGVyIiwicGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyIiwiaW5pdGlhbGl6ZWQiLCJsb2FkZXIiLCJoeWRyYXRpb25EYXRhIiwiaGlzdG9yeUFjdGlvbiIsIm5hdmlnYXRpb24iLCJyZXN0b3JlU2Nyb2xsUG9zaXRpb24iLCJwcmV2ZW50U2Nyb2xsUmVzZXQiLCJyZXZhbGlkYXRpb24iLCJsb2FkZXJEYXRhIiwiYWN0aW9uRGF0YSIsImVycm9ycyIsImZldGNoZXJzIiwicGVuZGluZ0FjdGlvbiIsInBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQiLCJpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24iLCJpc1JldmFsaWRhdGlvblJlcXVpcmVkIiwiY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMiLCJjYW5jZWxsZWRGZXRjaGVyTG9hZHMiLCJmZXRjaENvbnRyb2xsZXJzIiwiaW5jcmVtZW50aW5nTG9hZElkIiwicGVuZGluZ05hdmlnYXRpb25Mb2FkSWQiLCJmZXRjaFJlbG9hZElkcyIsImZldGNoUmVkaXJlY3RJZHMiLCJmZXRjaExvYWRNYXRjaGVzIiwiYWN0aXZlRGVmZXJyZWRzIiwidXBkYXRlU3RhdGUiLCJuZXdTdGF0ZSIsImNvbXBsZXRlTmF2aWdhdGlvbiIsIl9zdGF0ZSRuYXZpZ2F0aW9uJGZvciIsIm1lcmdlTG9hZGVyRGF0YSIsImdldFNhdmVkU2Nyb2xsUG9zaXRpb24iLCJzdGFydE5hdmlnYXRpb24iLCJvcHRzIiwic3RhcnRVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uIiwidXNlck1hdGNoZXMiLCJjcmVhdGVVc2VNYXRjaGVzTWF0Y2giLCJzYXZlU2Nyb2xsUG9zaXRpb24iLCJsb2FkaW5nTmF2aWdhdGlvbiIsIm92ZXJyaWRlTmF2aWdhdGlvbiIsIm5vdEZvdW5kTWF0Y2hlcyIsImNhbmNlbEFjdGl2ZURlZmVycmVkcyIsInBlbmRpbmdBY3Rpb25EYXRhIiwicGVuZGluZ0Vycm9yIiwicmVxdWVzdCIsImNyZWF0ZVJlcXVlc3QiLCJzdWJtaXNzaW9uIiwiZmluZE5lYXJlc3RCb3VuZGFyeSIsImFjdGlvbk91dHB1dCIsImludGVycnVwdEFjdGl2ZUxvYWRzIiwiYWN0aW9uTWF0Y2giLCJnZXRUYXJnZXRNYXRjaCIsImNhbGxMb2FkZXJPckFjdGlvbiIsInNob3J0Q2lyY3VpdGVkIiwiZ2V0TWV0aG9kTm90QWxsb3dlZFJlc3VsdCIsImlzUmVkaXJlY3RSZXN1bHQiLCJyZWRpcmVjdE5hdmlnYXRpb24iLCJzdGFydFJlZGlyZWN0TmF2aWdhdGlvbiIsImlzRXJyb3JSZXN1bHQiLCJib3VuZGFyeU1hdGNoIiwicGVuZGluZ0FjdGlvbkVycm9yIiwiaXNEZWZlcnJlZFJlc3VsdCIsImhhbmRsZUFjdGlvbiIsIm1hdGNoZXNUb0xvYWQiLCJyZXZhbGlkYXRpbmdGZXRjaGVycyIsImdldE1hdGNoZXNUb0xvYWQiLCJyb3V0ZUlkIiwiZmV0Y2hlciIsInJldmFsaWRhdGluZ0ZldGNoZXIiLCJfcmVmMyIsInJlc3VsdHMiLCJsb2FkZXJSZXN1bHRzIiwiZmV0Y2hlclJlc3VsdHMiLCJjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEiLCJfcmVmNCIsImZpbmRSZWRpcmVjdCIsImdldExvYWRlclJlZGlyZWN0IiwicHJvY2Vzc0xvYWRlckRhdGEiLCJkZWZlcnJlZERhdGEiLCJkb25lS2V5cyIsIm1hcmtGZXRjaGVyc0RvbmUiLCJtYXJrRmV0Y2hSZWRpcmVjdHNEb25lIiwiYWJvcnRTdGFsZUZldGNoTG9hZHMiLCJoYW5kbGVMb2FkZXJzIiwiZ2V0RmV0Y2hlciIsInJldmFsaWRhdGUiLCJyZWRpcmVjdEhpc3RvcnlBY3Rpb24iLCJjdXJyZW50TWF0Y2hlcyIsImZldGNoZXJzVG9Mb2FkIiwiX3JlZjgiLCJmZXRjaE1hdGNoZXMiLCJyZXNvbHZlRGVmZXJyZWRSZXN1bHRzIiwiX3JlZjkiLCJhYm9ydEZldGNoZXIiLCJzZXRGZXRjaGVyRXJyb3IiLCJkZWxldGVGZXRjaGVyIiwiZG9uZUZldGNoZXIiLCJsYW5kZWRJZCIsInllZXRlZEtleXMiLCJwcmVkaWNhdGUiLCJjYW5jZWxsZWRSb3V0ZUlkcyIsImRmZCIsImluaXRpYWxpemUiLCJlbmFibGVTY3JvbGxSZXN0b3JhdGlvbiIsInBvc2l0aW9ucyIsImdldFBvc2l0aW9uIiwiZ2V0S2V5IiwibmF2aWdhdGUiLCJub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMiLCJmZXRjaCIsInJlcXVlc3RNYXRjaGVzIiwiZXhpc3RpbmdGZXRjaGVyIiwiYWJvcnRDb250cm9sbGVyIiwiZmV0Y2hSZXF1ZXN0IiwiYWN0aW9uUmVzdWx0IiwibG9hZGluZ0ZldGNoZXIiLCJyZXZhbGlkYXRpb25SZXF1ZXN0IiwibG9hZElkIiwibG9hZEZldGNoZXIiLCJfcmVmNSIsInN0YWxlS2V5IiwiX3JlZjYiLCJfcmVmNyIsImRpZEFib3J0RmV0Y2hMb2FkcyIsImhhbmRsZUZldGNoZXJBY3Rpb24iLCJyZXNvbHZlRGVmZXJyZWREYXRhIiwiaGFuZGxlRmV0Y2hlckxvYWRlciIsImRpc3Bvc2UiLCJjbGVhciIsIl9pbnRlcm5hbEZldGNoQ29udHJvbGxlcnMiLCJfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHMiLCJ2YWxpZEFjdGlvbk1ldGhvZHMiLCJpc0ZldGNoZXIiLCJzdHJpcEhhc2hGcm9tUGF0aCIsInNlYXJjaFBhcmFtcyIsImNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zIiwiaGFzTmFrZWRJbmRleFF1ZXJ5IiwiYXBwZW5kIiwibmF2aWdhdGlvbk1hdGNoZXMiLCJib3VuZGFyeUlkIiwiYm91bmRhcnlNYXRjaGVzIiwiZmluZEluZGV4IiwiZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkiLCJjdXJyZW50TG9hZGVyRGF0YSIsImN1cnJlbnRNYXRjaCIsImlzTmV3IiwiaXNNaXNzaW5nRGF0YSIsImlzTmV3TG9hZGVyIiwic2hvdWxkUmV2YWxpZGF0ZUxvYWRlciIsIl9yZWYxMCIsImlzTmV3Um91dGVJbnN0YW5jZSIsImN1cnJlbnRQYXRoIiwiY3VycmVudExvY2F0aW9uIiwiY3VycmVudFVybCIsImN1cnJlbnRQYXJhbXMiLCJuZXh0VXJsIiwibmV4dFBhcmFtcyIsImRlZmF1bHRTaG91bGRSZXZhbGlkYXRlIiwic2hvdWxkUmV2YWxpZGF0ZSIsInJvdXRlQ2hvaWNlIiwiaXNTdGF0aWNSZXF1ZXN0IiwiaXNSb3V0ZVJlcXVlc3QiLCJyZXN1bHRUeXBlIiwib25SZWplY3QiLCJoYW5kbGVyIiwicmVzb2x2ZWRMb2NhdGlvbiIsInJlc3BvbnNlIiwiY29udGVudFR5cGUiLCJzdGF0dXNDb2RlIiwiZGVmZXJyZWQiLCJtZXRob2QiLCJSZXF1ZXN0IiwiVVJMU2VhcmNoUGFyYW1zIiwiZm91bmRFcnJvciIsImxvYWRlckhlYWRlcnMiLCJwcm9jZXNzUm91dGVMb2FkZXJEYXRhIiwibmV3TG9hZGVyRGF0YSIsIm1lcmdlZExvYWRlckRhdGEiLCJyZXZlcnNlIiwiZmluZCIsImhhc0Vycm9yQm91bmRhcnkiLCJnZXRTaG9ydENpcmN1aXRNYXRjaGVzIiwiaXNSZXZhbGlkYXRpbmdMb2FkZXIiLCJ1bndyYXAiLCJyZXNvbHZlRGF0YSIsImdldEFsbCIsImhhbmRsZSIsInBhdGhNYXRjaGVzIiwiRGF0YVN0YXRpY1JvdXRlckNvbnRleHQiLCJEYXRhUm91dGVyQ29udGV4dCIsIkRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQiLCJBd2FpdENvbnRleHQiLCJOYXZpZ2F0aW9uQ29udGV4dCIsIkxvY2F0aW9uQ29udGV4dCIsIlJvdXRlQ29udGV4dCIsIm91dGxldCIsIlJvdXRlRXJyb3JDb250ZXh0IiwidXNlSHJlZiIsIl90ZW1wIiwicmVsYXRpdmUiLCJ1c2VJblJvdXRlckNvbnRleHQiLCJuYXZpZ2F0b3IiLCJ1c2VSZXNvbHZlZFBhdGgiLCJqb2luZWRQYXRobmFtZSIsInVzZUxvY2F0aW9uIiwidXNlTmF2aWdhdGlvblR5cGUiLCJuYXZpZ2F0aW9uVHlwZSIsInVzZU1hdGNoIiwidXNlTmF2aWdhdGUiLCJyb3V0ZVBhdGhuYW1lc0pzb24iLCJhY3RpdmVSZWYiLCJPdXRsZXRDb250ZXh0IiwidXNlT3V0bGV0Q29udGV4dCIsInVzZU91dGxldCIsIlByb3ZpZGVyIiwidXNlUGFyYW1zIiwicm91dGVNYXRjaCIsIl90ZW1wMiIsInVzZVJvdXRlcyIsImRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQiLCJwYXJlbnRNYXRjaGVzIiwicGFyZW50UGFyYW1zIiwicGFyZW50UGF0aG5hbWVCYXNlIiwibG9jYXRpb25Gcm9tQ29udGV4dCIsIl9wYXJzZWRMb2NhdGlvbkFyZyRwYSIsInBhcnNlZExvY2F0aW9uQXJnIiwicmVuZGVyZWRNYXRjaGVzIiwiX3JlbmRlck1hdGNoZXMiLCJEZWZhdWx0RXJyb3JFbGVtZW50IiwidXNlUm91dGVFcnJvciIsImxpZ2h0Z3JleSIsInByZVN0eWxlcyIsInBhZGRpbmciLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2RlU3R5bGVzIiwiZm9udFN0eWxlIiwiUmVuZGVyRXJyb3JCb3VuZGFyeSIsInN1cGVyIiwic3RhdGljIiwiZXJyb3JJbmZvIiwiY29tcG9uZW50IiwiUmVuZGVyZWRSb3V0ZSIsInJvdXRlQ29udGV4dCIsImRhdGFTdGF0aWNSb3V0ZXJDb250ZXh0IiwiZXJyb3JFbGVtZW50IiwiX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQiLCJkYXRhUm91dGVyU3RhdGUiLCJlcnJvckluZGV4IiwicmVkdWNlUmlnaHQiLCJnZXRDaGlsZHJlbiIsIkRhdGFSb3V0ZXJIb29rIiwiRGF0YVJvdXRlclN0YXRlSG9vayIsIkF3YWl0UmVuZGVyU3RhdHVzIiwidXNlRGF0YVJvdXRlclN0YXRlIiwiaG9va05hbWUiLCJ1c2VOYXZpZ2F0aW9uIiwiVXNlTmF2aWdhdGlvbiIsInVzZVJldmFsaWRhdG9yIiwiZGF0YVJvdXRlckNvbnRleHQiLCJjdHgiLCJ1c2VEYXRhUm91dGVyQ29udGV4dCIsIlVzZVJldmFsaWRhdG9yIiwidXNlTWF0Y2hlcyIsIlVzZU1hdGNoZXMiLCJ1c2VMb2FkZXJEYXRhIiwiVXNlTG9hZGVyRGF0YSIsInRoaXNSb3V0ZSIsInVzZVJvdXRlTG9hZGVyRGF0YSIsIlVzZVJvdXRlTG9hZGVyRGF0YSIsInVzZUFjdGlvbkRhdGEiLCJVc2VBY3Rpb25EYXRhIiwiX3N0YXRlJGVycm9ycyIsIlVzZVJvdXRlRXJyb3IiLCJ1c2VBc3luY1ZhbHVlIiwidXNlQXN5bmNFcnJvciIsIlJvdXRlclByb3ZpZGVyIiwiZmFsbGJhY2tFbGVtZW50IiwiUm91dGVyIiwiUm91dGVzIiwiTWVtb3J5Um91dGVyIiwiaGlzdG9yeVJlZiIsInNldFN0YXRlIiwiTmF2aWdhdGUiLCJPdXRsZXQiLCJSb3V0ZSIsIl9wcm9wcyIsImJhc2VuYW1lUHJvcCIsImxvY2F0aW9uUHJvcCIsInN0YXRpY1Byb3AiLCJuYXZpZ2F0aW9uQ29udGV4dCIsInRyYWlsaW5nUGF0aG5hbWUiLCJjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4iLCJBd2FpdCIsIkF3YWl0RXJyb3JCb3VuZGFyeSIsIlJlc29sdmVBd2FpdCIsIm5ldmVyU2V0dGxlZFByb21pc2UiLCJyZW5kZXJFcnJvciIsInN1Y2Nlc3MiLCJyZW5kZXJNYXRjaGVzIiwiZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyIsInJvdXRlQ2xvbmUiLCJjcmVhdGVNZW1vcnlSb3V0ZXIiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImRlZmF1bHRNZXRob2QiLCJkZWZhdWx0RW5jVHlwZSIsImlzSHRtbEVsZW1lbnQiLCJjcmVhdGVTZWFyY2hQYXJhbXMiLCJfZXhjbHVkZWQiLCJfZXhjbHVkZWQyIiwiX2V4Y2x1ZGVkMyIsImNyZWF0ZUJyb3dzZXJSb3V0ZXIiLCJfd2luZG93IiwiX19zdGF0aWNSb3V0ZXJIeWRyYXRpb25EYXRhIiwiY3JlYXRlSGFzaFJvdXRlciIsIl93aW5kb3cyIiwiQnJvd3NlclJvdXRlciIsIkhhc2hSb3V0ZXIiLCJIaXN0b3J5Um91dGVyIiwiTGluayIsInJlbG9hZERvY3VtZW50IiwicmVzdCIsImludGVybmFsT25DbGljayIsInVzZUxpbmtDbGlja0hhbmRsZXIiLCJOYXZMaW5rIiwiYXJpYUN1cnJlbnRQcm9wIiwiY2xhc3NOYW1lIiwiY2xhc3NOYW1lUHJvcCIsInN0eWxlUHJvcCIsInJvdXRlclN0YXRlIiwibmV4dExvY2F0aW9uUGF0aG5hbWUiLCJpc0FjdGl2ZSIsImlzUGVuZGluZyIsImFyaWFDdXJyZW50IiwiRm9ybSIsIkZvcm1JbXBsIiwiZm9yd2FyZGVkUmVmIiwib25TdWJtaXQiLCJmZXRjaGVyS2V5Iiwic3VibWl0IiwidXNlU3VibWl0SW1wbCIsInVzZUZvcm1BY3Rpb24iLCJzdWJtaXR0ZXIiLCJTY3JvbGxSZXN0b3JhdGlvbiIsInN0b3JhZ2VLZXkiLCJfdGVtcDMiLCJVc2VTY3JvbGxSZXN0b3JhdGlvbiIsInNjcm9sbFJlc3RvcmF0aW9uIiwic2Nyb2xsWSIsInNlc3Npb25TdG9yYWdlIiwic2V0SXRlbSIsIlNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSIsInNlc3Npb25Qb3NpdGlvbnMiLCJnZXRJdGVtIiwiZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uIiwiZ2V0RWxlbWVudEJ5SWQiLCJzY3JvbGxJbnRvVmlldyIsInNjcm9sbFRvIiwidXNlU2Nyb2xsUmVzdG9yYXRpb24iLCJyZXBsYWNlUHJvcCIsImlzTW9kaWZpZWRFdmVudCIsInNob3VsZFByb2Nlc3NMaW5rQ2xpY2siLCJ1c2VTZWFyY2hQYXJhbXMiLCJkZWZhdWx0SW5pdCIsImRlZmF1bHRTZWFyY2hQYXJhbXNSZWYiLCJsb2NhdGlvblNlYXJjaCIsImRlZmF1bHRTZWFyY2hQYXJhbXMiLCJnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbiIsInNldFNlYXJjaFBhcmFtcyIsIm5leHRJbml0IiwibmF2aWdhdGVPcHRpb25zIiwibmV3U2VhcmNoUGFyYW1zIiwidXNlU3VibWl0IiwiVXNlU3VibWl0SW1wbCIsImRlZmF1bHRBY3Rpb24iLCJlbmNUeXBlIiwic3VibWlzc2lvblRyaWdnZXIiLCJGb3JtRGF0YSIsImlzQnV0dG9uRWxlbWVudCIsImlzSW5wdXRFbGVtZW50IiwicHJvdG9jb2wiLCJob3N0IiwiZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvIiwiZmV0Y2hlcklkIiwidXNlRmV0Y2hlciIsIl9yb3V0ZSRtYXRjaGVzIiwiVXNlRmV0Y2hlciIsImNyZWF0ZUZldGNoZXJGb3JtIiwibG9hZCIsImZldGNoZXJXaXRoQ29tcG9uZW50cyIsInVzZUZldGNoZXJzIiwiVXNlRmV0Y2hlcnMiLCJmb3JjZVVwZGF0ZSIsIl9fc2VsZiIsIl9fc291cmNlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJDaGlsZHJlbiIsImNvdW50IiwidG9BcnJheSIsIm9ubHkiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiUHVyZUNvbXBvbmVudCIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJzdGFydFRyYW5zaXRpb24iLCJ1bnN0YWJsZV9hY3QiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInNldEltbWVkaWF0ZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInNldEF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJkb21BUEkiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3R5bGVUYXJnZXQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZ2V0VGFyZ2V0IiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJBcHBIZWFkZXIiLCJTaGVsbEJhciIsIkFwcE1haW5Db250ZW50IiwiYm94U2l6aW5nIiwiQXBwU2lkZVBhbmVsIiwiVmVydGljYWxOYXZpZ2F0aW9uIiwibGFiZWwiLCJpdGVtc0xhYmVsIiwiZ2x5cGgiLCJleHBhbmRlZCIsIkNPTVBPTkVOVFMiLCJjb21wbyIsIm9uSXRlbVNlbGVjdCIsIkNvZGVQYW5lbCIsInRpdGxlIiwic2hvd0NvZGUiLCJzZXRTaG93Q29kZSIsIkRlbW9QYWdlIiwibGFiZWxzIiwiZGVzY3JpcHRpb24iLCJleGFtcGxlcyIsIlRpdGxlIiwiZ2FwIiwiZmxleFdyYXAiLCJJbmZvTGFiZWwiLCJsZXZlbCIsIlRpdGxlTGV2ZWxzIiwiSDIiLCJUYWJsZSIsImZvcm1hdHRlciIsInByb3AiLCJjb21wYWN0Iiwicm93cyIsImV4YW1wbGUiLCJIMyIsIkF2YXRhckRlbW8iLCJCYWRnZURlbW8iLCJCYXJEZW1vIiwiQnV0dG9uRGVtbyIsIkNhbGVuZGFyRGVtbyIsIkNhcmREZW1vIiwiRGlhbG9nRGVtbyIsIkZvcm1EZW1vIiwiREVNT19EQVRBIiwiYWNjZW50Q29sb3IiLCJBY2NlbnRDb2xvcnMiLCJDT0xPUl84IiwiQ09MT1JfNSIsIkNPTE9SXzMiLCJJY29uVGFiQmFyIiwic2VsZWN0ZWRUYWIiLCJ0YWJzIiwid2hpdGVTcGFjZSIsIkljb25UYWJCYXJEZW1vIiwiQ09MT1JfNiIsIkNPTE9SXzEiLCJDT0xPUl8yIiwiQ09MT1JfNCIsIkNPTE9SXzciLCJDT0xPUl85IiwiQ09MT1JfMTAiLCJpY29uIiwibnVtZXJpYyIsIkluZm9MYWJlbERlbW8iLCJMaW5rRGVtbyIsIk9iamVjdERlbW8iLCJQYWdlRGVtbyIsIlBhbmVsRGVtbyIsIlNlbGVjdERlbW8iLCJTaGVsbEJhckRlbW8iLCJUYWJsZURlbW8iLCJUaWxlRGVtbyIsIlRpdGxlRGVtbyIsIlRvb2xiYXJEZW1vIiwiVmVydGljYWxOYXZpZ2F0aW9uRGVtbyIsImNvbnRhaW5lclJvb3QiLCJBdmF0YXIiLCJpbml0aWFscyIsIlNpemVzIiwiTUVESVVNIiwic2hlbGwiLCJib3JkZXJlZCIsInRyYW5zcGFyZW50IiwiY2lyY2xlIiwiY2xhc3NlcyIsInJvbGUiLCJCYWRnZSIsIkJhciIsIkJ1dHRvbiIsImFyaWFMYWJlbCIsImljb25BZnRlciIsImJhZGdlIiwibWVudSIsInRhYkluZGV4IiwiQnV0dG9uVHlwZXMiLCJCVVRUT04iLCJESVNQTEFZX01PREUiLCJEQVlTIiwiTU9OVEhTIiwiWUVBUlMiLCJDYWxlbmRhciIsInNlbGVjdGVkRGF0ZSIsIm9uU2VsZWN0ZWREYXRlQ2hhbmdlIiwicHJldmlvdXNNb2RlIiwiZGlzcGxheURhdGUiLCJzZXREaXNwbGF5RGF0ZSIsImRpc3BsYXlNb2RlIiwic2V0RGlzcGxheU1vZGUiLCJvbkRpc3BsYXlEYXRlQ2hhbmdlIiwibmV3RGlzcGxheURhdGUiLCJvbkRpc3BsYXlNb2RlQ2hhbmdlRGF5cyIsIm5ld0Rpc3BsYXlNb2RlIiwib25EaXNwbGF5TW9kZUNoYW5nZU1vbnRocyIsIm9uRGlzcGxheU1vZGVDaGFuZ2VZZWFycyIsIkNhbGVuZGFyTW9udGhzIiwib25EaXNwbGF5TW9kZUNoYW5nZSIsIkNhbGVuZGFyWWVhcnMiLCJDYWxlbmRhckRheXMiLCJpbnRsTG9jYWxlIiwiSW50bCIsIkxvY2FsZSIsImZpcnN0RGF5IiwibWluaW1hbERheXMiLCJ3ZWVrZW5kIiwid2Vla0luZm8iLCJ3ZWVrcyIsInNldFdlZWtzIiwid2Vla0RheXMiLCJzZXRXZWVrRGF5cyIsIndlZWtEYXlzRGF0YSIsImN1cnJlbnREYXRlIiwiZ2V0RGF5Iiwic2V0RGF0ZSIsImRheU5hbWUiLCJ0b0xvY2FsZVN0cmluZyIsIndlZWtkYXkiLCJ3ZWVrc0RhdGEiLCJ3ZWVrRGF0YSIsImlzTm93WWVhciIsImlzTm93TW9udGgiLCJpc05vd0RhdGUiLCJpc1NlbGVjdGVkWWVhciIsImlzU2VsZWN0ZWRNb250aCIsImlzU2VsZWN0ZWREYXRlIiwiZ2V0VGltZSIsIm90aGVyTW9udGgiLCJhY3RpdmUiLCJCdXR0b25TdHlsZXMiLCJUUkFOU1BBUkVOVCIsIm5ld0RhdGUiLCJDYWxlbmRhckRheXNJdGVtSGVhZGVyIiwid2Vla0RheSIsIkNhbGVuZGFyRGF5c0l0ZW1IZWxwZXIiLCJDYWxlbmRhckRheXNJdGVtIiwib25DYWxlbmRhckRheUNsaWNrZWQiLCJzcGVjaWFsRGF5IiwiY3Vyc29yIiwibW9udGhzIiwic2V0TW9udGhzIiwibW9udGhzRGF0YSIsIm1vbnRoc1JvdyIsImoiLCJpc1llYXIiLCJpc01vbnRoIiwiZm9ybWF0TW9udGgiLCJtb250aE5hbWUiLCJtb250aERhdGEiLCJDYWxlbmRhck1vbnRoc0l0ZW0iLCJvblNlbGVjdE1vbnRoIiwiY2xhc3Nlc0J1dHRvbiIsInllYXJzIiwic2V0WWVhcnMiLCJjdXJyZW50WWVhciIsInllYXJzRGF0YSIsInllYXJzUm93IiwibWFyZ2luQm90dG9tIiwieWVhckRhdGEiLCJDYWxlbmRhclllYXJzSXRlbSIsIm9uU2VsZWN0WWVhciIsIkNhcmQiLCJmb290ZXIiLCJDYXJkSGVhZGVyIiwiQ2FyZEZvb3RlciIsImF2YXRhciIsInRpdGxlQ291bnRlciIsInN1YlRpdGxlIiwib25LZXlVcCIsIkRpYWxvZyIsInJlc2l6YWJsZSIsImZvY3VzYWJsZUVsZW1lbnQiLCJEaWFsb2dIZWFkZXIiLCJEaWFsb2dGb290ZXIiLCJyaWdodCIsInJlbmRlckVsZW1lbnRzIiwiZWxlbSIsInJlbmRlckVsZW1lbnQiLCJzdWJoZWFkZXIiLCJGb3JtSW5wdXQiLCJwbGFjZWhvbGRlciIsImh0bWxGb3IiLCJGb3JtU3RlcElucHV0Iiwib25DaGFuZ2UiLCJjdXJyZW50VmFsdWUiLCJzZXRDdXJyZW50VmFsdWUiLCJ1cGRhdGVWYWx1ZSIsIm5ld1ZhbHVlIiwidG1wVmFsdWUiLCJOdW1iZXIiLCJvblRhYlNlbGVjdCIsInRhYiIsIkljb25UYWJCYXJJdGVtIiwic2VtYW50aWMiLCJPYmplY3RBdHRyaWJ1dGUiLCJPYmplY3RIZWFkZXJBdHRyaWJ1dGUiLCJPYmplY3RJZGVudGlmaWVyIiwiYm9sZCIsIm1lZGl1bSIsImNsYXNzZXNUaXRsZSIsIk9iamVjdExpc3QiLCJhcmlhTGFiZWxlZEJ5IiwiT2JqZWN0TGlzdEl0ZW0iLCJpbnRybyIsImluZm8iLCJPYmplY3RMaXN0SXRlbUhlYWRlciIsIlNNQUxMIiwiT2JqZWN0TGlzdEl0ZW1JbmZvIiwiYXR0cmlidXRlIiwiT2JqZWN0TGlzdEl0ZW1Sb3ciLCJPYmplY3RMaXN0SXRlbVJvd0xlZnQiLCJPYmplY3RMaXN0SXRlbVJvd1JpZ2h0IiwiaW5kZXhJdGVtIiwiT2JqZWN0TGlzdEl0ZW1IZWFkZXJMZWZ0IiwiT2JqZWN0TGlzdEl0ZW1IZWFkZXJSaWdodCIsIk9iamVjdE1hcmtlciIsImljb25Pbmx5IiwiT2JqZWN0TnVtYmVyIiwidW5pdCIsIk9iamVjdFN0YXR1cyIsImxhcmdlIiwiY2xhc3Nlc1RleHQiLCJpbnZlcnRlZCIsIlBhZ2UiLCJQYWdlQm9keSIsIlBhZ2VGb290ZXIiLCJQYWdlSGVhZGVyIiwiUGFuZWwiLCJleHBhbmRhYmxlIiwidG9vbGJhciIsImlzRXhwYW5kZWQiLCJzZXRFeHBhbmRlZCIsIlNlbGVjdCIsInNldElkIiwib3BlbmVkIiwic2V0T3BlbmVkIiwiU2VsZWN0SXRlbSIsIm9uU2VsZWN0IiwiYWx0IiwiVGFibGVDZWxsSW5kaWNhdG9ycyIsIlZBTElEIiwiV0FSTklORyIsIkVSUk9SIiwiSU5GT1JNQVRJT04iLCJib3JkZXJlZEhvcml6b250YWwiLCJib3JkZXJlZFZlcnRpY2FsIiwiaW5kaWNhdG9yIiwiVGFibGVSb3ciLCJUYWJsZUNlbGwiLCJjb2x1bW4iLCJUYWJsZUhlYWRlckNlbGwiLCJyb3ciLCJyZW5kZXJlZCIsInNjb3BlIiwiVGlsZSIsIkxBUkdFIiwiVGlsZUNvbnRhaW5lciIsIm1pbkhlaWdodCIsIm1heEhlaWdodCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJUaWxlQ29udGVudE51bWVyaWMiLCJjbGFzc2VzS3BpIiwibGV2ZWxWaXN1YWwiLCJ3cmFwIiwiSDEiLCJINiIsIkg1IiwiSDQiLCJUb29sYmFyIiwidGl0bGVMZXZlbCIsInNvbGlkIiwiVG9vbGJhclNwYWNlciIsIlRvb2xiYXJTZXBhcmF0b3IiLCJWZXJ0aWNhbE5hdmlnYXRpb25JdGVtIiwiY2xhc3Nlc0Fycm93IiwiRU1QSEFTSVpFRCIsIkdIT1NUIiwiUE9TSVRJVkUiLCJORUdBVElWRSIsIkFUVEVOVElPTiIsIlNVQk1JVCIsIlJFU0VUIiwiTGlua1R5cGVzIiwiU1VCVExFIiwiSU5WRVJURUQiLCJTZW1hbnRpY3MiLCJDUklUSUNBTCIsIklORk9STUFUSVZFIiwiWF9TTUFMTCIsIlhfTEFSR0UiLCJDT01QT05FTlQiLCJBVkFUQVIiLCJkZW1vIiwiQkFER0UiLCJCQVIiLCJDQUxFTkRBUiIsIkNBUkQiLCJESUFMT0ciLCJGT1JNIiwiSUNPTl9UQUJfQkFSIiwiSU5GT19MQUJFTCIsIkxJTksiLCJPQkpFQ1QiLCJQQUdFIiwiUEFORUwiLCJTRUxFQ1QiLCJTSEVMTF9CQVIiLCJUQUJMRSIsIlRJTEUiLCJUSVRMRSIsIlRPT0xCQVIiLCJWRVJUSUNBTF9OQVZJR0FUSU9OIiwiUm91dGVEZW1vIiwiZGVtb0lkIiwiUm91dGVEZW1vcyIsImZsZXhEaXJlY3Rpb24iLCJmbGV4QmFzaXMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiZ2V0UHJvdG90eXBlT2YiLCJucyIsImRlZiIsImdldE93blByb3BlcnR5TmFtZXMiLCJkZWZpbml0aW9uIiwidG9TdHJpbmdUYWciLCJuYyJdLCJzb3VyY2VSb290IjoiIn0=